{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4440d743-be3a-4d5b-8fd5-a6e93386eaa9",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fa363d71-2d9f-4d76-86e6-c1d8a58613f6",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2f915eaa-39e5-4409-8b7d-dfd5bd841180",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2429ad0f-d984-44b7-802b-91623f16116a"
                }
              }
            ]
          },
          {
            "id": "77ccbaf4-7aef-4473-a440-533ae55b2484",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2e9e6be3-bf2d-455f-b41c-e15a6898c02a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9b538365-853d-42d3-9b8f-5dda36654e9b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ce8c2f1f-3514-4b94-a0a3-7961891c8086",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f935f07c-47b3-4542-adeb-e3d0266e5d1a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8cb50c4f-82d5-4b57-9dc5-6e0bd72bfa3e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0c142671-d6aa-45c5-9f9a-0d9c4867476c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "553da949-17db-42d3-af7c-7aa67270e766"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5aeb3980-c581-4d5c-8d5e-b7ca97e5adcd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f82efc65-c35d-4b46-b690-334db6272192"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "96f36337-66ce-49c6-944a-6271f43509f0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dcf86ae8-4cd2-496f-a51a-4e756c5179cf"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e7cbb0f4-e2c3-4018-846b-662e8dd17108",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "61eb2bdf-abe8-4101-923a-5cf301833c51"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "875788f3-5891-4023-a51a-8ae95c744450",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1c4ac4f2-af2d-4fed-a53e-e7cdeac6e927"
            }
          }
        ]
      },
      {
        "id": "22a518e9-7ebc-437e-ac8b-0d65e8bdc51f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8f0732f9-81a5-466a-aa59-699bc90f6eeb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "29d16a52-f683-404a-b74c-355ce9e3dd16",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "02538eaf-7b33-4b33-a4c4-e71f9b1832fc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3aa3517-d719-4bcd-a01a-548e9e35f209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4356e0ef-19a2-43e0-8083-3492e34fc66b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04bd3a4e-c775-4195-9c96-1a59c81dfa00",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b4a4fd-5233-4cc8-9c0d-c1312a62f1c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16a4352f-3ebe-4074-9933-bffc00518fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185916d5-0385-49c6-b82e-c06abff42f61",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c775ae0-6ab2-4dd0-b55f-23820adc0758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c87a326f-f65d-4878-974b-123fc0176719"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "678ddfc8-1e66-472f-9b75-c8d5356560ab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f091f506-0141-4489-9c03-4944e48665b2",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eea8e6d-1a1c-403d-8133-84d4df0e7015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db08277b-a3c8-4957-97a6-a127f267da81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5a7fac-36ac-4ac3-8946-77482d70f9ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be4f170a-37d3-4e34-b773-b24f86245c99"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4c653ccf-42fe-406c-b249-db783c598783",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7dfe7c2b-b78e-4efd-9b44-01e2d83b72bb",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7de7ae2-e851-4b1c-996f-a81dc030e09b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3b1b681c-e3e2-42de-94ee-d79351862394"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e14f5714-a218-468f-a34b-021132a38683",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "59a24656-c22d-42e7-a13b-374755ea2dad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae22dfe0-8649-4d8c-ad71-88c51b8b5e0f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d23e5eb9-2465-41f1-880f-6db9e69ad203"
            }
          }
        ]
      },
      {
        "id": "22682461-3050-4239-b2d4-2582521576d4",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "80bf63f8-29d3-489b-9fda-03542efa8f0f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eb5d566a-22af-418e-a46f-2fe8a393154d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c03235fc-4142-47e6-978c-05746628bda3",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f287951-ae2b-4bb9-ab8d-b8fc5c2849a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7cebf0c-f622-48ca-bc79-34f941827b8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e85a31d8-8814-4e82-9469-2604ab6f2249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67627e3e-7c57-4960-88a7-6e957639a740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba363af-cb5d-4145-b0fb-6e4f08a8e296",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50994486-95da-40a3-ba23-629050854748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31b8fe7a-04eb-485e-80d5-e3e26acafa10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb6864f-cbe7-49cc-9928-d9bbce388e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f398ddd6-dbe2-45b9-8262-265e083c8826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a07c7d8e-cd20-4f89-90a7-d3e6bd8f3dde",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "520ff8f4-e959-4592-864e-55fe44ab22fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e0c8226-1b26-49e2-99b6-d6ade44dc569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a5c388-af73-40a8-93ba-20493ff91704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf7edbe8-3c13-44ef-9d19-557b9f1439ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a0b398f-a99a-41b9-be40-e53bee80c3fb",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce8522b-cdbe-4d6f-8a2e-8abfefc49afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "936f1e40-dad5-425a-8e25-c74841662506"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40fdbf6f-c86f-480b-8e84-5be9a954da1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63a8f642-523d-4385-aadc-2afc81b753fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c80e318-731d-489c-994b-22c837fe5cb9",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f1ea039-3821-4867-9582-376edcede3c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d7cea67-a758-4106-840a-12e1884e81e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c24ed1-aefe-47ce-adce-d93b79593ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a4ef312-64ba-4035-9385-745339286a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4f418d-9610-497f-b8c4-998b5e9de965",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c80eb8d-0a22-471d-b6b0-a8f1d889b24d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "147b7c8a-9f3c-46f7-9890-f9364fa75bfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5311a778-8b57-4e90-a34f-6ec6d830aa7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7cba7bc3-42bb-4bb1-8acf-5d6cb65891ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1354d3d2-b654-47e3-a546-620be72967b2",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af8b8738-19d5-4f2d-b96e-2a492fed9c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a67a7c9-c324-433f-8547-cf3ce1ea50e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31786a2a-9df3-4e44-8d2e-fa3cf721ca0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "08609bec-e596-4ce0-adb3-6811c30dcbf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b4e505-dfc1-45ad-9cd5-fc4a5bfee4f7",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a377f5-82b8-411d-b4c3-951513e88002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc9238d-cbfd-4750-a9cb-c2f34bb014f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3582914-5ec0-4f1e-80ea-8a582e0faee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8142cc5-3808-4b0f-bb0f-41f129c841d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35dbc849-83f3-4d52-b870-9fed99482fcb",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55bc1224-1811-4ceb-93e2-2a0f88714ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2b59647-5c10-408d-8fce-7c30fc4b2b61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6feeda10-5d25-4ea0-8f18-aca9d0231c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "adf5de33-8028-4bc9-b12b-3ca3ab69a933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcce4727-85fa-4d0e-b669-cc801d188e5d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69deda3b-e79a-4f1c-b52c-39625ef55c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37e06741-4abf-4b80-83b0-f36296769100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676c33ed-71db-4937-869a-035b0e27f60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40e33a10-3b89-4e2c-b976-4f3c26c49fad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1e25ebb-21ae-4959-8922-a6c2af81e98d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1000a0da-cdf6-4395-8043-7127a90f056b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "416c4363-c626-47fe-ba11-7edc8b225237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f9bb52-2d11-4e7c-8a63-ff2176b74f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "735b87f2-5f8a-464d-a385-7bc4ac0d02b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37cf7bcc-9f4b-47b3-8ff5-034d4f7b9ba4",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef14fb8-dc14-47e5-9d26-b189e3c9dc04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce66ac2e-97a1-41a2-8b68-2f45898d0ece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f16069-805d-4b43-8f90-9a14fa0d6f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f50be5ee-e5a6-449c-b4b4-4dcf4ec41d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b545c11f-c832-4c9b-a89e-2e38dae346b6",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c032040-3177-4871-8c15-1bd2ad8a84a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90d9cb32-75a2-41c3-930c-89375e49d0ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbd1e31-85d8-433e-9895-c5cb9b01fee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03bd9992-e98b-43eb-a49f-cf7ed42bb0ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df20f3cc-473d-4ba0-95b1-6377aa26c785",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46cecdbb-b980-4d1c-93df-8ccc9abd136d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3beed4d3-b13b-4633-a663-52424f22b059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142664ad-21e1-447b-a856-e12a556b6f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da150a98-ba84-4574-942b-161ba13654ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a63e8733-0148-4ed3-ad98-30b3511c2f05",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7cdcd08-a713-42ed-808e-5c62516c87ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d51edabd-8f1c-4533-ba9e-f9848c79e178"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77a6fcb-556e-499d-bc77-8340e3ad8f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "568b2746-b70a-431b-86b1-d15ef9bd8e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b899cbcb-eb68-4d3d-8b8c-8fd397f42f5f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "870b3044-a3da-4eeb-a63a-a47c257153cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2291c552-9877-451b-a710-7c239d1bab59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480417ae-14c1-4602-9770-7148ecfa8665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67636fa8-748d-49d7-833b-a8f03992e2ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a810bd-644d-47fa-a59c-2b92d72ac75f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9443ebe2-db10-4476-9f20-24dd01d309d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48865d2e-2333-4907-940a-e34da2814006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63b50ad-ce07-41bc-bc17-13ab237cfc91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "145bf8bd-dddd-4b91-9f0f-5993067de37e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "732d1ac1-97db-433d-8704-c94b1ae08f88",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fbb2c69-dec2-4ab5-9eec-76009a9ed627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "443e9817-e5f7-4b4a-bae4-b5ec0fe6aa78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ec77b0-4fd0-4b7f-a50b-33853097c828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0939990-a81c-4cd7-bb0a-4d01966540c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd52a541-c1ba-4f9d-9c61-7f1eb853da37",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df2fa3a-e784-45d5-99d0-28ff62cf1d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74bb3ff2-a9d0-438a-9543-b29b5cc67b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b89ce67b-3f1a-404e-a0c6-a1cd056a1b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "89b0d2b6-4c33-4f9c-862d-b7fa29405fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eced216a-76d3-4692-a3a5-03a1d59c26aa",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deeaed17-c488-453f-b13a-542edcc318cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "374571cd-0970-46b7-928c-5dd14f4a25af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9221399-4a8b-45a4-b99d-6540636bc678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c280f2e-4d56-4ec5-aa77-ea28b27bdfe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1aa039-4500-4ec1-a88f-e848b45e7920",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54681b19-4ec0-4d12-a7c1-9cae7362375a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5899440-95d3-4398-a85c-41d052d447df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6329b980-7ec2-4f5f-bda7-4e10d017cd24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "59dd5a11-09a0-4e04-a5fe-422b2a8732dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d95f081-defb-4150-bb09-47d19a804f55",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f500ffe-07be-4b17-a884-2051e0289282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08f95c78-00f1-411c-b3aa-367317dec13d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5ca637-ed83-4bec-9be0-52bedd396759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aadb501d-ae69-441c-9eeb-995b7ca484dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13122d72-1ccc-4ad8-a4ef-39657cd394be",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a20940f7-ac0a-4ad7-be35-1fac56e42b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d95781af-db75-45d3-9731-51e8e0b8b87f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51301c48-8698-43b1-818b-5bc4f9b5e7e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb3e198-af4b-4c1a-bfde-dae7a6d42ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f255ecd3-9dc8-4bbf-bb3b-e93c6a601a5f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03de1da1-a34c-4ddb-8229-ba95d0a96974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ca97c85-a024-42a5-9f21-a637c4fd1bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708b820a-d97b-4bf0-bfed-b3a1233f1331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "42e36166-4520-4a8d-92cd-b3abd8da04a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90a92e10-4b94-4721-882b-c7142f8f111b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e25a5d6-ee51-48ee-b585-1346744ed997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e09c9b0-a3a4-4ab5-b1fe-9c3df1d53af9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7565554a-6b55-4b30-864c-087208bd0547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4567fd88-285f-4d48-9d6d-72a11176e7d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1edecf51-9d25-4cbd-9e79-398132b2e1b2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ecf860-5e01-40d4-af8e-e8bea56b7761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36e49853-f426-423d-b97f-18c4b11e829a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d7fa7b-7457-45b4-819f-4bf6fd3647d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8f3eb95-6a4e-43a0-8c4d-ddf696aa6a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11898aa-9af8-4135-a886-ffa9b23aea45",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc6e845-93ff-4239-a18b-711dce4b3f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6413c541-ea00-4e1b-aaaf-10801bc7682d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03270b34-f8aa-461a-8285-90e1ea25d1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "10ce31b8-9353-4269-a898-7b07619481b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c297ee88-db9f-4925-8a81-e5b030a8ae4c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77962d37-bf7a-4ac7-bb86-cbe2c754ccae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c029715-922f-467b-8808-70b99c8e807f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed9cd9f-2c99-44b3-987c-01530cfeaec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "26f21baf-e321-42f9-9747-a17349d19875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132e4e57-b4b5-479d-bb61-fe8612d705cf",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cecb8f81-8681-4092-9a53-e0bfba40535f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "416a976f-32a6-47a7-bab1-1230635ee4a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd30db0-83fd-4d9d-932d-3f8ee7105963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c744b3a-c5a4-45b0-a1d4-80209bb6ecf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d584675-5a8b-433d-9b3a-e59f934694eb",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c930f0-c578-462c-9c80-252de7935b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d275176-018c-44d0-aa9e-bc90fb65da3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb7ce35-18ef-4bab-90a6-4802b7af6cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "49b61c36-8d29-495c-9126-f2099d7b4de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3108a37d-4d99-4639-a919-15e67899baff",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81a6b52e-cba1-4da4-8487-5abeeee6d720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb0869f2-5bf1-46b4-9edf-eac110e7f66c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f5fdb14-f894-4000-8fb9-5fbebb17fc40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "024493a2-dd83-44c1-b2cf-af50123aad16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4569032a-9191-4ceb-8545-bccb43b2e530",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03df1c6-a2aa-426f-9b9c-363c1e1861c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82b99fa9-8a41-41ff-b1f2-58abf8c33a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11aae504-b73d-45db-b085-fdb263b2030f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e5e5b5c-a146-48b8-af15-da9d67564a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d56c96-5158-4e7a-b2d3-e2449aecd73e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c657b2a8-e51c-4ea2-b85b-ad72872f667f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "041b80b0-1477-448b-ab78-91232f17a842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb377329-4c16-4e37-b0ea-d3041e6c30a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "02ff0620-1de5-4c20-b39a-6e0c3143c6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "338c6a68-9b9b-47a2-8430-0aa5381474f6",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a6eb899-62e6-4fa9-9cc3-a1e6ad8e6d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c9c3345-24eb-4995-a17f-0dd7abe670a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56163ca2-7ac3-488d-8a6f-33493115e309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07a7bb36-ba02-4cc0-a0d5-1786acbe1692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a604448-f07b-486b-a19c-a1bf375fbc9f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd2fc6f-1235-4f5e-8d26-19dc1c3b6f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65826ed3-c7ef-4cd7-96fc-765006249b9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c03b1ef0-ccc3-4fb4-ac09-611731a148b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "6e4abf9e-67a5-4f01-b76f-972e439098b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aef6a48-ae2e-4a0e-a7a6-a86cb5502966",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63aaad44-a250-42a7-b292-b09f12056e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "755ca356-0ec3-46e0-9b46-47fecfda9a7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa122ebf-927b-4f32-beaf-8c4608c7b668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6d00c5e7-675d-47c2-a82c-9d9aedf8c899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2377780-ce08-499b-b2fd-5393059aa404",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec69df2-59c5-40de-bf76-7ee95e74a718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "201cdcdf-6485-4445-9ae4-350580e93501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fecdadaf-39da-4823-99fc-6095b6b24a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b11ce78-654f-4a7b-b7a6-34d125496835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f245c4-ed2e-4b2d-802e-d56eba60eb27",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b23c03a8-303d-4576-af4f-e346901eb077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3ccabda-9a5f-4e64-8575-cfae5a1f8ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a71e12-cb18-4c52-b546-ea649b425aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f613e316-5565-403e-b08a-bddd4b7db692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10564889-75d8-44a8-a1f9-14a887662e63",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a1acfc-4b23-4c46-b334-d0aaf6e827c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ffac650-737c-414b-aa35-b8f463b03476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76904e1a-ffba-4008-b47d-b75036b01003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa2d6df4-e596-4877-88c2-ff80d8504d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7d7b89-bfd9-42a5-a013-fbdb7e1c1b1a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "075f5379-0543-482c-af23-7c86df87da19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e37f07c-fc67-4975-9e68-12c37f8d8f76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb4de196-bde7-4ea7-bf41-61829613cecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "29922976-3ab2-47ca-9b8b-0138c9db9f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d821e912-197e-4b9f-a48f-7c16f4a4e715",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1afd98-4c43-4b55-b513-827b347ce258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a3efefe-e02f-4836-9ec6-f60bcd939348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc994e7-edfe-476d-bca1-075adec138fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "59a0c242-339d-4a79-84d1-49ba3d46dd64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ca086f-187f-4345-83bc-50413f6b17f9",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a043efa-c9d2-452a-81e7-a4ee27d99e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8274bc11-6c30-41d8-b9a1-2e30502646d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c26935c-d8e7-43bf-aa99-f8f05072d31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5f48baa5-2068-4f69-8de8-1316926fe141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029fb865-2b8a-4cec-b043-5e951b183d66",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cf0aa8-69cd-4e42-9400-544fce973254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bf63992-988f-4101-a010-bf7c631f900d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e3bdd0-3b83-4728-b1d8-abab9c4d47f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8727934-147b-4cd8-a8d3-0193541ed9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a588f46-91db-42a5-be75-4ef77f18bfae",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b79eca-37f3-4c66-b6e5-66cf6fa5da4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcef726b-2711-4e5e-963c-2950fbb39396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6e2565-436a-45b0-b64c-d350b8407f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "fed156d1-6165-4b0b-9251-2b7461c0d19e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45329cc1-b4fd-4e83-b9cf-3c8800e02110",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "981d5ffa-71c4-40e6-a8fe-fae09ea040cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fabb594-30d2-4305-86ef-c20d821571d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d3e9bb4-2c4f-4251-be76-55128ac67500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "54c35fea-a3a2-439e-8648-b57dcc431a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b9a358-782f-449f-bc2c-fe9e308ab29f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7fb3f8-5860-431c-aa29-0ee810dab4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2717cae8-1256-48af-96bf-2d5eb4ed1f36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1cd524-3ea7-4882-85b6-43fdd9a22b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "740b6ed4-7c46-43d6-9dbb-5acbe845c7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d66d70-8032-490e-9446-109201160bcb",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a856c9-987e-47e1-b630-967d98d4b4b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed8e686-c2ef-41e4-a5c0-779cbb8c2735"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0d0fd3-f4f4-4399-b9db-77082f7f4ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b15e5aa-a115-43ab-961d-8d19a94f4821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4c6334-cb12-4aba-a031-de9cb0658a13",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "789bca34-2430-475a-82c9-d59807dbbe71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37ad956c-41f7-45b6-9453-55644fb2e164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23eb754f-c99e-4896-85f3-a8fd2bb8c136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a745fb0-1d6d-49d5-85f6-c71af67ec30d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5cac82b-a666-499a-bd12-e8ab497d8339",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47e63b7-dc22-4f37-9af4-7e347aff0898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c2c11b2-5a48-45be-8aa2-fe55c8edbcf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b235ae63-bcd3-496f-a184-a907f05d08c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6be6ab6-a98f-430d-867e-b67f62e6b630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0975a37f-01cd-40b5-973e-1b7fad0971ce",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef20854-fb82-4d71-a392-6ec01b2a1170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2a8ff54-6134-462f-916c-462f0fd7d056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6290e681-9e56-4f96-8ae8-732bcda8a950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d32c74a3-cb50-4e20-9d61-7d85650766ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc19a0c-00f2-4187-bb60-895397b1a7c4",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caec489b-27d7-4c50-8775-c581f42c4210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c312178-e731-443a-b400-8d5dd4959127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db35bb54-80ff-4d25-8f3e-0810fe830484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3129af37-c783-4708-b187-2f1f625ecb4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28993834-b48c-4e2a-9ae1-ca7b4c79132d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f5f486-fefd-4340-97b9-e09689788bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed6e766a-5ff3-4260-a63f-178bbf1ee9a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fedfb201-cbbd-4477-ae63-dc8635992f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4e4aaf3-c6c4-47b7-8371-84a4752af75e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6e3bdd0-1f09-4be2-8651-5e1f908daf8d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4ef026-012c-4d08-8b4f-69bc5aefb2a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df31faf0-b354-4cab-bd41-5bfdbcff6436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3489f70b-802c-4159-bc5b-80bf4dc3bf9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "593ba254-43c6-4cac-831b-076b9362c10c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d0c233-421c-4315-b846-89795d305f84",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea6aafb-fde2-467a-9b3f-e00b689cab5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ae25c6e-09cd-4b6e-86af-95c99cbce03c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5175362f-1ece-416d-b22d-92391d112749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e7cb23a-f412-407a-911e-c974d3446666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2940dc-2786-475a-a894-02a8a75046ad",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d8aba7-464b-48e6-a8be-5258e8732ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2769d53a-d4de-4582-b1ae-dd5e6bb69b12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0376821-ea06-4a7d-902d-b5cc76e3c25e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac301844-71c2-4bc3-b352-54fcdaa96f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e60475e8-59b0-4c69-83fd-df096c27682e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b8e8d3-9491-424f-917a-29fb38f22f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bf1df6a-e432-4d2e-ad7c-38887541ee06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca57fd7-5ca5-4c88-889a-7410869da553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "7004d1f8-2e15-4f4d-9847-7bf200986a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf8e825-f62d-4dad-8c31-39d509378deb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4bd334-b4f9-4b1e-ae7a-e8d711581d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98ea93cb-7f1b-47ca-9619-1a0940523496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91a7b33-dd0e-4ac5-82d6-57f741b1a71e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a15bdad-9a37-4a83-aed4-544459498a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6232899e-8866-44c0-aa50-4a8f00649117",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af09d1c2-2311-45cd-998c-d5e3ac99e9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99e254eb-15c4-4c42-add8-bc73f93df4ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dcb2f21-0c5d-4c5f-96df-c26cbe086a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb4a0dd1-8cb9-4619-b6dd-99cba72209e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2df9278-40fa-4930-bc1c-7956042ae6f6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4cba7c-ecc0-424c-aa26-696a48efc4dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbf3c600-14ac-44d0-aa74-9dbe4937e99f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b418c84c-3de7-40fd-a829-ac39848ef516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c77ad33a-b2f4-423c-b965-f1f513ffad97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0e206e-5326-44b4-89c8-4396e37e41da",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b3ffde-3589-41af-93e5-588738ed7296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e32f9669-31b1-4795-a884-f4a8d396dee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f50191-7b6c-438c-876a-107be69a105e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9c0d3b6-203b-470d-a9cb-39f98cfa2ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1270451b-2e94-48f9-b789-81dc040a9978",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6b30e9-807f-4f5e-9ab5-2016a1d255bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c08cbc3-ab25-4bb2-9d56-bd185dd74e31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f964ef6-be90-4134-b87d-598adca4192d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "170af5b5-394e-4e59-8912-707f876042ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "970762e8-7b61-4ca9-995c-a839e4d59a50",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc09d947-9f29-4aa6-aa10-0f4003c7d24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99b64866-bf5d-4a75-9513-13b0b7e5be8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d62a1e1d-3832-4193-accb-8bf212d0f078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "587d2e28-4b59-429d-8ed5-452cc9827205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc4378d-14aa-4a04-bf07-80224a48b630",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eece2e1f-aab6-44ed-8beb-dd44466059fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3febd568-8bfd-4567-aeb2-d2c6c13ea229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb79a49-14b4-42ad-ad0f-848c5767f790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "02ace8d3-4f2a-452d-8891-5e7d2d9cf27f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "938a5dde-dace-45c5-af7d-a1002e94efc8",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a06c8a-61a6-4f95-b38a-2d069dc4b9ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5558171-f1db-4f26-9d67-a34a64d38278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18accfa6-e113-4e65-98fa-6e558a1a3674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ce346a6-a1fd-442a-83e4-0991200cab82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff4f40f-10d9-4cfc-8381-6d8f50fd3598",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59a413d-eeba-405c-8d19-f24e14081b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "877f47cd-9cb8-4fa5-8bae-045d1a98907f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20ece80b-a56d-48e6-a636-3893c4559ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d23ca20-2f4f-4d36-b40a-b5fa1a9969b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0d099f2-acad-4360-b5ff-f45e534b6bb0",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "278c1283-f4ab-47d2-8f26-694f852986c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76254add-bd2f-466d-b094-c54e166ffb67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6695e284-34ad-4032-aa02-3621b39ebca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d2eb667-dcfc-4d34-8270-6e30a6c10782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1538522-7440-4097-93d6-728a5955d77a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e363df84-fb26-48a5-bfa6-aa208f25f857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf454fff-cc97-496e-9197-b463f8138e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4207ff48-4abe-4b4c-be3f-1296c590cd88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b83c1bf4-e876-4dd4-be51-cc1ac091d918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6abd671e-335d-43f4-8392-1628c9fb029d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "691e2e48-79d0-4678-b31e-5be0107b06aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91156320-37b2-456c-b773-9df5dc396139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98d09ec-dcc2-41f7-9a97-31265bbf96cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2777f80-e7f1-494a-bee4-3431dea98fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f2cb1a9-997c-4a4f-9b65-3ecaa03d3538",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c0bd4f-3df9-48cc-afaa-049d3dadb9f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ae7b166-0ca8-476f-b10a-0eb4ca509545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a64092-7e9e-4e30-8a16-8c94e52ef8f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e21e24c0-dfa7-4e4c-8c8e-862eeb4af027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82334aa6-3796-497d-aef3-1f6b7b17ef2d",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4716769f-2fda-498d-97b8-ff8af3c88492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3be0f6b0-09ef-4b88-8434-2ff67e157006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b69501-2b21-4b6f-8f98-f757764b52f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3cbb7c9-3908-4be7-a8a7-14af07c8356f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "099c681c-196f-4ce4-add8-28a16f1346b8",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06546be7-3956-444e-a6d9-7ff86e5086c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deddd0be-50f9-4f0b-a78a-49910ddc5a88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb09d0a-10ff-42af-afd2-4cb44c9d5f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4541f49c-8136-498c-b691-fa4f954708bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48cdb666-a7b2-43fd-979b-4e561dae8d0a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "649cfc61-1f5a-4a34-84a6-a5d1092efdde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c78222c0-bd82-491d-ac9f-8febb15e1acc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40002ac7-6ed9-49b1-87dd-e34e8a0590cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7adc9a0-9be5-4b2e-a431-20420c1ff938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "723537e8-48dc-4a69-bc11-3f6874cbdd85",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61f133c-7d17-46c4-a5b3-93a230223a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61fdb891-1310-4adc-9c11-f0907363928c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b182bd-8906-4c6e-b8da-aeed548c5044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c1b164f-d698-4e89-a8d5-60bcbd8427d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad542242-54de-4c5c-84ad-137ea337a7cd",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1aa5cf7-5f04-4f8b-8a3d-dae649907176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3da62bf-dcc4-4a66-b950-174336e833be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ee69cf-b9f5-4e8b-a136-a03d307f7879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "61d153b2-6a38-4362-b228-568321cf96d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb222229-87ab-4055-8031-ecb6494bdf71",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "851c024c-b456-4586-912a-0248b133db0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "146a04ec-9b53-489b-83ec-abe2113280e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7087fc5b-f9e5-4964-851b-39c74e369bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b4207d2-0c34-4f0c-b7f5-3726725bef2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b77ba8-d10b-4483-a631-f8a4769b4cba",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d985b02-91fa-4206-9ff9-7276ca1d1d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aae6b840-4c74-4d13-884e-4d9b1aaabf5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46017a5-f53f-4788-92d4-6aa61e9b9309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1db3f1d-b72d-476a-bace-b52c2af5cab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d9bf96-7414-4086-84cf-7775d6633a7b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5e7f27-3b5a-47ac-9fed-5ec3e5a4c81f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50e45f2a-57c0-4c7c-b3ce-c09852c71ad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e238419b-991c-464c-bc76-6464f6515dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f657a4a1-c27b-4251-a7f6-47279290bec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42045d89-4d5e-4324-85a7-60904430acdf",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9933ee06-d1a0-4748-a409-8c2acf40f6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c96813e1-3ec7-4c93-acf9-65240601b93e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71bb8e52-a039-4d8a-aaac-3d77e43d5a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b0c06e8-4e02-48b6-8436-4e84240130fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf06bbe3-56e2-4a4c-986f-b4c5cbfaa427",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3bb5f5d-53bf-4bd0-bd3b-08b9dad6a44d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba71af60-ada2-4f4c-978d-e19c41c70b27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf23f8f-6527-4998-a5a0-cda72b58f8f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "14af9ba6-02ab-4622-a33e-52d5cffc7ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63812c79-d038-4fa3-99fa-71c9087c871d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d443aa30-fd50-49be-8ebe-ca537b9c3db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ebeee65-6d2d-47d9-883a-e510dbbcc850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4ea720-6f8f-4797-bd66-9c78e6ee4203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3868c131-0cab-447e-8868-3181c7419bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c5bc34-5b77-4d92-b842-96262b9d29d9",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b09ae36-ba26-4e4c-88de-6aafaeaebef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b3a91cf-788b-4d4b-b4d4-692603d5e75f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d003f1-4619-4994-bbf9-f74c8241552c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "626bb0d2-c912-4f89-b059-500ee65bd41d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a514bb-235e-421c-9c0d-c1f9432e401c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15278a9b-2f23-4920-a4e1-860308b5990b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb22e619-c97a-4617-b809-4d2a5f788337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f82e07b1-7ac2-4e8c-bc1a-d5107d200072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4dc72ca-b1c1-47b5-9972-37e79b151786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d21d72-38fc-4f82-b485-e781cf17e187",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33e56fc-8bbd-4319-991d-72ad1181d017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d5a66b1-0402-462d-a80a-30eaf3ef0eb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d9845b-151d-4236-bb31-cb2ce9306679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3254cba7-0490-4fcc-9d31-5f13980b77d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04fba6a2-955e-4454-8684-a5f7997510f7",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31c191c-5b21-439a-88d5-77859a6bd1cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56257700-78ca-4334-903a-e586a44a2483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8139b205-78d3-4a46-907c-eb616f41102d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b934a8a-3e51-4c80-ad17-fe2b0f5f4323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe5d036-35b2-499c-95d6-d5e51a1da0ab",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e7e805-f4f5-43e3-8736-4bf36c4f84b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e80ffaa-ab4e-451e-8c76-60581a9abc97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e529055-7a1c-4730-904b-97e0a72a7574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b395c4fe-069e-46e9-b754-5d87b257152a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8f9d73-d3d7-482e-b1c5-d0d2186449af",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e179c2-03a3-4ff0-b56e-13a615b0726c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e5bc844-f969-4765-abde-fcf6798398ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3637df6-a33a-47f7-968d-1e336b30ed99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fd10c01-8f78-41bd-b5e7-df9a9e71567a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73fb7c84-7167-4edd-af9d-0d053c3dc02f",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4500687-9703-47fd-b267-277f973a0a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fca6059-f9f9-4b11-a1b3-cfcc1e598f2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41df493e-6487-4424-a42e-8f20d8c9ca2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d3488e7-5544-4154-98af-61c0c6a57eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dce047a-a5a6-48d0-bd9c-2822f431fda1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a95d94-8cb5-4b09-b49f-db644ef280ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a274319c-a2f8-4e96-9048-a6716502251f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "612d457b-99f3-40e1-816e-14748635efac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e62d764-14d8-4945-8ed7-124895125815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f0ffef-a202-4b42-bc59-6ef781d90361",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2268f78c-1eca-48bb-b23f-bb3649874c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f1ca2e-e7b0-4d2b-ba15-e3f6c3be8510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f243a0-9ee9-4dd2-8229-2fb9263b0d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "75f5567f-6c65-419d-8f2c-4869abac95f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "740d55dc-453a-4472-a27b-54ef30baaa77",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e249d8-639e-4a77-9ef8-73a5dd3779cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f37e550-6121-43d7-89ee-b4b8901d2882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d21ee4e4-18db-439b-bce3-47986fff6524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8c9fe03-6b2f-442a-bfe7-215f312dd9f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d67ea9c8-177a-43e1-a7f1-6de43f11b26b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "524ecf0b-acbc-4bd8-8ef4-c1d2e1fbb1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e4dd5dc-5b31-43e6-9648-293417f3eed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae40035d-f23a-4e74-9aeb-345807819773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c0df5a6-ea89-4c7c-8e99-eaef06a9774b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad377453-65a2-4198-860e-a8e849688755",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47c82af8-9ad5-41f9-bbbc-025499b96f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6f733e45-3f72-47b9-9f2b-ba0a1dfaeddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92219061-e22f-4b56-9f96-5da4beb68071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "70610548-558b-46db-a259-2615a367e972"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bf3152cb-95fa-4845-8159-c5dbd41e8193",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "34c65074-aa9e-4300-91ac-2dfc4fe5fd20",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3eed627-be1e-4e04-9996-2ddcc24ccc46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70fe3200-8a94-4561-88f0-4e3612adbc68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6beaccd-1ea9-444c-afda-018318ad59fd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea53b613-0296-4e90-8dcb-1f702dcd1eb3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99b18264-3146-4c50-8cc8-d91880b775e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1641f799-c399-4c6b-807b-70ab65388051"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e981d9ef-21bf-4f4e-bee4-7bd6864aa412",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6fb6cc9c-b8d7-4bc2-bfae-c2532c7fb8c5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "89579ba1-f4a2-4a74-8723-fea72667c740",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bea17876-51e6-4f08-89dd-0fcf1e5d7856"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2488508f-993c-4650-a9f0-80279ee30017",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "23df228a-76b5-44fc-bed4-8c9ae03bf9c7"
                }
              }
            ]
          },
          {
            "id": "9b3d7990-689e-4f5f-8240-4747f6be1936",
            "name": "Positive Testing",
            "item": [
              {
                "id": "06020e8e-4426-4fce-ba9b-fd5d16acccb1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7df3c6b5-caad-454d-a707-e3d177b1684d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "319e765b-c442-4cfc-aae2-150409ee457a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9fc8e597-38df-465d-8589-77f77975678f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5418c21f-e8e1-40a9-98e3-eeee17eed676"
                    }
                  }
                ]
              },
              {
                "id": "3a7236c4-bf52-44ac-a6d8-08d57b7273cd",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "813db804-97c1-44ec-9433-ec148edc8be9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ca9a21a4-f863-4105-b17c-494cf18a0a42"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a99fefc2-3599-44e3-ab95-bebd13b53f48",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "09b1880d-1944-414c-a5a7-86efedb9f39c"
                    }
                  }
                ]
              },
              {
                "id": "4497c1ea-7972-425b-8469-7c7b2494331f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28a3b61c-5a8e-4328-8314-9b1387c097ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "130157e9-07ea-4a3d-a2c8-d537fd3ed1d9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5e06d47-0dc2-4b0f-adb3-26120421acd3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d1b61d63-6968-4d22-8281-41ddb69d5e66"
                    }
                  }
                ]
              },
              {
                "id": "cba525c7-c5ab-4d5e-be3a-1f9b8525aa73",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "75ddac66-2e91-4631-ab63-1657ff61e3c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6ecad21d-554e-4df4-a356-834b694a26b4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0bdb994-2ba1-46a8-a0ac-4830f08fb541",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7848b586-41c1-4e67-8161-8bb2c855ce12"
                    }
                  }
                ]
              },
              {
                "id": "b0d6ed11-4749-436d-9946-0cefe94e85a6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a9e610c-4aae-4eaf-b835-367be55b2006",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6bb37f76-20a4-4674-9051-fadbc33971df"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1aca822c-640e-4988-9a02-78a577891e1a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9ca4c821-0b24-432f-90af-d938a5165b28"
                    }
                  }
                ]
              },
              {
                "id": "4a9cf942-6909-4f7a-a228-0f563e27b365",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "631109e2-65cd-4f0a-8b55-f171c2492adb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7a1476e3-110b-4fd2-93a1-8a4cd7ae6578"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c016b02a-2f06-45bd-afa5-fe10f248e835",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9f6fb23e-8b93-4856-9c7f-0b972fd19c54"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "80380afe-e7b1-4601-a5e0-4748e1e0758a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "641919cc-d729-4fe5-9601-17cf2459aaae"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "abe59040-705e-4eb9-8f2d-e1277d0cce3f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b35bde79-b249-4866-963a-5fe5ce384899"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7c0054a4-c275-426c-b3b2-d7a05792c010",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "57d0b229-4e60-4dfe-ad55-8fa107d5f218"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bd1fb840-49f9-460e-8c6c-bdaa1032b842",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "93d342cb-aad6-4da8-a3f4-b4e7e8cbf1de"
            }
          }
        ]
      },
      {
        "id": "6389078f-466d-4dcd-832f-0179311b0be5",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4bd1fde3-407a-4fb6-bd47-d0455bf7bda3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "07e32c42-f830-48b1-bce8-b43e66f2da18",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e3a60c87-0d93-4483-94e5-207071991d27",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f565869-5636-4c4d-9742-8d0888a30b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e00998ea-c70b-4931-8f0d-c5f43e451f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855deaa8-9629-41b7-9a1d-0a5852597f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "70596301-2043-4038-b954-fa3456dff8e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee7cac64-25a0-468c-8545-623df22abfdc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "372556ce-35d0-4e20-b88e-e766701a89c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bcb0f01-33a3-43bf-bf4e-3e31594ec476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23666c91-396c-4637-a123-7446d29d004d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3cd6e1d-d83d-47c0-8437-d3b9829acac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec3d818-7658-4d1f-865d-17af97559c71",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccbfdb47-a950-4127-a99f-aedaaa922e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dc92a66-3915-4385-9ecc-3f5007f41233"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3573912-4ec7-4f53-bbcf-2c6a544d6910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "16b7245a-fe1c-409f-a0fd-0040cc4379bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ccb8e0-1a6b-4fe2-83c8-65dab35ca864",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68b018ef-6199-452b-8c22-aa107a1ad697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "684ddf84-a84f-490e-9d10-9b9b18a18f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20227ef1-fa37-4867-ad09-0fdc48832d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "54020263-53af-42af-8ad2-d5f328173548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc6b896-1e07-4f0e-893f-c80c6b32cf51",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef98c0bc-abee-40e4-a58a-68fbfc2be605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ef970f9-f4ef-4abd-ba9b-41cf2fec08d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4f87db1-d61d-4e8c-9ae8-e695e5692ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0727c4d2-8bfb-4bc4-888b-b61f6a5d0fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4045873d-0ef0-4363-a090-cd2fe3465fd5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbad00b2-7a01-4170-abc4-c16ba83c25da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50721a26-ebf1-4a41-8358-10611f25bcab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fda17cb-b79a-4b31-8792-388190006649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "07beb837-6230-4453-972d-047b353bf5c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc5e723-28b5-4b1c-b079-7786f75ac7bd",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e414f608-a678-4064-8674-12196ac92a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a4fce52-696f-461f-810e-3f0810c48eb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7c4f28-be3d-4f3b-bd80-072043b4333e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5eb1969d-8833-4163-a89c-d0394ce31fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c666840-a949-4feb-9439-fe8e306475ab",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8b5c75-080d-4fb4-aca4-f76544984382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "905984c4-1014-4a38-882d-b01eb95d5f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9db726-38e5-4000-b264-69e96c50623e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f4a803e-2f6a-46ba-a15f-6d0dc40c3757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae6dd657-ba3d-42e2-8c19-02cfc9036dd0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c20ba90-1d9d-4d3e-86f8-3b1cf985e56d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7f10b22-7b02-43b4-88d8-404d2286c732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f6e74b-487f-485d-bc84-2851e9bc3a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be256f38-0bb6-4b58-b8fd-d7aabc8075fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a1c1a3-f136-4ecc-9fe0-115c84216dc7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b963a0b4-029e-4850-8987-ea409c18b09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef4121d9-ed5b-4fc2-9ed9-eca97c6b2ca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "964a9046-8e8f-48ff-a372-d146fe3b29cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "632c9883-4dae-4872-a87a-06679fd3f0a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "940c6d3e-699f-4670-a009-432065e82bbc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e60515-8903-4d7d-96ab-347a8498b928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "375787a3-fa52-49e5-85e0-8ba93160a617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d064865f-6ccf-48c1-8484-e85b473d9383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "49477b08-16a1-4823-a52f-763a9ff5d4fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c190355-8a2a-475e-9973-052d5ba0858f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0160c50b-e31b-4b55-aaaa-0ed6a282052d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b621b36-df8b-4bfd-a723-6c4bfd5a83db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10307598-cd01-48e1-bc16-a94baf2a5fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "12b07880-34d1-4637-83e8-9c30c2776068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65fc01b3-0f83-4bfb-add4-1eeebd11d724",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5122359f-d8ba-4361-bd37-2dfd2d20f8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53136024-a031-4170-8da5-27b7d49c3dfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd95879-d8ba-4983-bc71-00d8531ae0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "527a560c-f9c2-4548-be12-62ba7efb4ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c6026f-1315-464f-a2bb-6f8d05b92032",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3af642-44e8-4d15-883b-52953d65cab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ed4acb1-7c89-4685-91b8-6908741ed4f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72265b24-b407-4105-a0a8-69c4ddcaca27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "58558239-8eef-422f-ae92-e90441e89df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbfc33a0-9427-4948-8709-3dacfcdfed06",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d0e3d3-e48c-4b20-baf0-bbfab5480e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b64a5c84-b918-44f2-a11e-8873957e539d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c1993f-ea29-4c9f-8531-66e8514b9054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5c8cb02-89d6-4d9a-ba0d-b664907ec350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f19ff16d-19a7-4ccc-a7a4-de57eaeedadb",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "516fd434-e591-4827-a9ec-bc8dab496373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8556ac1f-c732-4d9d-b6b4-e6dadc65ed4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd311476-3d28-49f9-94df-2e1f76e3a899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b449d5a-80f1-4edb-8206-f56dd0533a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ca4634-763d-4121-99b2-3a9a815af420",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3665c0e4-a4b3-4160-b954-759a45f6ced2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "948bdc59-4dd9-439d-a15e-ab9ba791f0db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b004321-fea7-4e3a-97ae-2479ff6607d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "615901bb-b90f-4d10-9825-dcb4f431bef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf26e1a6-9344-452a-9940-b9392f266ed6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c22a4b-0e35-4ce8-bf60-f929d37fe3db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "131d612c-d0c7-4865-9942-4a7a1f1201a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada5ea3a-5021-4ef3-b2e6-6b7b31b68746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "22ec1ee9-9562-4555-a721-da5af2696892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3342550a-fccb-4ecd-b707-b6323a121866",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9c26f0-e9b7-4480-a8dc-b1ae38a272ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a101d8d-b1c5-4595-8c2c-ccd01cb8eb0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2291778-9e38-439e-8ccf-ee5857732923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59e6aba1-e363-4ccd-961c-a236588968af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b6d8a10-7a88-4cb5-b7b9-af7aa7def3de",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a10230-008e-45ab-b7c8-fcd6bcc005d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5f5bc2f-e789-434d-908d-67431bcdffeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d66a1636-153f-4052-875b-12320240a183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f1b309a-e856-4bb3-b517-4ace070aa2f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e552194-bbeb-49c7-8327-954db2444e48",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37cf6c5-a897-44d8-988b-4475b9fa2df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b8e1210-207e-4295-b2c4-43dd72c9df75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7c3b06-a1a3-4c16-a301-d386fd7ef118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2593750b-532b-41da-ba0e-f131e54821e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc007436-ea0d-4a14-bb34-132761a619de",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba14d54a-f477-4967-926e-f7a84ba1f5ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae3bf414-8244-4912-a199-534ec87f5302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7f205d-1cbb-4317-90aa-a297168df60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d692cc9-edfc-4b2b-aec8-d91a89ab466c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d243c7-9547-48cb-a2be-16031aeabff7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d10d7544-a25a-412c-b1a2-85e69af61daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "742e06f3-c572-45b2-9687-34ebd3cb3c4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f2d7ee-2516-4c48-a00d-2a517ffb4280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb958295-65ca-447c-a113-d2678fc704aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b361f7a9-6a85-4bb0-bae0-45f0c763d530",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6ba3bd-c0fe-4913-ad8c-dc27e6e4947d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8f5ecf0-a124-4844-a25e-dcd3530df587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d935d9c-e19c-4559-bfb2-9b0be443b26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0aeccd4d-4d42-4bd7-9d3c-cfa3768f9eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e77d0dd0-0c48-4fd7-8890-a6152d7ad679",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0b0b07-3be9-4d0e-8bb0-3d14415eb062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b46c8fc-2194-4228-9f33-94a03610580a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edfde0c1-49ef-42d2-bc41-555544dc00f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b19baac1-4bf2-4536-9ddf-ed1aba2b9e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "447f769f-1fbc-4389-bfcb-8621138385d5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bbdc936-c94d-4611-aba9-f0ef48c13f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95adea50-aaea-42d7-85c2-837d2f22a6dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f2b06c-c6d4-4f83-b444-f7d14b3c0ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0229e15-2612-462b-be8e-22d58fcf199d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242f370a-ade0-4c86-a5d2-683f1710d10e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "908a3893-387a-465f-831e-11b22469ff42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd68bb4c-12a6-4ae7-a88c-e1faa4323b48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5184a67-8b3b-4988-b286-469c6d05ad3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf988ab4-b57f-4cb2-bce8-468eadf5698d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4f336f-5cdf-4cf4-9e01-8fe271f65f5a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "885c8df4-17a5-4253-a939-1252d8b7d58a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c48b2833-1e56-4848-ac75-0aa71e01a599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5171005-92e6-4fe3-acbc-5eadb628e18f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b87be922-2f43-4175-8c54-130e8c6521f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8771c70d-3d37-46b6-8899-1ae947a16048",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1afb712-feaf-409a-bbae-151b086a176d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08d2ab42-5f47-460a-af20-5d035bd16705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4589b0-59b5-4202-8e86-b215a2308ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffc2e3e4-8b5a-48b6-8f3d-429fbe7ffa0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc30178-cd4d-4daa-8cf3-44d9d6f774eb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c6fef1-7fb7-47aa-976c-7bd929a9dd72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a1f4c1d-b196-4a47-8b5a-f24d8e97e6f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9330615-73e9-4213-90b6-572c654507b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16cfd8e0-c0b9-46fc-8e35-8b6768e9a3d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eebdf96-06a4-422a-9fe4-af1d8cb6fb2c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c4dc43-8757-4398-95e5-dca2742d8287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb92061f-a529-4b32-8898-f2afc81379e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ff06120-3a50-4683-94bf-29f4376f52e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "322fdf95-61ec-4b92-a939-ddbec304b778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546cb364-2018-40f4-85ba-5908b71229fe",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f3c4d9-f03f-4a6a-8a2a-a5ee536d0e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e0506b5-6e3d-4df0-b5bb-1122f989960c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "269def9b-fde0-4d9f-bdc6-d5ef2572fd97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "411cfd0e-33d8-4cd2-b3e4-d37ae8b6ac97"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2b7ed4e0-1130-4c8e-bdc8-f6d379418c07",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "66bdbb69-f9cb-4b8d-a172-a67bf87f9a2f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c827b81f-3084-4ef5-b7b4-8481c9ccc56f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "52d20d6b-089d-4e71-93f0-635ed9d56109"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac689fe-c3a7-4a37-9d97-ae5813d991f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e799b34e-9e90-4a03-96ac-ee2f503c0abb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb14b78b-d3d4-40a6-9e6f-6a0456fefc5a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84c87c8f-0cab-4fa2-82b4-9857efa0d600"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "00df4965-f12a-4e61-abdb-3020ec307268",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77c10017-bab6-4579-b790-cad986878f41"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bc671b72-8b06-420f-8864-d86b6005e3c1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d7f50527-dd3a-400e-a8cf-97bef5cc47fe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61396aca-75b4-48fd-b66a-b7d276275627",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1408477e-b7ef-4a19-bda1-ac7d45b9e7cb"
            }
          }
        ]
      },
      {
        "id": "d7f7800b-dc22-4091-a021-fd9e7310b0a7",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "4940341b-8191-4f1e-aaa3-58cb199b3569",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c424c8c7-cea1-4519-a3f5-859e2c324564",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8ab2089c-e8db-4e33-9501-e74ffd3a804e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ba0c122-837c-41a1-bc58-c6ffb86f2093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7fd2d83-7f1e-4c68-845c-3485397085ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69d94a3-85d6-4b31-b4a5-dac9708c946d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "35284130-3297-4024-bdd3-d888b33b7617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c1c839-d554-4fe8-a3d0-c2485a62689c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7845256e-cd54-4157-9720-d9778a96b99a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc85219e-beaa-4e86-8783-5fdcb9336604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c627607b-fb15-418c-bd7a-622866af3ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c9a7dc3-c756-4aa0-8266-c2c0e036d8f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1b0554-6e64-4c98-9c26-07960e704306",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d538ce1e-8cd9-405c-bfb3-135efe16423e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91253bf7-37d4-425a-acfa-5ddf68031e70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "244e3330-4930-4642-ba29-4a5bd197bd18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "66fc4bcc-2587-448c-afa0-e4b40607e1cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "945a15d2-6d54-4a37-b1e7-27cfc013279e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a7db54-d613-431b-80c4-daae7b64ba98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a01ba32-a795-4985-9883-4f98483d9505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21d6a5a9-bb2e-45d3-8668-d33e716326d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8485ad81-88ce-4f64-9253-54c3686b5b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "571e0475-782b-460e-aada-1b222108eb1a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af227fc-1964-4aae-9937-38a77b21bd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa197fad-6608-4f4f-b9f9-c6ad97b22003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ccae06-721d-4185-b7ca-8f0ca102c5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d6b0374-32d4-4230-8a1a-f7ad514a8af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c270a4c-c51b-48ca-939f-bda0b4fd2855",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef1ea8fa-d8ef-44e3-9da7-0bb514f507ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28306afb-a8a6-4007-999f-e06880aaf731"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d470e56-e903-48e9-881a-0b62b7f5b62f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9e259ad-bfac-410a-8176-c5fb78ac46ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad417b8-9df5-4159-9c79-965e9e9f9461",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3381c6ad-88e5-4172-bd17-9d283f2491eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2db1359d-2794-47c9-9fbc-c0354cc9fcf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87a2136c-f848-4926-b8e9-71c034950308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5c4ffa4-c116-4dcc-bedd-e3e245e33c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573a6088-60e1-4084-b02d-945e6ee7d6fb",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "021eae22-6e44-4d81-b40e-e945ccdebc7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a60def77-937d-4d2b-a5b0-6797f9c93832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b8f00a-5c8e-404a-9f15-bd3fbaca3805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3858947-16ed-41c4-84e5-367a62025aad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882708a1-001d-4121-bcec-249667d17272",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4576346f-a66d-4cc6-a766-ae8d19da76e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffcba4e1-1b99-4b50-8f57-111359393145"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be5378e4-360f-4885-a760-bfecfc008fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b9235c1-f5da-4759-a12f-f74339248d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4bb56ca-3108-4f7b-bdc9-7fa118e6eac3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad19d0b-8639-4ed7-94b2-05fc37cbd59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fda2c34-ae10-42ac-987a-4b45787913f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515ea079-ad4f-4609-a242-cb23fa292b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bde00530-d9a0-43b0-a9ce-bff93eb760c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3f0935-fd23-412d-924e-8aa343ef2fc4",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd3335f2-bfc1-4b18-95b7-10d33447272a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd8653ad-a060-4c54-9302-ec1f4f302aec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b8f8fa-ecc0-4128-9cd1-bf0b9ceceeaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0c09b8e8-616e-4a7c-986e-f8572c035bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74fb6518-f224-4c9f-b373-5b6543a2cab8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2330df93-c743-4ce5-bd74-c8bd6bc273e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bae584c-f957-4c37-be27-d9be100e476f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e85c70a4-d483-42b8-ac92-ef7adab8e597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "212e3502-6f26-4ed7-a276-cc2596778ea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "903a5bb8-c98a-4e09-be65-f7a92066fb31",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5514eaec-b829-4766-94c0-85f876337687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90f1b8f2-7882-4639-9632-ec2d8b72f606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f22b514-e089-4bf4-8319-4e1495dab008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a34f1f54-d449-4432-97ce-250ac2ab2acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fbd7a7a-d1a7-4d66-bd9a-948fd9df8dfe",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afbe4f38-b725-45a8-b45b-296aa3889d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea7bf8e4-e743-4587-9abb-1bd32132abb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6794ec75-9e16-412c-aff1-3f63b8cc535b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f45f91e9-d6ff-4e32-b3a2-5357c5ce05de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be81bdc-12bb-41f1-8a7f-28eadb1024df",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bc2737-6041-40d4-be2f-c4ff3ed1af59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a15123f-08ab-4f75-9257-1984fdd9e674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b37afdd-3505-4ac9-bedf-fd1722e735db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "96128c11-693a-4425-8374-88043b5d3a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc84260-3e53-451c-ae30-60fdb85fe27e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db27bd45-c7e2-474b-bac2-0487a5567a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64dadff5-a984-43f8-ad23-afed389a17bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e64070ba-2d1f-48f1-9114-dca96fc19671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e715e88-c862-4076-b842-bea294234130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fddd5826-39a0-4d68-8e54-59b0aab24dd7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "364e33c1-b4b2-4989-b8d3-02c093d92e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b4dbf05-ce75-4cd3-89c2-aeabe8b24e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5393b155-715d-4cfa-9510-f68e48fd663e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3539e378-92d8-440d-b28f-02a18ac73560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a046b483-9298-45d6-bfbe-52841655049e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "842dfb91-d70f-4974-8dd7-90c813f29482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed54207c-ae66-4c02-a259-bd0a08baf68b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "806a96d7-5903-4f45-ad4f-bb760d433fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9e7b055-8e82-474a-84c5-d222e27b5b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b20b65-fa4e-406f-919b-071563d5da83",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8eb524-1264-4981-aa3a-c6e18f50f9af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eb4d2a6-73a8-414c-9cf1-7d1d8d35a3ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56491cb3-919b-40d7-bec5-7e4eb0ed86a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "144aa09c-93de-4891-8354-e244c15af405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61154e52-aae1-49f1-bc53-a917507e67e5",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40a80c9-46bf-4669-82e2-5d22bcd04c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a23ac445-cdae-4892-9599-49544a39475e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c82fb21-9c76-49a5-836d-06b298697eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "626f2916-638e-4b52-9187-890675bb3a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d335e51c-4bb1-427a-9912-5156af49a955",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb636efd-7351-4a6e-a71d-5c044e375d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75f53ce6-2956-4b38-b194-ade52c5574ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06def93f-fe4a-47e3-8fda-1acef8a2a8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d25414d2-ff76-45dd-88cc-469aedc90dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b5ccd02-ae6c-46a3-a662-815f36503ec2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "178a9823-0ceb-4b68-a745-90fc6ed9b68f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2df96c02-c2b7-4056-ab95-413b7bf30135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "638d6e3d-023f-46d3-98bf-1f9c64279b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d2d28f2-21f5-4112-b819-aa28dec1a921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a385a528-7a92-49f6-93d3-1201a6a35123",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c3774f-335b-4951-83de-883e8a90b1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b869ca-ea22-4a28-b655-d4e80db80366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71596db-cf15-4d01-b878-3164c3ea2de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc899b51-8634-418e-8e46-0be640fb68dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad84002-e756-4f4f-ab61-ecf9ff6bb20b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e88f7b-16e4-4b06-926f-019ffb82e7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "313548b1-5f7b-4087-85b1-909d7d8ea7d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b14ecf9-17f9-428f-8501-c837687a37a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6734ec6d-36af-4aa4-be7e-1007f7163cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c728d20-2254-4cdc-9a2f-47937dee1cc2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea1f7bc6-487c-4925-a56d-d965c967c27a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69614581-4e6b-4684-a2ac-daccae74072d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "543ac70d-6fad-463f-8412-af80763b607a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9d0c855-76ce-4095-8fb8-7228b981a5a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d22acd6-81bd-4940-8f3b-fef304d0f563",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2cc1771-786e-4b98-befb-be339cf1323b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6c22bc3-2fc6-4006-ab50-734eb6ee5018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0254636-7dd0-4b7a-8a78-1fd33d5c08de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54c1e364-184c-434d-8fbd-ea0323cf4389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b1328df-e571-4268-98d3-e554e47f19df",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a572277e-1463-4e5a-a4de-f11dce319940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcba67af-a780-412d-a6e8-cc69d3fe05bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da76ada-66e9-4cd5-b834-b979c67b03d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c490bd5-e578-4469-ac14-9fdb9eccc654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e1d482-8442-4136-bb48-fdde65804d6f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c31cdc8-ddee-4451-8707-d3c476adf31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e68350c6-792d-4e98-a7ea-3a5d967a02bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51283f3a-39a0-462c-b2ad-f9c2545a1252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3625ede9-8bef-4073-9757-08f7388e8cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc26814-beab-45cf-90d6-2dc1fe690e8c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d7673b-b771-4919-8100-eff4cfa988eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "632180fd-1412-4db4-a58f-92d7bc8943a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19c5bcb-55e0-47c3-9331-013f3bd0b143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7549a6a5-66a7-4006-a54c-4a085968cf10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a500a7-0899-4e21-abe9-c3d0863c5073",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25635043-40ca-4c7d-9f48-af866acb1100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5daa8f3a-0fbd-4c4e-840c-077a51a7f03b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af18238-91d1-4b5a-8d17-84da34321b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e055712-272a-49b3-8c7c-98a11996f843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb6fc37-4072-4902-a0b9-4d85f4adf68d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f116fee-51c3-47e1-a1aa-ccc6c883408c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "838ccf72-353b-4bcc-9a0e-77f7ffd6ee86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7413766-61a5-469a-a1b5-2686866c4245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "879ab399-c11e-4b21-9cf8-ddbbd96f9a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c3b252-28fa-453c-990e-202d37906ecf",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aed9abf-ac85-4ac1-a95f-615cde865df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da6ed7f0-8ef4-4cf6-82ea-698a068d9e08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad11e56f-ac90-43ad-a0fc-45307709af82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d605b47-9003-4268-a0c2-070dccad80a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce0db66c-b403-46ee-b5f2-bb686c3d3532",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5bcda5-ff1e-4d50-9441-41b97c60b23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc3407d5-01b8-4303-9343-6caca282fd56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5db395f-c481-4349-a0a5-67e387bd9693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d8aee8a-98a5-44de-9a5e-16fc498ccc9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18ae32a-7124-4f49-b6de-c6604a67065e",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d6e246-d8b1-4275-a266-d0eee30612c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb6a6bf8-4ecf-48fb-a053-08d9a1d9cb00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b94b872-2490-4ee2-b57e-36296f516dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71942bed-7d1b-473e-a794-7a19486b8637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f248eaf2-51d5-4308-93f7-a8790ae17ac8",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38db70ed-452d-48d0-b64a-2053d382fabc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "612f2f43-399f-4bdb-a5ea-245491256591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef22f21d-0849-4199-90fd-0094856d4784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07266ee4-bcf0-41d9-b698-2376a844376c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d42d2f-5f6c-4e81-8d42-cdde467d72cd",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e061cf-1a10-4ffd-b96c-bafeabe7ccae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebfea7ce-b196-4d7a-9801-aa4f0cf392c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e76bcbbd-2996-449e-91bc-6bfeb5ed73a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a07d199c-60db-4b35-9f51-13f737bfd04d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d466dc64-af19-4f2a-9c22-036ee2834073",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9a4a23-c335-42f9-9de0-9167bf20e89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "757f7b66-faaf-4d14-ad69-29361368705e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d726178-2e58-4fa8-b37b-5418bbd8b2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6fa854f-340e-42cf-a87f-6053b88d01f1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8082305e-017a-424e-99be-7a0fdf6de46f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6b97cbce-85ae-4303-bff9-584e64cf86c5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe985aed-ae22-4d20-8a1f-bb0e8f5a5b44",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "904c5ea6-6011-4450-8afd-433e2b874621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7dc97b3-60fd-44de-9fb7-9e481b3b7ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ad9016b-30f6-47aa-be18-829014139708"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b19fcc7d-b938-4242-b471-214fcc9ebc9e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "327a7106-2ca2-4887-854d-b79d33331ea8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba8d6f94-575c-475e-9012-e3230175f7c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64be3803-df11-46d8-b03a-43fdf99b4bf9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2150f981-31b9-4a38-8989-12712075fce6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b0cd8be4-1b84-4f57-8f30-7ae22038b1bd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f9fecb2-e07e-4647-b6ae-e0fed2453ef3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bdb36aa9-27ce-48d0-84fc-b3877c9c5298"
            }
          }
        ]
      },
      {
        "id": "b10876d7-e38f-4e31-b61b-0aac85ad3830",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "86a41865-384e-4aab-bdcf-6145b0930098",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cb907f01-2428-46d7-840a-fd2416914702",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8acfb261-8610-4f91-ba73-d7ea7db4a30b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b40591b-860f-4c03-a779-f2b1012a4d94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f026204f-0aba-4c9d-a5a6-995f7bc331f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aafe335-0a7c-4dc0-b01b-101f0a6a6f11",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6e58c3-e25b-4e60-be9c-89aa39091e14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77568873-68ff-491b-9e7c-e86fb99ecbf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1afa9bd5-ff78-4659-b75e-d56db162eb63",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb4ebe3-2cc9-40f7-9bf7-42edc47a02d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59887338-4612-4783-8981-bb475ee1d376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "219d26a2-6f4d-4497-b6a2-be268424ed6a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd704f6d-ea37-4bff-98f2-95c2d2afd754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60a74f5b-f5cd-4bdc-8fa5-5c8184b8aebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60d6983-15e2-4fc3-83f6-3be0b45863bf",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71bf1ad1-4f84-48a6-b8c5-7322429ed251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5226887b-3cb8-45a1-9a90-2518447778a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882c4a35-28f0-45ba-bf63-657b52a6e7e0",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f829ed31-336a-4d06-92d7-3ad283ce27ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f7ceab4-07d1-4286-acab-8d8e696c8140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73550dca-9f41-47fc-9301-0c0e6a2b06c0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecae7010-4e8b-445a-866d-1453ffd2093b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8298005-8ace-4ddc-9dc5-3fb567a40534"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc3019c-a2a6-4872-8b84-ce3fca6fdf3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a7a0e7b-bd5d-4448-95ac-3d4dcdfc6dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8e3866-540f-4ed2-9175-e99c8dd20910",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2bc00ab-a4ae-46bc-9dbd-79b4a823b455",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5eeea1f-6091-4555-b166-e6e08a11c530"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1278a063-5b06-4d27-b1d0-1bbd8de7cc6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b824b05-b68f-4ff2-b049-65346a874162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5c942f-6b5f-4bca-bc46-b9dd50063bb5",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8b461a-d558-45d8-8041-c2930223c9e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a14959aa-e792-4787-b47d-17850dc9015b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c9871d-bb59-48c3-b8ac-4b16575c4117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddb90c64-03cf-48f8-ae29-16da2e8d85bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d942b1-7ea0-413c-8dc7-226916beb63b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7658875f-45f7-460d-801e-0cc730ebc6e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42304d07-40cf-40ce-bb08-0478db871dd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ddb3be-9dcb-48a3-a17a-98660d5dcea8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3652d45-a3c8-4dcb-9401-d7ea53b2a950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6820538-68c1-4d88-bb3a-05022cf8da51",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6244f40-3704-4df0-9677-f17889b56f6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07f8c333-89b6-4ba4-8d17-53c004d2aee3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e519bc-5b8b-4b6e-892d-4f36e6c69e33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5d74a01-1293-4282-ab70-f48920103d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d9ac434-e8d6-4004-9f6b-35263fb4e78f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b841ea1-2cc8-49f6-9bfb-35f036c6f7ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddda4ede-abd4-48f5-b23e-2688cd31e4d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2020e4-853a-4896-a50a-7d884855bd5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33fd362b-2964-48ab-bc91-2a26846d0c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41830371-4db7-4431-be67-985a0651db42",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb029868-e263-474a-9b93-0b212096e3cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3109850-97fe-44d8-a037-9618ce9d3d77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c07372-c91d-421c-b628-76a8bc1eaf62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "133cd254-7cb1-466f-ac91-98963f722d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e0cad79-d0c0-4901-a9bb-fba866513b6c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad8737d-427b-457c-beae-7ba028f97583",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23bc2fe5-c5e4-4fec-b0bb-435a30f27a14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad653ff-2bcf-42f5-ba05-395a62f86354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74d23634-ce8d-4545-9420-3bcf430f5c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0121c55-59f9-4cc1-87fa-cf8568f42451",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea262e49-a6c0-46dd-8ad9-27480b2a07e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "985a9889-5056-440f-9e36-e8605fbf5653"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa1347b-ecca-4466-9593-e234e0dc324f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "603c8977-1cec-4f78-9ee1-9188b81721a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6645e4a9-49eb-4cf1-a83c-d15980017d95",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1849641-d50d-4034-b7e8-3d82aeadd7d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d7646c2-3791-4dd0-9b38-aeeeb5bcf00e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50630341-841a-4ede-a999-713a110b63de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7478e7f3-f305-4235-8d5b-4657089f6b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc9e6fe1-2c58-43cf-a363-77a4189832d1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c49ef96-25e6-4c9a-8db8-9b7caf58bc38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31e98e90-84ad-4f1e-92cb-f9bcf2f97fa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c97e05-c940-4dc3-bf40-f16a45e64a80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a117fc6-a2cb-4573-8c72-4ec78dd68562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f86909-f015-4b3b-8300-fe77633baea8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0276e8-9502-436c-8758-2d55dab85daf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b93867d2-a5b7-422b-a93e-7dbb862eff5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5530879-b919-4396-acfd-7a8ce978bf85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3656af37-39b8-4fee-a03e-039eddeb2ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30017283-ade2-46a6-8fdd-e4941521f512",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f951d59-93d5-48f2-bc76-9e75a7adb08e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "480e6f14-2ed8-4d2b-90fe-442df7851cec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed05f489-dcda-4d62-abaf-e8fc825dedc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a536343a-3a24-4ff9-991b-b6f59e808552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d98906-7c86-446f-b7b6-09bf441c460e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed61d500-6865-4b21-bb38-c395ef04452b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43772c73-2fe1-420e-9e5d-f778cdd66b2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "348d16c9-ec43-4258-b05b-3591669a422c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "092959d2-c621-46ac-b762-c2bcc3af5868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeea3670-0242-477d-829c-b630647b1db2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f93e67-9140-4b7c-bee6-c7634ca3dd2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "343f872c-4313-4041-a7d7-d0e770b91585"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b742f53-8adb-46d2-b2f0-d4981ff7ac23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "057e7269-fb01-4078-9376-672914c237e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2b4a9a-f67d-46f8-a919-0f3d65c5ff54",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f43954-d5ce-4149-bb18-e24149f0e0a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13bac07e-7563-4062-aa4c-a6aafd8637f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff40b39-7299-4043-b12e-852c65accf86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d54c32d-4a3a-4303-866f-e5e59a6522cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cec3c8d-e186-4c4e-82bd-4efa6745a426",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d7b53f8-c933-44fd-9eee-aa0b439e0ad5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d5c5850-085a-4cc7-847a-48d63456b70a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a57205be-8b16-4ec0-9abe-868893a7e008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10dc5c5e-b992-409e-a4d8-f8dd42bc66f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0405a2b5-8b90-40f6-92aa-e7ccd7f0f59a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55247890-f688-4bc1-97fa-b193b234ebd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49e2c0e9-4ab2-47db-bb2d-f5d8c50d27cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e7a456-0126-4c1c-8ac8-b3c1e501bc7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11fdcca0-45d6-461e-b6ca-17b7ed688f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af1a186-9640-471b-910c-64b619dfe6e6",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97244dfe-89c5-4353-ab78-b51b3c0a6156",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63d87fbb-fa90-4039-8771-4935083603ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1533365d-8b1e-4f37-bd36-41e3064c64cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d2ddec2-2022-4533-9994-60c3db261221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c32dba4d-acf7-4c73-84ad-d3f5911fda26",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8885251-6c0d-4919-8434-988c7233b965",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad7c7e2f-9ec4-4c87-85b7-3d9d30e8da99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69cf342b-1258-4d2f-84fd-cc093b4a3f85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c20ce8a-fc9d-4c85-97eb-400f0165bfeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e85a7a-4204-4587-bb9c-a2db4bd60090",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f6b2ec-fedc-4618-9bf9-37666b0f8cb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5984b5e3-5677-475f-8ea2-a530a0536ba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a611f24d-3af2-4663-88de-539745c53799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fb8f9e7-9702-4be1-8664-8b565b73b4b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43374dc3-aea2-4325-b46a-48f460c42fbb",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae427bed-6af0-4728-8642-60735ae0393d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0edc1ae3-9d9f-4170-9dc2-0f12d53c3220"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0109951-c86d-4da9-8ef0-bb51ee8d1efe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b232454a-4fc8-47b4-b6ef-bef306c4b989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaee0ae5-47ee-43c2-9dbc-56c6efb7b307",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34616687-c07c-44de-a456-1c8f659e9844",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8737287a-b7ec-4a15-aec4-720a3ddeee79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d374b474-80be-4ab3-98b4-128cd2038117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e64fd2c8-f0e2-4343-a3b3-d4f19ace1f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf15ed2-d43b-4d07-ad46-9a365784a5f6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99448752-2fe6-49ca-9730-ff0667b35eab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6f4fdf7-6374-4649-91cd-1abdc925db69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "186d9bba-5c2f-4103-98d0-c8c5793c65ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc78b394-99f8-48ed-bd7b-553e07140411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7eef8db-ba45-4b1c-bf69-150579e736af",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1587c4c0-9cd1-4db4-9712-2b4c75ca6f1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84c89155-ef4d-45ba-9f62-f5c38923b27c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcde937e-e518-4976-9e9c-024b07138284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f30ba7c8-92cf-495c-ab2b-8f2b231d57d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a511bd-5371-4e05-b8f7-ef7f89c92655",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a7816b-6233-455a-9628-57e54e86d84e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80c32bae-56c2-4880-8409-5b24f12a4f41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c84bdde-4833-4f09-aa5d-cc46d1db598a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f9b8f02-9a2f-43d6-acea-d48d73f1d5ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aa7f0a1-48a3-4aa2-9fdf-658ba656ef62",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55380824-3f10-49f4-9c44-18dd310c1fac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "019dbf71-644f-43a2-8fa5-50d136aa04a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f82b332-4ce1-43c0-826a-0e473c05eea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2054167b-b260-4e7f-bb0e-49b5368aad02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "873a1d34-a546-4683-b7a7-605106fe713c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644dc69d-bd9f-4938-9654-d5427b8eda7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef8c569d-38c9-4313-a7f6-515fcfd53874"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3280f25c-5d3a-41ea-b95e-876bf931691c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37a29891-c190-4aff-ada6-d2873d3aa004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "742d497b-d3f4-424e-9658-132c5dd19afd",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92fafb3c-ad27-410c-bae8-7ed839f06cc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f1ec7e0-3759-4684-b6f4-541d328dbf8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1db06d-8d4d-4f55-b85a-023f3a740f65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aca12db9-657a-4dc1-a890-8e3a127fdc0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "220600ca-1be7-42d8-a5eb-3c046d1b40f0",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64731411-407b-45e2-8c12-d07cc778c209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "310e97f3-df4c-4248-9a6b-261010e544e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b3b5fa3-0b06-4f69-a458-2ea0100735dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8786333-be75-47db-8a02-70aa90e24d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b573c7-ca24-46f9-a267-175eec3f3f8a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a3a08e-998c-4e9d-a933-d8242c809d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b66d32d-43f9-43ed-8188-99f993fece63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a715757d-cbfb-4272-979c-5600a055518b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7c941da-d19f-41fa-b82e-ca0b8c85a764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580c138c-ef28-4fe3-8d29-aa331feba05d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0f8bb1-ba6c-464d-a40b-50ba97a47888",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7fa58b4-cf09-42e4-8645-a1cf75e89358"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a189a97-0885-450a-aac4-a374de83d6eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7170276-30e0-48ca-b33b-f45b752eb2b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b4b8b4-7702-40ae-972a-a00aa1bca4ea",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f7d0c5-1003-4759-857e-170152a8fb09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4acb0e-b5ed-4c6f-9516-99c3fc2cc43b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc54e72-814f-422e-b9b6-765459950cfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94285508-8acd-4286-95d5-1ea09ef760f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1d4f2c-bfab-4ee0-a6d1-322f2bb056bf",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b33e037-d4db-40cc-8a89-5fa9603d5520",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3e66e53-b768-40dc-9338-d5f2f58e9a54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8acd597-e743-46d7-99f5-9290952fd419",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feadcc3e-fd08-48f8-997a-e4afcfcd3d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd450b4-a52e-493f-b789-09f015fe0289",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "710ca664-9c4e-45fe-825e-06bdc21ab562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43d81eb5-d9cc-45c9-bbfa-b17ced42836f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1180e1b1-dc81-4e44-b8f7-07224fbab779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e8aa14a-616d-47dc-9a47-972eaaa6fa25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7b1753-61a1-4227-975b-107078f65aca",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97069933-3b9e-4534-a9fe-8e004936258d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5666d527-253e-4f75-96e6-d741cebb04fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25c5a59-78f7-41a9-9628-e460f4c97dd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "057b030c-c2c6-4f53-82c1-709da447a2b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d35b00-9040-4ae2-ba7d-2810203f4957",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a352df6-01c3-4253-bbe0-f6c40dde0b44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "262f4a75-f4e5-45f7-8650-7f3769ee5195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b50c0b2-e817-44d9-9ceb-bb7204f77f7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76385196-f504-4ecf-84e7-cbe4c7c14629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "280cfb5a-2cce-4b3f-8019-4244b6649dda",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "469989a9-1cd3-4734-8431-a3a9d2dbc3c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d96ebd6-8ef3-44b6-9f33-80991eb54c26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91dd4951-9f46-452c-b75a-4c55bed124c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4110543-949f-4b14-ba36-f7e5c403f99d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce5dd6fa-abe7-4383-83ae-e4b579e8b0fd",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a35b29-0cdd-4140-bf0e-2bdacb7e731a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68ee8500-0803-494e-ac2a-9c0b748fa6d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a223e807-775d-4a4a-ab49-e8e965e26846",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cae243f-5e92-4daf-8441-0e83236f556f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c73a94-0cfd-48d1-8dc6-2042f7c879d6",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f0004c-1d37-4d1a-b8a9-f67e10fb3911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ccb3f9b-6bb4-4ede-a5fb-0998bab82344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee1a674a-ef96-44a0-8cbf-2871f7044495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d60541fb-d81e-4a47-b5bc-e08146443941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc6893a-0302-46a9-80e2-9c5851882cb3",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b8ca0c-386b-48d9-b008-c5ddbdbc339e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f7d6a65-16f9-4af8-8eca-5cae535d24aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9585483-c8d3-4b99-8105-fc175e955e23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f97b3623-3138-491e-ac11-38669507b793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b362340e-1f1f-4b25-a456-536fe3e85aac",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59667290-1063-4d4b-8287-409d785e6c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ed7d0be-0a09-4123-8426-11fc99347584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e51286f-aa86-4b15-8103-7bed22a9a485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1620822-05c5-46cf-8de6-6d88b2523331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "647b2a3b-4d50-4e4e-8307-15094d534353",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b88b63-a747-4c8b-9cb5-9bab53a3c74f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec2a8b2-2dc2-4a8f-af22-6e4eac9ff674"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "346f4f1d-bc51-45b0-b90f-5a647a634dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85e47a36-0240-44a5-9d53-b08b28d7d20d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52679a8-9bfc-45e0-9890-593c9e8d4377",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b05c016-7303-4d62-8fa9-917c1bbd3701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "095daa6a-d950-4248-b4e1-5f556db05fbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "592b4dce-40de-4e7a-afa9-a681b803a8a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b4de316-d9e1-401f-9a76-142e019c6aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a34d66dc-6ac4-4ff9-b32f-bffcaf23ebaa",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ca48f4-c378-44f0-8e71-f2906393f85f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20dadd38-1be7-4b8b-ac9a-a8da2a6feb6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f9bb6a-4598-4dc4-a92f-35539470a096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8539933-5dfb-4cfc-9737-3ad18c1bc507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01956423-aaec-4623-8ff3-5c2578cc9d91",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a881faf5-0d51-49b0-b85f-ae5367ffe0c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81ed3e9c-97a2-44f1-89b9-2ba9963683c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef2bc852-45d5-46ce-8086-571695110597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bab72061-8ad4-488a-aa71-edd45e296121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7c7856-97dc-4a53-8ef1-beac56d3c253",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852f1833-db12-47bd-aab0-bf0f3dec56bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54ee57b4-68f7-44f0-9ed5-456b9e7f3684"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08cf0a61-4dca-44b6-9cd9-ccde10f4ac8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24b9f491-4124-4659-bb2e-a2bc4f6fcab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c89a84-8830-45ab-a2d0-93dae2e64297",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3249b1b9-172b-4bb8-8972-f6d9ee094c84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a8ba210-7239-4bcd-aa21-39aa213974e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac9cf10e-8f00-4e71-8773-2becc1e7f5e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94e61143-25db-48ec-b3aa-2fb35758d7ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4d2dcd-2145-44be-b51b-804d16313bfc",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ad88f6-5841-44c2-b41d-5565d1e899f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ebd535b-128d-4d88-9d6e-885c6c85af8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd7540ac-1d87-485c-aa86-f570cb357b59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "364b0c8a-50d9-4a02-b1e5-c16c1d10a713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0fd5b54-6e2c-4804-88df-c31a5c90ecd5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a082c9b9-ad72-4ab5-901c-37b6220106f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9706b33-1518-4a48-b8b0-bec617536297"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6510e8-730c-4041-8476-52e995fd26c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "465d06fb-ce59-445f-8f82-dfb6e759f38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "774d139d-31d8-46a2-bb84-a35d71f168b5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156bfa2c-e5a2-4438-8442-dc2886618fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89a715d9-779e-4ee6-acd6-695b83866592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e59da3-a39f-4589-8d3a-1c13f43a6e19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60b502f4-4e4d-47ec-b6f7-b769c2433043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c531a31-dfde-48f1-aefb-1e8f74623ae2",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab07c537-4667-4122-be51-9a44a6744d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bb99f51-edf7-4af1-84d1-a3b4a9064208"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b8390c-c666-4a76-a852-6dfd5eb61c64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e9d57f5-9244-41de-9ab5-fada57803983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6be60b2-8524-4c2e-8738-b544acb459f3",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fbb1645-da60-4517-899d-4d25e80e1b75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d99e9de5-8ff4-403e-89d7-8a66f56c38ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bfeaa96-ccc8-404e-8deb-bec1c05aece3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be97a6b3-d8ee-49df-874d-57b04484c754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d841e5-120c-4b22-8847-b62b6455d6ac",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736cb9a1-e162-4b42-b705-6944c1a915ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86495435-81a1-48b5-844f-25310f994a9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17cc075-9076-44d4-91bb-6ea453345b15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf50996-bb56-4bfa-9a48-4e82d6d07944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6498d164-827f-4dfb-82f7-93e6d36135b0",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586a5ae0-36d6-42b5-999e-4a7f2aadbb51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad60e04-ff1f-4f45-86c5-268fc4c3ed98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64155ba3-609d-4212-9c89-4e19f6fb035f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f208601c-67eb-40aa-b6bc-ed699110d585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39fadc2b-4630-4d23-9804-afb7f383a79b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2168d417-1df9-408e-a9ef-be45b848da10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37681996-e135-48ef-8716-af8c1d0a0253"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5f1ffd-7f3c-4e73-a00d-529123933c68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f16fc3f-9fec-4881-9798-205d9952853d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc4c7b9e-e34d-42ce-9938-22eed07e909f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "902b5d31-2a22-4e53-8707-42c4a423f562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2062708-76a2-40d9-829d-8d8a92da4cfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b8090c-5c6f-4c2e-9d04-18b26f4a40a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7bfaf36-775a-4d4b-a526-74495cc13482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36fefca3-56ae-4003-bf39-bd04d44f4abd",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6609b5-51c8-40dd-ae41-dae7ec23f78f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df0eefdc-e996-470f-be33-89ea37674162"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "487c893c-2f8c-4c9f-b9b5-ceab534c6a82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aa812fa-8b48-4e42-b7cd-7f55970c628c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f81fa35d-c0b6-435f-a50e-71861bfaec73",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d859f26c-0b01-4bcb-96b7-49b3221fdf5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28e44836-dc32-4e7e-9bab-4d68db35f5ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b462862-cb89-453e-bb6f-ccd74867f2b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68ff8f33-4dd5-4abc-baeb-7c2914845628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c90505-8ddf-4f16-bd56-09085b005262",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13cb5fb-e6b4-41cc-a8df-919abdaff4e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39b2c911-317c-4ac3-96ca-6db1ece6f6f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc74aa5d-8948-472b-ab8f-c66d79fea801",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbc11012-9142-411a-96a5-b98c863b7ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f9ca90-75bf-4e30-80f2-234cc9872a4c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df95f2dc-55d0-427c-b041-3f2f0e95cefc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f741df2f-cdf2-4d17-8476-089a6739fbe0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a360113-c974-4bb9-84a4-d72441791d9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d40de80-1038-48dc-a04d-5804f9cb1cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b35f1d0-fe99-4e21-9579-0dbc0fbe918b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b2ba45-6c0d-4f63-a0dc-8bd179bb1efb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5188726-a31d-4067-ba15-8277f4e67416"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "173cbace-4a81-4e82-9691-c5998a8f8055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81a3ae53-6fed-4adc-a66f-39b38fac7ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d8dce0-6d5d-4a53-84fe-c21e226579dd",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ac1710-dba2-4336-a20e-f792045071a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a386e5bd-eb4e-40c4-9d0d-bc214d968e4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32882304-dcb1-4727-93fd-7964b7229767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e9c7f5-503d-4b8b-a65c-8f538330e2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce71bb56-5bb1-4891-9916-1b68db7c5e56",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c73bac-74c2-499b-8ed8-1869ea4f90f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1da54078-3226-4a98-9d87-4b8b82c54a6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f185e7-8331-4644-8c7f-affc0a75b7de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7914014b-503c-4dea-b156-fe3c1856a537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e2ec2a-b9f1-4274-8dd1-26e91116e56f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16cfb992-2b6b-499d-a45e-d9326be8a807",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca3acaf5-2688-4cce-a867-c282309a31c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0742d5-a101-4a38-8fd0-cfaf05741ba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b39f543a-deac-4183-ba19-797acc6ca58d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f682bd69-4962-4891-9958-2494696b1586",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3810d6-4210-4d73-9496-8e18128eade0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "013a5fae-ea57-477f-90e1-4d0ec9bdd4a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "508a5913-3754-464c-8b11-ce8126ddc368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1474f54-824a-428c-95a7-d892ffee241c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1224da32-822e-4904-a2d0-cd38d5506936",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ecb9f7-62a3-4246-aa1e-b4f02ac22a7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58aa1975-4b70-48d2-abe6-a52b37a731d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6fa726d-6d33-4143-be33-f800054ce64c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7522a8f6-66bb-4053-a2ee-24951a77eda3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b676675-3d25-4489-9219-519c48c88cd2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e3e5c7-9e7b-4bbc-8148-3070e3a38062",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f84ac9aa-223f-47ab-ac3a-e1d275a25579"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dafa902a-ec4f-4743-baea-850a35999ef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "446294a5-d5d2-4252-972d-85ba3d1bdbb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b716c2b-8b40-4e1d-aab1-111a3ddf3385",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a2f7e9-a4c7-4b40-a03c-db6cf41a39ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34bd8e0c-b0be-42f9-93fd-3f67815a2c2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd3dc55-8993-444c-88c2-8a22efcff42c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42f78d29-4566-427e-9b25-c5467fd45f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f748824-4a99-4cfc-9856-2795cf0b912a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54e7a25-ff60-42bf-8040-f47aace0bb58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abc835e3-496b-4031-9fa7-c80ff2c4b94e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e84e011-7ded-40c0-a917-c15a6b2ea2f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24053c28-864d-4aa3-a896-5be1670d1dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e24645-7af2-47ba-ace0-5d844b70d5a6",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962aefbc-b60d-42f2-9314-bfdd628cb121",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32f4f00a-7ffb-4b3a-a0d4-13b8c47fa192"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a968761f-2da7-4bdf-b10a-fc918eed609b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7c0a314-f83d-4134-8201-52e9edb44b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d7823f7-77fd-4fcc-acce-0a1c8cb24ef5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bdfd49a-5f68-4e75-9d34-5c5b97227008",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5af636d-18f5-4c0f-82ed-649c1dfc620c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dedd1356-9a90-48d9-82c7-e6419ace5954",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5aca0c7-a577-4551-a944-88b0035ea350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "113751b8-6cd6-476c-ad86-6e774d4e7d1c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb08138-a90a-43f8-9847-1220d1d05a84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52208834-f055-4bdc-ab01-9d4f0b1e2d6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e62172-5865-4246-a764-9299f3162582",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67446234-606b-4207-9776-6b71dfd5d90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11249402-1753-412c-87b5-ce4b25a63f82",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f54244d-e9e0-4074-8963-e1d8d1926525",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "014e28de-f501-4a5b-88e2-7c1ba3ec3800"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b10615-a63e-477b-993e-bd4331cf688d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae73312b-efda-4f70-b14a-9542b2c3b373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3ccf4d-e7dc-47f5-b095-8ae7f7ef0bfb",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc95d338-fb4a-40bd-9ce2-81b94656813c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac9fdb50-1310-41c3-8484-3d6f6c110639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f23614e8-0f7a-48f2-9156-72a8758c0718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31406382-79e0-43df-bc9e-6481d30465cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb47994-cd51-401c-82e6-18c09526456e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe145d4-11d2-42ea-afe0-a1674eccf6a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "436a3b66-d9bd-4afb-8e0a-281585d10095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7091c511-3da3-4934-b16b-10d91d2035dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74c7fd6c-6a18-4596-abef-708a58fe7b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31093057-b2fa-4c78-98a7-df461ba814db",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ec976a-dbd5-4b04-b47d-92f4ecf198f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35112ece-532a-4cb9-8840-f09bc0e9a51e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffdfe525-66b2-4e64-95f7-4c12b915af42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd45919d-edd5-4cfe-8e3e-9f990c4454c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42996b25-f66f-4be6-a5ad-485c22be029c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa775a8-7e59-4085-a6e4-16ee13d8db18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "198aae46-595f-4af0-89af-27f522757612"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b342b5f-8d59-4cba-b9da-f11393a6e281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "398fef78-6a6b-423f-ad47-e9d1b1ce84e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ce47fa-8925-4e35-be75-e8cd2fbdc871",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8abcba4-48b6-4390-a756-90ac115208ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f56ce93-ba32-45ff-bb8d-90df3e74faca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8579d4b-6113-46f6-8510-beb2b300d979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feac4086-0a9a-453a-b0dc-fc4c29521af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f234bc4e-73ca-4a83-9ffc-974ae3434c75",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919f1a1a-4c7b-4b31-b915-e51e50b14037",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80587cfe-80b6-4e6f-a4be-cd6529301fcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c7b98b-a6eb-4c67-b342-68fc3fd71b51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "782265f4-3dd6-44d8-b1b9-2c3a61c36dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ab53ae-9fc5-4235-9899-a06a11e7d0df",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31effff8-813d-4504-9013-2c2da5d30f8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33f6d5ff-092c-45f3-813b-c04734b40f20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b030e01-a915-4fe9-ba44-085cc514b339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c796470-a352-4377-8fe5-9cfe8d0f0691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe95d11-3337-4282-bfec-02839a9af42d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef751e09-01fb-41e2-b1e1-81edf7959bb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c967f73-1806-477e-8c3d-5c8f3453b1fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5f020a-fe9d-45cc-a4d9-a301b590832c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3bb73c9-4c76-4d2e-ad04-3da45783466a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "686bcf6c-578f-41f5-8758-1f10c2e2aca2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ab7a8a2-a289-4258-8a30-36df947c5ac5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "644017d6-0a51-40b3-80da-3e51c254b8cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b7b2bd-b49e-4a04-a1f9-b78b800bc44a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2008aee7-89b1-4f5a-b5ea-bff2bdfec906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b18806-e4ce-4a8a-b505-5ed0b9b1fb59",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3805f2be-144c-4ebf-bc7a-8254b712910f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd3ca46a-d8f0-4242-8a21-c040246bcad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1339b3b9-2768-4f65-9b24-ed57098d86b3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8617d67c-4443-4a07-9e50-43d888df4279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec4b85c-0e40-411e-ac54-7b2be61c0cf8",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e8cb0a8-6634-4e80-8d01-c55417635bb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d0e62b8-af15-43b8-92b5-2dc2f2a19a97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d466aa04-5d24-44c3-aa95-b92e68cef199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d9aea40-0a9a-46e8-8421-5bc7c5ea3ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "094862e6-954b-4f84-86db-c6224dacbf72",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbe0de1f-f7b3-430e-a608-225e8f517906",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71ff29d2-31bd-4d7e-94ab-01b028ee6d98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e815961-6a90-4e6f-a90e-3f943d07f8ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a89f96e-0af3-4edd-9268-8ef8afa05bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a824fe58-7f0b-4be9-b54c-d1b895d77e72",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e15d730-36bf-48a0-896f-05b25a61ee75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ddfc428-ed1a-41b6-9547-ea94c8547fab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3935f6aa-7ee9-4d87-8f70-0d7a446127b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd05b66-bb59-4872-813a-91d3c52f609d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df66e7d1-c5f1-4311-9ebd-b7c58c2409eb",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267c11ca-c872-458c-943f-74a32ccd3d7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f10ea23a-52d4-4679-9ae8-ba333d90a0c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b09f22-5913-4122-8b67-88fea3b3733e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "485470c2-c279-425c-8a9c-bba40f3f8344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1f8fcc-cbec-4ea6-84c4-175d7b384553",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af239c0-c2e8-4369-875f-d981740767c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e67f618f-1306-4d46-81e6-de55e543d307"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c248b5-5bfe-45a6-be8d-bfb7a138a267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd5ff658-0327-47a8-a7e9-8cd7e5237688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c579e2e-c9fe-4e4a-be98-5dab47c9493a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0768d8-ba2c-46a4-a371-3184cf6d3800",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1660fbf-7ccf-43de-b20b-b9ab71b67adc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d53d35d-b6dd-4992-8939-ad337b9a2149",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53b9ab43-c7a0-4295-93ec-8d1ceab96841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b543539-84a5-47a7-a484-961cc40cc499",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cac1080-19bd-49a1-b19e-8bcf48bdab79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90c6ca4f-93ed-4fa9-945c-34374c62d680"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9840e411-c3fb-4618-a046-aeb6841add58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67e4f69c-e6ad-4484-9dcf-bf199db535fd"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "66546165-6438-4ce2-9567-098f4280db9a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4779f896-41fe-49ce-93a4-e7a48b520c41"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c3ead50-c914-4636-8084-94a0f0b23cac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "023413fb-693c-4e1d-bef5-3c0baec7b97e"
                    }
                  }
                ]
              },
              {
                "id": "a44df66b-f395-41b0-9714-efaab8034c12",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3863334e-9bff-4cf3-ad59-9de7bcfe5ced",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b38016b3-0790-4536-9d6d-9e288c886e29",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "48cb0f19-4d46-4ecb-837e-0178baf639b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b57994c-7e8e-44a5-af18-17ef8f1c77d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "881ee52f-3ec8-43f9-af2c-f8c509934af7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec62410a-9e4a-4604-a672-d00b4a6928b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8aa8e62a-ea63-4cdf-91a6-024e0475bd29"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "da31841a-8816-40d9-871b-86aa61d2581b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a4221a1-997d-4280-b867-704e890a1c24"
                    }
                  }
                ]
              },
              {
                "id": "a860786e-8615-41c5-b7c5-4358dbcedf8e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "bf3b37fa-5943-44ff-b1ea-2d342eac14cb",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e47854-6e4a-4eae-8169-ec83e1c74ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "496f4fe1-f26f-4273-811c-a39d88a8c9ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a7a4f6b-e2af-4c32-89e5-9641a7ccc65d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "154dd293-0ee0-40c2-b79b-03d241e3079e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "efcd9a58-bb27-4709-8c30-f829ae33f35b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "af9c428c-1df2-41b0-bccc-fdeaa12b39eb",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "09c92a4d-26c1-4199-86fe-3bac99385391",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "18c20fd3-d9ab-4285-9689-e280f5741c30"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e881506-7d8a-47f9-a121-2702d15a6fde",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d11f4e90-ed23-4172-93fd-f7d45808eb14"
                    }
                  }
                ]
              },
              {
                "id": "9f2ec2c3-5c7e-4166-b368-3c977deb90b4",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbe44790-d69f-4094-a072-950009c799fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "eec8de3d-6836-4fe7-860a-48066e9848e4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e80e73d7-f261-4612-8db5-1d3eba3b7013",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "426352db-8eb5-439f-af1a-71241b54ba49"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e866adf7-d22f-437c-a762-5c39c165d717",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "495f90ca-35d7-4973-827f-90134777dc85"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b754bda3-cf58-4831-bac8-fa77bbab96e0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "824d4e5b-170b-4fed-acf0-c1e8145d022b"
            }
          }
        ]
      },
      {
        "id": "5433a028-b2ba-496b-9a45-5cb2bb344ff7",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "cb86a9bb-949f-471a-adcb-dda6f78990cc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "de00fbfb-1d52-45d1-83df-ca1c015b3cea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3db0755e-e680-4181-b677-ba645fd895c5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0bee757-0e02-4aa8-b469-ffce6db08c40",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ad06046d-ddf1-450e-a026-56879b749422"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ea439b-c44c-4616-8383-ef7a0f042949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86d3e032-c2c4-4b63-ac72-5a92829ebcfc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d67fbd9d-a935-4eea-804a-89c994b5751d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c262081e-c47c-471c-a76d-fa7d25f4e21e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3c386ea-af80-4fd2-a76e-f32310628139",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19994e92-8b51-457f-a9d4-6523db00ed5e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aa4ed68f-2afd-454d-9061-77c2f078db88",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e4087b4e-d925-4c74-be64-809fe7f50b94"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc96603b-c4aa-4112-9744-2cb6bc3c2a5f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1e4c8de5-b4cf-4113-a766-85602fa7e6dd"
            }
          }
        ]
      },
      {
        "id": "60790b04-7cc7-4816-91fa-eec82db60a8b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "62766ffa-c637-4c93-ba6b-515b111c9a28",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0255dd81-a209-4ad1-bcc1-18569cd2adb8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c29fb1b2-0031-4efe-8062-5b8b1ec491a3",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa66e9d5-cb83-471b-9a04-a62adcd29320",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "851719a7-f4e6-42d5-a3ff-c339b5765ec3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3ac68e-6996-48b7-b826-836139aa76c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67fc2436-c42b-4541-bf30-3e3392910a8e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d74cc11-66f0-4926-96ac-651fb8a8d0d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "90cbfa6c-d266-40d6-8f04-08f9c93a100a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a84d7c4-d57d-48ad-b277-eae5b7c26fc4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed1ee71b-9748-4370-b2c4-82d90fc0e5b9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e07c0b79-c1b4-43ff-9b8f-4f2fe96ccb03",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "349a204b-7e3e-467a-8272-2362a1846a05"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a4298b48-b310-4db4-a694-67b6e5fe77c6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4dc4ed41-fcda-44b0-8bf2-c53009664301"
            }
          }
        ]
      },
      {
        "id": "8ec7e641-7f3a-41f4-9555-403948fe33f4",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "700e2229-7a4a-4663-a4e6-da0bd0124638",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a3b57d3d-74e6-44fc-b4d3-ff35f1f1e06e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c8ededdb-05d0-4b5d-9d9b-b758508c34c0",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ac5c01-e190-4525-a9df-50d6789db168",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "931c9a63-29a4-42a0-82ae-c1abcff0e73c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a183c5ee-56fc-4edf-937d-c49b0127670a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c9bd2e3-9943-4c95-ba67-1b872bf18a1c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "471d068f-c478-4617-b789-68f6a18aaa36",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba0f9d7a-6cc8-4a4c-9c9d-5b9dbc063cb5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce5c7897-acaf-493b-bc22-ef5782df3785",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b2f82d87-2d04-47d1-9ad5-1b7184181f7c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15ba8d47-a895-41c6-9000-a47e0524f619",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0354c628-a00d-4de9-8c3f-d50f38d06d96"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4e81ee66-95ec-4f59-a642-2d323bb52e86",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "35838842-ba93-48be-b8a3-bfa6fae175d1"
            }
          }
        ]
      },
      {
        "id": "77248fd9-f7f0-4330-834e-324e3e43e158",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ea47f65a-3fc7-44f2-a692-737d47283fc5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "efbb19e4-870e-4a0d-b7a2-761cb3b63181",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d7f59b48-de75-4f2b-8252-49fc4d555132",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fddcf780-c551-462d-854c-dd2017bc2e50",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cbfdbe9e-b7e7-4013-b581-b9c8d2d7b444",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 64
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 170.92957746478876,
      "responseMin": 9,
      "responseMax": 2109,
      "responseSd": 267.01622432869306,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1691886821984,
      "completed": 1691886887044
    },
    "executions": [
      {
        "id": "fa363d71-2d9f-4d76-86e6-c1d8a58613f6",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e9d5b479-7639-4684-a286-75a808374982",
          "httpRequestId": "e32220cf-f7b5-4f12-b6f8-fa680c06935a"
        },
        "item": {
          "id": "fa363d71-2d9f-4d76-86e6-c1d8a58613f6",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "cb488d02-b3d9-4d86-91ce-fb020edd6ecb",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 0
        }
      },
      {
        "id": "77ccbaf4-7aef-4473-a440-533ae55b2484",
        "cursor": {
          "ref": "fbfc4fbb-6a93-4992-babb-e89acf0c64dd",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a8088250-a69c-4f94-b782-4ab848cdbf7b"
        },
        "item": {
          "id": "77ccbaf4-7aef-4473-a440-533ae55b2484",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "998dad45-07f6-4e94-b9a3-d90a21b761c9",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "8cb50c4f-82d5-4b57-9dc5-6e0bd72bfa3e",
        "cursor": {
          "ref": "74777735-aeb4-438a-9456-c04bd58ce608",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "42f9baa0-3066-43fc-b538-4e461221bd77"
        },
        "item": {
          "id": "8cb50c4f-82d5-4b57-9dc5-6e0bd72bfa3e",
          "name": "did_json"
        },
        "response": {
          "id": "e3bf6bfb-a299-434d-8e4a-74429d973eb4",
          "status": "OK",
          "code": 200,
          "responseTime": 513,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02538eaf-7b33-4b33-a4c4-e71f9b1832fc",
        "cursor": {
          "ref": "bb483986-816e-4f3c-85ad-aaa3b9e9a308",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "61b57d69-db5d-4dc7-8c87-038c6b598ecb"
        },
        "item": {
          "id": "02538eaf-7b33-4b33-a4c4-e71f9b1832fc",
          "name": "did:invalid"
        },
        "response": {
          "id": "4857eacf-3afc-4783-854d-023b2ee2d16f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02538eaf-7b33-4b33-a4c4-e71f9b1832fc",
        "cursor": {
          "ref": "bb483986-816e-4f3c-85ad-aaa3b9e9a308",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "61b57d69-db5d-4dc7-8c87-038c6b598ecb"
        },
        "item": {
          "id": "02538eaf-7b33-4b33-a4c4-e71f9b1832fc",
          "name": "did:invalid"
        },
        "response": {
          "id": "4857eacf-3afc-4783-854d-023b2ee2d16f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04bd3a4e-c775-4195-9c96-1a59c81dfa00",
        "cursor": {
          "ref": "2faaba66-a115-494d-98ea-920026e6a265",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6cf8182d-76af-4ced-8e22-bb3e8cc6ce95"
        },
        "item": {
          "id": "04bd3a4e-c775-4195-9c96-1a59c81dfa00",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "37a6dd15-b4f4-4440-904c-e51bc35408b0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 148,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185916d5-0385-49c6-b82e-c06abff42f61",
        "cursor": {
          "ref": "6a5e5771-c733-4605-b01a-e9b337d62b0c",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "90859b90-e73f-4e7e-b3dc-2e04b915a644"
        },
        "item": {
          "id": "185916d5-0385-49c6-b82e-c06abff42f61",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a13d4244-02e9-414f-808d-1640b2083957",
          "status": "Not Found",
          "code": 404,
          "responseTime": 102,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f091f506-0141-4489-9c03-4944e48665b2",
        "cursor": {
          "ref": "e416a69a-51b4-4d0a-85f5-340976acf041",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e614cda9-c217-4b3a-b387-920b9a4c5a58"
        },
        "item": {
          "id": "f091f506-0141-4489-9c03-4944e48665b2",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "69fe0927-083b-414c-8b77-177c13152e40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dfe7c2b-b78e-4efd-9b44-01e2d83b72bb",
        "cursor": {
          "ref": "d0e89718-4ac5-4569-9416-8af476dc5be5",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "723fd70f-28dd-404f-a94f-b0f9aebd38dd"
        },
        "item": {
          "id": "7dfe7c2b-b78e-4efd-9b44-01e2d83b72bb",
          "name": "identifiers"
        },
        "response": {
          "id": "1f7cf1e2-3a31-4933-8feb-dccbfe9e53bb",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c03235fc-4142-47e6-978c-05746628bda3",
        "cursor": {
          "ref": "51713a88-3666-4e59-9535-b48075651e37",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "66ee12ab-a832-4acc-90b7-fdb8ee1e9f28"
        },
        "item": {
          "id": "c03235fc-4142-47e6-978c-05746628bda3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5683db56-4f39-4713-b9a6-a11b1d296789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba363af-cb5d-4145-b0fb-6e4f08a8e296",
        "cursor": {
          "ref": "cc57a29c-6c79-438c-aacb-08a1b9a71c38",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cb86ba74-6845-4f7e-a538-de8cad676a88"
        },
        "item": {
          "id": "bba363af-cb5d-4145-b0fb-6e4f08a8e296",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f1535e66-b6c2-4331-887e-4d851f7e88c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a07c7d8e-cd20-4f89-90a7-d3e6bd8f3dde",
        "cursor": {
          "ref": "47a48b16-88a7-4c9f-a897-136d811b9df6",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "25648123-5f9a-4cf2-af6c-e370f24e430d"
        },
        "item": {
          "id": "a07c7d8e-cd20-4f89-90a7-d3e6bd8f3dde",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7e3e0a69-a7e7-417d-a894-d5613e835563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a0b398f-a99a-41b9-be40-e53bee80c3fb",
        "cursor": {
          "ref": "74141cd9-edd5-4840-b155-9e59de939921",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "892b21ee-85ba-4410-af7e-7c4b09165dff"
        },
        "item": {
          "id": "9a0b398f-a99a-41b9-be40-e53bee80c3fb",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "fed99001-8b76-4de2-b27d-5d9bafcd8b92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c80e318-731d-489c-994b-22c837fe5cb9",
        "cursor": {
          "ref": "513ef632-20ad-4888-8ba5-e480077fb293",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "429dc04d-5e09-4855-8e20-23b64cb61701"
        },
        "item": {
          "id": "0c80e318-731d-489c-994b-22c837fe5cb9",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6051617a-e117-4e91-88e9-70cb81b08c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d4f418d-9610-497f-b8c4-998b5e9de965",
        "cursor": {
          "ref": "fef23285-9915-4003-b873-e71d5b618157",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7b7410f6-8fca-4368-a532-21406d2711d5"
        },
        "item": {
          "id": "9d4f418d-9610-497f-b8c4-998b5e9de965",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "4dc1f76d-e803-4236-8cdf-24c7e8baff48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1354d3d2-b654-47e3-a546-620be72967b2",
        "cursor": {
          "ref": "bec32dee-2fa8-4f3f-a138-5f21191b3809",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ffc7ed05-6a34-403b-8359-b5f43627221f"
        },
        "item": {
          "id": "1354d3d2-b654-47e3-a546-620be72967b2",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "84848ae1-8338-4c1c-ae2d-ba436b3e1227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b4e505-dfc1-45ad-9cd5-fc4a5bfee4f7",
        "cursor": {
          "ref": "c94bed13-65d1-40f7-b8a3-3bf259e0646d",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "12bc1d45-de5e-4482-9efd-88e8cfb30e1e"
        },
        "item": {
          "id": "90b4e505-dfc1-45ad-9cd5-fc4a5bfee4f7",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ebd73e44-58af-443a-98e5-c9dfd50510dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35dbc849-83f3-4d52-b870-9fed99482fcb",
        "cursor": {
          "ref": "9d869613-9746-46a3-8ca3-40cd99758124",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cc145bb9-6d05-4d0b-9cf3-c7bf33a0332f"
        },
        "item": {
          "id": "35dbc849-83f3-4d52-b870-9fed99482fcb",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "842fa704-e1c2-47d2-9fbc-107c7f47cbcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcce4727-85fa-4d0e-b669-cc801d188e5d",
        "cursor": {
          "ref": "6d09b69c-ffb2-47d6-9436-58d26ee1f0a3",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2359ea2e-503c-4bfb-ad15-8c14f30bbecd"
        },
        "item": {
          "id": "fcce4727-85fa-4d0e-b669-cc801d188e5d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "642ef41e-b4b5-4534-b4f8-beda78275596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1e25ebb-21ae-4959-8922-a6c2af81e98d",
        "cursor": {
          "ref": "dd976517-3523-42d7-a06a-24e927ae3412",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "50bcfea0-4f63-4927-87c8-2c4308075d07"
        },
        "item": {
          "id": "d1e25ebb-21ae-4959-8922-a6c2af81e98d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "7e2caa11-51c7-4e0e-bb87-2f8ae6d53d47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37cf7bcc-9f4b-47b3-8ff5-034d4f7b9ba4",
        "cursor": {
          "ref": "cbf42b09-0644-4f96-be47-bdb10454a418",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f72a4382-a663-4735-8aff-a92dcdf706a3"
        },
        "item": {
          "id": "37cf7bcc-9f4b-47b3-8ff5-034d4f7b9ba4",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "00076bbf-a847-4a4a-8f52-1ab4ce9cdae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b545c11f-c832-4c9b-a89e-2e38dae346b6",
        "cursor": {
          "ref": "610d62f6-a466-4f77-b21b-520fcbfc6f63",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "72b48147-ac7d-4ca2-ab64-36806045c552"
        },
        "item": {
          "id": "b545c11f-c832-4c9b-a89e-2e38dae346b6",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a6823ab0-c507-4fcd-97ce-b0fb6086bcdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df20f3cc-473d-4ba0-95b1-6377aa26c785",
        "cursor": {
          "ref": "3865e063-ffc8-4c68-a8a7-9ed720434de8",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "29cb1e08-478c-43cf-a50b-b7946b374347"
        },
        "item": {
          "id": "df20f3cc-473d-4ba0-95b1-6377aa26c785",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "45b46042-5451-4ef6-8534-6602d27361af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a63e8733-0148-4ed3-ad98-30b3511c2f05",
        "cursor": {
          "ref": "cff77907-99b7-4e47-90e1-57ee965b147a",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f9943cde-5647-4251-833f-66211e1ee161"
        },
        "item": {
          "id": "a63e8733-0148-4ed3-ad98-30b3511c2f05",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "77f95b88-7807-4a8d-8211-0788a179353e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b899cbcb-eb68-4d3d-8b8c-8fd397f42f5f",
        "cursor": {
          "ref": "eeafcc8e-bbe6-471c-ada4-1599cf8af7bb",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4ab1fb23-8eaa-484a-b10a-e1d599c658e3"
        },
        "item": {
          "id": "b899cbcb-eb68-4d3d-8b8c-8fd397f42f5f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "0727012d-b2b5-49a3-b97a-2b59bd129544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3a810bd-644d-47fa-a59c-2b92d72ac75f",
        "cursor": {
          "ref": "60588ce3-060a-403e-a5bc-f56fce0178d4",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6f57d60b-a51f-4f8a-a4ec-4d04f7659d7e"
        },
        "item": {
          "id": "c3a810bd-644d-47fa-a59c-2b92d72ac75f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "bcb89a31-3272-4434-ac2e-d479ee0b60d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "732d1ac1-97db-433d-8704-c94b1ae08f88",
        "cursor": {
          "ref": "57ad11de-2ba5-476e-9311-13169964afb4",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c7deae48-a584-4f48-8fe5-04ebcc05bbac"
        },
        "item": {
          "id": "732d1ac1-97db-433d-8704-c94b1ae08f88",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "78336d8f-fca7-4b26-9ece-e6bb680d8409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd52a541-c1ba-4f9d-9c61-7f1eb853da37",
        "cursor": {
          "ref": "5efea9d4-d15c-43a4-8c9a-4d6b9cfd8252",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4b76f705-8153-484e-8f13-7864bae1e197"
        },
        "item": {
          "id": "dd52a541-c1ba-4f9d-9c61-7f1eb853da37",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "73816c72-5706-4787-9956-61ddbb9cee72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eced216a-76d3-4692-a3a5-03a1d59c26aa",
        "cursor": {
          "ref": "3fbd3737-e5bb-4945-b12d-49f127632019",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4516a85b-f9a3-452c-88aa-6220681f4d92"
        },
        "item": {
          "id": "eced216a-76d3-4692-a3a5-03a1d59c26aa",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2be127b4-aa01-4ee2-8a30-d8f0b657197e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1aa039-4500-4ec1-a88f-e848b45e7920",
        "cursor": {
          "ref": "ac929348-7291-419c-a257-23c6b6b3aecb",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "99058a61-68a8-4a73-91aa-ae97215b190e"
        },
        "item": {
          "id": "9c1aa039-4500-4ec1-a88f-e848b45e7920",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4c90372a-31c0-4a08-a9a7-23c7af8ff7d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d95f081-defb-4150-bb09-47d19a804f55",
        "cursor": {
          "ref": "f5b4df37-73f2-40ad-9cf7-63376b4691fb",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f139cbd2-487b-437d-99db-86be110ddec3"
        },
        "item": {
          "id": "7d95f081-defb-4150-bb09-47d19a804f55",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e01168a4-cfd0-4b34-92bc-e405278925ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13122d72-1ccc-4ad8-a4ef-39657cd394be",
        "cursor": {
          "ref": "49b78d49-d9bc-4c07-af52-c89b35c14207",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f83dff4d-5e75-47a2-a9cd-89ec0efdb339"
        },
        "item": {
          "id": "13122d72-1ccc-4ad8-a4ef-39657cd394be",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "dd198556-c682-4835-ab75-aa3bde351f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f255ecd3-9dc8-4bbf-bb3b-e93c6a601a5f",
        "cursor": {
          "ref": "ac6297e5-5c7a-4e35-9870-d2744fb0af27",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3e6c9227-e07e-45a1-a378-a0821859f218"
        },
        "item": {
          "id": "f255ecd3-9dc8-4bbf-bb3b-e93c6a601a5f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "36d3ba44-3f0a-4dfb-acbb-b86903eb6bed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90a92e10-4b94-4721-882b-c7142f8f111b",
        "cursor": {
          "ref": "fe43eaa8-b403-4d39-87ac-6e52bd1e51a2",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1a309b6e-1ef1-4f28-8cc8-651af3f1693b"
        },
        "item": {
          "id": "90a92e10-4b94-4721-882b-c7142f8f111b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "21f6b8ee-fbeb-4fd4-9a8c-582b0c8dbf8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1edecf51-9d25-4cbd-9e79-398132b2e1b2",
        "cursor": {
          "ref": "da2f489c-e09e-419b-84c3-8079d780738b",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b22c8486-7b7f-4954-9402-0ee36b2ed682"
        },
        "item": {
          "id": "1edecf51-9d25-4cbd-9e79-398132b2e1b2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "81009594-92fb-41a4-b181-1f0985e3c2b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11898aa-9af8-4135-a886-ffa9b23aea45",
        "cursor": {
          "ref": "a87cf7d2-fd5b-4e04-a8ba-4ba07bca08b1",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d1f8aba1-2cc5-4618-961c-1be11d2c8294"
        },
        "item": {
          "id": "d11898aa-9af8-4135-a886-ffa9b23aea45",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "32d761f4-96c0-4396-a102-458ca2f20d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c297ee88-db9f-4925-8a81-e5b030a8ae4c",
        "cursor": {
          "ref": "c00511ff-8dfe-4630-a126-34f8541976b7",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8914f294-180e-4d80-9d9b-5e1befdf7992"
        },
        "item": {
          "id": "c297ee88-db9f-4925-8a81-e5b030a8ae4c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c9151b6c-beec-4ad0-b08c-f98ee6667cde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132e4e57-b4b5-479d-bb61-fe8612d705cf",
        "cursor": {
          "ref": "5448b39a-b344-416d-a687-da0aef202700",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "850d8564-a313-45a1-8cef-1d01f64a2bc8"
        },
        "item": {
          "id": "132e4e57-b4b5-479d-bb61-fe8612d705cf",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7072a42f-7427-41cc-86e1-e26e673df64f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d584675-5a8b-433d-9b3a-e59f934694eb",
        "cursor": {
          "ref": "188efe8f-e30d-4a6b-ab5a-5c5160d3cb44",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "14388580-a86d-4a83-bbff-705e80b25ab3"
        },
        "item": {
          "id": "4d584675-5a8b-433d-9b3a-e59f934694eb",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "116c5f29-f8f1-4f5d-afac-4db4ead279ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3108a37d-4d99-4639-a919-15e67899baff",
        "cursor": {
          "ref": "72d6ff94-a913-4655-808e-fe74f2a194f8",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5373d1bd-9a72-4355-b5c3-9fd0d135d030"
        },
        "item": {
          "id": "3108a37d-4d99-4639-a919-15e67899baff",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b1c840a8-bfc5-46bb-bee0-c4a23bb14089",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 251,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "4569032a-9191-4ceb-8545-bccb43b2e530",
        "cursor": {
          "ref": "ed883535-25c3-404f-8153-1dc2ff3fb5cb",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c068a821-0fac-4f29-b7b7-11da1596d553"
        },
        "item": {
          "id": "4569032a-9191-4ceb-8545-bccb43b2e530",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "89b17b52-7a82-45e6-9a6d-1097bbf7817f",
          "status": "Created",
          "code": 201,
          "responseTime": 2109,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "85d56c96-5158-4e7a-b2d3-e2449aecd73e",
        "cursor": {
          "ref": "b0938196-c445-414e-bb21-a16058ac526e",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "988d6071-8ddf-44c6-a803-c138f4f5bb2d"
        },
        "item": {
          "id": "85d56c96-5158-4e7a-b2d3-e2449aecd73e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ee011cc5-cfc6-4b84-bc8f-f1bac61b0bde",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 202,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "338c6a68-9b9b-47a2-8430-0aa5381474f6",
        "cursor": {
          "ref": "7fac3ae1-4d0d-4891-b364-a44096a18ce3",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a58e3d1b-2482-4ee3-b203-c30bc1b96ef7"
        },
        "item": {
          "id": "338c6a68-9b9b-47a2-8430-0aa5381474f6",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "fd8e68fa-b85b-4796-a43a-aa09ce6b95a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a604448-f07b-486b-a19c-a1bf375fbc9f",
        "cursor": {
          "ref": "c1e98f89-5c1e-428d-bbfa-1786ef0c8bdf",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0ec49d5c-520d-4e3f-a3b2-68fc2f9ff7ee"
        },
        "item": {
          "id": "3a604448-f07b-486b-a19c-a1bf375fbc9f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8a8eff4d-51b5-4afa-a7e3-6b7fd0852f0d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 165,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "1aef6a48-ae2e-4a0e-a7a6-a86cb5502966",
        "cursor": {
          "ref": "d29862eb-70d6-4300-9d7f-6508dbb3639f",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3a7ef0ec-a969-43e7-851c-d8cb8fa68456"
        },
        "item": {
          "id": "1aef6a48-ae2e-4a0e-a7a6-a86cb5502966",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "38207faa-ffdd-4f7e-9e04-99381271d8b7",
          "status": "Created",
          "code": 201,
          "responseTime": 1240,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "a2377780-ce08-499b-b2fd-5393059aa404",
        "cursor": {
          "ref": "b4a954b7-10be-43b8-b9d8-99972a424cde",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "4b051408-5f29-4fe3-a858-484b3c611412"
        },
        "item": {
          "id": "a2377780-ce08-499b-b2fd-5393059aa404",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3bb2984f-0a0f-4292-8834-50dc4af27261",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 178,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "56f245c4-ed2e-4b2d-802e-d56eba60eb27",
        "cursor": {
          "ref": "3666625e-8d88-4070-8cfc-911a96d3d175",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3e2f8d23-00c3-48d0-8e1b-10b72f847d5d"
        },
        "item": {
          "id": "56f245c4-ed2e-4b2d-802e-d56eba60eb27",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b670d560-c978-4b6c-878f-91a71a5f341c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1079,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "10564889-75d8-44a8-a1f9-14a887662e63",
        "cursor": {
          "ref": "928f5b38-db2d-4750-b69a-b72af065b3ce",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7ad15cc8-62ab-4bef-b01b-6109a08841f1"
        },
        "item": {
          "id": "10564889-75d8-44a8-a1f9-14a887662e63",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "4a587d22-f943-4879-bf44-7a2d68b2a120",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 172,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "bf7d7b89-bfd9-42a5-a013-fbdb7e1c1b1a",
        "cursor": {
          "ref": "d0a8beab-80ce-4f51-99dc-3cbc611dc8d5",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c42c90ae-8c99-4527-baca-81ad606e09ec"
        },
        "item": {
          "id": "bf7d7b89-bfd9-42a5-a013-fbdb7e1c1b1a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4024abe2-b3b3-4467-9e3d-c1ed8cdc97d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 170,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "d821e912-197e-4b9f-a48f-7c16f4a4e715",
        "cursor": {
          "ref": "579aa63b-86de-4c07-9397-af050386191e",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "7d9e94d0-9b2e-4bbd-a4c3-1b03159d9e48"
        },
        "item": {
          "id": "d821e912-197e-4b9f-a48f-7c16f4a4e715",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2bab1c0f-ea80-4386-8e6b-82ab27741a16",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 179,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "36ca086f-187f-4345-83bc-50413f6b17f9",
        "cursor": {
          "ref": "ffe65170-15e7-4ba3-ad8d-63d6057ad2f8",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e969d001-6fcd-427e-bf4e-e7f8f78fda1e"
        },
        "item": {
          "id": "36ca086f-187f-4345-83bc-50413f6b17f9",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c4d10e0a-c89a-421b-a95e-d41010622dfb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 167,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "029fb865-2b8a-4cec-b043-5e951b183d66",
        "cursor": {
          "ref": "d44ed8f6-fc39-41c9-8a13-0e6a5c54c8d2",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7094553a-021e-4e3d-b2ba-134e865033b4"
        },
        "item": {
          "id": "029fb865-2b8a-4cec-b043-5e951b183d66",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b568e469-6145-45a9-a833-99fcce71e9b7",
          "status": "Created",
          "code": 201,
          "responseTime": 1121,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "1a588f46-91db-42a5-be75-4ef77f18bfae",
        "cursor": {
          "ref": "b0b09dd9-92f1-449f-9b7b-655008ae763c",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "520e453e-3b53-4324-8dfc-1c6c4870d928"
        },
        "item": {
          "id": "1a588f46-91db-42a5-be75-4ef77f18bfae",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "72004573-23ba-4d14-b4ba-ee14a9f9280b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45329cc1-b4fd-4e83-b9cf-3c8800e02110",
        "cursor": {
          "ref": "ae76c711-3416-4f75-9f17-b158610cbcc5",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "11f8ca63-d12d-4d57-99e9-635273cf7c17"
        },
        "item": {
          "id": "45329cc1-b4fd-4e83-b9cf-3c8800e02110",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "14d45647-5b3b-407f-bb6c-2e202530e855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b9a358-782f-449f-bc2c-fe9e308ab29f",
        "cursor": {
          "ref": "73c0cae4-7d5f-49c2-a915-2ab2dd81be31",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8bc12d71-c99d-4b26-b258-1e72f38edf32"
        },
        "item": {
          "id": "45b9a358-782f-449f-bc2c-fe9e308ab29f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "12e33a2a-00e0-4549-b8f2-360d6fe4b097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d66d70-8032-490e-9446-109201160bcb",
        "cursor": {
          "ref": "d3a011ce-cabb-44e4-a204-646284b244a4",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3a0f2fb3-f9e2-4b7a-8e39-4d77d80efd3e"
        },
        "item": {
          "id": "12d66d70-8032-490e-9446-109201160bcb",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "90b269df-b144-4ca4-b227-fa85be8e2c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4c6334-cb12-4aba-a031-de9cb0658a13",
        "cursor": {
          "ref": "f72d377a-d8e2-49eb-a350-9558c4620b5f",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "66cbbff5-394e-440c-9a2e-93d0659ce922"
        },
        "item": {
          "id": "df4c6334-cb12-4aba-a031-de9cb0658a13",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3e8d34da-809f-49c5-98ac-5f670890cce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5cac82b-a666-499a-bd12-e8ab497d8339",
        "cursor": {
          "ref": "67ffbc7e-78e3-4281-bbec-bdac60683491",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f696a588-a238-4e9f-9847-2b6bc78e9661"
        },
        "item": {
          "id": "d5cac82b-a666-499a-bd12-e8ab497d8339",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "3325c4fb-eceb-4a0d-a250-a6eb91c9c95f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0975a37f-01cd-40b5-973e-1b7fad0971ce",
        "cursor": {
          "ref": "a8ffcc51-86cc-4376-90b0-130772c94a1b",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a474e694-63c3-4678-a1da-4d9a52636993"
        },
        "item": {
          "id": "0975a37f-01cd-40b5-973e-1b7fad0971ce",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "43e0a365-574c-47c5-8359-d3b37a87d883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc19a0c-00f2-4187-bb60-895397b1a7c4",
        "cursor": {
          "ref": "e25405c0-ef4d-4d81-880f-4d0bd14724b0",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8760b05c-d4e8-40f0-a592-7af50f68dba2"
        },
        "item": {
          "id": "4fc19a0c-00f2-4187-bb60-895397b1a7c4",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a8fb06db-efae-4a38-9d5a-655a2d64cc16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28993834-b48c-4e2a-9ae1-ca7b4c79132d",
        "cursor": {
          "ref": "d979c225-a677-48ec-b32f-d65532af2918",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0e82de62-ac19-455d-a757-d8083834ab89"
        },
        "item": {
          "id": "28993834-b48c-4e2a-9ae1-ca7b4c79132d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9ce7e64a-f2f9-401c-b696-34b26d1464db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6e3bdd0-1f09-4be2-8651-5e1f908daf8d",
        "cursor": {
          "ref": "91316a4d-6e3e-4d33-8415-11db197579cb",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a973f835-8454-4d4d-9518-5842591c4d75"
        },
        "item": {
          "id": "a6e3bdd0-1f09-4be2-8651-5e1f908daf8d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3fe6ccde-4388-4ca5-8744-84ab72bedda3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d0c233-421c-4315-b846-89795d305f84",
        "cursor": {
          "ref": "1e4abd21-0838-4109-81f3-096e2a03a153",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "00b85890-8b05-44d0-a95d-a851933763ef"
        },
        "item": {
          "id": "14d0c233-421c-4315-b846-89795d305f84",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6a637ebe-6bc8-4f21-9436-ce47592c77bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d2940dc-2786-475a-a894-02a8a75046ad",
        "cursor": {
          "ref": "15108aec-c7c6-4156-84f0-2dddacd95719",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "cb82663d-0933-49a8-b1e4-352b8ddd62da"
        },
        "item": {
          "id": "7d2940dc-2786-475a-a894-02a8a75046ad",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "658e5b79-29c8-4c7c-9efb-004c8714c7bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e60475e8-59b0-4c69-83fd-df096c27682e",
        "cursor": {
          "ref": "4d167f48-ecb7-44dc-9bcf-c992764bc76b",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "26dfe75e-9b08-47af-aa7d-93ae6532f1ff"
        },
        "item": {
          "id": "e60475e8-59b0-4c69-83fd-df096c27682e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7fff39af-cf26-4146-9010-109f5a2a7de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf8e825-f62d-4dad-8c31-39d509378deb",
        "cursor": {
          "ref": "084d8f56-793a-4c88-ac48-008159621283",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "58bc3e34-3f03-4b13-a60e-f732cc3c049a"
        },
        "item": {
          "id": "5cf8e825-f62d-4dad-8c31-39d509378deb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "5987faf1-b706-4d61-8376-38d9ecf4c05e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 907,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "6232899e-8866-44c0-aa50-4a8f00649117",
        "cursor": {
          "ref": "ed59781f-6038-49ed-aad7-163d8786b983",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "4f508431-f9d8-4630-90b0-ebfd25de523c"
        },
        "item": {
          "id": "6232899e-8866-44c0-aa50-4a8f00649117",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3debd95c-ca12-4f0c-80c3-887f6bd23b01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1354,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "a2df9278-40fa-4930-bc1c-7956042ae6f6",
        "cursor": {
          "ref": "4d97ea76-a84a-4dab-915c-f3131a86758a",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b204113c-cfb6-49bf-8bd8-840c123d0b24"
        },
        "item": {
          "id": "a2df9278-40fa-4930-bc1c-7956042ae6f6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "23ab95ec-a6d5-458b-9607-ff51398f52b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 159,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "3e0e206e-5326-44b4-89c8-4396e37e41da",
        "cursor": {
          "ref": "38bbc86d-7324-4588-acd7-d0b7089baa97",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b7c85f93-b07f-4691-b39e-26457bfa6f8d"
        },
        "item": {
          "id": "3e0e206e-5326-44b4-89c8-4396e37e41da",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "63df8948-bdea-48f7-9325-08bb96198070",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 901,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "1270451b-2e94-48f9-b789-81dc040a9978",
        "cursor": {
          "ref": "e315af72-dcb1-4357-b01b-e32790ab1957",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b1cebb74-5a61-4531-9188-932852fe217e"
        },
        "item": {
          "id": "1270451b-2e94-48f9-b789-81dc040a9978",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "9c6963a9-f113-4d92-8058-ff856261257f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 165,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "970762e8-7b61-4ca9-995c-a839e4d59a50",
        "cursor": {
          "ref": "5c385408-cd21-43d3-afef-1eac3960fbf6",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "649b7430-b382-43f4-af93-67de15974eca"
        },
        "item": {
          "id": "970762e8-7b61-4ca9-995c-a839e4d59a50",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "9a195e18-103f-4c23-b9f0-a9aeafc51f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc4378d-14aa-4a04-bf07-80224a48b630",
        "cursor": {
          "ref": "fd1782aa-f95e-4f47-9869-a564f560a80a",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ec2f3391-944f-482f-9f3b-d21f49f64099"
        },
        "item": {
          "id": "1cc4378d-14aa-4a04-bf07-80224a48b630",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "647fb03c-bcc9-4fcc-b399-a868caee2602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "938a5dde-dace-45c5-af7d-a1002e94efc8",
        "cursor": {
          "ref": "21d2d91c-3bab-4729-9aa4-8675cee9968a",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a50a4855-aa4b-4c76-a9de-67c1514bf504"
        },
        "item": {
          "id": "938a5dde-dace-45c5-af7d-a1002e94efc8",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9aa6ba72-d5d0-4455-bd4c-33fc0f8ece3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff4f40f-10d9-4cfc-8381-6d8f50fd3598",
        "cursor": {
          "ref": "292ca5fc-6c75-420f-a232-55281fc4456f",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "433ac116-c368-4d3c-96db-f94ad25f6f78"
        },
        "item": {
          "id": "6ff4f40f-10d9-4cfc-8381-6d8f50fd3598",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c7d4a4c8-016c-47a8-9c8a-f167eb6aa7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0d099f2-acad-4360-b5ff-f45e534b6bb0",
        "cursor": {
          "ref": "faa9d0a9-274f-413f-a072-c60671b78ea1",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "de106e82-4787-469d-b091-153a14312dae"
        },
        "item": {
          "id": "b0d099f2-acad-4360-b5ff-f45e534b6bb0",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e7db7ae4-ffc4-4b7f-b7d2-c9486aa59688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1538522-7440-4097-93d6-728a5955d77a",
        "cursor": {
          "ref": "16c2ee29-00bd-4cfa-856a-9392ff48cb32",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "dfab3ad1-4792-43a1-8783-4b1edf168ee1"
        },
        "item": {
          "id": "d1538522-7440-4097-93d6-728a5955d77a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "5aa37945-5f1f-4e67-a4ce-0f7c66edf229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6abd671e-335d-43f4-8392-1628c9fb029d",
        "cursor": {
          "ref": "57592c46-2249-46e0-838f-b4d0bd962d33",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "357b3ebc-1a48-4ba7-94c0-69ee27670c39"
        },
        "item": {
          "id": "6abd671e-335d-43f4-8392-1628c9fb029d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bc1e66d3-6997-4136-9423-17f64be0222b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f2cb1a9-997c-4a4f-9b65-3ecaa03d3538",
        "cursor": {
          "ref": "29068dba-6d87-4d99-8841-fab198bf8b4a",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ce073d29-b73f-4b2f-b2e3-39c09113092f"
        },
        "item": {
          "id": "4f2cb1a9-997c-4a4f-9b65-3ecaa03d3538",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "baefe32f-dfa2-4f7f-9d19-cc334b4012f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82334aa6-3796-497d-aef3-1f6b7b17ef2d",
        "cursor": {
          "ref": "9090cf59-ffe7-4abe-aea3-94bb03b5300a",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d3fb67ca-c42b-45b2-8744-0baa0ce8c1d6"
        },
        "item": {
          "id": "82334aa6-3796-497d-aef3-1f6b7b17ef2d",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "1144f0d4-2087-4307-881f-b838d37c6bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "099c681c-196f-4ce4-add8-28a16f1346b8",
        "cursor": {
          "ref": "be4cf03a-6bf3-4f12-9262-b0a48387ec67",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "232362b8-a1d3-429d-ac5b-76fdbd84a803"
        },
        "item": {
          "id": "099c681c-196f-4ce4-add8-28a16f1346b8",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "5dc9f0c0-d621-4ce4-95b6-11de8a8ca6cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48cdb666-a7b2-43fd-979b-4e561dae8d0a",
        "cursor": {
          "ref": "94bf3f77-d8a4-4f4c-a10e-b051a38c3314",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "26c5f632-97e9-4b9c-89cc-3974a4856a8e"
        },
        "item": {
          "id": "48cdb666-a7b2-43fd-979b-4e561dae8d0a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "52b02127-bc1b-49f3-95c2-ce43def03524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "723537e8-48dc-4a69-bc11-3f6874cbdd85",
        "cursor": {
          "ref": "fa818020-d17a-4903-a438-287acfd7216f",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "cc9a5c39-8a97-4f1e-a6aa-87f622cdd6fd"
        },
        "item": {
          "id": "723537e8-48dc-4a69-bc11-3f6874cbdd85",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "fa41312d-418b-4278-b6ee-661d111fe530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad542242-54de-4c5c-84ad-137ea337a7cd",
        "cursor": {
          "ref": "46cb2840-aebc-4550-8f29-ac5edd3466f8",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "514fd84d-f8d0-4654-bd4c-bf6d18e0d706"
        },
        "item": {
          "id": "ad542242-54de-4c5c-84ad-137ea337a7cd",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "025034e3-fcd6-4df8-b067-42a51e440f81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb222229-87ab-4055-8031-ecb6494bdf71",
        "cursor": {
          "ref": "1816f289-6542-460d-9416-cd472a89d879",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "cabcdf65-c9e1-49b2-96b3-4d75d9069a40"
        },
        "item": {
          "id": "eb222229-87ab-4055-8031-ecb6494bdf71",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "bdbf4887-3481-4cfb-9fbc-20ccc8f2667f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b77ba8-d10b-4483-a631-f8a4769b4cba",
        "cursor": {
          "ref": "acce1220-6d0a-4c7d-aa6d-5e58a7876758",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8aee64a7-4c79-450f-ae65-ce094e2ef79a"
        },
        "item": {
          "id": "d0b77ba8-d10b-4483-a631-f8a4769b4cba",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c2c9bf6a-4232-46b4-bbf5-3c077a9b67e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d9bf96-7414-4086-84cf-7775d6633a7b",
        "cursor": {
          "ref": "bc6d2105-f2ed-47ac-bb9d-d2eef63720e0",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2ade1046-e535-4aed-bf00-37ac9c08d75a"
        },
        "item": {
          "id": "63d9bf96-7414-4086-84cf-7775d6633a7b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a4a2a753-512f-4e99-8d86-0802d89a58fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42045d89-4d5e-4324-85a7-60904430acdf",
        "cursor": {
          "ref": "becfe7da-8d92-44c8-8c13-19fbaf42395b",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2e927424-dfde-41b2-9fcc-04a719f5b8b5"
        },
        "item": {
          "id": "42045d89-4d5e-4324-85a7-60904430acdf",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "82c2b820-e2e5-494a-a452-21a262e68c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf06bbe3-56e2-4a4c-986f-b4c5cbfaa427",
        "cursor": {
          "ref": "eb5cd4b4-9ab4-4efd-8a83-965d4ba73c0d",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7943c72c-051e-45a6-8c19-2fb6ca110223"
        },
        "item": {
          "id": "cf06bbe3-56e2-4a4c-986f-b4c5cbfaa427",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f67a9a63-3726-4da8-a4d8-e5efee33b898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63812c79-d038-4fa3-99fa-71c9087c871d",
        "cursor": {
          "ref": "7a15cb23-65c9-404a-a491-ef01d09be25f",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "90f8197c-c49a-4fb8-8bd1-656b0d4e68d0"
        },
        "item": {
          "id": "63812c79-d038-4fa3-99fa-71c9087c871d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b1916906-bf28-4a0d-a409-f2d28383ef46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c5bc34-5b77-4d92-b842-96262b9d29d9",
        "cursor": {
          "ref": "6b91489c-940c-4ee2-b262-994f7cd232ea",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "8c67914a-7537-4a76-8e00-47000c5369d6"
        },
        "item": {
          "id": "c1c5bc34-5b77-4d92-b842-96262b9d29d9",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "849124ec-3a01-457b-a37a-4ef8d45e46ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a514bb-235e-421c-9c0d-c1f9432e401c",
        "cursor": {
          "ref": "59c3502f-1bb4-436c-bf6c-0af58a3a678d",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8f060c2c-88df-407f-8738-cb82838185ca"
        },
        "item": {
          "id": "d9a514bb-235e-421c-9c0d-c1f9432e401c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f2d3f960-b2e6-4dd1-8ca5-7715e9df96ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d21d72-38fc-4f82-b485-e781cf17e187",
        "cursor": {
          "ref": "17f862a8-96c1-4169-894b-d841ebb33ca2",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "af4be316-7405-4b3b-84f1-ba843f4acb82"
        },
        "item": {
          "id": "41d21d72-38fc-4f82-b485-e781cf17e187",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "57730ff0-5d30-484a-a733-47bbc71506f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04fba6a2-955e-4454-8684-a5f7997510f7",
        "cursor": {
          "ref": "24f53f3d-125e-4af6-b410-9afdcd8b9ea0",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "81c32144-a460-42a5-9228-d542f44d545f"
        },
        "item": {
          "id": "04fba6a2-955e-4454-8684-a5f7997510f7",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "716b568a-425e-4a5d-9348-38f54e2ac4c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe5d036-35b2-499c-95d6-d5e51a1da0ab",
        "cursor": {
          "ref": "8411a23b-d7f8-4547-8508-45ce715c9000",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "baf6dbe0-6bb5-4ab1-8f38-6f3b300c9e23"
        },
        "item": {
          "id": "dfe5d036-35b2-499c-95d6-d5e51a1da0ab",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "35c96c6f-5e39-4361-9486-4c17459f22a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8f9d73-d3d7-482e-b1c5-d0d2186449af",
        "cursor": {
          "ref": "5ffb0a1f-19aa-41b5-b535-35b509c1675a",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "37f1e67b-f383-4772-8885-4f2dad352570"
        },
        "item": {
          "id": "0d8f9d73-d3d7-482e-b1c5-d0d2186449af",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "49c864a8-eab2-40f0-a503-c5c90aed1fab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73fb7c84-7167-4edd-af9d-0d053c3dc02f",
        "cursor": {
          "ref": "b60a143c-ba92-4ca3-a137-f0ea15db1012",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a9ceea31-997b-4870-b613-8ee4f9f21626"
        },
        "item": {
          "id": "73fb7c84-7167-4edd-af9d-0d053c3dc02f",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2c0f452c-c752-42b5-b74a-3a748f36762d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dce047a-a5a6-48d0-bd9c-2822f431fda1",
        "cursor": {
          "ref": "527d546f-6d51-4083-b0f4-f7368498f8b9",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "25e21676-cec1-468c-bd8b-3d5b04929846"
        },
        "item": {
          "id": "9dce047a-a5a6-48d0-bd9c-2822f431fda1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c65a22b8-bfa6-42b5-89f9-64bd45443bd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f0ffef-a202-4b42-bc59-6ef781d90361",
        "cursor": {
          "ref": "93f8d6ac-1e89-44cb-91c4-dcef52ec8c40",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "77ad6e84-4ff3-450c-bc3d-18ebed1c178f"
        },
        "item": {
          "id": "70f0ffef-a202-4b42-bc59-6ef781d90361",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e535d947-a271-4ee0-a457-d9753645484f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "740d55dc-453a-4472-a27b-54ef30baaa77",
        "cursor": {
          "ref": "e260e503-edcd-4272-a71e-298da46eee6e",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ad4ee5ad-1d38-465a-baa7-68520e1254a0"
        },
        "item": {
          "id": "740d55dc-453a-4472-a27b-54ef30baaa77",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a6d9db50-4ff7-4fae-86f4-a7b36eec89fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d67ea9c8-177a-43e1-a7f1-6de43f11b26b",
        "cursor": {
          "ref": "3ba3f737-fa2f-4e33-b1f3-3d1b885078e2",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ca5f4c30-e01d-405b-9578-24afeb19cefb"
        },
        "item": {
          "id": "d67ea9c8-177a-43e1-a7f1-6de43f11b26b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d9578fa3-b12e-47ee-b358-ca3df75e6744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad377453-65a2-4198-860e-a8e849688755",
        "cursor": {
          "ref": "ef362b6d-e2d0-47a4-8476-758bb42d19ad",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "14714f9e-9ea3-44c5-9c61-9e40339a0f4d"
        },
        "item": {
          "id": "ad377453-65a2-4198-860e-a8e849688755",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8d8cc45d-6e0e-43f2-8cc7-522750e09066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c65074-aa9e-4300-91ac-2dfc4fe5fd20",
        "cursor": {
          "ref": "19fecf46-dcf4-43e3-8e25-76a2b222926b",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "af06aa0a-a171-4459-b1a5-bfea9986005a"
        },
        "item": {
          "id": "34c65074-aa9e-4300-91ac-2dfc4fe5fd20",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "58a1e612-2eda-40bc-b79b-8db39a645cce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06020e8e-4426-4fce-ba9b-fd5d16acccb1",
        "cursor": {
          "ref": "f9b4f46f-37fc-49fc-b9c2-42c6025d5a5a",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "253d0ad9-bf2b-435c-9903-ba87b4701e18"
        },
        "item": {
          "id": "06020e8e-4426-4fce-ba9b-fd5d16acccb1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "52f12ff1-128d-49fd-a2e9-a808bdfcfb6a",
          "status": "Created",
          "code": 201,
          "responseTime": 1204,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a7236c4-bf52-44ac-a6d8-08d57b7273cd",
        "cursor": {
          "ref": "fd818a92-9771-4b39-a030-565ddfbccd9d",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "004e8b55-4e64-41d4-815a-35d1711d4b53"
        },
        "item": {
          "id": "3a7236c4-bf52-44ac-a6d8-08d57b7273cd",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7f4e226c-0e23-49d3-8b05-da443003b570",
          "status": "Created",
          "code": 201,
          "responseTime": 1091,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4497c1ea-7972-425b-8469-7c7b2494331f",
        "cursor": {
          "ref": "9a9a3d8f-c74d-485e-a057-1f03a46293b7",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2d93b7ac-67a0-48ab-808c-867017c22712"
        },
        "item": {
          "id": "4497c1ea-7972-425b-8469-7c7b2494331f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b45d0d7a-3430-4eb0-b324-d50c1d4a6db9",
          "status": "Created",
          "code": 201,
          "responseTime": 1108,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba525c7-c5ab-4d5e-be3a-1f9b8525aa73",
        "cursor": {
          "ref": "4fbe3785-5f96-47a2-af8a-b05150e4d470",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "94ce245a-c041-4ff3-a54b-8bdddd4204b2"
        },
        "item": {
          "id": "cba525c7-c5ab-4d5e-be3a-1f9b8525aa73",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "48436245-2ccf-468e-86f2-c4b7cd528ef0",
          "status": "Created",
          "code": 201,
          "responseTime": 1065,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0d6ed11-4749-436d-9946-0cefe94e85a6",
        "cursor": {
          "ref": "25c9f570-2a05-4c25-8b60-a5fac8a53a70",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "86ba2b8c-09f5-48e0-ab0e-b2290f42883b"
        },
        "item": {
          "id": "b0d6ed11-4749-436d-9946-0cefe94e85a6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "64f63806-f8a4-4fab-9d35-0b81d051c9ce",
          "status": "Created",
          "code": 201,
          "responseTime": 1588,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a9cf942-6909-4f7a-a228-0f563e27b365",
        "cursor": {
          "ref": "df77986d-db9c-4db8-8713-b283d22bd1e1",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "25f2f645-8764-404e-ac94-fb1be8d773d5"
        },
        "item": {
          "id": "4a9cf942-6909-4f7a-a228-0f563e27b365",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0b5c0080-794a-4633-8989-d504bd561cb5",
          "status": "Created",
          "code": 201,
          "responseTime": 1086,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a60c87-0d93-4483-94e5-207071991d27",
        "cursor": {
          "ref": "018f4354-a532-4fa0-bb63-4e1c85988102",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b25bf94b-a45c-4d23-9c56-d85ec1043a23"
        },
        "item": {
          "id": "e3a60c87-0d93-4483-94e5-207071991d27",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b8fbb0e0-a667-426b-a0a2-dfb190c46133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee7cac64-25a0-468c-8545-623df22abfdc",
        "cursor": {
          "ref": "23c01f58-548e-4796-a172-245e200d7920",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2f1bf289-5d6b-4f40-b3cf-f222fb634cc0"
        },
        "item": {
          "id": "ee7cac64-25a0-468c-8545-623df22abfdc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "79f5e931-f9a5-4656-9d28-d49889c8c50b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec3d818-7658-4d1f-865d-17af97559c71",
        "cursor": {
          "ref": "3bd09e81-1f4e-4d62-add9-f0865e7dc42d",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7d686dfc-59cc-46c6-83ba-239c33c63ca7"
        },
        "item": {
          "id": "1ec3d818-7658-4d1f-865d-17af97559c71",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "65de62c7-0beb-4c22-91f4-147eaee7ad4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ccb8e0-1a6b-4fe2-83c8-65dab35ca864",
        "cursor": {
          "ref": "6c21c697-6dad-40b6-a031-99adfc550d2d",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2cedb905-a281-491a-8a92-ffc6750de224"
        },
        "item": {
          "id": "f9ccb8e0-1a6b-4fe2-83c8-65dab35ca864",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ba482319-3d00-4c9b-82ee-d1e033812136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc6b896-1e07-4f0e-893f-c80c6b32cf51",
        "cursor": {
          "ref": "0bad47ad-fd12-408e-8355-364c5a4c74eb",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a200f50a-cbd8-47dd-926c-6d214ccb04fd"
        },
        "item": {
          "id": "8bc6b896-1e07-4f0e-893f-c80c6b32cf51",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "24f99adc-7499-4f38-b8b9-a5395b87918a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4045873d-0ef0-4363-a090-cd2fe3465fd5",
        "cursor": {
          "ref": "da4f0cc8-42d2-4aee-acd1-7c93ae74f397",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e347b9cc-4a7c-464e-a326-b0b8a5d26f94"
        },
        "item": {
          "id": "4045873d-0ef0-4363-a090-cd2fe3465fd5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "93208ed3-8847-4a81-9c4c-b5a639a4d5cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc5e723-28b5-4b1c-b079-7786f75ac7bd",
        "cursor": {
          "ref": "761c03e2-77a3-4c40-a6d6-276f32be400a",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2aabbc82-94fb-43c2-a778-2bafbcd9ec5e"
        },
        "item": {
          "id": "3bc5e723-28b5-4b1c-b079-7786f75ac7bd",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "15ea910a-e4ba-46e0-9090-44c03284ee16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c666840-a949-4feb-9439-fe8e306475ab",
        "cursor": {
          "ref": "98f465be-e99e-4f1f-9ba4-08f8d012f6dc",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4f7b13bb-b0ea-4e7f-b71a-889506564761"
        },
        "item": {
          "id": "0c666840-a949-4feb-9439-fe8e306475ab",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "193f8e74-9173-41df-9901-76dd76079dd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae6dd657-ba3d-42e2-8c19-02cfc9036dd0",
        "cursor": {
          "ref": "cbd0ed1c-a811-4d0c-9256-b255985c9a4c",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "75fc86e1-7e62-4ee2-a3a3-e85c0e8ac6f5"
        },
        "item": {
          "id": "ae6dd657-ba3d-42e2-8c19-02cfc9036dd0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9add02b1-ba59-4c60-848a-e92e989c39cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5a1c1a3-f136-4ecc-9fe0-115c84216dc7",
        "cursor": {
          "ref": "b64e18d5-79da-4354-b693-86326d47ad22",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b2335554-d111-465e-ad9c-024602208670"
        },
        "item": {
          "id": "c5a1c1a3-f136-4ecc-9fe0-115c84216dc7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ab55e6db-2c6a-40e0-8ba3-2ef582690851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "940c6d3e-699f-4670-a009-432065e82bbc",
        "cursor": {
          "ref": "8eebb072-de54-4b49-8e2c-475d6ab7e547",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5c0c8c2a-23ce-4719-afe5-6d15a1eeb4ad"
        },
        "item": {
          "id": "940c6d3e-699f-4670-a009-432065e82bbc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "27e5745b-a43f-4950-bbb8-d1cdc078d552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c190355-8a2a-475e-9973-052d5ba0858f",
        "cursor": {
          "ref": "a45c43cd-0ec2-45e3-92a8-c0139b795acd",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f149fd2a-19d2-49dd-b838-608de749bd17"
        },
        "item": {
          "id": "5c190355-8a2a-475e-9973-052d5ba0858f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5cde705e-8e98-4926-af3d-4de582fe1138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65fc01b3-0f83-4bfb-add4-1eeebd11d724",
        "cursor": {
          "ref": "1cf4099c-8d09-4ead-8caa-9ff677295e8f",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "463b8060-be11-4a90-b45b-ed39e0a6c72d"
        },
        "item": {
          "id": "65fc01b3-0f83-4bfb-add4-1eeebd11d724",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "665432a0-c24f-40cf-b11d-d7d9844e502d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c6026f-1315-464f-a2bb-6f8d05b92032",
        "cursor": {
          "ref": "b1736b5d-372f-4229-80c6-021fde15be9f",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b0ade725-e98c-46ad-9dec-f796e64d70f6"
        },
        "item": {
          "id": "22c6026f-1315-464f-a2bb-6f8d05b92032",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "147b3c5e-eb16-4f80-8766-7eefd14c253e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbfc33a0-9427-4948-8709-3dacfcdfed06",
        "cursor": {
          "ref": "9027b29d-6ef5-46f5-adba-71f1dc174e47",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ee0590b7-05cd-4a96-ae5c-201917443cf7"
        },
        "item": {
          "id": "bbfc33a0-9427-4948-8709-3dacfcdfed06",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a4e5f55e-283d-435d-9a7c-d0e292b1e5f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f19ff16d-19a7-4ccc-a7a4-de57eaeedadb",
        "cursor": {
          "ref": "329f240f-4939-4687-a319-de5912701e7a",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c1610a71-448c-4ffb-b66e-e9cd77902986"
        },
        "item": {
          "id": "f19ff16d-19a7-4ccc-a7a4-de57eaeedadb",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4364db06-1db4-47a6-85c0-b62bdcd4eca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ca4634-763d-4121-99b2-3a9a815af420",
        "cursor": {
          "ref": "7d6037a4-60a4-4056-acf5-db31ff43381d",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "12b439cb-4447-4d04-916f-949451daeece"
        },
        "item": {
          "id": "c5ca4634-763d-4121-99b2-3a9a815af420",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "320b1073-2211-4d32-bbe7-98dcfd2d1fbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf26e1a6-9344-452a-9940-b9392f266ed6",
        "cursor": {
          "ref": "fa625cc4-8e3d-4770-9058-9ba211fc06e4",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3cf4dfee-8c34-4cc5-91b3-bf663347a114"
        },
        "item": {
          "id": "bf26e1a6-9344-452a-9940-b9392f266ed6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4e02cb78-96ff-4846-85a6-bd2f3d28a630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3342550a-fccb-4ecd-b707-b6323a121866",
        "cursor": {
          "ref": "a579374b-720e-4ddb-92aa-cef3552a99bc",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ca15eb27-9e99-47dc-a501-8d4c04ab12db"
        },
        "item": {
          "id": "3342550a-fccb-4ecd-b707-b6323a121866",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "47088331-c229-4733-8a6f-8bbe9629fef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b6d8a10-7a88-4cb5-b7b9-af7aa7def3de",
        "cursor": {
          "ref": "856c321d-f7b9-4eb2-b83a-34d939475d27",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "39c8eb34-e764-41f4-8c2b-0fa25e86aa4b"
        },
        "item": {
          "id": "1b6d8a10-7a88-4cb5-b7b9-af7aa7def3de",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d167170d-6b89-444e-9ec1-b42ef3a082cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e552194-bbeb-49c7-8327-954db2444e48",
        "cursor": {
          "ref": "6544b5a6-f315-483a-8486-c6d11d030436",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1c61dad3-68c5-4bfd-8912-a155ee146585"
        },
        "item": {
          "id": "3e552194-bbeb-49c7-8327-954db2444e48",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3303ee18-5f1d-4813-b799-26e6d6424570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc007436-ea0d-4a14-bb34-132761a619de",
        "cursor": {
          "ref": "3259cc2d-f137-438e-bd29-e28fe9749ef3",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7345a35f-a889-456c-9a85-09a465c196ab"
        },
        "item": {
          "id": "dc007436-ea0d-4a14-bb34-132761a619de",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "cda868bc-f76b-41cc-9da9-2e24375f4f65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d243c7-9547-48cb-a2be-16031aeabff7",
        "cursor": {
          "ref": "a1e60db9-63e5-40a3-b419-96ca151edf11",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ab0aea65-cb7e-4dfa-bbf4-1372b4d73a82"
        },
        "item": {
          "id": "63d243c7-9547-48cb-a2be-16031aeabff7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "15707777-42de-494e-aa51-d2faadf8fc8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b361f7a9-6a85-4bb0-bae0-45f0c763d530",
        "cursor": {
          "ref": "09959ca9-6e4d-4036-af14-2b651b86a727",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "675ef4d9-0add-4bd9-a126-0ab42affa746"
        },
        "item": {
          "id": "b361f7a9-6a85-4bb0-bae0-45f0c763d530",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "291f49d9-bf50-473f-8dbf-767d75e47fd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e77d0dd0-0c48-4fd7-8890-a6152d7ad679",
        "cursor": {
          "ref": "a260e13d-116c-48b1-b59e-694d507f337e",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "bfa74dbb-cc01-4e60-b051-4d8ba6bc7e10"
        },
        "item": {
          "id": "e77d0dd0-0c48-4fd7-8890-a6152d7ad679",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "dc748a62-20cc-49ac-87ac-c2937e3f1a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "447f769f-1fbc-4389-bfcb-8621138385d5",
        "cursor": {
          "ref": "2b535d63-12c7-4088-ac64-41590927b04e",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c42781b4-968d-4679-81d1-6c1068d60a9a"
        },
        "item": {
          "id": "447f769f-1fbc-4389-bfcb-8621138385d5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f70003fd-999d-4c94-844c-1a6e1b760b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "242f370a-ade0-4c86-a5d2-683f1710d10e",
        "cursor": {
          "ref": "d41f8243-8b91-4517-a8fc-afbdd3edbf28",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7dd6c367-26b2-4fda-9439-613f9f6ae565"
        },
        "item": {
          "id": "242f370a-ade0-4c86-a5d2-683f1710d10e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "81aff109-368e-4bad-bbfa-be0d96a5660c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4f336f-5cdf-4cf4-9e01-8fe271f65f5a",
        "cursor": {
          "ref": "3056e7c4-68d6-4e9d-a0e7-f6cadd215220",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "46ef104c-7f47-4f71-b16b-cf16a2bf55ba"
        },
        "item": {
          "id": "1d4f336f-5cdf-4cf4-9e01-8fe271f65f5a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "31eff368-4cd4-4508-96aa-39cf6f6c92ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8771c70d-3d37-46b6-8899-1ae947a16048",
        "cursor": {
          "ref": "15c774c3-271d-4c72-9424-a218b1680ae0",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "24dfec31-1afe-4125-b66b-5a39e7f67746"
        },
        "item": {
          "id": "8771c70d-3d37-46b6-8899-1ae947a16048",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5d2be76e-401f-45ba-a293-824255ccaf70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc30178-cd4d-4daa-8cf3-44d9d6f774eb",
        "cursor": {
          "ref": "e4e52d95-a349-4f96-9e9a-be88354bd1d4",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "77aee895-2a02-4678-9c68-f225fa45c24b"
        },
        "item": {
          "id": "7bc30178-cd4d-4daa-8cf3-44d9d6f774eb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4e834d69-bf17-4453-8263-ced380160dd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eebdf96-06a4-422a-9fe4-af1d8cb6fb2c",
        "cursor": {
          "ref": "68c8fab4-b403-4f9f-ae2e-562d3d05658c",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "12a932f8-5942-4b8a-b382-fa0fe5463449"
        },
        "item": {
          "id": "5eebdf96-06a4-422a-9fe4-af1d8cb6fb2c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e8a92e82-6662-4a1c-80d5-dbb8bf11bbfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "546cb364-2018-40f4-85ba-5908b71229fe",
        "cursor": {
          "ref": "5dd61e63-9968-47c8-82c3-b3d6ffc1eeb0",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "848fffa2-a0b1-4b86-acb3-0e4b53688fc0"
        },
        "item": {
          "id": "546cb364-2018-40f4-85ba-5908b71229fe",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "37991773-6c77-461d-890c-1cf9e342c1b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66bdbb69-f9cb-4b8d-a172-a67bf87f9a2f",
        "cursor": {
          "ref": "b69f2ed9-6b4e-41bc-a686-937abbb10cea",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "63dcc606-a264-4063-83d9-aafc0a3087b8"
        },
        "item": {
          "id": "66bdbb69-f9cb-4b8d-a172-a67bf87f9a2f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "16312418-4906-4822-a32a-5e7120b201c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab2089c-e8db-4e33-9501-e74ffd3a804e",
        "cursor": {
          "ref": "1a8f8e2f-b732-4e10-9406-9a2c5095cb66",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "9416a8f4-293b-4859-b3a6-d5304de96472"
        },
        "item": {
          "id": "8ab2089c-e8db-4e33-9501-e74ffd3a804e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ceaebd4f-dafc-48cc-ab00-a6898883c4dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c1c839-d554-4fe8-a3d0-c2485a62689c",
        "cursor": {
          "ref": "8b0cf531-dd33-453e-8107-10968c521b0a",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "29eeafd7-b640-4b4e-b6cd-17295df97a56"
        },
        "item": {
          "id": "e8c1c839-d554-4fe8-a3d0-c2485a62689c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b95bb8dd-5a1f-4395-8a98-28e7dfbb1d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1b0554-6e64-4c98-9c26-07960e704306",
        "cursor": {
          "ref": "cd660b45-b901-4c1a-9211-17a11abfcab3",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a02febe9-8818-4d60-88a0-9f810897534f"
        },
        "item": {
          "id": "9b1b0554-6e64-4c98-9c26-07960e704306",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "184a3ca3-f5ee-4d96-8e14-017344d31d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "945a15d2-6d54-4a37-b1e7-27cfc013279e",
        "cursor": {
          "ref": "31a1190e-3405-4bf8-a64f-88fb6b74a78d",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3a1cc289-2b9a-41af-bba8-619ed147deb9"
        },
        "item": {
          "id": "945a15d2-6d54-4a37-b1e7-27cfc013279e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9f661bd0-26ac-4e25-82fe-906a9c59444e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "571e0475-782b-460e-aada-1b222108eb1a",
        "cursor": {
          "ref": "adbf8874-4938-4dd8-8f90-07faaf1d23cf",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "659b0e5d-04be-4d53-8260-dc43e1b3694a"
        },
        "item": {
          "id": "571e0475-782b-460e-aada-1b222108eb1a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "caefe647-27ae-447f-a813-171c3dd393b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c270a4c-c51b-48ca-939f-bda0b4fd2855",
        "cursor": {
          "ref": "dd84fbe8-59e0-42f4-95af-69a70586d90b",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5964fd92-fa84-4e0d-90e1-77475b01af18"
        },
        "item": {
          "id": "7c270a4c-c51b-48ca-939f-bda0b4fd2855",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "af53a27b-875f-48b4-8587-eb6ce181fb8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad417b8-9df5-4159-9c79-965e9e9f9461",
        "cursor": {
          "ref": "0152b01d-4fe5-467f-b647-2746806177df",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1b98b9d0-dce3-4057-b940-9ab50e4fdc74"
        },
        "item": {
          "id": "1ad417b8-9df5-4159-9c79-965e9e9f9461",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2fc51ddc-5fe6-4c82-ae0b-11711fe4d1cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573a6088-60e1-4084-b02d-945e6ee7d6fb",
        "cursor": {
          "ref": "1f63effa-c578-4472-91ea-bf4ff4566b40",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "039d110f-6570-40b1-adfa-9e768633ff40"
        },
        "item": {
          "id": "573a6088-60e1-4084-b02d-945e6ee7d6fb",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5d0e68f5-6e46-4cb8-9c46-c8f24039a0ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "882708a1-001d-4121-bcec-249667d17272",
        "cursor": {
          "ref": "285b12e6-ebfc-4697-be4b-d2bb3febd520",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b7c9d122-8867-4426-b7f7-c7a536d54eb0"
        },
        "item": {
          "id": "882708a1-001d-4121-bcec-249667d17272",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "77a6fb24-a846-49ba-b522-c272efafe0fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4bb56ca-3108-4f7b-bdc9-7fa118e6eac3",
        "cursor": {
          "ref": "b5437044-4492-46da-860c-a97e1929f061",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ec94c7aa-acf1-43ea-9e47-1665549d8f9f"
        },
        "item": {
          "id": "a4bb56ca-3108-4f7b-bdc9-7fa118e6eac3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d41f1502-5b2c-4593-afd2-969bbc609764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e3f0935-fd23-412d-924e-8aa343ef2fc4",
        "cursor": {
          "ref": "2b4119ca-f455-4e1f-a2a3-bf33ecbece7d",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "05d30247-8764-46f1-b4a7-433f90e41817"
        },
        "item": {
          "id": "8e3f0935-fd23-412d-924e-8aa343ef2fc4",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a7e7039a-6ce9-4e69-9e13-4a9dbfbc9901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74fb6518-f224-4c9f-b373-5b6543a2cab8",
        "cursor": {
          "ref": "ae7a9abb-de03-40ad-96b4-aa107ce920a7",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c5e0b8e4-f6e2-44fd-afc8-95d792800c1f"
        },
        "item": {
          "id": "74fb6518-f224-4c9f-b373-5b6543a2cab8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a38ab61a-9cee-46e2-8003-07735a16f21a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "903a5bb8-c98a-4e09-be65-f7a92066fb31",
        "cursor": {
          "ref": "6770a5da-381b-4a29-9db8-9bbb779fda65",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "292de746-8755-48b5-93fa-dbc3a3ee172d"
        },
        "item": {
          "id": "903a5bb8-c98a-4e09-be65-f7a92066fb31",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7103540c-0bdd-42fc-bac6-316635d9d771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fbd7a7a-d1a7-4d66-bd9a-948fd9df8dfe",
        "cursor": {
          "ref": "3fb4597a-d526-4102-817f-43f86afac233",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "eddf04ba-fb8a-4546-8ee8-b49d75542671"
        },
        "item": {
          "id": "2fbd7a7a-d1a7-4d66-bd9a-948fd9df8dfe",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "dc3337ec-b05d-4b9d-b33d-90ad201d2c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be81bdc-12bb-41f1-8a7f-28eadb1024df",
        "cursor": {
          "ref": "6186e798-bc8d-44cf-8950-9ec1b52262b7",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "8d766751-2e15-497f-aa74-44595970319e"
        },
        "item": {
          "id": "0be81bdc-12bb-41f1-8a7f-28eadb1024df",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5ea2bef3-47dd-4ec0-b31c-0d1ee6e7f781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc84260-3e53-451c-ae30-60fdb85fe27e",
        "cursor": {
          "ref": "662e920b-4a09-4993-b8fe-cf52a4516adb",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8f0fb7ac-b78d-45cc-be24-2c67ccaecfb2"
        },
        "item": {
          "id": "3dc84260-3e53-451c-ae30-60fdb85fe27e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "344fd12d-2309-476d-bc37-2ec721c5eb9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fddd5826-39a0-4d68-8e54-59b0aab24dd7",
        "cursor": {
          "ref": "8e5eec3e-1f12-4750-8464-edff11d0bf97",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5b7b9c88-6138-4c99-b2d8-bcdcb119beac"
        },
        "item": {
          "id": "fddd5826-39a0-4d68-8e54-59b0aab24dd7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "09dad688-b63f-4386-bff6-dabd2de5bee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a046b483-9298-45d6-bfbe-52841655049e",
        "cursor": {
          "ref": "0bb0f791-324b-4b28-8132-fe6b4408d681",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "805b1ffb-f067-4474-adc6-f55b476ce6e5"
        },
        "item": {
          "id": "a046b483-9298-45d6-bfbe-52841655049e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "eb3deb44-a5a1-48a6-ab90-66975ae442bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b20b65-fa4e-406f-919b-071563d5da83",
        "cursor": {
          "ref": "7741f3cd-006a-4011-a405-1b59c97cded3",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "0c173ff2-f863-48ab-a18d-431d42600fb3"
        },
        "item": {
          "id": "57b20b65-fa4e-406f-919b-071563d5da83",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "51543498-9fcc-4624-9ea2-ae2b5eb6f10c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61154e52-aae1-49f1-bc53-a917507e67e5",
        "cursor": {
          "ref": "72064d7e-3281-41f4-906e-7fda1968a39d",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c41b33de-d987-4539-a626-85b53dabdb81"
        },
        "item": {
          "id": "61154e52-aae1-49f1-bc53-a917507e67e5",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "07ba5cc6-1247-4712-bf2e-2e216d2f0911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d335e51c-4bb1-427a-9912-5156af49a955",
        "cursor": {
          "ref": "c4cb0965-eb6f-486d-845e-32462717b71e",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "fdbdaa6e-0585-486f-acda-6e18985c096c"
        },
        "item": {
          "id": "d335e51c-4bb1-427a-9912-5156af49a955",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f6281485-e74f-48ab-b080-a82f42609eba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b5ccd02-ae6c-46a3-a662-815f36503ec2",
        "cursor": {
          "ref": "c155bf3c-d691-4204-9afa-326b300303d7",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "80217832-7182-4e9d-bc09-3e0e7ed75811"
        },
        "item": {
          "id": "6b5ccd02-ae6c-46a3-a662-815f36503ec2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "adadbf0c-7985-4fe2-8b52-442a31745ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a385a528-7a92-49f6-93d3-1201a6a35123",
        "cursor": {
          "ref": "825f8204-4ab8-46a3-8683-45be18e82c09",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8fbb9db1-0385-46e6-a198-398d70df5755"
        },
        "item": {
          "id": "a385a528-7a92-49f6-93d3-1201a6a35123",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fc2f9f47-20e2-4382-9461-d9a8c8dd9dd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ad84002-e756-4f4f-ab61-ecf9ff6bb20b",
        "cursor": {
          "ref": "2381d628-67f8-4f6c-812f-3e3b32e9f747",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a0782c87-92e6-49c8-8d4c-11b8b8f7dfb3"
        },
        "item": {
          "id": "9ad84002-e756-4f4f-ab61-ecf9ff6bb20b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "48789b99-0f4b-4595-a7cf-9dd74bb546d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c728d20-2254-4cdc-9a2f-47937dee1cc2",
        "cursor": {
          "ref": "85cf2323-d8ce-4e06-9149-8808e31c004e",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "069dfb6d-d21f-4a09-8a4e-8e9ab2cc71a8"
        },
        "item": {
          "id": "9c728d20-2254-4cdc-9a2f-47937dee1cc2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "03f4a913-fd26-4fb7-a652-843e744cff07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d22acd6-81bd-4940-8f3b-fef304d0f563",
        "cursor": {
          "ref": "5e1cad24-2a7b-40c0-ba35-7b8ebcb1e085",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6b8c65e6-b63d-41b6-a052-c91ed572ba0f"
        },
        "item": {
          "id": "6d22acd6-81bd-4940-8f3b-fef304d0f563",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a0b7611c-075c-4e46-9954-3e5055889557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b1328df-e571-4268-98d3-e554e47f19df",
        "cursor": {
          "ref": "25063083-31fb-4203-84ae-e29a3870ce3b",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e3ba1c48-4948-4c3a-b832-1f7a7d783547"
        },
        "item": {
          "id": "8b1328df-e571-4268-98d3-e554e47f19df",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0f593387-5215-4449-adfe-2b5020047e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e1d482-8442-4136-bb48-fdde65804d6f",
        "cursor": {
          "ref": "759d7bb6-50d7-4d9a-bb41-92afc2f51603",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a78b6dbc-adcd-4a51-b5f5-7ba1a739767a"
        },
        "item": {
          "id": "e0e1d482-8442-4136-bb48-fdde65804d6f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4a48e6fa-d884-41cd-81a6-2ee161e906ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc26814-beab-45cf-90d6-2dc1fe690e8c",
        "cursor": {
          "ref": "74899c89-1465-4aea-94fc-fad0c613e940",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4c89941b-7ad4-49bb-a1b7-6f9699453d36"
        },
        "item": {
          "id": "bbc26814-beab-45cf-90d6-2dc1fe690e8c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2b335663-3a2c-4ecc-9655-f025872669c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a500a7-0899-4e21-abe9-c3d0863c5073",
        "cursor": {
          "ref": "fb5bc757-b32e-4701-848d-c6ff76282303",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8bab9130-ea00-400d-92b3-99c342b1ef91"
        },
        "item": {
          "id": "69a500a7-0899-4e21-abe9-c3d0863c5073",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d5323541-6b06-477a-a781-67002a5a9d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb6fc37-4072-4902-a0b9-4d85f4adf68d",
        "cursor": {
          "ref": "82513e59-a82d-45dc-9d99-e74657d49cf8",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a3a3eb9d-beae-4b75-bc86-8e5dc15bc540"
        },
        "item": {
          "id": "bdb6fc37-4072-4902-a0b9-4d85f4adf68d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7914247b-af46-4850-80ac-3de0a58ff6b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1c3b252-28fa-453c-990e-202d37906ecf",
        "cursor": {
          "ref": "dcbd8845-166b-40e6-850c-b16f77ef47ae",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "80c826d5-5c0b-485d-8425-0b3a79bf07df"
        },
        "item": {
          "id": "f1c3b252-28fa-453c-990e-202d37906ecf",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "29e9c6df-a1c5-4409-b1d7-76aac7509e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce0db66c-b403-46ee-b5f2-bb686c3d3532",
        "cursor": {
          "ref": "08661cf3-4d7f-4ac1-a863-090c2508876f",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "dbcec075-aaf5-430f-a77f-b1125f2da9ce"
        },
        "item": {
          "id": "ce0db66c-b403-46ee-b5f2-bb686c3d3532",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "19c57378-6774-4bfa-9cf1-da359ed59444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18ae32a-7124-4f49-b6de-c6604a67065e",
        "cursor": {
          "ref": "2f3baee3-8d2d-46b1-8f25-4e3136892e0d",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ddeeff82-f9aa-4a88-b564-ef4ea38a86c2"
        },
        "item": {
          "id": "d18ae32a-7124-4f49-b6de-c6604a67065e",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "a9fb05a0-ac3d-4592-8c54-05a657db3cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f248eaf2-51d5-4308-93f7-a8790ae17ac8",
        "cursor": {
          "ref": "a53de5cf-e46d-4a77-9fad-e862950ef960",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a68c8b95-468d-4d51-9ad7-234989e36f64"
        },
        "item": {
          "id": "f248eaf2-51d5-4308-93f7-a8790ae17ac8",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f2a1e16c-17f8-4851-8328-07fa3cc09595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d42d2f-5f6c-4e81-8d42-cdde467d72cd",
        "cursor": {
          "ref": "77dceebe-6e64-4cc7-89bc-24b4b9c001ee",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "82ef7ec2-3d6b-43d9-a94c-1a7e767212bd"
        },
        "item": {
          "id": "64d42d2f-5f6c-4e81-8d42-cdde467d72cd",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "ac7a990d-3c8e-4d73-b4c8-e4bc0fa0527f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d466dc64-af19-4f2a-9c22-036ee2834073",
        "cursor": {
          "ref": "edbcb0f2-d76c-49a8-a683-6c73aff4b6cd",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b888db68-e5ba-4b41-b360-623f02e1a640"
        },
        "item": {
          "id": "d466dc64-af19-4f2a-9c22-036ee2834073",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "d26999a4-76c0-4ce4-9b4d-3e6fb1296114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b97cbce-85ae-4303-bff9-584e64cf86c5",
        "cursor": {
          "ref": "736a3832-52c6-4bd0-9785-ed48e910b42f",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d5d3c90a-e3d3-446a-a39d-ebdb3dc11caf"
        },
        "item": {
          "id": "6b97cbce-85ae-4303-bff9-584e64cf86c5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8b060ae5-0885-4b3b-a588-6b3671c2689e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8acfb261-8610-4f91-ba73-d7ea7db4a30b",
        "cursor": {
          "ref": "83d4a2d3-6487-4313-aaec-c160de403bb8",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "785c92d6-6a88-4555-8e6c-4ffb1c01a303"
        },
        "item": {
          "id": "8acfb261-8610-4f91-ba73-d7ea7db4a30b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3a2feb15-0b78-453b-a250-13a5cc797186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aafe335-0a7c-4dc0-b01b-101f0a6a6f11",
        "cursor": {
          "ref": "d1e76231-8a57-4edb-ae26-de90e931ad13",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "38ae8a9b-93de-4407-b483-268110d00c82"
        },
        "item": {
          "id": "3aafe335-0a7c-4dc0-b01b-101f0a6a6f11",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "58c34625-46a6-47a6-ab2f-d1f05bf36428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1afa9bd5-ff78-4659-b75e-d56db162eb63",
        "cursor": {
          "ref": "db0458c2-296c-443b-967e-f1970caa3d48",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "bfb76d06-ed4b-4d84-8592-748334f42ead"
        },
        "item": {
          "id": "1afa9bd5-ff78-4659-b75e-d56db162eb63",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f45bdc96-d649-48c8-a8c3-2a1dc0c3782f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "219d26a2-6f4d-4497-b6a2-be268424ed6a",
        "cursor": {
          "ref": "89f7067e-1494-4aa6-8281-6111dccbb63a",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3a41759a-2dbe-4f4a-a515-e2128797ab78"
        },
        "item": {
          "id": "219d26a2-6f4d-4497-b6a2-be268424ed6a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ba0dc396-9c38-4853-aa59-86296535d2c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60d6983-15e2-4fc3-83f6-3be0b45863bf",
        "cursor": {
          "ref": "57725268-8078-4a7a-bbe6-f2a80709d87f",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4b5780f9-5570-4f2c-8bb4-2c5a51f84184"
        },
        "item": {
          "id": "a60d6983-15e2-4fc3-83f6-3be0b45863bf",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "bb8aa6be-c74b-4218-82a7-0525b08a3cbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "882c4a35-28f0-45ba-bf63-657b52a6e7e0",
        "cursor": {
          "ref": "6fd3027b-a97a-46db-8ce3-c0c3e8603411",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "07412812-9293-4704-89d2-e5a2cbb96efb"
        },
        "item": {
          "id": "882c4a35-28f0-45ba-bf63-657b52a6e7e0",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "40089ff7-73fc-4cd2-a0ed-cb095e789826",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 105,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "73550dca-9f41-47fc-9301-0c0e6a2b06c0",
        "cursor": {
          "ref": "cbb6b206-b417-46e2-bc75-4159e7ef11ad",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "732aefce-2bd9-4fd5-9c31-ead855220270"
        },
        "item": {
          "id": "73550dca-9f41-47fc-9301-0c0e6a2b06c0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f1da73ea-97f4-4218-80bc-119776090078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8e3866-540f-4ed2-9175-e99c8dd20910",
        "cursor": {
          "ref": "c8528853-25f3-448c-aee7-c91c6dfe6d96",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "161ff669-874b-4761-9091-04f415fe8f9b"
        },
        "item": {
          "id": "5d8e3866-540f-4ed2-9175-e99c8dd20910",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "520475d0-90d8-455a-a763-c24ef6706724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5c942f-6b5f-4bca-bc46-b9dd50063bb5",
        "cursor": {
          "ref": "01a7b82c-ae0c-475a-91f9-75f3a7714135",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "15f54878-3a0b-4cfa-870c-60137dad4fe8"
        },
        "item": {
          "id": "2a5c942f-6b5f-4bca-bc46-b9dd50063bb5",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "99c32e78-94f2-4e29-9e99-4b0f197fd9de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d942b1-7ea0-413c-8dc7-226916beb63b",
        "cursor": {
          "ref": "16b8e8ae-57d1-449f-89a6-95768a92df50",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1b8eafb1-d1d7-4ed5-8140-65ca176bb85d"
        },
        "item": {
          "id": "93d942b1-7ea0-413c-8dc7-226916beb63b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2af72cee-68c2-4397-9b98-b91db537341a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6820538-68c1-4d88-bb3a-05022cf8da51",
        "cursor": {
          "ref": "cbf76fb1-eb0c-4bba-9872-ba4b93c23177",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "18534857-ba55-4cb7-be70-0b08e90fecd2"
        },
        "item": {
          "id": "e6820538-68c1-4d88-bb3a-05022cf8da51",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c0d1e3ac-87dd-49ae-a383-bf26ba7b8e99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d9ac434-e8d6-4004-9f6b-35263fb4e78f",
        "cursor": {
          "ref": "1335ff3a-7e05-42ad-a05a-8734f90b5d3a",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9de3269b-d63f-4966-8ed6-c03c8e863961"
        },
        "item": {
          "id": "0d9ac434-e8d6-4004-9f6b-35263fb4e78f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "66099628-6788-447d-889a-578bcab91791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41830371-4db7-4431-be67-985a0651db42",
        "cursor": {
          "ref": "3f816460-95fa-4c61-a1f7-c739fcfba612",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "1b2d53ce-227c-44e9-831d-f0da89570c1a"
        },
        "item": {
          "id": "41830371-4db7-4431-be67-985a0651db42",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "719c9d31-2e8c-440a-b3d9-4dbd0e7bf878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e0cad79-d0c0-4901-a9bb-fba866513b6c",
        "cursor": {
          "ref": "2d1d07db-ae68-4797-8645-9200331d0c4a",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "aa04e886-25c6-4185-bb45-7e4a4f7ba728"
        },
        "item": {
          "id": "0e0cad79-d0c0-4901-a9bb-fba866513b6c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "afdfbbb9-d4c4-4a46-a6cf-5558842bb1c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0121c55-59f9-4cc1-87fa-cf8568f42451",
        "cursor": {
          "ref": "87482b97-389e-48bc-9045-ad58a16544a2",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "02308d95-3bcf-4e60-be6f-12dd4d083758"
        },
        "item": {
          "id": "f0121c55-59f9-4cc1-87fa-cf8568f42451",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d096774d-80c0-4a49-8844-36bbe8849c4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6645e4a9-49eb-4cf1-a83c-d15980017d95",
        "cursor": {
          "ref": "a0562bf7-407a-4fbb-bd94-bcba83019387",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ccba3f2e-a629-461f-9eeb-c38c4529ecc8"
        },
        "item": {
          "id": "6645e4a9-49eb-4cf1-a83c-d15980017d95",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0c98c9ac-32e2-458a-ad65-d1b9000f3fd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc9e6fe1-2c58-43cf-a363-77a4189832d1",
        "cursor": {
          "ref": "96e9fec3-9c27-4954-82fa-a030941fae09",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9946c4e8-ebe2-4dc0-806f-837abdf09554"
        },
        "item": {
          "id": "dc9e6fe1-2c58-43cf-a363-77a4189832d1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c28e4f8d-b9e8-4299-8259-30cb93a84583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6f86909-f015-4b3b-8300-fe77633baea8",
        "cursor": {
          "ref": "8bcb1d0a-3e8c-4296-9612-2ed4e1dc373f",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "374f7ec5-165c-4168-b113-90988037524f"
        },
        "item": {
          "id": "b6f86909-f015-4b3b-8300-fe77633baea8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6f1c85e5-def8-4e0a-9b5a-e89d3596d8ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30017283-ade2-46a6-8fdd-e4941521f512",
        "cursor": {
          "ref": "db31992d-9b1c-44a3-bb41-bf8b8974487c",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9338fec2-ecb4-4bd6-bb70-a89e0c401f39"
        },
        "item": {
          "id": "30017283-ade2-46a6-8fdd-e4941521f512",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "240b5908-8d33-48c5-90aa-2cba6c501d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d98906-7c86-446f-b7b6-09bf441c460e",
        "cursor": {
          "ref": "6ad4ca3a-218d-4173-87a5-4f5918b051f5",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "40fe1c8a-89b6-4d7a-b162-7486c0f4276b"
        },
        "item": {
          "id": "16d98906-7c86-446f-b7b6-09bf441c460e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a32b35de-f5ae-4ef6-a85d-80d46a755723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeea3670-0242-477d-829c-b630647b1db2",
        "cursor": {
          "ref": "1af73efd-e015-4342-9f7d-515ce5049c93",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "024dc153-1e42-4301-8edc-4fe2533d243d"
        },
        "item": {
          "id": "aeea3670-0242-477d-829c-b630647b1db2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "3098aa82-2c33-44c4-9cb1-763ed98c177a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2b4a9a-f67d-46f8-a919-0f3d65c5ff54",
        "cursor": {
          "ref": "d6006bdb-1142-40f1-b57d-34fefedea315",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "25add0a9-71d4-4bb8-811a-75e026fb5599"
        },
        "item": {
          "id": "7e2b4a9a-f67d-46f8-a919-0f3d65c5ff54",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9db023cc-7a45-4c9e-a260-73c13f7d7712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cec3c8d-e186-4c4e-82bd-4efa6745a426",
        "cursor": {
          "ref": "b9182acc-a078-47b6-87a5-52fbb6c0870c",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "801be40b-1ed1-4641-bbce-57958b0f9338"
        },
        "item": {
          "id": "9cec3c8d-e186-4c4e-82bd-4efa6745a426",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a8655a53-02ca-43da-b3d4-4ad4f532a2ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0405a2b5-8b90-40f6-92aa-e7ccd7f0f59a",
        "cursor": {
          "ref": "d3bbff7c-1b4b-4eb0-a384-4f151f4672f5",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8f96f9b0-0814-4e3c-b5c7-6dbbbfe4a96c"
        },
        "item": {
          "id": "0405a2b5-8b90-40f6-92aa-e7ccd7f0f59a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "adf0babd-a9c0-4c6f-a8b3-ec3c3b54a8f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af1a186-9640-471b-910c-64b619dfe6e6",
        "cursor": {
          "ref": "1cd18a43-a0c3-43ae-be44-ac8d0559b69d",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f6cacdeb-8980-4dcc-9d0e-173891cf8496"
        },
        "item": {
          "id": "8af1a186-9640-471b-910c-64b619dfe6e6",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "0b207d06-0e4c-41c6-b607-30a87628f614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c32dba4d-acf7-4c73-84ad-d3f5911fda26",
        "cursor": {
          "ref": "c98edca9-5583-46de-a509-b003c4c5c1a0",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "37d62040-bdd1-4127-b9b3-4bd40abab401"
        },
        "item": {
          "id": "c32dba4d-acf7-4c73-84ad-d3f5911fda26",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "911e3bb1-3980-49de-b598-45e061156398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e85a7a-4204-4587-bb9c-a2db4bd60090",
        "cursor": {
          "ref": "1a18a297-6fb8-4815-bfa3-f5ef598ed57c",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "0c30ead6-15ef-4ea2-b8a1-2558cb34a716"
        },
        "item": {
          "id": "05e85a7a-4204-4587-bb9c-a2db4bd60090",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "15d0d891-4181-4d93-8023-296627b80aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43374dc3-aea2-4325-b46a-48f460c42fbb",
        "cursor": {
          "ref": "12b82107-93f9-4cee-82ad-99abbfcb3f30",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "38981ee2-abec-4092-bc86-533c3cd6abfa"
        },
        "item": {
          "id": "43374dc3-aea2-4325-b46a-48f460c42fbb",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "30736727-4e40-4888-9ade-43c06a06f26c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaee0ae5-47ee-43c2-9dbc-56c6efb7b307",
        "cursor": {
          "ref": "cdf13e3a-73c4-4e2a-9c2d-10751d8d5ab5",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e4ccc394-10db-4af8-b612-aceb6d00865e"
        },
        "item": {
          "id": "aaee0ae5-47ee-43c2-9dbc-56c6efb7b307",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e56ee9ff-dbdc-4c79-acbf-d4be9c083572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf15ed2-d43b-4d07-ad46-9a365784a5f6",
        "cursor": {
          "ref": "d3b045d6-f77d-488a-ad56-18cb0ebb8150",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "90a27a77-af7d-4bfc-8077-af6e1252729c"
        },
        "item": {
          "id": "acf15ed2-d43b-4d07-ad46-9a365784a5f6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ac62c51c-dcbc-446a-b719-4d01cdef9129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7eef8db-ba45-4b1c-bf69-150579e736af",
        "cursor": {
          "ref": "956e26a5-d1e2-4bca-8149-5e65f2ce1795",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f15a7863-5068-4c0c-9129-913d5abeaf17"
        },
        "item": {
          "id": "e7eef8db-ba45-4b1c-bf69-150579e736af",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1a670743-20a7-4116-8228-a5427145038f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a511bd-5371-4e05-b8f7-ef7f89c92655",
        "cursor": {
          "ref": "6174d412-42fa-441b-9b09-96d47f6b825e",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d3126bbe-d363-45a3-9106-17e5236fd762"
        },
        "item": {
          "id": "f6a511bd-5371-4e05-b8f7-ef7f89c92655",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "421f6538-d38c-4b9f-b186-e046e6b83e77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa7f0a1-48a3-4aa2-9fdf-658ba656ef62",
        "cursor": {
          "ref": "6eb4f31b-fb77-4fa8-bbea-106042a3c04d",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f0532e3a-f633-4198-b8f9-1f1a81440e78"
        },
        "item": {
          "id": "8aa7f0a1-48a3-4aa2-9fdf-658ba656ef62",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "dd158b9b-f08b-41d0-8bc1-0701b0e1975a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "873a1d34-a546-4683-b7a7-605106fe713c",
        "cursor": {
          "ref": "52b62cd0-e82d-4208-b7cf-9fbdc176c0b4",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e10bab41-b174-47e9-bf1a-5304e15c2b69"
        },
        "item": {
          "id": "873a1d34-a546-4683-b7a7-605106fe713c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "53cfcdb3-6933-48b4-a126-58e7795bbe17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "742d497b-d3f4-424e-9658-132c5dd19afd",
        "cursor": {
          "ref": "880710b5-fca8-448f-bc4a-fd20b06abd60",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "73e8338b-8e00-451d-9428-69cbaca5d31c"
        },
        "item": {
          "id": "742d497b-d3f4-424e-9658-132c5dd19afd",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "33a3bb5f-039f-44e5-8ef9-df5ccb68924c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "220600ca-1be7-42d8-a5eb-3c046d1b40f0",
        "cursor": {
          "ref": "fea3ea21-6cb4-4195-9a2d-c85fadcadb7e",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "971523ba-7c0a-4423-a34e-6112722d1c93"
        },
        "item": {
          "id": "220600ca-1be7-42d8-a5eb-3c046d1b40f0",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6a8ef639-36e8-4ab0-b12e-a88b65032e3d",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "f2b573c7-ca24-46f9-a267-175eec3f3f8a",
        "cursor": {
          "ref": "65a647d7-cc65-45a4-ab21-8edca3d6b348",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c3b1b785-377b-49a8-b831-e2cb2ff38a2f"
        },
        "item": {
          "id": "f2b573c7-ca24-46f9-a267-175eec3f3f8a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "27fcdcab-460b-4564-ad66-903378bb91b0",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "580c138c-ef28-4fe3-8d29-aa331feba05d",
        "cursor": {
          "ref": "68ad669d-cf96-443c-bc37-7efb572f14e3",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "21877659-7879-4f9d-949a-9006497f5eae"
        },
        "item": {
          "id": "580c138c-ef28-4fe3-8d29-aa331feba05d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e13ae14b-42f9-4297-9ec8-7ddc2bc9976b",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "21b4b8b4-7702-40ae-972a-a00aa1bca4ea",
        "cursor": {
          "ref": "10a5d090-0dc9-4aaf-a866-0f5d0e08d995",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5f46fbf6-8db3-4e44-87df-4094e449a8f6"
        },
        "item": {
          "id": "21b4b8b4-7702-40ae-972a-a00aa1bca4ea",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "40811eb2-8c45-4a04-956f-c1cf2457e73e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1d4f2c-bfab-4ee0-a6d1-322f2bb056bf",
        "cursor": {
          "ref": "9d494375-538c-4e06-a250-6af5158521be",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "baeb70ac-68be-4930-91cd-ab8efb95a376"
        },
        "item": {
          "id": "4c1d4f2c-bfab-4ee0-a6d1-322f2bb056bf",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "88d1a5d7-107b-4608-8cb1-0189587575c4",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "efd450b4-a52e-493f-b789-09f015fe0289",
        "cursor": {
          "ref": "4b2afd9c-32b3-42d7-9f60-0d2d7c2d5887",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e9626574-6f2e-459f-aa9f-aa24cbf7b8e6"
        },
        "item": {
          "id": "efd450b4-a52e-493f-b789-09f015fe0289",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "05916ce9-0ffc-4ba0-a34d-8c67f2101644",
          "status": "OK",
          "code": 200,
          "responseTime": 967,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "5e7b1753-61a1-4227-975b-107078f65aca",
        "cursor": {
          "ref": "b9cc6577-35aa-4901-b685-fc8a099a00d2",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "008934f6-2604-4333-ba1d-9dd3b27897ea"
        },
        "item": {
          "id": "5e7b1753-61a1-4227-975b-107078f65aca",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "52e69dd6-4544-4ca7-a6da-63f656a84b6d",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "34d35b00-9040-4ae2-ba7d-2810203f4957",
        "cursor": {
          "ref": "112fabd0-74b7-4fc7-a05a-99514d6fc7a3",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "bb6ae177-53ca-43e6-8a72-adbcaed1f112"
        },
        "item": {
          "id": "34d35b00-9040-4ae2-ba7d-2810203f4957",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a794831b-96bf-4837-99cb-b701127f6d17",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "280cfb5a-2cce-4b3f-8019-4244b6649dda",
        "cursor": {
          "ref": "473e68c1-c68e-4eb6-b8a0-b9209d042b05",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "438fa137-615c-4e21-838e-79329701a9a9"
        },
        "item": {
          "id": "280cfb5a-2cce-4b3f-8019-4244b6649dda",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6d8cebc4-0adb-4b8f-8c29-5e466c4e2d49",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "ce5dd6fa-abe7-4383-83ae-e4b579e8b0fd",
        "cursor": {
          "ref": "66bcb5d2-91e7-4ff1-b673-054e7bc67368",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "cc74acc1-b7fd-4370-9f9a-f266f50b9592"
        },
        "item": {
          "id": "ce5dd6fa-abe7-4383-83ae-e4b579e8b0fd",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c4a56441-785d-4b54-9875-331d98ee09b5",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "72c73a94-0cfd-48d1-8dc6-2042f7c879d6",
        "cursor": {
          "ref": "091a049f-17cf-48e0-b439-51dd254b9f4a",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "94902726-9ee7-412d-81e3-3128b08bc895"
        },
        "item": {
          "id": "72c73a94-0cfd-48d1-8dc6-2042f7c879d6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a15f83ba-a82c-4958-90b3-b414923633a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc6893a-0302-46a9-80e2-9c5851882cb3",
        "cursor": {
          "ref": "95b52662-4856-4adb-9f47-76a594eb0519",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b91d3755-5df8-4d9c-98d1-5fcbc590bcfb"
        },
        "item": {
          "id": "5dc6893a-0302-46a9-80e2-9c5851882cb3",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d2be6f6c-96fd-4879-bc7e-004fb2be8fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b362340e-1f1f-4b25-a456-536fe3e85aac",
        "cursor": {
          "ref": "9e81969c-590f-4e8a-bf11-94e978aab80e",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8328b575-c404-4ac8-9244-c6b870c22de4"
        },
        "item": {
          "id": "b362340e-1f1f-4b25-a456-536fe3e85aac",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1907208c-068a-49d9-9634-5f4a2fb615ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "647b2a3b-4d50-4e4e-8307-15094d534353",
        "cursor": {
          "ref": "8b91c2cf-4b5d-48d9-a77b-039ad639d94d",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "43a7c4ed-0074-4e8b-81f6-9839884c2891"
        },
        "item": {
          "id": "647b2a3b-4d50-4e4e-8307-15094d534353",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e3259694-ba08-43b1-a288-1187e58a137d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d52679a8-9bfc-45e0-9890-593c9e8d4377",
        "cursor": {
          "ref": "7963bce4-f732-4b0b-be28-705b2bcdfb32",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f464e7a9-59b0-44d9-8e42-3a2d77573eb9"
        },
        "item": {
          "id": "d52679a8-9bfc-45e0-9890-593c9e8d4377",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "dde6e4d5-f2db-4f85-a24a-42bdd10ea6c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a34d66dc-6ac4-4ff9-b32f-bffcaf23ebaa",
        "cursor": {
          "ref": "05edad8f-30f6-4c07-ada8-d1d0bcdf9882",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "12c11794-2167-4b76-adf6-aea53c71f9a9"
        },
        "item": {
          "id": "a34d66dc-6ac4-4ff9-b32f-bffcaf23ebaa",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "dafe84cd-b551-424a-a372-0c89d8fd61b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01956423-aaec-4623-8ff3-5c2578cc9d91",
        "cursor": {
          "ref": "3eeb693b-23ef-4e80-afbb-a0e8264d69f6",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e3f37177-7d0e-4144-ace7-a6ad66eda0ef"
        },
        "item": {
          "id": "01956423-aaec-4623-8ff3-5c2578cc9d91",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f518c38c-611f-4e59-ba91-3e4bdffd2255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7c7856-97dc-4a53-8ef1-beac56d3c253",
        "cursor": {
          "ref": "62e3d801-afdb-4140-83d2-be05f2325817",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "15c3fb62-a950-4752-9d9a-d7247734498d"
        },
        "item": {
          "id": "5f7c7856-97dc-4a53-8ef1-beac56d3c253",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1bf73039-25e1-4d8e-a951-3927c428fba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c89a84-8830-45ab-a2d0-93dae2e64297",
        "cursor": {
          "ref": "4a7121a4-99d7-4753-bb85-de9cfc9a9022",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f1137d76-23a4-4ae7-87cb-047581799e89"
        },
        "item": {
          "id": "01c89a84-8830-45ab-a2d0-93dae2e64297",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3dfb3319-6f33-4b72-af0b-d7055850a91f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4d2dcd-2145-44be-b51b-804d16313bfc",
        "cursor": {
          "ref": "4692d2e9-496c-4384-9fb9-659b82fc2bc6",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "61271d98-4ee3-4a1b-b9a8-301bd4cc97ca"
        },
        "item": {
          "id": "ac4d2dcd-2145-44be-b51b-804d16313bfc",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "37b04bf2-9a1b-47ac-9588-77c686522e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0fd5b54-6e2c-4804-88df-c31a5c90ecd5",
        "cursor": {
          "ref": "5680ba36-d4d2-4b8b-92de-0893d18970e8",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "13b27d81-0fe0-452c-99a0-6c0495f564f0"
        },
        "item": {
          "id": "a0fd5b54-6e2c-4804-88df-c31a5c90ecd5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7fc67ef5-4e2c-4abe-a615-c8af2f2ec80b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "774d139d-31d8-46a2-bb84-a35d71f168b5",
        "cursor": {
          "ref": "a269c2ff-9f9e-462d-a234-afe99e25bc0e",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5768339a-2230-4109-b122-0dedd892196e"
        },
        "item": {
          "id": "774d139d-31d8-46a2-bb84-a35d71f168b5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a7e18ba8-3e53-4b1d-bc1e-6b9cd8ae3082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c531a31-dfde-48f1-aefb-1e8f74623ae2",
        "cursor": {
          "ref": "de039e71-e83f-4620-8ada-a55438f5c2ae",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "99cb4a9b-d60d-4391-95d6-e669ef9e6a96"
        },
        "item": {
          "id": "5c531a31-dfde-48f1-aefb-1e8f74623ae2",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "53264633-a42e-44b1-a183-532ec65d4c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6be60b2-8524-4c2e-8738-b544acb459f3",
        "cursor": {
          "ref": "6e3c3c1d-ea0d-4e6f-a62a-61a0519859d1",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a46272be-2951-47c5-bfea-7f498d619d6e"
        },
        "item": {
          "id": "f6be60b2-8524-4c2e-8738-b544acb459f3",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c1e8cdf3-1e58-4784-b593-abcaee968de1",
          "status": "OK",
          "code": 200,
          "responseTime": 831,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "f2d841e5-120c-4b22-8847-b62b6455d6ac",
        "cursor": {
          "ref": "fa5191fb-2f28-499d-ba85-c0de136f2dc1",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a9431168-1143-468d-bdbf-0327aef6bb5e"
        },
        "item": {
          "id": "f2d841e5-120c-4b22-8847-b62b6455d6ac",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a2508089-5aff-4a05-bd4a-078c279dfd7d",
          "status": "OK",
          "code": 200,
          "responseTime": 844,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "6498d164-827f-4dfb-82f7-93e6d36135b0",
        "cursor": {
          "ref": "86e1d28b-c195-4937-952f-1197979fd07c",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a6ecff11-4e6b-4c97-9093-f3ce7794a60f"
        },
        "item": {
          "id": "6498d164-827f-4dfb-82f7-93e6d36135b0",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8c76344f-4988-42f9-8cb5-b61c257160c9",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "39fadc2b-4630-4d23-9804-afb7f383a79b",
        "cursor": {
          "ref": "574d64bc-6599-47e4-98da-bafadc08db22",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "00bc19f6-9bfa-4c1f-a926-9ddb144aa274"
        },
        "item": {
          "id": "39fadc2b-4630-4d23-9804-afb7f383a79b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2fdb78bb-1d4e-4068-ba08-0b3186bd561d",
          "status": "OK",
          "code": 200,
          "responseTime": 842,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "fc4c7b9e-e34d-42ce-9938-22eed07e909f",
        "cursor": {
          "ref": "393f3622-da48-4669-b3c8-c8d03a11e9f3",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5e3b6862-4af3-4eb9-b8e6-780cbd9dded2"
        },
        "item": {
          "id": "fc4c7b9e-e34d-42ce-9938-22eed07e909f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "9769c3a9-d41e-4872-8754-dbbf79d2ea3a",
          "status": "OK",
          "code": 200,
          "responseTime": 203,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "36fefca3-56ae-4003-bf39-bd04d44f4abd",
        "cursor": {
          "ref": "ead6a5fe-ae5a-46c1-a58c-b9b82ca2a5cb",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "032ac7ac-fcf6-41f3-8cc5-601639de1eb6"
        },
        "item": {
          "id": "36fefca3-56ae-4003-bf39-bd04d44f4abd",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "739e7bd4-eb65-49a0-8d22-8e15fa5999cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f81fa35d-c0b6-435f-a50e-71861bfaec73",
        "cursor": {
          "ref": "30ceaaa5-ee59-45ab-9df3-9522d7a6cfc7",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f0c31234-a0e9-483e-987b-52e2f0906890"
        },
        "item": {
          "id": "f81fa35d-c0b6-435f-a50e-71861bfaec73",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "31d76db7-3e2f-4af9-a48a-e50a9df325d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c90505-8ddf-4f16-bd56-09085b005262",
        "cursor": {
          "ref": "dea96d77-104c-4608-b4bf-ede654128d7d",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d4d30e9f-cb94-4e91-9e01-0f0b91489a1b"
        },
        "item": {
          "id": "55c90505-8ddf-4f16-bd56-09085b005262",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "84cf04a9-e200-4a4d-a76c-cdffb37b9c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f9ca90-75bf-4e30-80f2-234cc9872a4c",
        "cursor": {
          "ref": "0e9f58aa-1ac1-4944-98e5-73c36792de8b",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "4df664b7-f643-4b4b-9842-01d8b2d7e7cb"
        },
        "item": {
          "id": "58f9ca90-75bf-4e30-80f2-234cc9872a4c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "018f56c1-90f4-42d0-931e-3f3014291835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b35f1d0-fe99-4e21-9579-0dbc0fbe918b",
        "cursor": {
          "ref": "dc9f51cb-cc54-46db-8239-134acfcb5354",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6fab0b92-c32a-47aa-a68b-9691a41a33be"
        },
        "item": {
          "id": "4b35f1d0-fe99-4e21-9579-0dbc0fbe918b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d1316f8f-1fe0-4f67-b577-24818cd5b8bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d8dce0-6d5d-4a53-84fe-c21e226579dd",
        "cursor": {
          "ref": "d50d47fd-141d-4ee4-9ea1-af56f92176bf",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3f41d4cc-da89-404f-b719-24747ec695e9"
        },
        "item": {
          "id": "93d8dce0-6d5d-4a53-84fe-c21e226579dd",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b4e4e2bc-0ace-4f36-a356-00d4d59d8b72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce71bb56-5bb1-4891-9916-1b68db7c5e56",
        "cursor": {
          "ref": "e299a791-df89-4d79-bf85-098e5bee128e",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d537776a-3e07-44b4-995c-074276b56f7a"
        },
        "item": {
          "id": "ce71bb56-5bb1-4891-9916-1b68db7c5e56",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f4c3fdb4-ed45-4fc9-99aa-ad42e06d7cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 655
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83e2ec2a-b9f1-4274-8dd1-26e91116e56f",
        "cursor": {
          "ref": "5dc0b45f-b024-4408-80fe-ff2ffcbe30b7",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "daa729fa-db3f-42bd-b98a-518ac75977b5"
        },
        "item": {
          "id": "83e2ec2a-b9f1-4274-8dd1-26e91116e56f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "60944531-3c28-4ec5-8e59-78a828d761e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f682bd69-4962-4891-9958-2494696b1586",
        "cursor": {
          "ref": "719c75b9-5ca0-444d-aa8a-d1970857d2e3",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "650c7718-bf47-4df5-aae8-7ef41657cc98"
        },
        "item": {
          "id": "f682bd69-4962-4891-9958-2494696b1586",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2ead7005-82ed-43f8-9295-1e4733d7732d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1224da32-822e-4904-a2d0-cd38d5506936",
        "cursor": {
          "ref": "4359edc0-4ba7-4662-8724-942fb073d4b9",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9c2c7949-e908-4ee9-8bfc-3d8b211d342a"
        },
        "item": {
          "id": "1224da32-822e-4904-a2d0-cd38d5506936",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e6161162-23aa-43e2-95ac-c1410c60532e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b676675-3d25-4489-9219-519c48c88cd2",
        "cursor": {
          "ref": "59ca42ac-e611-45ff-9871-4fb11d5b96e2",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "421f1eab-f200-4060-acc1-7533192d3923"
        },
        "item": {
          "id": "3b676675-3d25-4489-9219-519c48c88cd2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7b56d1bd-2efa-48dd-b70f-5afa2cd81a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 655
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b716c2b-8b40-4e1d-aab1-111a3ddf3385",
        "cursor": {
          "ref": "a65c08ac-98ec-441b-880e-7139db90a966",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "ff55864b-0e48-420a-acba-2e6556654cc5"
        },
        "item": {
          "id": "7b716c2b-8b40-4e1d-aab1-111a3ddf3385",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "76941f40-cbb3-4755-91b1-acfbb2dacd8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f748824-4a99-4cfc-9856-2795cf0b912a",
        "cursor": {
          "ref": "0fcd3254-2478-4d6e-bbfa-10559b503bdc",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "88ca213e-35b9-42bd-b05c-1d982c63edb5"
        },
        "item": {
          "id": "1f748824-4a99-4cfc-9856-2795cf0b912a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "bb0369fd-0944-411c-8230-b1d4aa05227b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e24645-7af2-47ba-ace0-5d844b70d5a6",
        "cursor": {
          "ref": "a7d16c99-2765-4800-bc21-1d9f3f15a25c",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "3b418276-f47e-4d0d-92c7-bcf256242a48"
        },
        "item": {
          "id": "57e24645-7af2-47ba-ace0-5d844b70d5a6",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ff22c5c2-5da7-41fa-88ae-de0e66b60e73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d7823f7-77fd-4fcc-acce-0a1c8cb24ef5",
        "cursor": {
          "ref": "a93c986c-c137-4ba5-8919-799f17cac4c0",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "9b5c639b-ad56-4f27-80d2-f5192a818e49"
        },
        "item": {
          "id": "1d7823f7-77fd-4fcc-acce-0a1c8cb24ef5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "07f19481-7ecd-40cb-8182-8283ae34e477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "113751b8-6cd6-476c-ad86-6e774d4e7d1c",
        "cursor": {
          "ref": "6fd39ab6-5b5a-44ca-ae86-d241408537d2",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "65655c2b-3da2-412c-8f63-78a156915684"
        },
        "item": {
          "id": "113751b8-6cd6-476c-ad86-6e774d4e7d1c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "405c2cf6-1272-48f8-b4d6-d0a2aae7affd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11249402-1753-412c-87b5-ce4b25a63f82",
        "cursor": {
          "ref": "59451cd3-0ad5-475b-aff7-59e3b861e6aa",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "d6622a2d-564e-4ca9-8fb8-6102d691f5a8"
        },
        "item": {
          "id": "11249402-1753-412c-87b5-ce4b25a63f82",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8ba6be0d-f658-4838-abd0-f766162cddbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3ccf4d-e7dc-47f5-b095-8ae7f7ef0bfb",
        "cursor": {
          "ref": "70c3b83f-bcda-4fc5-b479-0de0feb0cbd0",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "deff5cdb-9da8-412c-9e83-b7448c3b9177"
        },
        "item": {
          "id": "ff3ccf4d-e7dc-47f5-b095-8ae7f7ef0bfb",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4ab3c11c-6baf-4023-857a-b15bb67f39d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb47994-cd51-401c-82e6-18c09526456e",
        "cursor": {
          "ref": "81195d91-dc1a-41da-a25b-0b8a0e9516c4",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "7411cb2f-8d31-49a9-be0f-c387d6ae09fc"
        },
        "item": {
          "id": "5fb47994-cd51-401c-82e6-18c09526456e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c35eda86-00ba-4145-aed3-f56d47064d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31093057-b2fa-4c78-98a7-df461ba814db",
        "cursor": {
          "ref": "c83dfb5d-b6da-4787-bfa5-ed9f8fdf0778",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ba9d1e24-448d-41f5-9253-0c4423a5ab48"
        },
        "item": {
          "id": "31093057-b2fa-4c78-98a7-df461ba814db",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "eae9e761-66ba-4127-9c7d-bdf8697a4db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42996b25-f66f-4be6-a5ad-485c22be029c",
        "cursor": {
          "ref": "d0351371-07a3-4e47-833d-3059692bacd6",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "76f4eae1-5c67-48bf-8f99-e01ea03c3419"
        },
        "item": {
          "id": "42996b25-f66f-4be6-a5ad-485c22be029c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "fc5e04be-30c1-4bd9-bf61-7e7ce0f83a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92ce47fa-8925-4e35-be75-e8cd2fbdc871",
        "cursor": {
          "ref": "71360a18-8b04-46b5-9583-fd4f133e8665",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "efdb25a1-8c2a-48ec-b28e-ef6b0c8103bd"
        },
        "item": {
          "id": "92ce47fa-8925-4e35-be75-e8cd2fbdc871",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e7331538-230d-4988-9744-da3c6c21cbd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f234bc4e-73ca-4a83-9ffc-974ae3434c75",
        "cursor": {
          "ref": "aa1e6a9b-4028-4000-875a-0b898b272afa",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "32dc8ff0-e868-4642-9e9a-50cfdd4124db"
        },
        "item": {
          "id": "f234bc4e-73ca-4a83-9ffc-974ae3434c75",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "deb10b12-feb2-4ba9-95e8-ef86cd11d915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ab53ae-9fc5-4235-9899-a06a11e7d0df",
        "cursor": {
          "ref": "ea9fc6ee-e56b-4726-bf0e-92ced5887c75",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "07b3fd64-3dd8-48ba-a09a-1c8a174907b6"
        },
        "item": {
          "id": "f5ab53ae-9fc5-4235-9899-a06a11e7d0df",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "dabeb786-aef1-4106-946c-b2498f20239d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe95d11-3337-4282-bfec-02839a9af42d",
        "cursor": {
          "ref": "315c44b6-545b-4c3b-bbeb-0960b7944869",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "14e38fc0-4495-4504-9975-fc9d14101efb"
        },
        "item": {
          "id": "cbe95d11-3337-4282-bfec-02839a9af42d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "76f672cc-f5ac-4216-8630-52818bb8b66b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "686bcf6c-578f-41f5-8758-1f10c2e2aca2",
        "cursor": {
          "ref": "eca7a07f-7496-4eb1-bc54-f1a16659c7c0",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "a83e472e-e616-40b2-b89a-a011127f85a0"
        },
        "item": {
          "id": "686bcf6c-578f-41f5-8758-1f10c2e2aca2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ce931ea5-0eb9-4c34-9caf-5e6bd774daaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84b18806-e4ce-4a8a-b505-5ed0b9b1fb59",
        "cursor": {
          "ref": "91c7a850-98d2-4836-8aa9-2174cc53fff8",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "ca515e12-9f0f-4720-b7ab-c9854ab5d117"
        },
        "item": {
          "id": "84b18806-e4ce-4a8a-b505-5ed0b9b1fb59",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "85daa47e-030d-4462-9ac6-8dd88899aba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec4b85c-0e40-411e-ac54-7b2be61c0cf8",
        "cursor": {
          "ref": "efa4b720-1de1-4c0a-b6bb-b4a3f617ca1c",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "54a0253b-e274-45fd-b651-d6325e38ef9a"
        },
        "item": {
          "id": "0ec4b85c-0e40-411e-ac54-7b2be61c0cf8",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7b00c488-97da-49e1-bb25-7ebd2b7f813f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "094862e6-954b-4f84-86db-c6224dacbf72",
        "cursor": {
          "ref": "cbaeb49a-0c51-4b88-b088-7c12a6f2388b",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "00b98fea-f4fc-4575-a3f0-978b991c88c9"
        },
        "item": {
          "id": "094862e6-954b-4f84-86db-c6224dacbf72",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c2556595-8331-4636-8334-347813479e31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a824fe58-7f0b-4be9-b54c-d1b895d77e72",
        "cursor": {
          "ref": "c68ada17-f634-45e4-beb0-6d9ee26c2193",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "cacb5a3e-bcd4-42ba-995d-b7520beecd76"
        },
        "item": {
          "id": "a824fe58-7f0b-4be9-b54c-d1b895d77e72",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "80a8e519-eac5-4698-94aa-22bffc56f983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df66e7d1-c5f1-4311-9ebd-b7c58c2409eb",
        "cursor": {
          "ref": "726aa24f-4305-4444-908b-707be157dc11",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "02c0031d-1e59-4360-8a0b-681ce0b31d72"
        },
        "item": {
          "id": "df66e7d1-c5f1-4311-9ebd-b7c58c2409eb",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "86f49b93-4a80-4f5b-a39e-8fad2b5441da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1f8fcc-cbec-4ea6-84c4-175d7b384553",
        "cursor": {
          "ref": "5c3cc1cf-a85e-4aee-8493-bf602ee851ba",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "06562324-3d4f-4ebf-8ebd-040a3dab8a3e"
        },
        "item": {
          "id": "7f1f8fcc-cbec-4ea6-84c4-175d7b384553",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "30fcf6fd-1d27-4b93-b02f-dc6316b25e63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c579e2e-c9fe-4e4a-be98-5dab47c9493a",
        "cursor": {
          "ref": "c0de5b04-bb5d-4cef-884f-584dc3b1f804",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "f1b1d112-6d82-4dd2-9da0-a73d343b14b7"
        },
        "item": {
          "id": "8c579e2e-c9fe-4e4a-be98-5dab47c9493a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "371f112a-64d3-4e0b-82ce-671bf6e6055d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b543539-84a5-47a7-a484-961cc40cc499",
        "cursor": {
          "ref": "fb81c43c-7f7b-4543-a8f7-5823eafc7364",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "5b4ee167-0e5d-4a19-9c42-d88c7122a41e"
        },
        "item": {
          "id": "4b543539-84a5-47a7-a484-961cc40cc499",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2af813ca-6edc-46ec-b864-cf62b3bf42c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3863334e-9bff-4cf3-ad59-9de7bcfe5ced",
        "cursor": {
          "ref": "005172a7-a820-4c02-8c19-d52d3448385b",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "a23db578-296d-422b-8df9-b10d802999c0"
        },
        "item": {
          "id": "3863334e-9bff-4cf3-ad59-9de7bcfe5ced",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "84baad64-8841-4eb0-a6ab-e56459e5ebe3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf3b37fa-5943-44ff-b1ea-2d342eac14cb",
        "cursor": {
          "ref": "21ec2353-f89c-4778-8825-64d88dce68b8",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "88a427b0-c036-4dee-9d83-7bb714cccd23"
        },
        "item": {
          "id": "bf3b37fa-5943-44ff-b1ea-2d342eac14cb",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "88c83805-9d61-45d4-b5f6-d96d87dd1994",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "af9c428c-1df2-41b0-bccc-fdeaa12b39eb",
        "cursor": {
          "ref": "9a37a236-006d-45b1-940a-ae353a2e87c3",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "ff977f89-46be-4be4-b14f-45ad22c1848b"
        },
        "item": {
          "id": "af9c428c-1df2-41b0-bccc-fdeaa12b39eb",
          "name": "credentials_verify"
        },
        "response": {
          "id": "62a39218-7845-4c19-92c5-cd6388a32c8f",
          "status": "OK",
          "code": 200,
          "responseTime": 943,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2ec2c3-5c7e-4166-b368-3c977deb90b4",
        "cursor": {
          "ref": "d93f1d7e-1047-4c30-af44-4dccc1f8b717",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "71b25f72-011e-426b-90f9-ffa38382ccad"
        },
        "item": {
          "id": "9f2ec2c3-5c7e-4166-b368-3c977deb90b4",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "bb43c40b-63c0-4246-bac1-6b1aee5ff300",
          "status": "OK",
          "code": 200,
          "responseTime": 959,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db0755e-e680-4181-b677-ba645fd895c5",
        "cursor": {
          "ref": "a3a55f75-5819-4e0b-974a-adfe3970704c",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "489c811e-c50b-4748-8abf-c8b7d540800d"
        },
        "item": {
          "id": "3db0755e-e680-4181-b677-ba645fd895c5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c2a14236-d4a7-4391-8778-36b5dee019f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db0755e-e680-4181-b677-ba645fd895c5",
        "cursor": {
          "ref": "a3a55f75-5819-4e0b-974a-adfe3970704c",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "489c811e-c50b-4748-8abf-c8b7d540800d"
        },
        "item": {
          "id": "3db0755e-e680-4181-b677-ba645fd895c5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c2a14236-d4a7-4391-8778-36b5dee019f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29fb1b2-0031-4efe-8062-5b8b1ec491a3",
        "cursor": {
          "ref": "23d45a3c-ebc5-4cf5-a6b5-4def2ec6c443",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "4141d4f3-0cba-4829-a150-c2fb04c6ad83"
        },
        "item": {
          "id": "c29fb1b2-0031-4efe-8062-5b8b1ec491a3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8b748a68-6559-4806-976a-69aacbbd0164",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8ededdb-05d0-4b5d-9d9b-b758508c34c0",
        "cursor": {
          "ref": "36127baf-0b3e-4414-9b21-0b7afe182307",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "d9990811-b6f3-4f13-b90a-440572b06225"
        },
        "item": {
          "id": "c8ededdb-05d0-4b5d-9d9b-b758508c34c0",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "23e847c4-e86c-445c-9830-a57ba15f0f3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}