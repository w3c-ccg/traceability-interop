{
  "collection": {
    "info": {
      "_postman_id": "48960eab-cd9a-4ab1-89ea-44d4a5afb26f",
      "name": "Credentials Issue GS1 Tutorial",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "28aab04a-19d0-4d10-8922-ea5003a612b1",
        "name": "Get Access Token",
        "request": {
          "url": {
            "host": [
              "{{TOKEN_ENDPOINT}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "key": "audience",
                "value": "{{TOKEN_AUDIENCE}}"
              },
              {
                "key": "client_id",
                "value": "{{CLIENT_ID}}"
              },
              {
                "key": "client_secret",
                "value": "{{CLIENT_SECRET}}"
              },
              {
                "key": "grant_type",
                "value": "client_credentials"
              },
              {
                "key": "scope",
                "value": "{{CLIENT_SCOPE}}"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "bc629488-0cb7-46e1-945b-5cfb914e649d",
              "type": "text/javascript",
              "exec": [
                "// Token requests are expected to return a `200 Success` response code. Any",
                "// other response code should trigger a failure.",
                "pm.test(\"must return `200 Success` status\", function() {",
                "    pm.response.to.have.status(200);",
                "})",
                "",
                "// The response should include an `access_token` value - this will be presented",
                "// to authenticated API endpoints in the `Authentication` header (see the last",
                "// testing code block for details on how this is persisted).",
                "pm.test(\"response body must include non-empty access_token\", function () {",
                "    const { access_token } = pm.response.json()",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The type of `access_token` returned by the token request is expected to be",
                "// `Bearer`.",
                "pm.test(\"response body must represent `Bearer` token\", function() {",
                "    const { token_type } = pm.response.json()",
                "    pm.expect(token_type).to.equal(\"Bearer\");",
                "});",
                "",
                "// The returned data includes an `expires_in` field that indicates time until",
                "// token expiration. Validate that this value is a whole number greater than",
                "// zero, as anything less than or equal to zero means that the `access_token`",
                "// is already expired.",
                "pm.test(\"returned token must expire in the future\", function() {",
                "    const { expires_in } = pm.response.json()",
                "    pm.expect(expires_in).to.be.above(0);",
                "});",
                "",
                "// The returned `access_token` value is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// `pm.collectionVariables.get(\"access_token\")`.",
                "pm.test(\"`access_token` persisted to collectionVariables\", function() {",
                "    const { access_token } = pm.response.json()",
                "    pm.collectionVariables.set(\"access_token\", access_token);",
                "});"
              ],
              "_lastExecutionId": "fed4b204-ef4f-4367-a292-563d239f1f34"
            }
          }
        ]
      },
      {
        "id": "c6110082-12b9-4881-851a-4e11a61cadd5",
        "name": "Issue Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "issue"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://ref.gs1.org/gs1/vc/declaration-context/\",\n            \"https://ref.gs1.org/gs1/vc/license-context/\",\n            \"https://w3id.org/vc/status-list/2021/v1\"\n        ],\n        \"id\": \"urn:uuid:{{$randomUUID}}\",\n        \"type\": [\n            \"VerifiableCredential\",\n            \"KeyCredential\"\n        ],\n        \"issuer\": \"{{ORGANIZATION_DID_WEB}}\",\n        \"issuanceDate\": \"{{$isoTimestamp}}\",\n        \"credentialSubject\": {\n            \"id\": \"https://id.gs1.org/01/07541234555551\",\n            \"extendsCredential\": \"urn:uuid:14e1bn15-7ea1-4ed1-be77-c290babe2b75\"\n        }\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\",\n        \"created\": \"{{$isoTimestamp}}\",\n        \"credentialStatus\": {\n            \"type\": \"CredentialStatusList2021\"\n        }\n    }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "e7817f55-ba10-40ec-94bf-7ded4990f78c",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "pm.test(\"`credential_issuer_id` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"credential_issuer_id\")).to.not.be.undefined;",
                "});",
                "",
                "pm.test(\"must return `201 Created` status\", function () {",
                "    pm.response.to.have.status(201);",
                "});"
              ],
              "_lastExecutionId": "c92ea76c-c7df-4c93-8176-67536ae04862"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "1291a3d4-6de5-4132-b30d-faf9eb8f39e7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "25cad89e-b112-4fb1-8389-7149381de024"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 2,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 7,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 2,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 2,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 2,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 8,
        "pending": 0,
        "failed": 2
      },
      "testScripts": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 3,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 206,
      "responseMin": 15,
      "responseMax": 397,
      "responseSd": 191,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1716339577197,
      "completed": 1716339577690
    },
    "executions": [
      {
        "id": "28aab04a-19d0-4d10-8922-ea5003a612b1",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 2,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c5a8043d-c51d-4c81-8643-f1d12dda0feb",
          "httpRequestId": "f40d50d0-5190-4115-a6d1-dfb8cc74785a"
        },
        "item": {
          "id": "28aab04a-19d0-4d10-8922-ea5003a612b1",
          "name": "Get Access Token"
        },
        "response": {
          "id": "396f2486-97ba-412f-996d-984baddaa445",
          "status": "OK",
          "code": 200,
          "responseTime": 397,
          "responseSize": 1339
        },
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "response body must include non-empty access_token",
            "skipped": false
          },
          {
            "assertion": "response body must represent `Bearer` token",
            "skipped": false
          },
          {
            "assertion": "returned token must expire in the future",
            "skipped": false
          },
          {
            "assertion": "`access_token` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6110082-12b9-4881-851a-4e11a61cadd5",
        "cursor": {
          "ref": "5e4195f5-45f1-47e2-a073-a2ac52299a3d",
          "length": 2,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "aa3117d7-8797-4cd5-97c3-d6509b0eb4d8"
        },
        "item": {
          "id": "c6110082-12b9-4881-851a-4e11a61cadd5",
          "name": "Issue Credential"
        },
        "response": {
          "id": "2964729a-423e-4c07-8a98-8d12eb3f8320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` collection variable must be set",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "`credential_issuer_id` collection variable must be set",
              "message": "expected undefined not to be undefined",
              "stack": "AssertionError: expected undefined not to be undefined\n   at Object.eval sandbox-script.js:2:2)"
            }
          },
          {
            "assertion": "must return `201 Created` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `201 Created` status",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:3:2)"
            }
          }
        ]
      }
    ]
  }
}