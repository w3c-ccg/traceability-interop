{
  "collection": {
    "info": {
      "_postman_id": "ff0fff7b-56e1-4a32-a638-2b67cfcfad71",
      "name": "DID Web Discovery Tutorial",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0cdf1c85-6151-43ba-af69-9243beaead7c",
        "name": "Get Access Token",
        "request": {
          "url": {
            "host": [
              "{{TOKEN_ENDPOINT}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "key": "audience",
                "value": "{{TOKEN_AUDIENCE}}"
              },
              {
                "key": "client_id",
                "value": "{{CLIENT_ID}}"
              },
              {
                "key": "client_secret",
                "value": "{{CLIENT_SECRET}}"
              },
              {
                "key": "grant_type",
                "value": "client_credentials"
              },
              {
                "key": "scope",
                "value": "{{CLIENT_SCOPE}}"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "c7816531-7098-4d1b-b1af-3aaa65472882",
              "type": "text/javascript",
              "exec": [
                "// Token requests are expected to return a `200 Success` response code. Any",
                "// other response code should trigger a failure.",
                "pm.test(\"must return `200 Success` status\", function() {",
                "    pm.response.to.have.status(200);",
                "})",
                "",
                "// The response should include an `access_token` value - this will be presented",
                "// to authenticated API endpoints in the `Authentication` header (see the last",
                "// testing code block for details on how this is persisted).",
                "pm.test(\"response body must include non-empty access_token\", function () {",
                "    const { access_token } = pm.response.json()",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The type of `access_token` returned by the token request is expected to be",
                "// `Bearer`.",
                "pm.test(\"response body must represent `Bearer` token\", function() {",
                "    const { token_type } = pm.response.json()",
                "    pm.expect(token_type).to.equal(\"Bearer\");",
                "});",
                "",
                "// The returned data includes an `expires_in` field that indicates time until",
                "// token expiration. Validate that this value is a whole number greater than",
                "// zero, as anything less than or equal to zero means that the `access_token`",
                "// is already expired.",
                "pm.test(\"returned token must expire in the future\", function() {",
                "    const { expires_in } = pm.response.json()",
                "    pm.expect(expires_in).to.be.above(0);",
                "});",
                "",
                "// The returned `access_token` value is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// `pm.collectionVariables.get(\"access_token\")`.",
                "pm.test(\"`access_token` persisted to collectionVariables\", function() {",
                "    const { access_token } = pm.response.json()",
                "    pm.collectionVariables.set(\"access_token\", access_token);",
                "});"
              ],
              "_lastExecutionId": "5465d51f-fb52-410a-8b3a-50037ba694ab"
            }
          }
        ]
      },
      {
        "id": "f391460d-2cdb-4700-87c2-d1e99c5048a5",
        "name": "Get Organization DIDs",
        "request": {
          "url": {
            "path": [
              "identifiers",
              "{{ORGANIZATION_DID_WEB}}"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "4bc46c78-de9c-4b06-beed-15eafcb179a3",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"must include valid JSON response body\", function() {",
                "    pm.response.json(); // will throw on parse failure",
                "});",
                "",
                "// The response JSON must include a didDocument property that contains the",
                "// resolved DID document.",
                "pm.test(\"didDocument must be present in response body\", function() {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('didDocument');",
                "});",
                "",
                "// Service array is used to look up traceability API service endpoint",
                "pm.test(\"Response must include 'service' array\", function() {",
                "    const { service } = pm.response.json().didDocument;",
                "    pm.expect(service).to.be.an('array').that.is.not.empty;",
                "});",
                "",
                "// Service array must be correctly defined in DID document",
                "pm.test(\"'service' array must define Traceability API service endpoint\", function() {",
                "    const { service } = pm.response.json().didDocument;",
                "    const entry = service.find((s) => s.type == \"TraceabilityAPI\");",
                "    pm.expect(entry).to.be.an('object').that.is.not.empty;",
                "    pm.expect(entry.serviceEndpoint).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// If a verificationMethod property is present, the controller property must",
                "// match the didDocument.id property.",
                "pm.test(\"verification method controller must match did subject\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    const vm = didDocument.verificationMethod || [];",
                "    vm.forEach((m) => pm.expect(m.controller).to.equal(didDocument.id));",
                "});"
              ],
              "_lastExecutionId": "98557d1a-f18e-4daa-a9c4-55c96fd65e7f"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 2,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 2,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 2,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 2,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 11,
        "pending": 0,
        "failed": 9
      },
      "testScripts": {
        "total": 2,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 388.5,
      "responseMin": 62,
      "responseMax": 715,
      "responseSd": 326.5,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1690852186669,
      "completed": 1690852187541
    },
    "executions": [
      {
        "id": "0cdf1c85-6151-43ba-af69-9243beaead7c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 2,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "dc908ab6-204d-4ad6-b29e-5b9b55b90def",
          "httpRequestId": "10682b09-527d-4546-a1c9-57f969afb5a1"
        },
        "item": {
          "id": "0cdf1c85-6151-43ba-af69-9243beaead7c",
          "name": "Get Access Token"
        },
        "response": {
          "id": "37f1cc14-f819-421b-9077-23f926b73ab3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 715,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "must return `200 Success` status",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response body must include non-empty access_token",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response body must include non-empty access_token",
              "message": "expected undefined to be a string",
              "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "response body must represent `Bearer` token",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response body must represent `Bearer` token",
              "message": "expected undefined to equal 'Bearer'",
              "stack": "AssertionError: expected undefined to equal 'Bearer'\n   at Object.eval sandbox-script.js:3:1)"
            }
          },
          {
            "assertion": "returned token must expire in the future",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "returned token must expire in the future",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:4:1)"
            }
          },
          {
            "assertion": "`access_token` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "f391460d-2cdb-4700-87c2-d1e99c5048a5",
        "cursor": {
          "ref": "8752f3a2-feca-4409-9b43-d0282d5868fd",
          "length": 2,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "49569bf8-1373-4d27-9624-7434b37aeffb"
        },
        "item": {
          "id": "f391460d-2cdb-4700-87c2-d1e99c5048a5",
          "name": "Get Organization DIDs"
        },
        "response": {
          "id": "578a17cf-eadb-499c-b17a-fe727b0bbd2c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 28
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "must include valid JSON response body",
            "skipped": false
          },
          {
            "assertion": "didDocument must be present in response body",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "didDocument must be present in response body",
              "message": "expected { message: 'Invalid token.' } to have property 'didDocument'",
              "stack": "AssertionError: expected { message: 'Invalid token.' } to have property 'didDocument'\n   at Object.eval sandbox-script.js:3:2)"
            }
          },
          {
            "assertion": "Response must include 'service' array",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "Response must include 'service' array",
              "message": "Cannot destructure property 'service' of 'pm.response.json(...).didDocument' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'service' of 'pm.response.json(...).didDocument' as it is undefined.\n   at Object.eval sandbox-script.js:4:2)"
            }
          },
          {
            "assertion": "'service' array must define Traceability API service endpoint",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "'service' array must define Traceability API service endpoint",
              "message": "Cannot destructure property 'service' of 'pm.response.json(...).didDocument' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'service' of 'pm.response.json(...).didDocument' as it is undefined.\n   at Object.eval sandbox-script.js:5:2)"
            }
          },
          {
            "assertion": "verification method controller must match did subject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "verification method controller must match did subject",
              "message": "Cannot read properties of undefined (reading 'verificationMethod')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'verificationMethod')\n   at Object.eval sandbox-script.js:6:2)"
            }
          }
        ]
      }
    ]
  }
}