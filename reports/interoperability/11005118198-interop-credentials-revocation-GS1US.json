{
  "collection": {
    "info": {
      "_postman_id": "85f81550-bf06-4933-9c9f-5dafdf71929d",
      "name": "Credentials Status Update Tutorial",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f0bf9e45-d900-4e29-9bd1-c3e196962536",
        "name": "Get Access Token",
        "request": {
          "url": {
            "host": [
              "{{TOKEN_ENDPOINT}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "key": "audience",
                "value": "{{TOKEN_AUDIENCE}}"
              },
              {
                "key": "client_id",
                "value": "{{CLIENT_ID}}"
              },
              {
                "key": "client_secret",
                "value": "{{CLIENT_SECRET}}"
              },
              {
                "key": "grant_type",
                "value": "client_credentials"
              },
              {
                "key": "scope",
                "value": "{{CLIENT_SCOPE}}"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "aada51ab-dc70-460b-ae83-3ed448d93960",
              "type": "text/javascript",
              "exec": [
                "// Token requests are expected to return a `200 Success` response code. Any",
                "// other response code should trigger a failure.",
                "pm.test(\"must return `200 Success` status\", function() {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The response should include an `access_token` value - this will be presented",
                "// to authenticated API endpoints in the `Authentication` header (see the last",
                "// testing code block for details on how this is persisted).",
                "pm.test(\"response body must include non-empty access_token\", function () {",
                "    const { access_token } = pm.response.json()",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The type of `access_token` returned by the token request is expected to be",
                "// `Bearer`.",
                "pm.test(\"response body must represent `Bearer` token\", function() {",
                "    const { token_type } = pm.response.json()",
                "    pm.expect(token_type).to.equal(\"Bearer\");",
                "});",
                "",
                "// The returned data includes an `expires_in` field that indicates time until",
                "// token expiration. Validate that this value is a whole number greater than",
                "// zero, as anything less than or equal to zero means that the `access_token`",
                "// is already expired.",
                "pm.test(\"returned token must expire in the future\", function() {",
                "    const { expires_in } = pm.response.json()",
                "    pm.expect(expires_in).to.be.above(0);",
                "});",
                "",
                "// The returned `access_token` value is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// `pm.collectionVariables.get(\"access_token\")`.",
                "pm.test(\"`access_token` persisted to collectionVariables\", function() {",
                "    const { access_token } = pm.response.json()",
                "    pm.collectionVariables.set(\"access_token\", access_token);",
                "});"
              ],
              "_lastExecutionId": "56151e26-e9f7-4ff0-a054-d92dd7ba5497"
            }
          }
        ]
      },
      {
        "id": "d5b7f4ca-fee0-4a4b-9781-684f6cccb7ca",
        "name": "Get Organization DIDs",
        "request": {
          "url": {
            "path": [
              "identifiers",
              "{{ORGANIZATION_DID_WEB}}"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "6b56bd44-5e4a-4625-9bfe-2c97c618390f",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `access_token` collection variable is missing, but it will",
                "// give an indication of why the request failed in that scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    const access_token = pm.collectionVariables.get(\"access_token\");",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"must include valid JSON response body\", function() {",
                "    pm.response.json(); // will throw on parse failure",
                "});",
                "",
                "// The response JSON must include a didDocument property that contains the",
                "// resolved DID document.",
                "pm.test(\"didDocument must be present in response body\", function() {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('didDocument');",
                "});",
                "",
                "// If a verificationMethod property is present, the controller property must",
                "// match the didDocument.id property.",
                "pm.test(\"verification method controller must match did subject\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    const vm = didDocument.verificationMethod || [];",
                "    vm.forEach((m) => pm.expect(m.controller).to.equal(didDocument.id));",
                "});",
                "",
                "// The value of didDocument.id is persisted as a Postman collection variable",
                "// that can be accessed by other requests in the collection by calling",
                "// pm.collectionVariables.get(\"credential_issuer_id\").",
                "pm.test(\"`credential_issuer_id` persisted to collectionVariables\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    pm.collectionVariables.set(\"credential_issuer_id\", didDocument.id);",
                "});"
              ],
              "_lastExecutionId": "bb90d8ea-5dcd-4da9-acf4-392e3f4f8dbd"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      },
      {
        "id": "154022f9-42e8-48f0-a2e2-867e85897c7e",
        "name": "Issue Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "issue"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/vc+ld+json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/vc-revocation-list-2020/v1\"\n        ],\n        \"id\": \"urn:uuid:{{$randomUUID}}\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{credential_issuer_id}}\",\n        \"issuanceDate\": \"{{$isoTimestamp}}\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        }\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\",\n        \"created\": \"{{$isoTimestamp}}\",\n        \"credentialStatus\": {\n            \"type\": \"StatusList2021Entry\"\n        }\n    }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "fd33e1d4-8afc-4b33-bb7c-85227fdab888",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "pm.test(\"`credential_issuer_id` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"credential_issuer_id\")).to.not.be.undefined;",
                "});",
                "",
                "pm.test(\"must return `201 Created` status\", function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "// Verifiable credential must be made available to later requests",
                "pm.test(\"`verifiable_credential` persisted to collectionVariables\", function() {",
                "    const {verifiableCredential} = pm.response.json();",
                "    pm.collectionVariables.set(\"verifiable_credential\", JSON.stringify(verifiableCredential));",
                "});"
              ],
              "_lastExecutionId": "a9fd6031-4d5c-408d-b7e5-d20c382f9884"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "b4b3d05a-ca1f-452c-8ebd-63be5f94b3d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d9d70813-5b84-4084-91be-c6808e1291fc"
            }
          }
        ]
      },
      {
        "id": "439e6842-389d-492c-a900-82ee70af596d",
        "name": "Verify Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "verify"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"verifiableCredential\": {{verifiable_credential}}\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "7e18a7b4-da27-4de4-b5c2-706df10f263b",
              "type": "text/javascript",
              "exec": [
                "// The `/credentials/verify` endpoint is authenticated. This test will not",
                "// prevent the request from running when the `access_token` collection variable",
                "// is missing, but it will give an indication of why the request failed in that",
                "// scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "// The `verifiable_credential` from the \"Credentials Issue\" request is used to",
                "// populate part of the request body. If this collection variable is missing,",
                "// the request will not be prevented, but this test will raise an error that",
                "// will help to identify the problem.",
                "pm.test(\"`verifiable_credential` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"verifiable_credential\")).to.not.be.undefined;",
                "});",
                "",
                "// The expected response code for a \"Credentials Verify\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The verification should succeed.",
                "pm.test(\"verification should be successful\", function() {",
                "    const { verified } = pm.response.json()",
                "    pm.expect(verified).to.be.true;",
                "});"
              ],
              "_lastExecutionId": "d2507ec4-c400-4b46-bc85-82a339d23194"
            }
          }
        ]
      },
      {
        "id": "22d84224-37ca-46e7-b0d9-5aa9acb3fdbe",
        "name": "Update Credential Status",
        "request": {
          "url": {
            "path": [
              "credentials",
              "status"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"credentialId\": \"{{verifiable_credential_id}}\",\n    \"credentialStatus\": [\n        {\n            \"type\": \"StatusList2021Entry\",\n            \"statusPurpose\": \"revocation\",\n            \"status\": \"1\"\n        }\n    ]\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a5a64997-3d31-46f5-bb94-769f463dd784",
              "type": "text/javascript",
              "exec": [
                "// Extract credential ID from verifiable credential",
                "let verifiable_credential_id;",
                "try {",
                "    const { id } = JSON.parse(pm.collectionVariables.get(\"verifiable_credential\"));",
                "    pm.collectionVariables.set('verifiable_credential_id', id)",
                "} catch {}",
                ""
              ],
              "_lastExecutionId": "40f89222-a374-41b3-871a-df51c897a5e1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cd723d04-e83b-4194-9678-1243e21c30ed",
              "type": "text/javascript",
              "exec": [
                "// The `/credentials/status` endpoint is authenticated. This test will not",
                "// prevent the request from running when the `access_token` collection variable",
                "// is missing, but it will give an indication of why the request failed in that",
                "// scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "// Verifiable credential ID is a required element item used in the request body",
                "pm.test(\"`verifiable_credential_id` local variable must be set\", function () {",
                "    pm.expect(\"verifiable_credential\").to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The expected response code for a \"Update Credential Status\" request is `200 Success`",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});"
              ],
              "_lastExecutionId": "aad60ea8-ed84-4459-bf6d-590c34972172"
            }
          }
        ]
      },
      {
        "id": "651a5d7e-54a8-46f2-8074-d3f7da9a2cef",
        "name": "Verify Status Update",
        "request": {
          "url": {
            "path": [
              "credentials",
              "verify"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"verifiableCredential\": {{verifiable_credential}}\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "1f86b286-14b8-4eea-aad1-984dda37310a",
              "type": "text/javascript",
              "exec": [
                "// The `/credentials/verify` endpoint is authenticated. This test will not",
                "// prevent the request from running when the `access_token` collection variable",
                "// is missing, but it will give an indication of why the request failed in that",
                "// scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "// The `verifiable_credential` from the \"Credentials Issue\" request is used to",
                "// populate part of the request body. If this collection variable is missing,",
                "// the request will not be prevented, but this test will raise an error that",
                "// will help to identify the problem.",
                "pm.test(\"`verifiable_credential` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"verifiable_credential\")).to.not.be.undefined;",
                "});",
                "",
                "// The expected response code for a \"Credentials Verify\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// Confirm error",
                "pm.test(\"Response 'verified' property should be false\", function() {",
                "    const { verified } = pm.response.json()",
                "    pm.expect(verified).to.be.false;",
                "});",
                "",
                "",
                ""
              ],
              "_lastExecutionId": "48f68eac-2b90-46d5-9ae3-279494930f98"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 20,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 26,
        "pending": 0,
        "failed": 6
      },
      "testScripts": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 8,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 155.66666666666666,
      "responseMin": 34,
      "responseMax": 724,
      "responseSd": 254.20311214110305,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1727140359103,
      "completed": 1727140360223
    },
    "executions": [
      {
        "id": "f0bf9e45-d900-4e29-9bd1-c3e196962536",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 6,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "18d888d6-8aa0-4e7b-8bfe-40e6c8003095",
          "httpRequestId": "547637f9-d9d8-4672-87ba-c308d3d9a603"
        },
        "item": {
          "id": "f0bf9e45-d900-4e29-9bd1-c3e196962536",
          "name": "Get Access Token"
        },
        "response": {
          "id": "3a407329-ea5d-44ee-a452-98a38ababd15",
          "status": "OK",
          "code": 200,
          "responseTime": 724,
          "responseSize": 1339
        },
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "response body must include non-empty access_token",
            "skipped": false
          },
          {
            "assertion": "response body must represent `Bearer` token",
            "skipped": false
          },
          {
            "assertion": "returned token must expire in the future",
            "skipped": false
          },
          {
            "assertion": "`access_token` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5b7f4ca-fee0-4a4b-9781-684f6cccb7ca",
        "cursor": {
          "ref": "589ed072-87af-403b-a2c6-fcb8b3704441",
          "length": 6,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "72e81ea3-a334-40e4-a9c9-08dcc339f3a8"
        },
        "item": {
          "id": "d5b7f4ca-fee0-4a4b-9781-684f6cccb7ca",
          "name": "Get Organization DIDs"
        },
        "response": {
          "id": "ae7ea8a8-8a16-4e1e-b91f-83022f60fc09",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "must include valid JSON response body",
            "skipped": false
          },
          {
            "assertion": "didDocument must be present in response body",
            "skipped": false
          },
          {
            "assertion": "verification method controller must match did subject",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "154022f9-42e8-48f0-a2e2-867e85897c7e",
        "cursor": {
          "ref": "4f3f82d0-c196-4d78-8582-5df5a63f5792",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7f369a8b-d923-43bf-a68a-43914880808f"
        },
        "item": {
          "id": "154022f9-42e8-48f0-a2e2-867e85897c7e",
          "name": "Issue Credential"
        },
        "response": {
          "id": "6ea3682a-2d78-4da7-87ba-2c12f87e4096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `201 Created` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `201 Created` status",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:3:3)"
            }
          },
          {
            "assertion": "`verifiable_credential` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "439e6842-389d-492c-a900-82ee70af596d",
        "cursor": {
          "ref": "0f4042ed-56b5-456e-b324-5e255badedfd",
          "length": 6,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ab8f4f1b-ed04-4734-ac37-7254a3cd26c6"
        },
        "item": {
          "id": "439e6842-389d-492c-a900-82ee70af596d",
          "name": "Verify Credential"
        },
        "response": {
          "id": "688b3896-bd05-4e70-bca3-8352ac10fc61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `200 Success` status",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:3:4)"
            }
          },
          {
            "assertion": "verification should be successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "verification should be successful",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:4:4)"
            }
          }
        ]
      },
      {
        "id": "22d84224-37ca-46e7-b0d9-5aa9acb3fdbe",
        "cursor": {
          "ref": "03119cd2-6306-4f06-b5ca-55c2515f9743",
          "length": 6,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b1649342-c07e-45cb-9fc9-79484cca1760"
        },
        "item": {
          "id": "22d84224-37ca-46e7-b0d9-5aa9acb3fdbe",
          "name": "Update Credential Status"
        },
        "response": {
          "id": "dbaa9b48-74a3-4fdc-bd49-b9ca8f20a5b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential_id` local variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `200 Success` status",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:3:5)"
            }
          }
        ]
      },
      {
        "id": "651a5d7e-54a8-46f2-8074-d3f7da9a2cef",
        "cursor": {
          "ref": "72a03f5d-2ff8-4b61-9b91-6bc584e3f348",
          "length": 6,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f14d6150-00aa-4496-96ea-90d15e32d9de"
        },
        "item": {
          "id": "651a5d7e-54a8-46f2-8074-d3f7da9a2cef",
          "name": "Verify Status Update"
        },
        "response": {
          "id": "c6f56d2c-a5a7-4228-a6b0-528b6911b04e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `200 Success` status",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:3:6)"
            }
          },
          {
            "assertion": "Response 'verified' property should be false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Response 'verified' property should be false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:4:6)"
            }
          }
        ]
      }
    ]
  }
}