{
  "collection": {
    "info": {
      "_postman_id": "e6ed89ab-9b28-4bce-8769-59c1309f2fe8",
      "name": "OAuth Presentations Exchange Tutorial",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e6e3c18b-52d5-412c-956d-d173da51ce24",
        "name": "Holder gets Verifier's Token",
        "request": {
          "url": {
            "host": [
              "{{VERIFIER_TOKEN_ENDPOINT}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "key": "audience",
                "value": "{{VERIFIER_TOKEN_AUDIENCE}}"
              },
              {
                "key": "client_id",
                "value": "{{VERIFIER_CLIENT_ID}}"
              },
              {
                "key": "client_secret",
                "value": "{{VERIFIER_CLIENT_SECRET}}"
              },
              {
                "key": "grant_type",
                "value": "client_credentials"
              },
              {
                "key": "scope",
                "value": "{{VERIFIER_CLIENT_SCOPE}}"
              }
            ]
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "93048149-ba6d-4b03-9056-62fc2924b1c8",
              "type": "text/javascript",
              "exec": [
                "// Token requests are expected to return a `200 Success` response code. Any",
                "// other response code should trigger a failure.",
                "pm.test(\"must return `200 Success` status\", function() {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The response should include an `access_token` value - this will be presented",
                "// to authenticated API endpoints in the `Authentication` header (see the last",
                "// testing code block for details on how this is persisted).",
                "pm.test(\"response body must include non-empty access_token\", function () {",
                "    const { access_token } = pm.response.json()",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The type of `access_token` returned by the token request is expected to be",
                "// `Bearer`.",
                "pm.test(\"response body must represent `Bearer` token\", function() {",
                "    const { token_type } = pm.response.json()",
                "    pm.expect(token_type).to.equal(\"Bearer\");",
                "});",
                "",
                "// The returned data includes an `expires_in` field that indicates time until",
                "// token expiration. Validate that this value is a whole number greater than",
                "// zero, as anything less than or equal to zero means that the `access_token`",
                "// is already expired.",
                "pm.test(\"returned token must expire in the future\", function() {",
                "    const { expires_in } = pm.response.json()",
                "    pm.expect(expires_in).to.be.above(0);",
                "});",
                "",
                "// The returned `access_token` value is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// `pm.collectionVariables.get(\"issuer_access_token\")`.",
                "pm.test(\"`access_token` persisted to collectionVariables\", function() {",
                "    const { access_token } = pm.response.json()",
                "    pm.collectionVariables.set(\"verifier_access_token\", access_token);",
                "});"
              ],
              "_lastExecutionId": "24423227-9ed5-4dcf-b707-5c2504c6f930"
            }
          }
        ]
      },
      {
        "id": "f1762ed3-8c8d-4a35-9bd3-43896fa534d6",
        "name": "Get Verifier Organization DIDs",
        "request": {
          "url": {
            "path": [
              "identifiers",
              "{{VERIFIER_ORGANIZATION_DID_WEB}}"
            ],
            "host": [
              "{{VERIFIER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{verifier_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "282bf21a-d2d3-43a3-955c-20facb00f3ab",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"Issuer makes unauthenticated discovery of verifiers exchange endpoint. `verifier_exchange_endpoint` is persisted to collectionVariables\", function() {",
                "    const { service } = pm.response.json().didDocument;",
                "    pm.collectionVariables.set(\"verifier_exchange_endpoint\", service[0].serviceEndpoint);",
                "});",
                "",
                ""
              ],
              "_lastExecutionId": "e398eead-b8a4-4bf8-b3db-8e71245fa99b"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      },
      {
        "id": "5dc2d482-fcc9-4c93-b0e2-09c9e0486e4d",
        "name": "Presentation",
        "request": {
          "url": {
            "path": [
              "presentations"
            ],
            "host": [
              "{{verifier_exchange_endpoint}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"@context\": [\n        \"https://www.w3.org/2018/credentials/v1\",\n        \"https://w3id.org/traceability/v1\"\n    ],\n    \"type\": [\n        \"VerifiablePresentation\",\n        \"TraceablePresentation\"\n    ],\n    \"verifiableCredential\": [\n        {\n            \"@context\": [\n                \"https://www.w3.org/2018/credentials/v1\"\n            ],\n            \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n            \"type\": [\n                \"VerifiableCredential\"\n            ],\n            \"issuer\": \"did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn\",\n            \"issuanceDate\": \"2010-01-01T19:23:24Z\",\n            \"credentialSubject\": {\n                \"id\": \"did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn\"\n            },\n            \"proof\": {\n                \"type\": \"Ed25519Signature2018\",\n                \"created\": \"2021-10-30T19:16:30Z\",\n                \"verificationMethod\": \"did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn#z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn\",\n                \"proofPurpose\": \"assertionMethod\",\n                \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..puetBYS3pkYlYzAecBiT-WkigYAlVbslrz9wPFnk9JW4AwjrpJvcsSdZJPhZtNy_myMJUNzC_QaYyw3ni1V0BA\"\n            }\n        }\n    ]\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{verifier_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "2d71a3c7-ca77-49d2-afe7-6885600493d8",
              "type": "text/javascript",
              "exec": [
                "",
                "// The expected response code for a \"Presentations Available\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"Content-Type header is application/json\", () => {",
                "  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                "});"
              ],
              "_lastExecutionId": "dba916f9-9b03-4403-8f83-0ba4fd151d71"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 3,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 2667.6666666666665,
      "responseMin": 315,
      "responseMax": 3935,
      "responseSd": 1665.2449936537532,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1726967819789,
      "completed": 1726967827902
    },
    "executions": [
      {
        "id": "e6e3c18b-52d5-412c-956d-d173da51ce24",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "348127f0-92e7-4633-b568-c6d9e00f5635",
          "httpRequestId": "39fd28d1-b08c-4513-8a47-7a785c6b8e6e"
        },
        "item": {
          "id": "e6e3c18b-52d5-412c-956d-d173da51ce24",
          "name": "Holder gets Verifier's Token"
        },
        "response": {
          "id": "cc7bfa0c-5ef9-427f-bc61-367ecf3b8f64",
          "status": "OK",
          "code": 200,
          "responseTime": 3935,
          "responseSize": 237
        },
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "response body must include non-empty access_token",
            "skipped": false
          },
          {
            "assertion": "response body must represent `Bearer` token",
            "skipped": false
          },
          {
            "assertion": "returned token must expire in the future",
            "skipped": false
          },
          {
            "assertion": "`access_token` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1762ed3-8c8d-4a35-9bd3-43896fa534d6",
        "cursor": {
          "ref": "2b41dff9-eca7-469c-8b1f-6b565ef260d1",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "037c5d0e-1d54-4e5b-940e-c5a87d931587"
        },
        "item": {
          "id": "f1762ed3-8c8d-4a35-9bd3-43896fa534d6",
          "name": "Get Verifier Organization DIDs"
        },
        "response": {
          "id": "2831127e-988e-4bbd-a308-9cdd50684164",
          "status": "OK",
          "code": 200,
          "responseTime": 3753,
          "responseSize": 1040
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Issuer makes unauthenticated discovery of verifiers exchange endpoint. `verifier_exchange_endpoint` is persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc2d482-fcc9-4c93-b0e2-09c9e0486e4d",
        "cursor": {
          "ref": "3ecf2420-7a6e-4ed0-91d4-d6392f1e8ec7",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cd60ecdc-acc0-41e0-a004-2b5bd1bda9d8"
        },
        "item": {
          "id": "5dc2d482-fcc9-4c93-b0e2-09c9e0486e4d",
          "name": "Presentation"
        },
        "response": {
          "id": "ea4e166f-7069-4fdf-9b60-8665e063a10a",
          "status": "OK",
          "code": 200,
          "responseTime": 315,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "Content-Type header is application/json",
            "skipped": false
          }
        ]
      }
    ]
  }
}