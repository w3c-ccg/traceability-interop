{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "8cb0ce3d-f6ec-4bfe-93c4-3a00c4ceb32b",
        "name": "Clear Cache",
        "item": [
          {
            "id": "66c300e2-dbb9-457d-9c76-ff7591535e53",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4fe880ab-319f-4ce2-8fda-49378dc9b6c6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "75460ed5-2142-4c9a-bc32-a2dc05c4774d"
                }
              }
            ]
          },
          {
            "id": "354a01d6-b4cf-40e5-947d-3fc1e8872e6d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "924600c3-eb14-49aa-a537-2cd2baa83edd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "51217f0b-a29c-44a8-a994-ad93f9d8ef09"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "199f73dd-9f8a-40df-a2e9-90d22c74c2f5",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1ba99425-57fc-498f-8a40-98aedd1265d4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b180455b-f3ed-455d-8828-e0c850f2ab3b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7ea1376-935e-490b-a850-806e4e9c04b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "76511faa-6d41-467e-b034-e353dd1cae96"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "85d8a5c1-5ec1-480b-b0d1-f50d333f860e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3996cd5f-a5b7-4168-b9db-72df333e74bb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4305c2dd-5075-4c08-a581-c72d2ea6ec8b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a253edf8-21c3-4c66-979e-45245ff299b0"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "98185c06-6854-44e5-817e-9d61552988da",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1c2526df-38cc-4701-bbcc-10cb513c5bba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd1113db-1984-4075-a855-00f776d02359",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "62267b7d-fe8f-4252-8121-2694e8646be6"
            }
          }
        ]
      },
      {
        "id": "0b2f037c-52e7-4927-8057-2f5305b209b5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b9e8d46c-e062-40c8-8e1f-030d3a663943",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5da98611-e9ee-4e82-8cea-5bc3eb04b894",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a05d10e8-ef98-4722-ac03-e7e418e0b53d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd8df036-d641-4825-bca7-cb73066883cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "949eefd9-f072-4555-a1b1-b7e4b30e29b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "060e54eb-cbb8-440a-9f86-ec03451ed972",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "190d5b33-27c3-4448-aff1-a31b21f254ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35f01770-4100-4fda-9e6e-e406a3ed7c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b4f5fef-ebfc-4efd-8518-9db58a3d7128",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe50c6d-af47-48b9-aec4-aaec9ecf1c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "abd34c91-dc0a-4839-80c6-646b7c2ee2c9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c8bf2707-4c5c-4ece-9376-65d5e22d71b1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fc24425a-c0c6-493c-9462-e74c79c2a102",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "448925c3-f4c3-4442-9913-6a9eb51cf89c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af0fba21-ded2-4692-869d-79b400a38d5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bbc9175-257c-4ef3-8b77-d0e5c6cf4d82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd2e2b23-521b-45f8-98ac-f488955ec03b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2463997e-0d64-4ace-af2d-e47f8d4ace7f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e3bd7f30-8b12-4dc1-a3f9-3a604d4046a0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25511261-f9df-4316-ba45-9d2e891cb295",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5d0c6a97-b9fe-4af2-8388-5b51a04b8303"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "df80e206-b30c-42eb-bd3f-4daa5bb900f6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "123cbddf-65bb-456b-95ef-5a3793abf698"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "46211017-e61a-46ec-a699-4d594a1f4164",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7523d36c-3baf-4528-b63e-8f312c41e7f4"
            }
          }
        ]
      },
      {
        "id": "669a2851-73f4-465b-83d7-e8cf06c293ad",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e4e8ad47-cd82-4cfc-be1d-bb161fd2d95b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b0c5b265-78c9-405b-b576-fd0f266304c9",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9295a88a-cd3d-4cfa-b545-1fdee55c5dcb",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10318dab-c589-4cba-9f13-f7f8fa59d9fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0782c06-6e7f-4f77-8764-247eca48a4a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8890e38e-40b3-455c-8c46-c1b1a5b36268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1bc7a25-1759-4935-8b70-cf625a44020c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b74c61-33a8-4d47-83fd-01829bbedfa2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1131fa34-1ab9-451e-98fa-ec8978825c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db1f9865-8ca1-40e6-80c2-c58984bddbce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd47db2-f7bf-45da-89bb-565fb449ec9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c05a474-30ed-4c29-a455-4b51ebb2f9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50339e7f-81ba-4c7b-9b51-11db538d2459",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "835c7b99-5c0e-4fcd-b947-c5d05c7247c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb74d36-efc8-4c6a-a427-b5edc0544ddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2805d2a3-ef1b-4072-b6fd-b168c8f6a61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae753489-528c-4f74-a901-46a6c1b54de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c21e041-9b6f-43b9-abe3-15bb5736c65d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20edf4af-7b7d-4e43-8193-129bf360e029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34a24770-f6c3-49ab-80ca-211be1393209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee526d69-dfbe-42a5-8408-3d9bddab52ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4753de35-5c32-4589-83b9-18760be93e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e630d12a-f5f9-4ee8-a218-c9081652ec19",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06bea595-9490-402e-9fdd-8a33f557b9e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d779e7b-4913-4458-bd8f-cc70677b6cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85554e81-2cac-4924-8d2e-6ee2086c928e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a41b5d1-17ba-418c-926f-29a9445133e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52f0f33-41c4-4a8f-9cef-557c2b7f75b0",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2bdbd9-0e5c-4799-af10-45ea164426f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a88c9da2-0dfa-443b-9998-a4059afa9059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5357c5ab-e8bc-488d-b110-fe1b916aa168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3c821c6-ff0e-4217-a8d0-3edbada03561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eaa9add-c5fe-4496-92c9-f0608a7be81f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cd2b45a-aa84-492d-8476-baaa1691309a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27bb086d-236e-4e1f-99b0-706019f8f1e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22c9c0c-51d3-4018-88b6-5ca44decf9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9e8d27b-48af-4002-b75f-725d339083b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2720387f-db71-4db4-a193-f454c47335f2",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb9052f4-fab0-484d-8781-78737cbd2355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8de98ca4-5090-4d3d-9501-f7f3994e5ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7540213-efd0-45c8-bce7-f73e7a4d288d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65268b55-c8a1-4a1c-8d9f-f2e4e75936c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e15c68-840f-478a-a4a0-fdce41287237",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a45821c-1b30-406e-b3a1-1d765a07832f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a412f47-8264-4461-94c1-b0f1e734c10c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5778543e-d6ac-4a2e-9f87-c29c777b3324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3304b4e0-d758-47af-ba12-79ba9c7e3927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e9c9c5-327d-4fe7-b242-d91d66c8880f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc3f484-9203-428d-b139-f8a8ce41508a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49cbbba9-7fb5-485e-9fbc-a8e9d85eb4ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9267901-193b-4224-a48d-d494110c63a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f859b1da-a8dc-49b1-a0c9-1bd8b4c5ab40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df90f0f-0d17-4850-9791-48a205f94e58",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "292d9b95-1d20-41c1-92dc-04162d9dade2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27558771-0165-40e2-98c3-063c51f8436c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec52a91-f66d-41b9-b313-3cb315e9eeb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f7639b0-faa3-4674-897a-30921a11defa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea9fb426-3c6d-43fb-8630-9fbfb68bd8bf",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b57bf87-118f-4f41-99f6-53303dfbead2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e816033-dd39-4d8b-8c95-79160848697e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5a0069-39a9-400e-88f6-88a7234fab13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "332188c4-a5f0-456f-b6f4-fc6b9673b7b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01947522-73b2-4ba1-88f5-602b4862687f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fcccedc-b387-44a0-a9a3-d6b19c21804f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a55fde5-d9f0-4193-9eb7-7150ae479adb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "883f2a70-9543-467b-8d71-73d69e4ad1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "873d4f80-ca3d-4094-ba03-89efdc52393c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93bd08c3-14af-434e-a812-b66ecd06ae58",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f517ea74-dad1-4d57-acb9-f6752477136a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcf742eb-4ef5-42b8-b933-76a4357afea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d339e3a1-2c9f-4f22-baea-fed4102258d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d123420d-c6c0-4617-9eac-e3b5af3668bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0015483-4547-4975-9632-4af2920de6f9",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30847fe-afb5-4a98-9e76-9693463848ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03f23f51-8e68-49df-804f-bcf5072e4e81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5886de4c-d71e-4797-88bf-54921b67d2d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b705cf13-19b5-43ab-bdc6-765f16e8ad6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "accf7ad8-06fe-4fd6-9fd7-536c8812e745",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a8e87e6-4a66-4d2a-a8f4-aabdb3a6c8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "807caa88-bd0a-47d1-836f-5b9fb78ac4d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba411b2d-969e-4d69-9dea-b9273b523657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ef0e771-2b56-4254-96b9-2004fd126011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ca0498-1148-4b07-a79b-cb1ffd07b807",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5516c6ae-d5cf-4726-a2ce-3d0d09b30eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0db8f449-4934-4dd1-9f2b-3c69b966bdb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e48205-1c98-465f-a325-11d659600596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "021e5103-c051-4a33-9212-25f687a72816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "647760b1-12e2-4221-aba3-245f7c2f475d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af713856-d4e1-43f7-aed0-a05469cd195b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "913333cc-a995-4044-b56d-760d21fae0f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b60a3b5-e7fb-421b-9de4-18873932b14c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "35ec6fb0-c1bf-4d9f-b189-81424f54174c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07edc00f-a48a-4984-98c5-23a644a3bace",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56792f94-f670-47bb-b4f9-702747fd5d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62e201a0-748d-4d21-b78a-eca0d447661a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cfe23a8-c5f6-4957-ac96-2d73f41f36f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c6df937-005f-47e7-a6e1-5cdf4cc9f64f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c943b34-a213-4f4d-bd2f-24457eaaf9aa",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b7cee7-e43b-4210-8889-be2eeb544b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa115618-394e-4ef9-91ee-091ca9b5fce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be1dc1e-b401-4d50-a66f-0eb43f10218f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa25ad61-1922-404c-a117-1902c02fa49e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b02c0a9-5531-4c09-8829-951daa8d7a8b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c121b28f-fc78-4ab8-90ca-7f3ac76e371a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "226f35ed-22a6-4ecf-b4a0-b3706c8cb8ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f16d534-8af8-4a2b-a6f3-2e5e80c98dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5064a741-8313-477c-be7d-b56a0ed1dc46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e98240-360c-4b30-9a09-5ad81f7cf150",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4ad52e-d150-4ecf-afc7-761f48517b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24cf9e65-004c-448b-a56b-d62be2e752f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c68d82-a384-45e1-a548-1e5cca10879d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "99b0d8c9-60f3-4c3d-bd38-b33d7512b993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5522f5-c21c-4045-8a22-7c1e4ef87a51",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ca5f52-7b31-45d6-b2e9-2cf4127b9a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8477df48-96d7-4d32-a76c-14f3c6c225d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304b472c-2329-4c04-ab06-76244eec6edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fa3bf2cb-0b6e-4d1c-8db6-378341273e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a92391-d44b-433c-928f-9ff270d425fc",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e04bc56-d0bc-47e8-95d3-c45e11e3bb55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0e528d5-9356-42e6-9371-90878fa883c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ae16c9-e6eb-48cc-98cb-43917ec4a7de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9176a4bf-764d-468a-93bd-ec46abd51776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae608e51-34dc-43c2-9fff-95b34b647bbd",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2970b2-69c3-4d13-9dff-63309da9e733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ec9a9fd-6687-4d37-b2c9-cefca10fbe47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547860a6-5d77-46c8-852d-0a86ab42eaef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8de225c-1d31-4f7a-a8e3-30413c41f490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc3166e-d5b2-48e6-83c8-6f6b5fa21bd5",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db3db7c7-fa27-4a5c-bdf1-9f64875ad28e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43024d17-a621-4a3d-822a-f577310b65c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7142884-0aee-47e7-9e62-3e32a96d6f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1145c399-ebcb-4184-8ea2-01d9b70c230f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d9619d1-25de-42b6-b08c-b04e6a6cab98",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b0c3da-666f-4bf6-8a4d-5e3288ee75a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "345284ec-9b79-4733-b96a-9c098c430d68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ba480d-3ed9-4647-b15f-4f3885d174a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c634337d-9eb7-43e7-8b28-ac3d5b5e0726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a98b0e6f-4a99-4bf5-82e4-6b9367764cfe",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e70c794a-6245-4888-870a-1880c61492af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dbe6c66-b424-4e7b-b255-9d77344f872b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376f4938-35be-4fef-9bb0-bb8cff7b709d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc963fa3-4baf-413e-be95-806a5f0a9e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6198d045-49b3-4429-91d7-61afac70b460",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dfdb5a2-5067-426d-96f3-0a6322dca290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28dfdb12-a48e-4fb7-846b-fc2d3dafe1a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdbff46c-2b77-4ef5-924a-f181bb1fd3cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5a6934f-03e9-4c76-876a-7f9c901103c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea30b51-5ed2-440b-b497-fd506e550f59",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "358da895-77bd-4290-abf6-be9032146323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10772172-5afb-4173-ada9-74d368255f3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35825f89-abb4-48df-81f3-69255893a215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "efa60177-b4b4-4136-bc05-55fe4292e9ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a71568-e02b-4f2b-8797-8e7e3f5cc217",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd12ee13-53fe-4a08-956b-1f1491af1e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c14fa9e7-c0dd-426b-954d-17d24ab1978a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa66ba35-c226-46e6-9f19-745f452050df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bd7af5d-c7ea-46fa-b35f-6b3ebf3ab86e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c8223b-766f-4b3a-a034-7ecf1b15f277",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c80ca2-1ef9-42f1-b609-670a80a4be5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d661dcd-25f6-49b3-b0f6-7b5996ca435c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90fd9b02-a147-47af-9003-37119dc74fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb3e5c03-bc10-4d60-8288-a225aa83d4b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74be9ed1-b97f-4308-b9be-9509df65e1d3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "029b54f3-19cc-4ae3-b134-f4e8705221da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98470121-5f64-40df-8c73-f7292424ca74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca0a9120-ab8a-469e-9aa8-b3eb68af83b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d843301-11f0-43dd-8b20-227897e0529d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c70f8a-35ba-44ce-bd78-a1012dfdd8d4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d03eea-2d57-4222-a8ca-aa1ab7389a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37c793e9-81fa-46aa-b006-1637e243cfc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9abb892e-a54d-4dea-b206-d904f85b9621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d4b2f6c-a48e-4217-9d05-ae340191b413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543803fb-b8fc-4803-925b-dba7e5f09c42",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d44ffe7-e329-4fcd-8e01-45ae6ed0bdf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05320e03-3fc2-4af9-86ae-850b186570c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e3c7cd-0f99-4c1a-acd8-4a9e60427ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2289d7dd-10a6-4b95-af5f-6b90337b7d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6e9bad-833b-4f44-903e-49fd983c6799",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad7e255-f43d-4902-9250-5de9b98e818d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5cc543be-33f1-4997-9206-d5aef9d87beb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd4d469-bc22-4cf6-b1c1-dfd7ffecfaf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "66ba14e3-aa0c-4281-b8a4-009e19f38c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a504a4c-78fd-4414-bd24-09786bf79dda",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37848661-be31-4828-8233-1616a0f266e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "825c9738-8f7e-4fd3-bb61-56425fe17ad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab47767-aad2-47eb-a9c6-3d20a19c669b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fe841dc-29cf-4a50-9021-4fcc46ce212d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d2ba1c7-15a7-46f4-84ad-c65938a8bb65",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c91f57cb-eb90-45eb-9009-2a622ab30a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b72309aa-77ec-4866-82f8-88c474c62e06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f70c53-6a7d-477b-96d5-7b81dd64ea4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2df25fc7-e613-439a-97ad-401081988aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147b6605-80d9-4baf-b6f7-661778f32e55",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56f8fe2-4a03-4dde-81c2-442d01e0050a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2d91a16-7ffb-4149-a2de-52f127424222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a91ad25-00d9-4c39-94c8-8428bf2de024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "100af419-10e6-4f69-8079-3bc520a953ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "870d8737-13b2-4b9f-b58b-30439eef6870",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14406a3a-1c79-4b2c-afd0-4e689660b17e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8f2ef83-133f-4d44-9904-9a91f958bed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35af1adb-5e48-464e-b69d-fdbf1ae9cf19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "11dd71ca-9e9f-4e94-887e-a4b3917fda9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78e4a05-7ea0-4dc1-8ec1-ace168d29fa1",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a06fee-84f2-4816-ad0e-4ee1bee20df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a3cdbda-801f-44bb-bfef-0c3194d83cab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72e162a1-1904-4723-9ea7-844f04e094c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e60b0ac0-b6ac-44ea-86ec-45a46458025a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a83c84-12a0-438e-bd7e-84005cb2b366",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08425ad2-4dc1-4587-ade7-e4ab60784054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3f21234-b8d8-43af-aca1-ed94e5f83606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75007bab-ceaf-4928-9841-2dc1398bd9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a946e03e-1dec-4b55-9552-73859f9b928e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3112f20d-411b-459a-a38c-bf699d5f0f86",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c4c484-10c5-49c6-9586-636549a4106c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c229a91-c86e-4d9d-84dd-7ccd57ee7870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53241410-37d8-444f-b4e8-ae3172cbf70d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a2c7c08-5319-49c8-bc38-a94434326496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bebae0b-10aa-4c88-88c4-4266e8798be0",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b56379f3-519c-4b25-81fc-3adcf798f10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9524d21c-8604-40c2-978a-d364438ba8c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb2856b-9b1a-477f-bbd5-4ed904ed5d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f423a2c-6f5d-4de1-9d70-75685a3bcd87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4568e6d-8eb0-4b22-88ab-ffff0b8211c6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "343009a8-fab9-4f08-bb5c-8b4bbdfbb41f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f31c482c-6d55-45bc-adc4-fe96232cdd22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217543fa-61ee-499a-8dda-5dc5ec4aa166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "60ce4c50-e252-412b-946e-b83208c41508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ec2ee0-66fa-4cce-92bc-6c14f797fab6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5899c493-e29d-4170-9ea4-b71e9ae71c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6767cdf7-c9cf-46f9-82e8-ca4e7cedb8a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb2f273-4628-4f34-95b6-25bf37626868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d82fc9fa-40da-4ee6-9d31-3ff0a86e41fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832374bf-fd80-40c1-9aa3-0808f4bfc9bd",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "634b961c-e40b-4af6-b686-fceb0e273d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58d90ba1-0f1c-40b9-aea4-100a17d419a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d8130b7-bf55-4357-9fff-c93f1ac897f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b83b534-af6d-47de-8be9-864a724df75e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8508b9d3-b114-4c8b-bd32-67c54fee81a1",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b56079-6a14-4857-9a4b-9aebd596ec83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15af7b88-cb04-4540-8638-077ff805559a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd808f1-c437-4f00-a21d-3c6bbd6480c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8e9d357-0774-4aad-831a-a194048ac173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be85df01-bf92-4d30-bf13-0e784477484e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa3ca20-fe8b-4fc2-a4e2-bf94343f39b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afcfe58b-8639-44db-86ba-3f0fd7516294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365d4cee-a128-4c3a-b5b3-7ca8bc6308ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae775330-59e9-4a1a-b1c1-96661223a395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1ac49d-2efe-4bee-84fa-2a05a1e9d27c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13307807-0ba5-494b-b91e-9d4345cb74b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d046fbd-f447-4154-81a0-9a0c8f8d544d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c964157-38b0-4401-b0e3-a2d73560b98c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3af2fa83-60d1-4462-87f7-5989d30cb99b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f8c9760-9c3d-4902-a061-6e82fbbdba00",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69ac3a02-cff4-4bc6-82cb-0807838393bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74f1bd5b-cc51-4c8a-ac9f-f2e425731609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b49c1f-c385-4e5f-bb1e-b7593811b511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d41b74fb-68ae-4602-8396-8a16cfe662e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346edb22-98f2-4652-9099-86079fab3333",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92c4378-14df-4a30-ad34-5932ff7eeaec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af7d79db-5faf-48b3-be73-92cbcb0280b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69097bfc-538a-4eb9-8f71-e55641ac240b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bff8b9b-ac85-496d-b24a-fca05439604e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d8f87b-8c44-4345-8b1b-ec84b31accf0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f801c83b-dc1c-4245-b21a-5ee1d446c2e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "503a0fa1-cc0b-44e3-8b9d-45cf5aacaa71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb80ee69-3df0-4b80-b99a-ba8c68c33554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50c9fd85-4b06-4ce8-a8a7-ac16dd2dcf1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7609478f-2034-4ba8-b87f-ceae8ea55386",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5133dc4e-bebf-4ca7-96a2-67febe45b883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0279f64e-68b5-471c-a6d1-c01d3938a0d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf28b9e-bd68-4091-b9ec-214b31b7aaff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "869b939d-1feb-46d5-b4c4-bc5f81387d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3761ff91-a9a9-43f9-8b83-94260692f78b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b2ef07-04eb-4a3b-82cf-0e9847984c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d7b8ae-cb8a-4a4e-bd06-1e13b1fdc09c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f50c433-1373-486d-bfa5-d0f663a6399f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcc0b085-9083-4221-9cde-b84fc64a9907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f9dcca-fb71-4319-9d61-59da8a4148b8",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d52bc4-b0c2-4e28-8e45-9d77de958e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03c7102c-e4b0-4f14-8c1e-40e23656e146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b181786-9831-4427-9e10-f409976fb612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "07b54ab5-870c-4e8d-a59e-00903eaca724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdceb1e0-e69f-42f1-a61f-fb576f0809d2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef210d23-78d8-4a17-a1d4-c8f83ca6fc37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "610caf78-9f39-437e-a39d-d1cd600df7a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d345991c-f2a8-4786-acbe-045bab8fe6a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "931b6181-795a-473c-a315-5fb2ab984a44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db36567b-85fa-47bc-981a-6be6717cc3c8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f329bb-da25-4d65-859f-70bfa0c5a926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d99a340a-2910-4df5-a708-e3279ae5614f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "864b650a-582e-4fa5-b11f-d09cd8aa4350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6cd8c94-91e3-490c-a4d5-eb626564ac6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355528cd-4dcf-4a98-9fab-388d4f62ec7f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5603f5be-e7c3-41de-a3b1-bc6b20c15dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d898bf2-63df-4938-ab78-38abc5c40cb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821f93dc-e568-44c7-9a7c-8d9bedbf3b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3ef49d2-bde2-4f90-83ce-b62905c28e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d7dab1-e515-4f91-bfc9-4fec2d06e552",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef277b6-c45d-4dcb-97c2-51b87e0a4c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a5c77b7-5310-403e-914d-6625224dec5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "272e60fd-cead-4cbc-a893-341085638634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ace11ba1-5192-44c7-bd4d-2228cbf3fafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d970af70-4e1f-4ae4-a55b-83fa3e065730",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd7846d5-1a99-4cfe-a6a0-0e418b4ed752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "374befa7-bc03-4eea-aa26-fdced2d3769a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2fee38-062e-4b93-a240-f4c649ece12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "df6c8910-76c3-4e0f-95e9-1f85ee1b53a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61c15e2-7059-4fed-8bdf-bf7586942f7c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7763535c-2bbf-407e-9ff0-a30a1647d73b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27c6b793-5e98-4192-aea9-8bdea7ba029f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644b83fb-2d5d-4a99-a149-56a5cb4c0006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "13337637-7e2e-400d-b834-2b3f83da1a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d94fa17-3eb8-433f-b476-964fb02e0110",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53dc8e0c-4d40-4cc6-a445-710a5558f30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df574c29-7388-4b10-abb1-f3dd2ed9ece6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3890fc36-a143-431c-8093-0ccb874d742c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdca7974-a87a-430f-b5bf-eebdca20d7c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500d913f-3ea4-48d0-91b4-f212ae36ce7e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4885136d-9927-452c-aa1e-279d87df7d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a40b8b15-a939-4512-bb3d-b2f5a506a11d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78cc99a3-e421-4fbd-9f22-87c657d35733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "919dcf41-a974-4412-ae79-dd9b7493a2fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8676179b-5250-4553-89cb-91ffd1d31423",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6ee29e-d9a4-4704-972c-dbb0c5e5037b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55f28336-78a9-454c-bd40-f16c0b069dec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110fc6b1-14aa-40ba-8e93-1ff955810392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a88f8e3a-9650-457f-a3fd-4df386a86386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1ab1ca-d73b-402c-915b-c693663c3b7b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af73b637-e971-4c54-b933-be0f5b9c00bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cceb049-579d-4b28-bea6-48435e44ddff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f334cd0-19ab-47ad-b0c3-127d14a1fbf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7a16957-0b26-4a8d-b094-cb3f53bd1d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e58002-efc7-45b2-bdef-a481fa95600f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8992120-9a1d-4479-b073-28e01ac9448f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ab2ce63-aa95-4645-94c8-5acbd5eb3b0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c4236a-143d-49b2-9a65-e5a5b9c0c07a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d62be6b1-6781-4696-970a-50c9bd63f08f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b63764-d912-44c0-87ac-0ebdee30d239",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b495cb-2bb0-49b6-aff5-4a0bb82f8a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d1e614a-fe57-4d4d-a333-1db095ff28bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b0b24d-2b12-4ea3-b51f-3a6fe5fd96d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf9961ad-9cb5-41af-b4b0-0d61e1366ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "524686a6-7900-480b-8868-432d7c9410fb",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e64e203-7479-4771-b991-1e7825eead82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "061209bf-99b1-4b71-8e05-2176ca1a4e48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e0f0dd1-4fdc-4c36-a231-62cb67661398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d9e44fd-8763-4cf6-b1ad-131a499f0795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c996d6f-f5ea-4201-8e2d-bed14305127b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00e0786-5fa5-4ae4-9b09-5bac377e706c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5b897b5-9b7e-4bf5-8a76-db5790e1bba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "965e3c55-cf49-42ff-9e8f-739ce989ec0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8bab3d5-46a1-4749-ab7a-57488a90391b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc1b06b5-b170-42cf-8d3c-f1b33aacc705",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d90c59e5-b2c9-493f-8093-b3cb9b58a084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fbdcc46-f783-4022-982b-5487a1b9f194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3228358-d7e6-4112-905d-463a7699b4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ff726f9-5376-420a-af48-5b0cc7274998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9cbe36d-e524-4fea-91e1-efeae157694d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e6a618-2426-4e28-9fa7-8e599cb66ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb1c015-8384-4b64-8801-7441d832766e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55aa620-4486-499e-ad63-b285e87d8f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9968b949-6418-4ac6-b8c9-17038a11080c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c50fae6-d91b-4c72-9e63-b44447a8047c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f457bac7-dbcf-4814-9b80-de34eca874b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e134a91b-6110-43cf-805b-151d77a6057d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e53e1e-8345-409f-a478-ab6b507a5e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a52272b1-210a-4926-b68a-7cec73446501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "927234bd-8078-4b88-a3d8-366190f33b82",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afbe578b-6baf-4b07-8885-983fb46ce1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6474b536-6efb-40c0-b426-893c05f54f3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b42bf5f6-f307-4549-ab44-3a11ffe6d80d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "04fdaeaf-fee6-4c0e-8d35-a5cde543fb99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287215de-2498-437d-8dca-7343cd9ed367",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "404b0de6-bc9c-45cb-ae7a-fbf014beb047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f121c59-3ea7-4a64-9aaf-02ada5b5cb11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2fdb24-faac-4671-a464-42d42d41cc28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a24f839c-b7f0-4d99-9081-60ebc1ccdd07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc1a597-b6a8-43f5-9f83-bc9d58d60843",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a724d91f-594b-4e10-b2ff-034fc3d6b639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b138ed9-7199-4905-a917-7d987ed7b238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06459da4-3c31-46b5-bb7e-2ea26da88fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bf7f1a1-9657-4259-a6c2-5567fe54d0bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b14f2a96-e1a9-4da6-9802-e341a095b432",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e0be9c-5f02-483a-841b-65b9e33b6841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed1c8dfa-0d26-45a2-81a6-7e9b364d7d4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2205da3d-2e37-4d3d-bc1c-bc4d2ffb0571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fc4a94b-061d-412c-b07f-36897dcdd4b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf72b92f-6ff4-4bf1-af80-26cb7f6013f4",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88bb4a90-3ab8-4db4-b36e-44a31a1cd63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c129fab8-42f9-4f82-875a-d560ebf2d625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d82e25-cfb5-428f-9b5d-f8674ad081f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a950b4c2-c4db-411f-a7d4-9c69b3dcde1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baca2828-8b6f-43fb-a3cf-6163b3b84abc",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8eb4cf2-8ffb-49ec-9a85-18a80929241d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29b9362a-3f2d-4a95-8b0b-4a8f5bf5b500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95ee8f79-2d2f-45cf-86e7-1d8e2eb427a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "06f4ffc7-2f0c-47f6-b43b-03b1d3b42c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58cbb85d-1060-40f1-a9ca-ecae3a343e45",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82095ffd-b50f-4199-b2f7-77e90da77ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60a04995-9567-441c-9bad-4007d2879a8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d3fd84-93a2-431e-9c7b-486ec2223af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "46eb69c3-c6f3-4bc8-a1cc-d801c1791f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8bdea3a-fba2-4317-aae2-63c46ee929e9",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b51e01a1-c8ab-4b2c-9125-5188f43366ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8e316f4-365c-4d6e-82b7-658c00dc12b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d01fd5-909e-4ebf-97f9-679941657fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f559e700-12ba-466f-93f0-d0cb3522eb3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b9eda3-8e16-4d22-a003-bb2af31dce58",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d95f709-c13a-4703-bb95-a5357c5804aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb783d4f-5949-4338-a0ea-e73b85684686"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25bfd4f4-5703-4fa1-a01b-6cdce614ee98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0622db83-62b2-4dc3-b6db-063acd5e30c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6889f1c0-5372-48d0-bdce-9e0761ac11e6",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "048c99fd-04b3-49f6-90f2-8e04f8432962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40c1ff3e-0a67-4058-a08d-373857794c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546e3c46-576d-4cda-a92d-45a03f5f582d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "689a9e62-dc34-4693-8ddf-aaeb437f0e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa527d2-343a-4614-ac98-3849ca0dd3ec",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a76a5d-ee1a-4a19-a617-5b471df72b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da2c6cd-d02e-4b1c-8887-4dfd92e863fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f420a4-f185-40d8-bd64-4b0bce38c870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "987011e6-49de-464d-862f-55a5fde38579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "985d1f7d-76f7-4b2f-a8a4-fe87bc9b47a4",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e67672a-a6bd-4d1a-a3a8-26bf96c1d163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df365213-f711-437d-9493-7d35fa1a6be1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16e4897-2d69-45f9-893f-48338a6b1921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "523ce0f2-46f4-4470-915d-57667ea42365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2f3913-c3b0-452b-85f1-541b97f43d80",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ecea8a-799a-4edc-bbf2-bf60f85c2e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12bd060b-ba80-4897-8791-6cfa15e6d4b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f941f6-f45b-474d-9d0a-a40ca099be9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d888bbd-ac91-4f89-bb4a-c5ee08897c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37244831-479f-4096-99c1-16fcf1feb35c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78c76c1-5f03-475c-9bb0-19dd93bdd482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57b9931a-38b7-4922-b67a-eac656202236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3d76ad-8096-45c7-9388-5e0de18ae735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "69f78e86-3692-408c-a077-5a3ba88e7f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "952ea84d-01ab-4fde-8adb-0deff3f6b98d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9019b78-89c0-4c9e-93a0-37f7a01c903b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b22dc6a2-57d7-4d81-92d8-4b6ae144e991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab964ae-98d3-4500-a058-82e823a6bc6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "30fe4038-2667-48b0-9395-ef28fda70598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5af4aa-9df2-498e-b252-69bcc1b64597",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7aef44-91b4-4c6e-b8fe-a1e2f7359ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b424e58c-ab8d-450a-bec1-708bbba099ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba0f68b9-c82f-4822-aa9e-2737986f43c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c4e978c-fdf0-4d1c-b256-3e6fc4849c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d093166-4dd2-40ca-89f1-bceb30076c3b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45199527-6993-412e-83aa-c17c1dc913ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "046820d2-c1f9-4e01-8bea-3dc85f44519c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1dab0a-6d64-4b77-875f-8576db158962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "70986b81-62b5-42ad-97b8-37d960c2f6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b1c6c3-b493-4a33-923b-abef623b8d64",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58989801-5e62-4f67-9e15-64e9a0f6d216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2a53f14-bfe7-40b9-a46c-5cb1d423f85e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16951b50-c172-425a-9f54-81e57bd285c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3b2389b-6de4-4ab9-bae9-fbd64bd5ed7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1059b6bc-a8b9-4a03-90db-f6e659dae40c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d83ca1d-d010-4b38-840e-5c308110b714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c95fce46-4c31-42ca-9a2a-466a9647956d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5469d55b-a882-42fa-86f3-c35bf97699a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "00cbee9a-3a11-46ff-9bfa-8702a0d1449a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4e579dd0-1048-43af-a156-60f1ae1964b8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0ff41c93-4928-4db4-b49b-f6d73d3343ca",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a26aac5-872a-4297-b918-2dacf48dd81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eaf45de0-a4df-4588-8985-390b2a82c02e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5c2a86-42bd-4aa4-90b4-e0bfe13dccf7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a8d8ed1-2470-4847-954d-9155a5f2ca85"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d477d32-3a41-4420-96da-bb712dc65e56",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a2aa87f-0384-4026-aafc-df36d1fa4cbb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "73d81375-dd1e-43f2-872d-e7690ca5a3de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00f657e0-a7a7-4ccb-bd38-0a4532571d8d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e5f608b8-f808-4a62-939e-c18614fe5310",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4bc95137-4750-4154-b76b-313f07d741e2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4883a752-d5dc-4cca-a539-098d38eeb0ac",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4625eece-5e11-4e2e-bb96-7c1c1fe5d256"
                }
              }
            ]
          },
          {
            "id": "1b12200b-3e58-4544-992e-5af2246af3ad",
            "name": "Positive Testing",
            "item": [
              {
                "id": "188d914c-2e7e-4437-b855-bda9b9ffd9bd",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "1f8fd52a-3be8-41fa-b547-6fb7be3dffde",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec4a1a2-8619-4daa-af69-649ba8c07505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "caf4c0b4-80f5-46cb-ab60-3b18dcbeb3da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d42f38-45ed-4a8d-ad07-261349d2be7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36edc478-c67e-4cfb-a039-bd1a47451083"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e385cea0-32e8-4106-afda-30a4c0e349e7",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "346a2fb0-3132-4dbe-b57a-8d7ab8a8b0cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6bcb85a0-ee96-4c4b-b421-774e3de34529"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cee2f29-f091-4f97-a5ab-10e9b8a97f9f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "baa6b13b-0bf0-4208-90ad-660458527c03"
                    }
                  }
                ]
              },
              {
                "id": "9e260ca9-f058-4a7c-82e6-9610a07b4cee",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5c04fee-2643-4756-b8ef-25849ef4f0dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fc621d26-27ea-4dce-b872-70d1829ad877"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00249810-3ecd-4d30-b6fe-068c74923958",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2592ea30-192d-4745-b20d-4525baf7b636"
                    }
                  }
                ]
              },
              {
                "id": "cab014a3-1041-443a-9339-67ca600337ce",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7bc14053-1cbc-4dad-ac99-2eab88d53bbd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6b45f33a-1307-459f-8070-b5109cd52148"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8106182-d459-46d3-9384-1f64601870e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d8ad9279-5056-4a1c-836c-b481347beaa9"
                    }
                  }
                ]
              },
              {
                "id": "f409b466-d419-4a96-a164-18b02b3bce8f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c2bef5d-c0e2-4b84-9778-54a66ce20d5c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "39e6008a-e757-4d50-83f9-3188b4ac7c94"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7fd9117-1f9a-442b-b4f2-b574a013c390",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "9d9b3a3d-befc-4ac7-a71a-063a0341c61d"
                    }
                  }
                ]
              },
              {
                "id": "662eead2-aa02-41bd-b2d1-42cba735c89b",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e3922e8-b4dd-4635-a4be-6b066e9aca81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "75d93b8d-3bc8-4215-a544-b6ad4b12761c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad24049d-9782-4b9a-b63a-516677c2153f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "af62afc5-239b-4f7a-8a97-c8911736f194"
                    }
                  }
                ]
              },
              {
                "id": "b5b7587f-ff73-42c4-93cb-3f874cef8f30",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "639930e6-b7a5-470d-a59a-856caa2e38ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4237f5b1-3135-451b-bca7-40252d639889"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f36b0aa-a377-4501-98bc-68b08a7529d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a5d410b2-0af5-49ba-9f36-f454f5d5cf4f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5031dd3d-b9f4-484e-8613-cdd2df228039",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e15d25c8-301a-42f9-b026-7670a4bab2ce"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fd4aa5de-6441-46a8-899c-fdf6a2aa1ea3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a4bc3a64-48f7-4c83-a96c-c61631a2d3c8"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85a88bea-8339-4589-b1a1-fc7f4930eb39",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "68a48feb-788e-485f-a4a5-cea2a279f74c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7f487283-f640-410a-bbcb-d85cc4e8d51e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1fec777a-4108-4e40-b1fb-09ffa1309d0c"
            }
          }
        ]
      },
      {
        "id": "17a5b322-96bb-49c8-9a64-76646b364227",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "69184987-31c4-416f-b0fd-80da37be2b3a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "649b1e68-71d8-4e54-9396-f8f7461cf3ae",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "45129b6f-dc44-44eb-bd39-b0c601f10b5f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c63c4341-7cd3-4bec-bdd9-b8072ff06d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb996dfc-3d98-4fd0-ae7e-82c80d31cce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c36ba52-7bd1-4a64-856e-9160d072aef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c29c612-47e2-4c0d-bfe4-f3dde00717fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674ecfab-1a66-4591-9c48-6825a04553d9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e73a295-4a5e-455e-addd-cff5cb914048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "901e19e5-77b0-403a-92b3-1fb32056cf32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf38bc3-9ee0-4268-a82d-1040a0cf2d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fa4a6d5-451c-42a9-8d39-f3ed4c8d29e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dfb1d60-64f4-438f-8a54-e8d32cb3a2c6",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd9e516-41bd-4590-a932-73aeed78aa5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bc0a093-f9b6-4693-b6ae-1da03c4947f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f200c99-5b0b-45f5-a684-406d0502eba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "faffb3ae-18c4-4ea1-8e1b-ad3de0a3d5d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308e4116-b38e-4f6d-bcfb-93edd782011e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55981528-6497-49ac-88fd-e74053a8dfa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ae59c2f-eec7-44dd-af7e-41f9d9b9f49b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af08a4d-06fc-4996-944c-b87d0871e130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "483aca86-c67c-4872-ab3e-32840f26987b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27717532-89e2-4179-8644-868ce4f7868b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6706541f-e864-424b-998e-39f10ad62747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a03b78-0183-44ee-99ec-f274ed9d5a7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a17cbe-d10c-4156-8240-3505d6fe5027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "73e4982d-473b-40a6-86d8-408c30ddb363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b90b5f-efe5-441f-a8c0-1519c3e4ec5b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1b90be-2aef-4360-b779-ab330bd0a835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbc1a79b-fa9c-4951-a91b-6391e00b3468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a57e8246-f5e4-491d-8fad-6e17e4bea6be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bca1c3c8-5aeb-469a-8872-b4a2705540f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2dfe5e1-5568-4ecc-8e72-43b9008d82c0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a7938d-d78a-43dd-bb5f-335860200f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e46a2b-2100-4744-b352-020faa931991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d91a5d-4eb0-4b88-8490-06551a27cdf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9ef5f23-e5de-4a19-84e8-08681492c8d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea63e6b-6311-4bf4-94cd-f63f8ddccfed",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aed9df0-fae8-4657-ad34-17a92bf0a0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "096a2dcf-9ea2-4f03-b6e5-f90471150edd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d0fa7d6-823c-41f6-9be0-c1b35410d242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "be021111-b56b-4475-b1bc-975e5e42db49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c81deedf-cd7a-4329-b3ca-98215c57135e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af577c56-50a2-4fb0-a194-638b13b4b0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95241c59-6099-43f4-b3b6-22e78fd6f0a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5becebab-1ed5-4c4b-8179-bc5a2667c845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c50ebff-e874-468e-889c-34595bb6876f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f320e76-92e0-429e-b046-5cc9bb66d577",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0b4390-fa12-4986-90c2-225b8b1a8f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67f8e7ea-6f80-44e4-af75-66ffca0fb7a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c17079f7-aa22-45cf-a446-3e093683c2ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c7884f3-f4d8-4aab-a7b8-3159cf7db9c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8ebe7d-a9cb-406b-96b9-c22224e8857d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6cc572e-2df3-48ea-b241-ef2840811e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db6fe568-0a13-407d-b238-5fc2df1710ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "816db134-9cb5-4474-8981-7a0cf78b2cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "973748c6-9e60-4189-82c2-293343e17ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8004e8b-b704-4d39-b427-d45f47efc3b8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c48e914-2dae-4da2-8c3c-f47ff82afcce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ca7202c-a7ca-4d16-ac2f-b6f867de347a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb10d76-e9b8-4c66-9052-2986bc67fe73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0d9c0433-acd9-4042-98fb-6a06f579db72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a7c739f-4034-449f-a19e-d96b48d5f3ac",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4868eac-20c0-4364-8c48-b59cdf1cf360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "accf9c65-5dfe-42d9-a00f-7a4adb2c2724"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f1218e4-877e-44c6-8bb4-9afc924a85c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3d377e0-6fd7-4c54-96ee-2448f720cf2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8954f0-eeae-4839-b8e2-b18d659ffa0b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a70959c-9375-4df3-a5cb-b51def3f138c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ec679f-90a2-415d-a9a5-def2edfd11d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840675fe-e0a3-4c75-9b29-abb769680878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ff0c0d3-2e84-45fe-ba60-60846032d3b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d48ff996-dc9d-43eb-8859-f012df625163",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55272712-4cd5-4ad6-8c17-d06ea14a124d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67e1f526-4cca-482c-8e19-bdedd2a4e3f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716df9c8-d1e1-4296-8bbb-01272969e206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c43dae96-cb6d-4676-b705-7c3245e21d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85877745-d9f8-46fb-8d08-b7f795e8412a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "297b7b0b-f024-481b-be6b-c0ede74f0972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "912ea30b-6ceb-4190-a8ff-a488d0db1e75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b9197b-4bf1-4a5f-ab0d-8adee8f545a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e223432a-86e4-4661-8cad-8c61b8b7c076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4406b83a-e675-4244-80bd-563d711903e3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "555d614f-9c7f-4206-b6f7-d69b559c6833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe73024-95de-4eb2-b4cc-e541ac893b88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f056a9-1f12-4ca5-9efc-48d8f6994468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "615067a9-ca5f-4c60-94c1-3210e7551186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804b95ae-8c50-4c18-8d3a-3327d7543ab8",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3be01e5-4206-462e-925d-7c55a9aaa4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfbbbb29-3d93-4b8d-9660-db25055918aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a32686d-ea2a-498d-8a1e-892cc83442f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a89509de-b695-4715-8d81-1e5124db4dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9839f3b-2165-4334-9093-4e4f0ddc3d38",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc525a6-c121-4e7d-a3b4-4d2c69774a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eca2db92-0f75-484d-bf16-704f8c210259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07fb5d1-4e09-4805-a161-058b0c11e13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61caee7e-7788-4bc8-b02c-ba34d220bd36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd45d91b-87c9-448d-9abd-6544083e5bfb",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e77664-8279-4bc2-b189-cda95fde3d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36395774-e97c-4ace-a8dc-96aedae53822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ba6744-b0fa-44a7-aa15-ecb511254aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3701e77f-5cef-4a30-a90a-2831c76e8c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9207186-d8b7-4936-a62a-5998359252bb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0f0e03-b3fb-4751-bcf8-8fbcfc487730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46a5b2ba-8582-49ed-9845-8d67152caa76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c5f67b-e8e5-460e-a09c-9d75dd2eec97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90ba65fb-fadd-4a5f-998a-5432b67d13a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af3a0f11-ac58-4d6b-a172-db1e2cbfda05",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14cb28cc-22e8-424f-9bff-65464127fd1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83bfa2fe-ae15-47f0-bf91-a4cdbfcc851b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f9879a-7b18-4fbe-b726-bd87fb419bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5dda9992-570d-41e2-9ebf-777fb040fffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2545d648-ade0-45f2-9953-a9e66e675b1e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eaa0e72-01ab-43b0-8eec-8faf16476cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea1cea2-1f85-4a31-8998-c9542fb11455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db5461e-c133-4eae-b30c-70fd7341314f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1627b842-54f8-4d47-84df-a4a9e9678111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a39ae0-3c6d-4b82-93c1-4cde285ebbef",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0574a1d0-ad11-450e-b0ce-c3d743f4805c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10bbdaa2-d0ed-4aa6-9b74-1cfe6ce13d51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb04b578-871c-485b-9f6c-bf97b20c835f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cabe446-9fc8-4994-a753-099fa3a98c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc0a64be-4c89-450a-a0a8-a2e32a5e9692",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff493ae-c237-40e6-95af-f4e988a14f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c19d926-1a93-496d-a73b-228ce590cad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98032086-498b-4de0-8a25-9f0cea7ee8a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "215fd745-f488-4572-a7f5-67846aae318d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c725e9-2bbc-4004-a44f-1b3f40f0924a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937d7d8b-d01d-4a7c-bac3-1b198c4322ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d41e382e-fb5e-4bda-892a-1d860fd71b84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c607bb-df86-4a6d-aa70-4868ea5140b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcb026ea-0b2d-4b7c-8efa-e429f85721ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06c0ef2-e658-42e9-b20b-749cec500261",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73415e74-8092-4305-9fdd-acd26a2b8963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ccbdb03-a488-4b6e-94ce-243e415896aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab847d6-365b-47fe-8f93-4a38b877b93a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e5015e0-2918-493f-b8e5-d9339490d79c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b89fd3-868a-46a5-9c1e-7184e265e5bd",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d62bf9-8710-4508-8d7b-704d2be3da92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51ddbb91-c25f-4bf5-bd55-ab90ecf1dbc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98dfce63-9099-4d5a-aa37-91d0c5aad947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55d774e2-e14c-476c-b754-15bb6e7190b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f1b7c1-194a-4bb2-8388-3ece1abcf024",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0641bdaf-84f9-4f0f-9d22-bd48cfbad717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45e909d8-e26d-40b8-8128-c38d0c4ad7af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0472a6bc-090f-4437-bf95-ff9592619947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e611306-2a71-4512-8809-4fddbb3d7c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed57d10a-41ae-4381-b1eb-58ed1cd8c2ac",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c119e9ff-4df6-4c68-a8fb-3eabcd5f3c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a582d0c6-41ad-4a54-8acf-a642584ebf3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61cd1590-edee-441f-bb2a-809d7eae9f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "543b41cf-bec3-4619-bfa3-c083850758cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc8c39d-741f-45f1-9755-d3d5caf7bf9d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ede2a71-1690-4dd8-8f52-8ec16f1f5551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00971aa9-6be2-4c02-a85e-a8b54330bb65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979b21c9-2b35-4016-a679-2e03394aca48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f20b1f67-c134-4d9d-a172-934830d73ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ee3684-b426-4519-a127-874b5abb292a",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10912768-4b42-4d9f-805d-56804eff32f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b293f4ae-3884-46e2-88d3-833e765fde21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c13efa3-679c-4bae-a1fc-ab45c2d15509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fa1fe42-d1ee-4974-ba7e-62c5258ead89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cbaa778-c091-4883-90a2-71f3f73c894d",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41987a44-8808-441e-bc62-bc6f5adf32e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "399586f4-ae87-4c6b-a7d5-f4c637dad585"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b42048a5-80e3-416d-9094-b0810d703f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48665adc-cdb7-4add-a6fd-bd5cc886b468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa9d7b6-b1e6-45a4-a6f3-f348e2bee981",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0a3732b-2761-44f9-8f50-e7d37e48fc15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f40a27fd-836e-4ae6-9445-5468ef95fa90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25b6560-d367-4aaf-991c-b5deeb3f1349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02ab16e2-c55a-4942-90f6-df484820bd8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f6338c5-ff53-4895-98b7-cd88dd0f3301",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "047e45b2-fc8d-494c-a8e1-2092fa38d9a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca8fdb89-4ea7-4f3e-8358-01999640f03d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772122a6-5326-4acf-8e23-0f58f0cd91cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9b19935-2c94-4ae2-9cb4-5c5108e4b82f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c879652b-1cdd-4482-9cdf-f496a876af3b",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dfc4b17-e72f-4d86-be17-df580cf34d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "624d94d3-a93e-4f8a-9efb-8335e430486d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3668dbb-4915-4d4e-bca5-87ca58c40c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e20a63f7-117f-414d-aca7-4f6116f3f473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810f71d2-003c-4ae0-801c-16f5d6f16b03",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d9e83fd-97a1-43a0-a50d-3e42fc72c91f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95136f6d-1c43-47fb-9d62-08127db09fd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17bdbac1-e8ee-4f61-b170-f1c9131287c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91ebb233-d6c0-4d56-a567-7e6f34d9c622"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fb9fee9b-d3de-41ea-94f5-7c5f9140be3e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b001395b-a80a-4807-8aca-a9cc6ed1b189",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec08051c-1066-4cfd-9995-3a890142aa41",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "25bd1a77-85ad-49f0-832f-d062f70d720e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61fea2d3-2528-4a48-97ad-ce09301daef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "693b7ae9-6e6b-4e3a-8ba8-fe2beadb172d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "560c41d9-e672-4355-b5ca-511804d7490d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b1bad9ca-d8bb-4b1b-ac54-39b308e41a2d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "53a41d49-df9e-4073-ac54-c22ef27576d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "935507b4-0ad3-4fe0-b0e9-7b747a754d8d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79507ed5-97f7-4385-b621-85f232b42c52",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3f9372ce-e479-44c3-a955-a899ba643ee6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a8b8775b-b0d9-47cd-a942-dd98fe12a0e1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f6eaa481-25d6-4d3d-90ae-9df2d3d10a5c"
            }
          }
        ]
      },
      {
        "id": "f011ab0c-0888-4f89-9620-6961d6d801cb",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cfa0b582-493d-4d2d-a27a-b52dd746e1b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "45edddeb-e959-4113-a641-890c3b5f0abc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "875ac7b0-e732-49e8-9f7c-ffc51e05960c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f2c4b5e-e0d0-4196-8707-11f72dc9657a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63ca6d76-9437-44aa-b412-575663d98b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9beec5-4abf-4bf7-b27c-c3fec08ec413",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89de9dd-b95c-4b96-bcc6-0b291db8a528",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "512b3547-5f65-4dfe-9e0c-73915300dec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ffc69ca-6482-43ad-928c-a7dd12f59259",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c74c5d8-e9c7-4ab3-bac5-1c5c9c35e05f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83497169-e1fb-433e-bf96-eb0e6f13eeaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a55d8037-4144-4cd9-9afa-7f38537a2c25",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d14fea-748e-4b56-bb0a-ec1f7756c90b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32ab737d-b55b-465a-8079-be66e47c3583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66d0cc0-d85d-48b3-a243-551a7bb6e01a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5551d01-364e-46ff-a9ca-a1cba2df052a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df668473-be87-4fbd-87a4-e67afd3103d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df97f306-a304-4902-9d58-0cd92c60fa26",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "394670e4-91a0-40c2-b4fb-6e5b9aea85dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d26d387-58b1-43b5-a6cb-ad2248f59c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9084c172-e8a4-40ba-b8fc-7b8f491607b5",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c6bb0c1-894a-4bcb-9f73-ab5a94ff2f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67b50965-4951-4436-a24a-aa1ca0fac15a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59cf93c5-b554-47f7-9186-46c1969050ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be5e4434-ee91-442b-80ea-1bd9b18bd372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aefdd6c-8cc5-45da-a665-97972add13c1",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e776bc99-4364-4cb9-98bd-230e793e7ca3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74d29d8b-75f7-4db3-a1d7-a2a75632eac1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60e8017-c2ea-4eda-96db-b87f8b7c426c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f7ffab3-6b26-4247-a24a-bd37550099c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44140a09-353c-4657-bea0-59d5b6751e07",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524cf476-8aff-434c-9257-81d9e7f9c4f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "657c22b3-5bfd-47d8-ae6a-72b77608573f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a21fdaae-3891-4278-97cd-79d587f29f35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2205c980-2db4-4bd2-bc9c-9d01e8310160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f680cc6-95ac-45d3-9803-510ed2708b07",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8141d3c-725d-4728-ba49-6e9ee9891617",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a64bd230-5577-4975-9a8c-3a3edcb94083"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc927b4d-0ec7-41db-9db3-06437243eb0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9ea63b6-010f-4684-a996-e5b6c16307a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09704f9-ba18-4b1a-9cee-af426936da26",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32aa947-b827-4aba-94a3-ec99b0ebf2ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bcb8f1d-09ee-4c52-ad10-285c31f1effb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d2c4d2-776d-4e89-90c8-6ecca917475a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "930141ce-ee65-43ea-ba8f-b87af9162169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e01a06-c580-4df7-9c5a-5a23d6d15b2b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eab92f4-d5a0-4b25-b742-f2b1d96a63de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f019d554-aede-4085-9df9-fa59e200d977"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e633175-b6da-4d87-80fa-7ae33763586e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d20388a9-305f-45d2-bf6f-819f3f9af53c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66763da-3501-4886-b7a5-31f0152806fb",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ecd8d44-ea07-4af8-9fd9-0b6ef1306bf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1cdd18e-cf4f-465c-a53a-47203fdd7948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c5a1731-833f-46f9-9869-c2b57bbfe8df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b597745f-9a31-4707-9c8c-c354fc7c3b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49bb2fd4-5ad7-4b8c-9d75-0f811dc1f7ea",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cab9a83-04c6-44b1-9b91-e56902d66595",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af54687a-d626-49d7-aeae-5c0ca1cd6d8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e864139d-2d07-4aaf-8c6c-3c9989b2c739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da76e074-96ec-4246-bd94-84d7635af5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397ad164-f16a-400e-afae-0f0d98d261e3",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2eafb52-1636-4f86-a5e7-989aad1c3abe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f440444f-61dd-4790-b031-a7ba8671a64c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "396d216f-aa28-48e2-84ac-435c492975f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c8d6324-4e54-4044-84a3-7d1dcff1617a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0935896-deed-4b08-8b82-0a93f8fb90c4",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a77b0e-7b07-492f-a12f-c49b3a3da5ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd172ec7-cd85-4d08-901b-1a8825be0939"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b795c5-f3b4-4070-924e-1fa88a965234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd758b74-7e00-48a2-8e9f-f968e0e2aa4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f89837-aa07-491f-975c-271951355271",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441e72f6-8b8a-4e14-8466-03f6d0142fe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a25b6b22-6838-4b84-828c-933d1f72c4bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b838f0-98cf-4e3e-ab21-ccb1057bcc6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbd8d018-4178-4953-9fc2-3f9baf4ea01d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbebdc1c-70d9-4d88-9d96-407e724050f8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7980a015-f55e-4b21-b6d7-6e486195e1e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16f02f3e-3ebc-484d-8d47-c6d01a93d2e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c61ec94b-cb8d-4295-a181-be500f2e3ee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb832c8c-b0e9-4814-b93f-b319f9b4de88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f906d0-8e67-4856-8a9b-aba47f9512c1",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f82061a-ce6a-4a0f-bc81-5df3eae50fab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae74547-84ed-4c5e-838e-6213920bd0c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5471a090-b43c-4c61-a96e-bb4368fc6045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59a410a7-ed6f-4729-a01b-dac774e15032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34146d57-a815-478f-8f28-ff0a9201db27",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b281a2-a757-4985-9926-46ac11efde21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91286d39-aa93-4615-8f78-c738952bf8fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a142b74-9cb3-4fa5-83f5-41e40421ce69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9535bac-f327-4164-b776-29fc7753cdf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f7d5aaf-a534-447b-be91-a1fb449137c8",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3ce212-e026-4788-8e15-12d9b9b6cc71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd8f83b9-c26f-4e21-965e-668849f630c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d132b2a5-df49-4e15-a92a-15f049f633ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "545ac9f4-e479-4397-acaf-a6e35e9ef71a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058496c8-e613-4f75-8090-8583a9196095",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e18bce3c-49be-4cb2-9eae-0ce97ce63c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fd816df-49a2-40a0-91a3-99a6f4b41a27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e150be-29f5-4d98-9be8-adf0fe371d55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b67a1808-b672-4979-94bc-80a17173fde6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c39131f-ffa1-4249-9cfe-90d8f2a45139",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c36fb1-dae1-477c-a596-76495f9da834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55ad1638-e146-4804-a1f2-105807e1925b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1759c020-e287-4966-b51e-c6bd01f18d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "488904f2-ef59-4cec-87c4-bdba3c54a10c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18747b16-4cac-4e90-b169-044e7a1e566b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee925f4e-5139-4a5d-a5a5-d36dbe9a3dfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3e6fc99-a10b-42f4-8384-7f94e719d2d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b421f06a-583c-4b10-94c7-4922d3f48336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec5b54b1-3db2-4fa0-ac50-5b895425ad3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a6e521-e8e2-48be-b080-9e6d69a28115",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe198be-f83a-4c2f-8be5-47141d4673f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b2b4940-146d-44a4-9d90-e796b9569a29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "531b925a-de52-420b-9dad-535bfebe434e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ee5ca7-7dd4-486c-b69b-c2197b6069a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c754904-ff55-4d2f-a215-438502688b77",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877204c5-88e9-4a3d-9972-060715327cc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0217b85b-0a55-41f7-830c-87d460a434f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc71d19-6114-4f24-ba5a-90a2b4d081f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbc747fa-57f0-4d20-9ade-dad5b96b961a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6097255-64c5-4256-8420-65ed62edbeeb",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff22ac23-bcd3-454a-8bae-25f2fee5fc4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f72e4eba-deb0-4af7-8862-2d0dc60cba9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "386f5f08-ee68-45ea-88b0-c6f0ae1ccbd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8875c64-d529-466f-8d95-b6d6efba352f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf6d295-e7dc-4588-ad8b-212571a8bc80",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e137ecb-e679-4b06-8312-5d4c3da90487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edcf15ca-c854-4dae-85db-91fa034819cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a8ea6a-1d23-4966-a17a-180d96b7e5f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd199c3f-9b51-4942-a72f-dd8c9ed18271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55c424b-33d8-4c48-bd1e-730a9360b8ee",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c877a7e-aa62-439b-955b-1fcf17d010f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3c87c13-9c6e-4ae5-8a31-b506c8ebf741"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aed35c4-9ac8-4792-b14c-1294529d5bd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b333d105-28ef-4686-80d8-965f616c63df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7973d8be-b46d-4b74-a6ae-dcacc2b5a27c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a87cb7-47d6-400e-bc64-34fc56703c4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "752094b4-6f31-4004-a8da-c0445a6e3bd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6b99c1-5d65-41d0-b192-71e1a7ff54cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6324963d-88e1-4d7a-ad8a-1480e64fd2b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cdede2c-f31d-477a-aa76-8cc6220822cb",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "963a5fc4-136f-4927-8bb4-e8b609a47e24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a90d6af9-9ad0-4c6a-a1b2-ed6dff8263b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd7cfd7-b354-4910-9786-c850681e2da8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "702a5c2f-f744-4b76-9201-11086eea179e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "562d141c-caa5-4a76-afd2-9fe47add3c79",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07096d4f-19f2-4aea-98bb-8a62e2f4e224",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e4fe5d4-6476-413a-8ffb-de26636b0707"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd74839-e7b6-403a-91f9-1b6506782f28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6591ac5-2b42-4ae8-98db-5e0116b4b6af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b08e2dc-b08f-4562-9459-7559d750dc43",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d3049a-208c-47a5-9d0d-15b7ce4578ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e370e13-d685-47a1-80dd-bffdb922dfaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ac8095-ad25-4a96-8aae-4cfc5e21d894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "296bd021-cd9f-4f41-bf19-7491822a95c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dfa6ed9-acca-4ef1-aca1-7b335de6b4c0",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "098df442-3f82-440a-98fc-0a35994d290c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f774b4e-7fe2-4ff8-be78-bfa85a0ec63d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53066764-89fb-4d40-a848-2ea720a8a8c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "777bfe2e-128e-4e42-afc6-a34a4e177c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5cfb23f-953b-47c5-8d67-464860ce8708",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643ea4c8-e7f5-4d0d-8cba-e98ea79c863f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead486e5-7b04-41a0-8aa0-a99264b640d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c785ed21-3cd0-4b5e-80ad-9e71ce9f5bf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbb0f242-2e1c-4fa5-8126-75d5a762161a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b6df97-7b3c-4aae-a8ad-54297cdecc05",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d6d7fc-005c-4446-beb1-5e93c3e893bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc33476b-c728-49e0-b87d-7db11798a437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d826ef-0713-4798-9f55-f6d04fcc1fa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f505403a-1aaa-4c84-b6a2-174d9624bf20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "127032f9-0f2d-4b6b-8615-4f3c3e530b22",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42756bfd-9c2d-4c5b-b43c-22c9767043df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eebd491-fada-448e-bd42-332b76938752"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b400dfa1-fe5d-481f-8140-7955f5455566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86b6ae86-5e0d-4c6d-8d77-d63df75cfc95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e32dca6-a225-4a66-bf49-89eb0fb0f85b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ad670c-d8a4-47e7-823b-3229ef87e187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "417e2847-d843-436d-93fa-50c677e6926b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89924971-9b68-4903-82f9-26e896422d5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94e6deff-8de9-43f5-8c9c-9060720c3cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5468eb24-064d-42bd-8029-b401d50084f4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "943cb348-c25f-47f7-8b54-b7f563975ccc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fec60b4-f553-464f-ac1f-3874671436b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02d6ff02-cb82-4165-847d-5429a66ceb8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2057c67-02b5-4e8e-b235-8f3b801630cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5499848b-3a42-4560-97da-0b94da0fd13e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34769e73-1df8-4510-b2a4-98085f439412",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc1ddc20-77df-42e3-8d6c-3170aa44bcc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e38a6f-8ba7-4ee9-87fe-28f904c4e45c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8fb72f9-2bb1-4c40-a134-66f9a58ebc6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846b333c-66a7-4ffb-88e9-c39b4806a87a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b19aded-0ccb-427c-8c31-acb773b80fdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8646c288-431d-4745-8eb0-3aa9a133584d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a8dd64f-4be2-4f53-9d99-e31dd85f797a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03d737ab-213b-495b-a949-4c0cbc29a7db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "841bfa25-b35f-4199-ac9c-dccdd36083b5",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf976942-f33a-415b-a944-32bbb5502807",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d04964c5-1f6b-49ab-89b3-32b39ec114eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f811f549-7e3a-471f-919f-d5ba9852828f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "577af67e-8c42-4774-8a5f-add631760dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3417d2d-7ac8-4781-aeb2-2d85537a9d8a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22872a8-d3d6-4961-b532-eec6afd0e771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eb73ed6-2650-4815-a442-257b896e5a08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0447e4-ed34-43d8-b7e9-3a57866e80f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ae70ec3-db7a-4d9f-a0b1-7656f531a7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b0bc0a-85ee-40fd-918b-b2bbe5af0936",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70cb723-93ab-472f-979b-534909d8792d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ef9c0a4-8d0a-4f49-9345-b4f1e7f3d016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66b0484-230e-48aa-bfe6-95e29fcef217",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d8388ce-1570-488f-902d-fbeacc5cda69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0867db24-ef97-41bf-8116-f05401fbe3e3",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b35345-3e9f-44cd-ab8e-bec868605a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "396f6993-9b83-4baf-8148-a78f9db3bd79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b12fe1-2bd9-4a1a-9db6-df47f0ddad13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0af80c3b-13a7-45a2-8e64-8944229ba68d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb3de116-2fa9-4ba4-8561-27c15710a4f6",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09f43f05-0e81-453f-813e-1dcab52eb4fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71a50d7f-cb70-4e22-86ce-f21f4200b4f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f8d2c6-3dd1-4eba-88ac-d606484d083a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a746324c-3cec-4457-a7e6-0531a4bff719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3f13a7-4d34-4705-88fe-820583a8764a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1d15a1-2de5-4c56-927d-3755043df984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f840bd63-d9bb-49b0-a64e-6aeb290de7b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af72182c-fd7d-4b26-9969-34808859cb4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86cf775c-93a6-4112-88c7-0242fc9342f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2936679-2716-462e-87d8-b7d4f75047de",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8affe2ba-4662-440f-afcc-15106dced8c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbf929e3-f0b4-4260-ab30-f481b5fbf3cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "863ab37a-4d70-452f-abda-99a2578cd43a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16645ddc-b146-4f2c-802d-f9876c3ca687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24135375-85f2-40d8-b69b-6dfcaf5299bf",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114ec72a-bb07-4d08-b906-a73767fed62f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02932116-5116-42c5-9d68-3c780b0265d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc32884-e2d6-4a80-b50d-ce49445908ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c46731b-f076-445d-b3e1-5986ae319df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6536b158-07dd-45a0-8793-47fc8dc8addc",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356751f6-d5d0-4ae5-919f-c91cd9d43e0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1085e469-6e63-402c-b526-003303903ba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7f421f-e5e3-47fd-b46d-0c090a0c3d5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "839a474e-462d-46fe-9452-80ed2cab997e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580602ba-1142-4440-8c40-64d795824431",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11d8d49-7276-4fd4-afbb-4069a87330f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45dfb7c9-b73d-4cfc-a36f-bd4b05a66d1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42a2fcb-d906-4183-91a2-e6d71ef3d922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efa094f2-e0a0-4b2b-9139-36e8c8cb07ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfc4d15-f9e2-4899-b08e-e79af0056145",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b3ec6f-8d9d-4f94-9040-2140bf8a4515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60d2a252-5f29-4941-8475-aef1dd3b9fc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96f3b58-6ec5-432b-9957-05e4fc47d1bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd2adab7-6b02-408e-b6d9-94cbadd34ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e0f3d14-99a7-4070-940c-a9e819608eee",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ac7138-05d8-44f4-bb00-f11249b5f1b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c47a76a-40c5-46d1-a8a9-1ef1e911913c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5020b9-eb1b-43f0-8c98-7c47ba0b4934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0689dac4-1eaf-4702-afd3-1c26d8c82368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba3c0a3-b785-4b88-bfbe-044050298a67",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6416240f-7d19-44d6-9050-8b8aa8dbc07a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9367aac6-f19c-4e2c-95cc-2288acf04c12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce681bd-7648-4126-bfe1-92ab27cd73c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "537b6384-f279-49c4-a587-3af749f6644c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48cbc78d-53f5-4b3b-89c2-ceaa75db2cd3",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97657ad4-0e73-42e8-b7c4-5a9841090e0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ec9e25a-a3a8-4b62-8424-2d92ad28772d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "652323f5-12a1-489f-a2bf-5325714c8014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82329f3d-4498-4323-879c-4f3a0ec9ff0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "330e7b6a-2101-401b-8d48-963b77481de4",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b775c7d5-9f9a-436d-adf2-ed49ac6c0bda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93c3a688-5d70-4dcb-a678-cf4543299107"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7acbcfd8-3431-4043-b413-40234cc38f16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ed57ae3-7dc1-4a0a-b523-36372c556b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3094196d-f07c-4dd8-a7bb-61065a5ea45d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fc18922-bff2-46ef-9687-71216b0fb246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff0d269a-eea0-47f5-9498-5dcde9a9c126"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b94e9955-714e-4001-941c-73986fabd02f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4f68687-2b25-4c64-9320-bb51e7731b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d114765-51c9-4c1b-9fe3-4664e047f010",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4d495c-4373-48cc-b518-1887ee7d8d00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81688d3b-4e78-462a-8bdd-b186a80bd432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "062f82d5-2cf6-4390-9e9e-5d7286d89e41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f72b8db9-d136-4c29-aac7-4bc6c7aae03a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0bcfad-438e-40ec-87c6-83ba3790995e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ebd12e-5ce4-4bf0-8dc0-ba1306690a26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21674084-05d4-40a9-8dee-f335de8a3e51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b83a319-db8b-4e7a-bcff-dabc3e57c4d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3b270d7-df0a-487b-8c01-a3d5e2d20a85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b8e8da-9548-4126-b3ff-ac2e09e64d57",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb880fb-0ccf-4c51-a51d-c7704abfec3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdf37bd2-8c86-4a07-9af9-3869fd35ab9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc380e6-f476-4ce6-953d-95a407c74222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db4193af-9605-4c4d-b6a3-bdd4667fb42e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2caa2d18-d969-4e6b-b5ff-af48ce76a9ca",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d65ad7b-bbae-4bac-b9c6-5a6d41b398c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "283de1af-73cc-4389-8721-61362c7e966d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b65f33-1034-46df-bac4-3e3c11fc2369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "193db6e3-6b54-4702-b3bc-f0cb2d34ef31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec132f67-c97e-4b8e-8d61-326a528a3316",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2c3261-7166-4880-8118-dc2c640c974f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4186e4fa-d656-4b6a-841b-4821cc7ba4a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc77fad-6ca6-4552-a4c2-5fb4411a1ca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd6942e0-c2dc-4802-9349-80a4307eb367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be5c49f-13f4-4910-9f91-85362643be66",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3486f5cc-15ef-4430-ae5b-93b8304822ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54fb5779-37e3-4245-9078-a541ef53d9f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d2f958a-7695-4786-8865-930a2cb50c71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac228273-0c54-4d60-bc71-67ce1d333a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57f209a-c5be-4be5-9dae-a2b6764d520d",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "645b5bac-5e3a-4d04-9123-ec12da3ca255",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "665d9cdc-712c-4bb9-a57c-c5356a04b9dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3a5dab-16e1-4931-9347-d8b4bd151484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9332dfbf-f9d2-4dfe-b2e5-59e0ae7bb625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c97701f-030c-46cd-8d8e-7ff97ba33514",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f700caae-21d5-4550-9b2b-eb406ba19f73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67dd6c29-2918-4bf6-a788-da0c496bfa31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ad0454-617b-41fa-8088-bda7341678d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51138df8-6711-4b61-9996-f7c7459d5823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d7b6da-ebf2-490d-9e4c-029fa225a869",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "863eb75e-75b5-48d3-86cf-9231b42cb09c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b226a642-fa86-4e15-bdda-517bc383f994"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d29717de-c8f7-43cd-95a8-e044d763df69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5ebb18c-a151-4a4a-8246-0f33996ee932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1259c24-f2e0-4422-bb41-bdae5a4c42bf",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a161bb4-7f81-46d1-90d2-c85ec4f63552",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cab28821-275f-430b-84cd-d892199c443d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b5dcae-760c-4af4-a5e4-4f9c4e9f5c38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5978f14-b82e-4620-b1ed-d0f31a8551ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5746aa38-f6c8-4011-bc30-ae3eaa052bac",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84dde71-ba3e-4c32-b449-97fd0aefa42c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92b9f6d8-6088-4746-90ea-db8275e7663c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f649d357-edf5-4543-937d-fb6bcd9e326f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c0eff4d-a918-4f8a-9f06-07d65cb69d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d17d0a-cbeb-4f85-b810-81b8fccb4477",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc9094e5-f7b2-47d6-9f6e-0f46458ca367",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d35ae1db-9072-4a60-adfb-7513e0b6578b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebdac3b0-052a-4e59-b80e-bf6f1e21ca98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52bfbbad-7a21-4457-900a-33e4cf3e6f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfee522-4c1a-4684-bdfc-b00c96fb94bd",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7baddd8f-8a42-4e4b-b390-beec1d25c884",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70c4b97b-052e-4335-b1ee-29cd6e644026"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b99112-dda4-4a18-b94b-046e5b4df290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b38297e5-9f71-4947-ba8c-5870e31866db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52fcae7c-b90f-4491-bc44-192bf80cd118",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95601fe7-920d-40d7-8693-114a4dd868aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2366da5b-97c2-4368-afa8-ef8c0a87cd2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d3064a-43dc-462a-bb9d-f5457430f842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "639dabbb-8b64-48f7-b227-9eb045a38a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1eb229e-2af6-4450-9f42-d5cc0f3ce5cd",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc9ad94-dfdd-447d-99a2-a870aa33c1e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fb4d516-4bd3-4989-ba17-47f4a7d2a8d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd0a3313-934a-45eb-9a37-2ee7a6077998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4979cf48-2c76-49a3-afe9-b7763b237f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e350f2d-fd0a-4291-81ed-0b012d81a2e7",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa425445-2333-4700-9627-fc471571ddf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82006aa9-3570-415b-949f-65a388d20bf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec72de9-ecfb-4d62-b04c-e579cf9d4ade",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08d337f4-94d3-4ce9-948b-93692527c322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b6e1ea-2fa6-4557-9269-7f76a958e594",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1cf29a-9566-4861-95f8-93d6fb1c5e47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63d019ca-7f81-4eb2-9645-9b7927b7ace5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfad1ddf-e3c4-4c05-b469-df0abdcd759d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cda3cc7-97a1-47f4-8678-2baf4619cdc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a84f927-3ac0-480f-8d10-4d47da0727a9",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530f001f-97c8-402a-b32d-7beedf062fca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7c82a0e-92e0-43eb-a549-fecd789fd711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0416e928-a428-4483-b922-29d6ec7be81d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f37d09f6-9690-4e28-9bdf-bbc27c7b57d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6219035b-a6ca-4da8-bcb6-0e3819ce76bd",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616f8752-18e0-4036-b870-d29b61d296d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24786718-2aa0-4788-8e1c-942c29c274f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7badcaa-71b3-43a5-bb54-49cd87dd9c80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffcd6f7e-95f9-4280-a9d7-8398c43aea11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709d8868-2be2-4336-b0b1-75835796e0d4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a389850-115b-49fa-b831-b241ae7d2a69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8ffd324-c955-4136-9517-770b964128ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "718e0127-12d5-4981-9591-126f8f7b0777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af51870d-ad31-413b-82e0-5a3a01622cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb83cf5-c8ff-44d4-aedf-3c360c4133c1",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20274aa6-0ee8-4d8d-a85f-01c803c53e6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a675f5c0-68a8-4795-94eb-97dfb231b3e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62445800-6c48-4f22-bfbb-e22cad7e455f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5068e8f1-7217-4cc6-90e4-7e4c9f50d1ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f07b9fc1-771e-4700-9ead-11aaa223beca",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a24eb3-9e3d-4bad-9b33-a98aab071193",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "650dac26-a006-46f3-a236-76fbac652bd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a4bbbb-9f40-4936-8995-2d9b356d1e78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ca576a1-8ce0-419d-aabb-6bebcc6623eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c038cb6e-0fcf-4b2c-8318-02afbcb124ae",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58aae25-1a43-44a4-899d-5f946bacda10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87e44f69-6960-4836-90ce-7ea158432508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c921f4-c380-4cce-9db1-f82788266593",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b343c3c5-4377-4967-9756-5e97f2d22edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48575c7b-f083-4995-9fb4-eed51848a71f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "322e340c-47d0-44a0-b94d-4d80c955b89d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "454f0248-0522-466c-8098-814592308e45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae8abd5-a6e6-49a2-9a55-1a1e3405078c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63e333df-1d43-460c-a26e-70b6c6c53d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d58bdad1-25ad-4514-8662-ab726f75b456",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c01516-7bda-46bc-b056-5a76c8105971",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "608249e4-6b69-4a7e-91be-534bc7da9e79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe3dc78-3ff9-4fb8-9a2a-28be4def9851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4b87f88-c24c-45ab-a1db-b8a7f0886a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f1f1cf-c193-4b08-a9d0-99707ef39b37",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55672c18-dff0-4f5a-be9b-8053951e2d14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "316f55a7-c784-4ed7-af2e-6dd59bb660d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2740bc56-ac5f-4811-9bfb-386c29f6ec2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc820994-ad4c-48cd-a8f4-d93079b15115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52bc5156-1d6a-46f9-9050-25a73929bc36",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a65b4ff-d6f9-4251-8b79-601300d5171a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a3e0f11-e24c-4609-8c07-2461cf751dc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99904a4f-7823-4a20-836b-1bf289556355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35a601fb-cdb1-4fcf-bc7f-5e8d655c440a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308ac343-3ad0-4038-b8d5-a01d58a788b1",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892e93e3-c50c-4b79-a9df-8598ad12790a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ede32e4-9f4e-4619-aa5b-8eb4fde46a1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0eaf586-ab89-4046-8a3b-001b83e963d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16a08524-9f83-4d4c-bb16-ee704e6295fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f5a7060-a6bc-4923-a4c9-a5162f605809",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f3fa64-6c5b-42ee-92dd-24b0597d03e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "856dc82b-d659-4264-a0e8-c391dd639304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55936b61-0f3b-4415-9419-a26d8e649b54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae4e483-66ea-4ca1-9cd1-35b769fe2083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "584cee65-3996-4fe4-8b31-b27e4f4fe4a5",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b8a9678-4e3e-43ed-a52f-24f74050ebc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f903d849-2387-41be-8f8e-08bdc9e7283f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae4d63c-0c79-45fb-b497-75578a2c7d94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35bbb286-5913-4004-86be-6537cd8a7073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86eb978f-6149-4c89-adc6-8588df721201",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d22915f5-b330-4897-a8b3-d901554cb5e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20bcebdb-83e5-4bf5-b25c-92a2a965fefb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a04a2d-fd43-473d-8dba-cfe022f26b3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1bf460a-09f6-4a49-9410-3019aa2417d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860c0180-2900-48d5-b9a1-c9bed46da442",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90bcd131-d563-4c4f-abb0-8f802d45105a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84313e39-d2e0-415f-80b6-89f42d4af4d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d032724e-cb94-4d1b-b344-9dbf55b4fab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1bcb512-0ca0-47a4-a802-994aa3e47c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6facf0b-8d6d-405f-9594-dc6ea4a16520",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b707a4-932c-4106-bbbe-9b1a02d205c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9626197f-5988-436e-80b3-8e0d599f6329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a56e46-bf9f-45f5-9f25-d666bae11e6e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7595b74-05c1-438a-8fe6-92cf7dee1ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8c3222-bf43-45c5-8d42-35ed8212481d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90cea77-7678-4b14-bfd7-e943d6ce5e41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f126694-15db-4bd6-8bec-bc45059ab1d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70fe88d-76ee-413e-aeba-96b006b7d8af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3266c156-38a9-4160-b3ac-de74e87c8695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f570d600-c3ea-4a21-b706-c648a61e7db4",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1599b7-ae4e-472a-a46a-9bcd7eb8c9ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "164a5cf5-4dea-43a0-8903-629ec01301ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c27b99-4b99-401e-be44-003e4ae17803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fedd4d1-d63e-4dd2-9c66-aaf8560ac6a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c50a06-f36d-49df-8737-af43c484ece1",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88995768-54c8-4d10-9a6e-d355ebed031e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "206b9f04-181d-4a99-8494-fb443ead3f3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "719be898-49c4-4dfa-b63c-8dd0211b29b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8837786f-e837-4d5c-9a29-515206734975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8174a7-cf80-4fd3-ae32-8c8c01bcc96e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e01ceb-4bdb-4f89-bbc3-0264c0380154",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "123e5f93-6c57-4a35-8f71-8727fb5ad9c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7928b95d-a44c-40cf-b6fb-e1d5e144467e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9069ff21-3112-4c2f-8098-5f778be337f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb8a2ab-c9de-4183-bcf9-db59a0a475f7",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862ebad7-e86e-4212-afd7-046687be5aa5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16c4d56f-f667-4a09-8c7f-2cd39468b5a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e72f9ed-977e-4c8e-9cec-dd6b5afc13f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe2df78d-11c5-4ce6-840b-d1d7700bbb1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "312893fb-d2dd-46e8-8ec0-96fcd9e77e79",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a25c17-e8db-401f-b83d-1ceea8eef8ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54d35b2a-7852-4d99-9f91-57867e2299ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4716b6-2dd8-4a5c-b04d-734aba6d0437",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74586e80-bf5b-4837-97e7-eebe67f1f0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df05cc67-b937-45c9-ae0f-88add4b5f3b7",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213bee95-89b0-434c-aa85-f851ff791cfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c2e1ab0-7312-4d60-b722-5f1b139e33bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "218ad7f2-19da-4237-bf39-a9c0df4a0fad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7678d8e-b617-47a5-8b8d-13572793c5eb"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01b526e6-fdf0-43ec-a3a6-9a18fd7403be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e16a966-ff14-40f5-ac98-66377e4cf4ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0507c11-0776-474d-8f91-afbeb2f89699",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6f837ce9-8e4d-4c00-aa02-10dbd0ab58e4"
                    }
                  }
                ]
              },
              {
                "id": "4cbacef8-5cbb-4cc5-afe1-b6362ceca41a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "73c605ac-bb02-4c13-9dad-cbfda77bf672",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a87c5fa2-6cb9-4031-bd3a-2a7ab8203622",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "29e12147-9843-4d22-ac63-4c84c4f7ff94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e56b0f2-13e5-4561-a6a9-891dd762566f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7985a2c0-8add-40ee-9be6-6b515127c2d1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a9cf7fa-a26e-4698-9280-8d1340fd3122",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cedfe32d-8d6a-4787-86c4-a5733123a258"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7b5c981-81c0-4e2e-bdcd-8433d273573c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff854f4c-3d5b-4214-b502-2a6fc9b53392"
                    }
                  }
                ]
              },
              {
                "id": "94abdcdb-a785-4ecf-9ca7-f6e6a5643d3e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "5f07c06e-fe1f-4448-b7e2-825127e16d2e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc74190-406a-4de5-8a2a-0d8bae29bb52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e2bb1e62-fd5b-48a8-bf2b-4290bff4a0cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e8c24c-aa88-4a4d-b891-24a1356dba19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2487b714-c668-435e-9ec9-779d0f29a282"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e56f095f-78ab-40f9-b628-7da5eec894a9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dabd33ee-ce11-444b-86b0-f9f040aec75b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1bfc7f3-9ff8-4888-bcde-2db02c3366e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f9d69c5b-f174-419e-b935-a90645758d75"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91339af8-cb37-44fc-ab92-b9132b864a26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0446cbe-9ff4-48ba-948d-07203ec6a9a3"
                    }
                  }
                ]
              },
              {
                "id": "fcecb472-bdd0-4e14-be2e-458fb0445b26",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5f9c84f-5961-49cb-a672-b42939e3e0d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c72b27a3-0ab7-4c24-ba7a-8111dac63da4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1938779c-feb0-443d-9a3b-2be4b97a6c86",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c3cc2b5-9c54-4768-8897-65edfa501c97"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e7fd5e9b-5d05-4f3e-92e3-8c29cdfa0bf1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "22523684-200c-44e7-9e66-89af8a030fa2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dfef1a0a-2614-44b5-a721-b0c57bc52068",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8f2a7469-1feb-4c2f-a0c0-2f8e212206c9"
            }
          }
        ]
      },
      {
        "id": "20415cd7-0e11-43cf-a118-b3237118020b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4f12db08-2081-4089-88cd-26a0822c60f3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "69134675-a81a-45c3-a41e-1e355cd91585",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "32b30563-2b14-43b0-8113-2519cfe83fcb",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84349eb5-a957-43ac-a7ac-a7fb298424dc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1e7f7fed-8f56-4c53-afc5-60fce912ac3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb72c3b-ec86-40e2-b8d4-7d126f11a9c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f6592af-6bed-418b-8f01-cfd6cd1f78dc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7514a097-9c48-4709-b168-c6db76865667",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4e90621-632e-4b84-ade8-f8d8f9dedf53"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a1abcf0-c9b5-4169-b194-fe2cdb101813",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f60d2d0-2d80-4fa1-aa35-1ca579504981"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fde3a047-70eb-482e-b792-b74841a37516",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "cfb2004c-2e70-47c4-9748-adb4a47994f8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40c1351e-1f43-4235-b2d8-8d18bf6c5c20",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "02f57fa9-6f54-4e17-964c-60c6e833fbf9"
            }
          }
        ]
      },
      {
        "id": "9d88e140-b8fb-47c7-83d0-8c523062a16e",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5234cb60-9f69-44c8-9158-e06a8e9e7107",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5d60b943-e729-44e3-b44b-665862d0bbde",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "923e5b2c-290b-4732-aef5-55646b864463",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85187c09-98c3-4d38-a8af-2e5f05214770",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26770e79-1969-4811-9a44-7bb46ee3c36d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a4bc39d-d3dd-4790-a516-8c6a5abea16d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4712bf35-32d7-4660-9528-57493ed6f2af"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e0f56d0-0b17-416f-891d-ade819d30a56",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "180df680-ef04-45d6-ada5-6b83f0fe362d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2dc51409-447d-4f44-b715-02391754e7aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64748bcd-4520-4896-aa80-be5e35cc3e58"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a55f3fda-2202-4d7f-ad6b-0288036e1f99",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a29dea16-ad17-4be3-9bed-136d84ed724c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2afcd1bd-d050-4c12-8979-65fbd873c402",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "958e2bba-1aeb-4423-a614-034e01b544e7"
            }
          }
        ]
      },
      {
        "id": "ed1f4ec6-9600-45d8-a3a9-1d712736cf31",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "754eda12-5068-4877-a19f-daa9e453969a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "52055092-b45e-4103-b3fd-0476a6f5b87e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f091fc56-df7e-4a09-805d-f338981f20b6",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850bbed8-c212-4b64-9ed7-a15fd60c61ff",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2c43ccd-ee7d-4ef8-b16b-03f43731f1b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f2fd460-2aa7-4326-9c24-c085d8ad876a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5332fba-069d-4ca3-9a6b-3f330979a4e1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41bba4ae-d50b-49ee-a42f-291228eeca0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "564cbd0f-119a-41c2-849c-8470c6db1492"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0770677d-338c-4c44-a294-38bd73180b78",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32f1d2c4-f91e-4310-a04a-3056876c101e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fd477e88-b88e-4f50-b9c4-0357c2f1c922",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3e527e12-4c17-42e0-86aa-6983721b5a6c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6a26041a-d543-4be1-b495-e6eeebf6a4ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3798124a-a554-418b-85d2-fe5711699c88"
            }
          }
        ]
      },
      {
        "id": "813564fc-ce30-4933-bdb1-7248134effc1",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f8a8000-2657-4240-89d0-cda1957f5194",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66bb6b32-ce74-41fb-a167-1947fa87fe3d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "407c8b38-d8c5-4f47-bca0-a017913f8428",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b0a36d6a-a303-4b52-befe-675aa36cb3e4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40b7f9a2-640c-42c9-af85-dd36c0221b9c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 111.27380952380952,
      "responseMin": 21,
      "responseMax": 882,
      "responseSd": 98.1741671308533,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1719275886130,
      "completed": 1719275922616
    },
    "executions": [
      {
        "id": "66c300e2-dbb9-457d-9c76-ff7591535e53",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e4498290-0fbc-49cb-b3dc-aa105b4658ab",
          "httpRequestId": "a315c234-568d-45c0-bd9a-8ebbc32f0cce"
        },
        "item": {
          "id": "66c300e2-dbb9-457d-9c76-ff7591535e53",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "eaa0e616-2828-4560-9f7e-14a365db3cf3",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 0
        }
      },
      {
        "id": "354a01d6-b4cf-40e5-947d-3fc1e8872e6d",
        "cursor": {
          "ref": "274d7b68-2b5b-4c6d-b57d-306c73e002f3",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cf09f3e8-5847-4979-9cf0-eb6b59c184e0"
        },
        "item": {
          "id": "354a01d6-b4cf-40e5-947d-3fc1e8872e6d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c3e5f6bb-c516-493d-bb2c-5684b5572240",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "b180455b-f3ed-455d-8828-e0c850f2ab3b",
        "cursor": {
          "ref": "d4b24481-86f4-4bb4-9547-80c5cb150324",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "87ce5984-3057-4a2c-94d9-16e9c7724cbb"
        },
        "item": {
          "id": "b180455b-f3ed-455d-8828-e0c850f2ab3b",
          "name": "did_json"
        },
        "response": {
          "id": "4671aa90-724d-4d15-8a43-91e7c2cf455e",
          "status": "OK",
          "code": 200,
          "responseTime": 675,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a05d10e8-ef98-4722-ac03-e7e418e0b53d",
        "cursor": {
          "ref": "9d91ac0c-ae8c-4861-a8b5-216c78650ba8",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7d816c52-2bbe-477e-80f4-4866c9f84110"
        },
        "item": {
          "id": "a05d10e8-ef98-4722-ac03-e7e418e0b53d",
          "name": "did:invalid"
        },
        "response": {
          "id": "cefd49e4-d223-4416-a7e9-c68d3a3a0c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a05d10e8-ef98-4722-ac03-e7e418e0b53d",
        "cursor": {
          "ref": "9d91ac0c-ae8c-4861-a8b5-216c78650ba8",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7d816c52-2bbe-477e-80f4-4866c9f84110"
        },
        "item": {
          "id": "a05d10e8-ef98-4722-ac03-e7e418e0b53d",
          "name": "did:invalid"
        },
        "response": {
          "id": "cefd49e4-d223-4416-a7e9-c68d3a3a0c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "060e54eb-cbb8-440a-9f86-ec03451ed972",
        "cursor": {
          "ref": "d2db9897-706d-4015-a257-dfb6e649b889",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "07010806-9e81-4724-84c0-e99f1e4560a5"
        },
        "item": {
          "id": "060e54eb-cbb8-440a-9f86-ec03451ed972",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "bf89994b-855c-40cf-9da5-b342d62aec38",
          "status": "Not Found",
          "code": 404,
          "responseTime": 148,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b4f5fef-ebfc-4efd-8518-9db58a3d7128",
        "cursor": {
          "ref": "5837549f-9629-4e7e-a736-3ab0914a199f",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bb4cbd1a-ff52-4d8b-9dec-ee39c32ae12f"
        },
        "item": {
          "id": "4b4f5fef-ebfc-4efd-8518-9db58a3d7128",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "96861d65-eb89-4b82-9a75-a37a85b6fcbf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 79,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc24425a-c0c6-493c-9462-e74c79c2a102",
        "cursor": {
          "ref": "1a7e1b64-dd99-4345-874f-138e1fe8c5a4",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "72f81641-5d22-4710-865f-044133cdfb92"
        },
        "item": {
          "id": "fc24425a-c0c6-493c-9462-e74c79c2a102",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "cab6cd32-8be3-422b-8e38-4cd4841b3b42",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3bd7f30-8b12-4dc1-a3f9-3a604d4046a0",
        "cursor": {
          "ref": "5c979d5d-1244-4ae9-b8d0-2f7142c8ae02",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "49cb6965-a06d-4db6-b36d-f76c32726934"
        },
        "item": {
          "id": "e3bd7f30-8b12-4dc1-a3f9-3a604d4046a0",
          "name": "identifiers"
        },
        "response": {
          "id": "b1013971-0d1e-4adb-9113-5fc2bf94eb08",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9295a88a-cd3d-4cfa-b545-1fdee55c5dcb",
        "cursor": {
          "ref": "372c62c0-d5cb-4523-a91b-c64d6d61afe7",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2922cea8-8823-4262-8a82-a1684ab525a5"
        },
        "item": {
          "id": "9295a88a-cd3d-4cfa-b545-1fdee55c5dcb",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b930ad74-1827-48d1-83f6-7097802e93b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b74c61-33a8-4d47-83fd-01829bbedfa2",
        "cursor": {
          "ref": "ffe582d5-2c83-433a-86b5-342dea91f093",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e739eaee-3c98-4c4f-ad83-dc9c6d41b863"
        },
        "item": {
          "id": "e3b74c61-33a8-4d47-83fd-01829bbedfa2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3f0590c3-38fa-4aed-8ad7-d781ff9a2358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50339e7f-81ba-4c7b-9b51-11db538d2459",
        "cursor": {
          "ref": "60bcb344-ca60-47e6-bf9c-60ea688fa081",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "54e0a9db-c560-4357-9ac0-8a6cd138ccba"
        },
        "item": {
          "id": "50339e7f-81ba-4c7b-9b51-11db538d2459",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "56907afa-bf49-406b-be7e-e0da28b867b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c21e041-9b6f-43b9-abe3-15bb5736c65d",
        "cursor": {
          "ref": "3bb17dca-d33a-4885-8753-1a4f8c3f86fa",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "dad2294f-2092-46bf-98e9-24f67f9dafdd"
        },
        "item": {
          "id": "6c21e041-9b6f-43b9-abe3-15bb5736c65d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4d8bde1a-6829-46cf-92d0-5e1d722f7cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e630d12a-f5f9-4ee8-a218-c9081652ec19",
        "cursor": {
          "ref": "0a625124-d689-4b5f-847e-cc4d071cc299",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "76923708-3898-4b1e-a7cc-fadcc2acaf0f"
        },
        "item": {
          "id": "e630d12a-f5f9-4ee8-a218-c9081652ec19",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "bd7c6e66-e8ea-4e6d-a79e-8d7945ff4063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52f0f33-41c4-4a8f-9cef-557c2b7f75b0",
        "cursor": {
          "ref": "86c0e013-8176-498f-a8ec-1601905df614",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4f527eeb-93a1-4724-8351-c10241449ec3"
        },
        "item": {
          "id": "f52f0f33-41c4-4a8f-9cef-557c2b7f75b0",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1e1c1451-633f-4ab4-a5ee-6c6b1e81082b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eaa9add-c5fe-4496-92c9-f0608a7be81f",
        "cursor": {
          "ref": "0cf094b7-eb5f-4340-8a38-ded29253849d",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2ea35f54-c8c4-4778-8570-ad5ca4c83da8"
        },
        "item": {
          "id": "2eaa9add-c5fe-4496-92c9-f0608a7be81f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "129fc52f-d941-48ec-ac6b-584dc65199b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2720387f-db71-4db4-a193-f454c47335f2",
        "cursor": {
          "ref": "1ffb1617-a688-418e-9df6-17865fc0edfc",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "98ba1825-c3f2-4411-bd0b-1a9fc278237f"
        },
        "item": {
          "id": "2720387f-db71-4db4-a193-f454c47335f2",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c6c5a01b-2265-4adb-9952-689bd411f2f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e15c68-840f-478a-a4a0-fdce41287237",
        "cursor": {
          "ref": "bc1971d4-0fff-43f0-ab3a-5d5cebf72d96",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "78f29c3d-de45-4c79-b42f-375b12ecb904"
        },
        "item": {
          "id": "58e15c68-840f-478a-a4a0-fdce41287237",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f45fca72-3d77-4b6b-a2e7-7b56fa4ee724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e9c9c5-327d-4fe7-b242-d91d66c8880f",
        "cursor": {
          "ref": "10bc3661-32b7-47b2-b939-3398a8a99305",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3d6791cb-8b10-43ff-a76e-b762a107217b"
        },
        "item": {
          "id": "22e9c9c5-327d-4fe7-b242-d91d66c8880f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "85e64482-bc5c-4974-9432-7eaf5304b777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df90f0f-0d17-4850-9791-48a205f94e58",
        "cursor": {
          "ref": "06c913b1-c689-4b41-8a35-2fab37604094",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cd9ff2d4-4f42-4f91-8852-48a374e942fd"
        },
        "item": {
          "id": "9df90f0f-0d17-4850-9791-48a205f94e58",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0e864744-8970-44a0-b0e9-d9189412c9a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea9fb426-3c6d-43fb-8630-9fbfb68bd8bf",
        "cursor": {
          "ref": "e1d6d136-34d2-4e35-9656-6d45064ca59f",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "27667260-9367-4221-ba54-25a0a7bec4fa"
        },
        "item": {
          "id": "ea9fb426-3c6d-43fb-8630-9fbfb68bd8bf",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e4bfdfb0-b41c-4410-85eb-6487d151befe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01947522-73b2-4ba1-88f5-602b4862687f",
        "cursor": {
          "ref": "7c342be3-60b1-44ee-9ac3-fa6879e8d90b",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8cea0466-1630-4933-af6c-cf28908010eb"
        },
        "item": {
          "id": "01947522-73b2-4ba1-88f5-602b4862687f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "187b8221-d36f-4e76-9a04-c444f28e0ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93bd08c3-14af-434e-a812-b66ecd06ae58",
        "cursor": {
          "ref": "141b0952-2f50-4c68-80ee-575a54f2ac93",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f350bb5e-8b38-44cd-b41c-b4995786dfc8"
        },
        "item": {
          "id": "93bd08c3-14af-434e-a812-b66ecd06ae58",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "5a43c544-909c-435c-a76e-cf4f0071cd2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0015483-4547-4975-9632-4af2920de6f9",
        "cursor": {
          "ref": "fb0e98ac-b100-4f4c-87e5-f1dc6964d612",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f0f2a3f8-7643-4394-9421-25132cc7de12"
        },
        "item": {
          "id": "d0015483-4547-4975-9632-4af2920de6f9",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ef48d313-928b-4f59-ade5-4bb137ee661a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "accf7ad8-06fe-4fd6-9fd7-536c8812e745",
        "cursor": {
          "ref": "3c9f348a-2b0b-4890-b8e4-f3b64167d2bd",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b1cc7501-ad5a-44a9-bc95-65c6e9dff79d"
        },
        "item": {
          "id": "accf7ad8-06fe-4fd6-9fd7-536c8812e745",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d65fa427-430e-4536-8153-4e96bec2aea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ca0498-1148-4b07-a79b-cb1ffd07b807",
        "cursor": {
          "ref": "9bf3fb25-c634-421c-b5de-eaa9766a667d",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "35d55358-fc7d-4d06-a12f-ba7241ebe603"
        },
        "item": {
          "id": "b8ca0498-1148-4b07-a79b-cb1ffd07b807",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "63d628bf-2d1d-40e0-a776-1479ae9a2e66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "647760b1-12e2-4221-aba3-245f7c2f475d",
        "cursor": {
          "ref": "91b4842a-69c9-4643-bb75-285a4e8bfe02",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a31d63b5-73ba-44ae-95ee-265ecaed4948"
        },
        "item": {
          "id": "647760b1-12e2-4221-aba3-245f7c2f475d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "031e3675-e3df-46e6-bda0-f49889f449a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07edc00f-a48a-4984-98c5-23a644a3bace",
        "cursor": {
          "ref": "3bea1f50-d45c-446a-9b24-ba6da6c5e054",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0add66f0-4e75-453f-82ba-b53e1ac7e808"
        },
        "item": {
          "id": "07edc00f-a48a-4984-98c5-23a644a3bace",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f7f62932-60c6-4f9f-8d7b-c6c7fa23f000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c943b34-a213-4f4d-bd2f-24457eaaf9aa",
        "cursor": {
          "ref": "30271256-9ccc-4af7-b1f6-c9299a896870",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "aca4b17f-a4a2-411f-9cc7-a35059451ede"
        },
        "item": {
          "id": "4c943b34-a213-4f4d-bd2f-24457eaaf9aa",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f001496f-5908-4c56-8070-9e6f9f8ee50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b02c0a9-5531-4c09-8829-951daa8d7a8b",
        "cursor": {
          "ref": "d4145493-21b5-4a25-9e1f-1a582cf56439",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "572e32b8-fe34-494b-8db9-6b702b44ade6"
        },
        "item": {
          "id": "6b02c0a9-5531-4c09-8829-951daa8d7a8b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8e8ac8ec-0bcb-4e27-ad92-e4790bedf724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e98240-360c-4b30-9a09-5ad81f7cf150",
        "cursor": {
          "ref": "0f16a40a-63de-4f7a-bea5-a7432e9c78f5",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "dd3d2047-268f-403f-8d98-0ce4f15f3788"
        },
        "item": {
          "id": "87e98240-360c-4b30-9a09-5ad81f7cf150",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ef3772d9-94eb-42ef-8129-542695845748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5522f5-c21c-4045-8a22-7c1e4ef87a51",
        "cursor": {
          "ref": "9e27b11d-610a-4a93-991a-c42c1396d27e",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d5f6aaf1-c1a0-4a7f-aa75-91493eef473f"
        },
        "item": {
          "id": "ad5522f5-c21c-4045-8a22-7c1e4ef87a51",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b4d4a537-fd8c-4004-974e-bfba3e483373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a92391-d44b-433c-928f-9ff270d425fc",
        "cursor": {
          "ref": "53ac6513-2274-4289-8fd1-f24b94c070b3",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "61ad66dd-0465-40aa-839e-1c3ee91f0dd5"
        },
        "item": {
          "id": "95a92391-d44b-433c-928f-9ff270d425fc",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6da0a500-9f35-40b1-9a3d-02acff8a78cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae608e51-34dc-43c2-9fff-95b34b647bbd",
        "cursor": {
          "ref": "69d52f6b-3e8b-46c3-b11a-1f2d6b746102",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "81536aec-0775-4ea0-a14d-4a160414aaf4"
        },
        "item": {
          "id": "ae608e51-34dc-43c2-9fff-95b34b647bbd",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c1187300-ec7d-4b68-8029-37649298ce3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc3166e-d5b2-48e6-83c8-6f6b5fa21bd5",
        "cursor": {
          "ref": "ce9ce238-e534-4b8d-b9c8-719640ee134d",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "aefa2733-29ac-473a-8469-39c6c0e769ce"
        },
        "item": {
          "id": "dfc3166e-d5b2-48e6-83c8-6f6b5fa21bd5",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "50cfafe1-a2ed-4483-85a0-94f0155c5d8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d9619d1-25de-42b6-b08c-b04e6a6cab98",
        "cursor": {
          "ref": "dfbd19bd-75ac-4bea-8fc6-ac2ba1b4b618",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "655e65c0-38d3-4734-9453-419da0a24b62"
        },
        "item": {
          "id": "8d9619d1-25de-42b6-b08c-b04e6a6cab98",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7ff418e9-33b9-449d-9e49-67cf38320d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a98b0e6f-4a99-4bf5-82e4-6b9367764cfe",
        "cursor": {
          "ref": "ae3b69bc-d376-453f-b696-31ac3b7bc020",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b34c228d-1c03-4e7e-8129-6c009500a30e"
        },
        "item": {
          "id": "a98b0e6f-4a99-4bf5-82e4-6b9367764cfe",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e14ca477-938d-4cca-9e73-b3887365bcb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6198d045-49b3-4429-91d7-61afac70b460",
        "cursor": {
          "ref": "f939fcc5-98b5-40b1-9933-a9ebc76300ef",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1a9e8ebd-5ecd-417f-b612-5d926b099429"
        },
        "item": {
          "id": "6198d045-49b3-4429-91d7-61afac70b460",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "1babdbb7-c7ca-4ef9-9ca9-93bbe852f340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea30b51-5ed2-440b-b497-fd506e550f59",
        "cursor": {
          "ref": "8af1e698-6f78-45fb-a5f9-10cf0e91b485",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "108b6c35-7e95-4791-a519-120db458a5a9"
        },
        "item": {
          "id": "dea30b51-5ed2-440b-b497-fd506e550f59",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "db5d255b-4cb7-4f58-8ff5-4d50a8d185e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a71568-e02b-4f2b-8797-8e7e3f5cc217",
        "cursor": {
          "ref": "646278ae-7e6a-4e18-b85c-1d945dad28df",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0f8eaf72-65f6-4ddd-9edc-47454ede73a5"
        },
        "item": {
          "id": "91a71568-e02b-4f2b-8797-8e7e3f5cc217",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9fd9115e-63ed-4d8c-84f6-3d3e94fbe957",
          "status": "Created",
          "code": 201,
          "responseTime": 882,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "a5c8223b-766f-4b3a-a034-7ecf1b15f277",
        "cursor": {
          "ref": "0105c6a7-5b7c-4502-88b5-60d98d94b602",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "90dc9c17-c299-47e1-9cab-8e63285cb5e8"
        },
        "item": {
          "id": "a5c8223b-766f-4b3a-a034-7ecf1b15f277",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "82f61061-c313-4fcc-82e7-7cba39780d45",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "74be9ed1-b97f-4308-b9be-9509df65e1d3",
        "cursor": {
          "ref": "320557a0-c602-4f42-a548-262da91b1326",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "03163321-be85-4bd9-8a14-773daa6465aa"
        },
        "item": {
          "id": "74be9ed1-b97f-4308-b9be-9509df65e1d3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f9eb02f8-6091-48c2-a82b-79ea70290cf5",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "e2c70f8a-35ba-44ce-bd78-a1012dfdd8d4",
        "cursor": {
          "ref": "38d0b822-9139-4f24-b443-1c5e13d7a40d",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1d4c61e9-1926-453d-aa1a-7df835a99745"
        },
        "item": {
          "id": "e2c70f8a-35ba-44ce-bd78-a1012dfdd8d4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "a78a27f9-bbb2-44e0-80c1-6509d26f93f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "543803fb-b8fc-4803-925b-dba7e5f09c42",
        "cursor": {
          "ref": "debaca5c-b6c7-480d-88a8-ce6d28184ac2",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8db03a4c-9593-4e97-9a10-96f82d9f3ade"
        },
        "item": {
          "id": "543803fb-b8fc-4803-925b-dba7e5f09c42",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6ee64c22-ea71-4ae5-a3c8-b78f2274367a",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "6f6e9bad-833b-4f44-903e-49fd983c6799",
        "cursor": {
          "ref": "b2082a52-7473-42bb-9d1b-a7bc45f69d85",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1f22d0ee-1766-4004-b5c0-55cbb265618c"
        },
        "item": {
          "id": "6f6e9bad-833b-4f44-903e-49fd983c6799",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "177df408-1dfd-4bab-ace6-62dbbb128d9b",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "1a504a4c-78fd-4414-bd24-09786bf79dda",
        "cursor": {
          "ref": "f4edccee-2f15-4b0b-961d-d7a0c7115daa",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "159386ef-eb51-4886-835c-f3c51164354d"
        },
        "item": {
          "id": "1a504a4c-78fd-4414-bd24-09786bf79dda",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f5a4e776-7a77-4a54-bef7-d2628efa07e7",
          "status": "Created",
          "code": 201,
          "responseTime": 354,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "9d2ba1c7-15a7-46f4-84ad-c65938a8bb65",
        "cursor": {
          "ref": "ff26a015-8f6a-4019-a99f-c5ca9bad49ea",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3cb53297-2403-4a74-8c85-5a539d41cdc7"
        },
        "item": {
          "id": "9d2ba1c7-15a7-46f4-84ad-c65938a8bb65",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1c91959d-26fd-4f95-9bc0-6a2c11328e3e",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "147b6605-80d9-4baf-b6f7-661778f32e55",
        "cursor": {
          "ref": "0c7d97b3-b8f8-42db-929c-3acc2e2f0076",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "9f7f7cc9-1c87-4d2f-82ab-dc415e8926f9"
        },
        "item": {
          "id": "147b6605-80d9-4baf-b6f7-661778f32e55",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "52139b82-6fd7-446a-b474-15036360f978",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "870d8737-13b2-4b9f-b58b-30439eef6870",
        "cursor": {
          "ref": "a86a0fe8-1b7a-4640-a1dc-7f8dcbdbc18a",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3e4dee16-7c73-4bca-87e0-6a1c5d05f0d1"
        },
        "item": {
          "id": "870d8737-13b2-4b9f-b58b-30439eef6870",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c99a59da-8b84-40ff-81e6-65711cb2e5a4",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b78e4a05-7ea0-4dc1-8ec1-ace168d29fa1",
        "cursor": {
          "ref": "20006d03-ee77-4698-9bd3-b4cf8a33230a",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "df3476b9-4c62-4901-ac15-2ee7abb7ce39"
        },
        "item": {
          "id": "b78e4a05-7ea0-4dc1-8ec1-ace168d29fa1",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "1bc7eff7-c63b-4c27-8715-1836529adabc",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c1a83c84-12a0-438e-bd7e-84005cb2b366",
        "cursor": {
          "ref": "419db20d-658e-4135-88e8-2fd654f64a21",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "048553ac-869a-4925-8895-669c0693305e"
        },
        "item": {
          "id": "c1a83c84-12a0-438e-bd7e-84005cb2b366",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "eccf5ab7-3532-423f-a758-6252e36f392a",
          "status": "Created",
          "code": 201,
          "responseTime": 398,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "3112f20d-411b-459a-a38c-bf699d5f0f86",
        "cursor": {
          "ref": "bc6325c1-5bb9-4e5a-9f9c-678ef6c5cbb4",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d49040fc-b4c1-4ffe-8666-186f0bc8a2d1"
        },
        "item": {
          "id": "3112f20d-411b-459a-a38c-bf699d5f0f86",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "bb8a81ac-a89f-4bba-908d-9529541e7152",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "7bebae0b-10aa-4c88-88c4-4266e8798be0",
        "cursor": {
          "ref": "d16f3b4c-ef84-4ec4-a417-d6b4b22cd8d7",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2cd515b1-56b1-4428-94a0-ec647d738a8d"
        },
        "item": {
          "id": "7bebae0b-10aa-4c88-88c4-4266e8798be0",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "bd8d51cf-254d-45fd-b32d-fb46eb4eaae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4568e6d-8eb0-4b22-88ab-ffff0b8211c6",
        "cursor": {
          "ref": "305e7566-87e2-497d-b696-2d7515e4fc41",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e56e0700-888d-469d-ba60-d7f7b226d921"
        },
        "item": {
          "id": "a4568e6d-8eb0-4b22-88ab-ffff0b8211c6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "03bc47f0-3ee8-49ae-b0b1-f0c77ee509c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ec2ee0-66fa-4cce-92bc-6c14f797fab6",
        "cursor": {
          "ref": "a081d1f5-97ed-4d2f-a8f8-78ac168694f7",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8bb4362b-8fd8-4fab-8c33-969b1691f1ef"
        },
        "item": {
          "id": "26ec2ee0-66fa-4cce-92bc-6c14f797fab6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9aa780cb-fb03-446f-b0f3-d62879176bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832374bf-fd80-40c1-9aa3-0808f4bfc9bd",
        "cursor": {
          "ref": "439bf649-46c8-4e8d-a4e8-34640be257d9",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c6af126f-b990-4fd0-a38b-c6480c947af1"
        },
        "item": {
          "id": "832374bf-fd80-40c1-9aa3-0808f4bfc9bd",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "fb454655-5084-46cc-95b9-36e86f4ac922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8508b9d3-b114-4c8b-bd32-67c54fee81a1",
        "cursor": {
          "ref": "cecb605a-9731-4944-ba08-a7ab0ba383ff",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "998eab35-963f-491b-99c4-c7380f968bf9"
        },
        "item": {
          "id": "8508b9d3-b114-4c8b-bd32-67c54fee81a1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "9165cf88-ccc4-4223-a0d7-f22c947664c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be85df01-bf92-4d30-bf13-0e784477484e",
        "cursor": {
          "ref": "eabd11c6-1802-421a-8a17-351500604f2b",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1862a0a7-d9b2-4be9-804e-1e61a05bc804"
        },
        "item": {
          "id": "be85df01-bf92-4d30-bf13-0e784477484e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f138e0ce-14e0-4318-bf8c-2867e3dcc25c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b1ac49d-2efe-4bee-84fa-2a05a1e9d27c",
        "cursor": {
          "ref": "28939e23-5693-4822-9fac-07a03221f884",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "4af4e383-a774-4167-9a31-5144fd59fdea"
        },
        "item": {
          "id": "6b1ac49d-2efe-4bee-84fa-2a05a1e9d27c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f883b897-98fa-42ea-81f9-dff47e004000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f8c9760-9c3d-4902-a061-6e82fbbdba00",
        "cursor": {
          "ref": "62e15792-37da-464e-901b-00cdb62625d1",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b3046d10-e04c-4880-8783-06fd9cd3bf73"
        },
        "item": {
          "id": "3f8c9760-9c3d-4902-a061-6e82fbbdba00",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "70a2eaa0-dd4e-442f-b551-29134a064e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346edb22-98f2-4652-9099-86079fab3333",
        "cursor": {
          "ref": "9589caf9-ede6-4aaf-8932-88d6c71f0791",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2bd1bff1-f21b-4b44-8588-f585638f80be"
        },
        "item": {
          "id": "346edb22-98f2-4652-9099-86079fab3333",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a207f23c-41e9-40ca-a35a-70e0751a63a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d8f87b-8c44-4345-8b1b-ec84b31accf0",
        "cursor": {
          "ref": "156f3230-0289-4651-a81e-9723ce588b7a",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e27c6ebf-725b-4c6f-84c8-0b61030425d9"
        },
        "item": {
          "id": "b6d8f87b-8c44-4345-8b1b-ec84b31accf0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a1ea5d9c-bc68-471d-b00d-1df796c94064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7609478f-2034-4ba8-b87f-ceae8ea55386",
        "cursor": {
          "ref": "192b47a2-c86b-4646-b9f9-93fa0ded20c8",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d19c3c73-ff81-473a-a4ce-d3ceefd2315c"
        },
        "item": {
          "id": "7609478f-2034-4ba8-b87f-ceae8ea55386",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9e784e6f-44a3-4712-b159-9aeb26cb09ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3761ff91-a9a9-43f9-8b83-94260692f78b",
        "cursor": {
          "ref": "caf60d05-feea-4727-87df-f48e80ebfde4",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3fee5bb7-e5c5-4a88-b8a2-0e2f372f25be"
        },
        "item": {
          "id": "3761ff91-a9a9-43f9-8b83-94260692f78b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a51e646e-dc15-4161-8d5b-02033123c36b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f9dcca-fb71-4319-9d61-59da8a4148b8",
        "cursor": {
          "ref": "94b381ab-0c07-4339-a156-341d6444f57b",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c0d22a66-11ec-45ad-9d05-5b0c802eeefd"
        },
        "item": {
          "id": "a4f9dcca-fb71-4319-9d61-59da8a4148b8",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "37a7621b-da00-40fc-bfcb-b9230d5cd61e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdceb1e0-e69f-42f1-a61f-fb576f0809d2",
        "cursor": {
          "ref": "3d5c553b-3644-44b7-8d95-f8e1e8b774f7",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "bf868098-a763-4a41-99d7-f9d933481648"
        },
        "item": {
          "id": "cdceb1e0-e69f-42f1-a61f-fb576f0809d2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "23357512-20c9-4055-92ed-f18a00e563fd",
          "status": "Created",
          "code": 201,
          "responseTime": 361,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "db36567b-85fa-47bc-981a-6be6717cc3c8",
        "cursor": {
          "ref": "5c231a5d-ef25-4ddd-bbe1-e0a488aae350",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "8858adfb-d778-49dd-b8db-adf8c98e83de"
        },
        "item": {
          "id": "db36567b-85fa-47bc-981a-6be6717cc3c8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "26ec9a75-254c-475b-b622-f008f4ccd10d",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "355528cd-4dcf-4a98-9fab-388d4f62ec7f",
        "cursor": {
          "ref": "9be63860-1a56-456e-84f2-dd4bc5482177",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "4c1f817c-c9b2-431e-8992-a1853b8c90ba"
        },
        "item": {
          "id": "355528cd-4dcf-4a98-9fab-388d4f62ec7f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "9a7ffa21-942c-4b54-9424-8b5e0d5d011c",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "13d7dab1-e515-4f91-bfc9-4fec2d06e552",
        "cursor": {
          "ref": "acf76a1a-c7f3-4192-81c6-11e9fc2183a6",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "19e4534b-4239-46be-b774-45101ec2dce0"
        },
        "item": {
          "id": "13d7dab1-e515-4f91-bfc9-4fec2d06e552",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c5ebf528-4fbc-426b-9d16-f24e2d9eaee1",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "d970af70-4e1f-4ae4-a55b-83fa3e065730",
        "cursor": {
          "ref": "e8440004-c62d-4fed-9875-8ac26f8112fa",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "80e20024-cf05-478f-8b8f-e9da40adee5d"
        },
        "item": {
          "id": "d970af70-4e1f-4ae4-a55b-83fa3e065730",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "02823a06-88b7-49a5-8f4e-35d1ed23df4b",
          "status": "Created",
          "code": 201,
          "responseTime": 427,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "f61c15e2-7059-4fed-8bdf-bf7586942f7c",
        "cursor": {
          "ref": "91e7e088-d850-4e9f-a498-dabb73bf0d87",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5719ffe1-a351-4055-85c9-b514ad277dac"
        },
        "item": {
          "id": "f61c15e2-7059-4fed-8bdf-bf7586942f7c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b9e41288-2dea-48c7-8666-d643f2bad595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d94fa17-3eb8-433f-b476-964fb02e0110",
        "cursor": {
          "ref": "e6141677-b04f-4993-a32e-e9b4ccf76c38",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a317c5ce-bbf6-4a16-8008-594eb5ee311f"
        },
        "item": {
          "id": "0d94fa17-3eb8-433f-b476-964fb02e0110",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f4c13fa7-6dfe-4e30-be61-4a2a5779495f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "500d913f-3ea4-48d0-91b4-f212ae36ce7e",
        "cursor": {
          "ref": "bba3ea8d-74f4-415e-bc9d-75ab84de0e10",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "dd1d765d-b09a-4ed1-a1fa-1d07fa5cc28a"
        },
        "item": {
          "id": "500d913f-3ea4-48d0-91b4-f212ae36ce7e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ea8c0791-a26b-4509-a3d3-6977cfcccb84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8676179b-5250-4553-89cb-91ffd1d31423",
        "cursor": {
          "ref": "82f7f552-36ad-4b77-876a-3e66c3e7620c",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "690459f4-7846-4c42-b14f-7709de428151"
        },
        "item": {
          "id": "8676179b-5250-4553-89cb-91ffd1d31423",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "baf710e4-d967-47c6-b41e-520a7ee6524b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1ab1ca-d73b-402c-915b-c693663c3b7b",
        "cursor": {
          "ref": "e9c34fcd-a479-4489-9a24-3221d6cada05",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8aa3fd58-be96-4a47-867f-212612dbfcad"
        },
        "item": {
          "id": "af1ab1ca-d73b-402c-915b-c693663c3b7b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "7134de75-d86f-4c4c-9749-12f24bd8181b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e58002-efc7-45b2-bdef-a481fa95600f",
        "cursor": {
          "ref": "20eba10a-723e-4e18-af08-43e83daa7d0d",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "cd4f817d-6f55-423b-8628-68a8168eb6eb"
        },
        "item": {
          "id": "08e58002-efc7-45b2-bdef-a481fa95600f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b68c6351-ae75-4ade-813b-77673f670acb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b63764-d912-44c0-87ac-0ebdee30d239",
        "cursor": {
          "ref": "f71517ab-a542-40e4-a3cf-0fd749cce99f",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "668aa743-94d7-409c-9c4d-0f5ef7d527bf"
        },
        "item": {
          "id": "a3b63764-d912-44c0-87ac-0ebdee30d239",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f0a6bef4-e473-4c26-beac-e21bfd5ecb65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "524686a6-7900-480b-8868-432d7c9410fb",
        "cursor": {
          "ref": "250189fd-b427-4fba-9879-9e0ff9af71b0",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "568cb1f1-e895-4566-9f2a-1da9c04cc8b3"
        },
        "item": {
          "id": "524686a6-7900-480b-8868-432d7c9410fb",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "47e9ca3f-8b74-4262-a5ec-884a5758504b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c996d6f-f5ea-4201-8e2d-bed14305127b",
        "cursor": {
          "ref": "ea445c90-c939-42fa-a29c-2aad7685f1d3",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7e2b5b25-3320-4591-be3b-a852f5ccd7b9"
        },
        "item": {
          "id": "3c996d6f-f5ea-4201-8e2d-bed14305127b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "72333934-f64c-4eaf-98bd-422062d526b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc1b06b5-b170-42cf-8d3c-f1b33aacc705",
        "cursor": {
          "ref": "846ac3cb-9ee5-4bb3-8168-c5463649ed60",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d656b605-b0a8-4d87-9d6d-5163a298dd90"
        },
        "item": {
          "id": "cc1b06b5-b170-42cf-8d3c-f1b33aacc705",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e8f6cbf5-0e88-45c8-b58f-774224ea79eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9cbe36d-e524-4fea-91e1-efeae157694d",
        "cursor": {
          "ref": "670f6f71-b54e-47a5-86af-136f60c1e713",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "5149ca13-d26a-4c2c-a8b4-b2bafa772c28"
        },
        "item": {
          "id": "e9cbe36d-e524-4fea-91e1-efeae157694d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a0e7f51d-307e-4ba7-b6ec-e776fb762e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c50fae6-d91b-4c72-9e63-b44447a8047c",
        "cursor": {
          "ref": "81837f72-a028-4ce6-871a-261b5f400e8c",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7a77caf3-a32a-47e5-b230-606219b22464"
        },
        "item": {
          "id": "8c50fae6-d91b-4c72-9e63-b44447a8047c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a16856c5-1286-469e-ba02-f68f12b9f7d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "927234bd-8078-4b88-a3d8-366190f33b82",
        "cursor": {
          "ref": "7673f8ce-e74c-4729-a877-69b02a5f5474",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4cb3ef3b-2e2a-4389-8c80-7eb6f2471052"
        },
        "item": {
          "id": "927234bd-8078-4b88-a3d8-366190f33b82",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0ff3eb20-4c97-4351-9a44-2f8d59dc5711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287215de-2498-437d-8dca-7343cd9ed367",
        "cursor": {
          "ref": "108c5625-6d23-425a-b480-38ecb18aed29",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a4e0c4a7-b8d1-48a3-a4fc-53e214826102"
        },
        "item": {
          "id": "287215de-2498-437d-8dca-7343cd9ed367",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "74c62d3b-8527-4dd4-92ba-a27753727381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc1a597-b6a8-43f5-9f83-bc9d58d60843",
        "cursor": {
          "ref": "ae62707f-c130-4319-ae38-7f54ad1f864f",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "0c249055-920b-49d5-b49b-81f36129a190"
        },
        "item": {
          "id": "3dc1a597-b6a8-43f5-9f83-bc9d58d60843",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c504d5ae-79e0-498e-888a-ff38b34d2c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b14f2a96-e1a9-4da6-9802-e341a095b432",
        "cursor": {
          "ref": "228c3208-4a41-481d-b557-c5d4c05190ff",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "3c737731-49a4-4305-9c33-3d045a4aafc6"
        },
        "item": {
          "id": "b14f2a96-e1a9-4da6-9802-e341a095b432",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "5bdd0a34-6cd3-4615-bad4-282caf80504a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf72b92f-6ff4-4bf1-af80-26cb7f6013f4",
        "cursor": {
          "ref": "95c8a9fa-3e6f-4dc6-b7a7-657a2dc45985",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8b2f81c2-d089-4275-860f-e3b8e0219b2e"
        },
        "item": {
          "id": "cf72b92f-6ff4-4bf1-af80-26cb7f6013f4",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "51384929-d241-480d-bc8e-6e7b5e60c62e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baca2828-8b6f-43fb-a3cf-6163b3b84abc",
        "cursor": {
          "ref": "de62c510-d4e8-415c-8d43-7c94b311c279",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "83f1367c-86c5-459d-a4a3-9c04b1004f05"
        },
        "item": {
          "id": "baca2828-8b6f-43fb-a3cf-6163b3b84abc",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "4d70e706-5abb-4caf-8592-62d30a123e8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58cbb85d-1060-40f1-a9ca-ecae3a343e45",
        "cursor": {
          "ref": "60813628-8ae2-4369-a2c9-5febcce27bb4",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b379e7dd-4951-40c0-b29d-39477a1e8a0d"
        },
        "item": {
          "id": "58cbb85d-1060-40f1-a9ca-ecae3a343e45",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f593330b-2516-44d7-be98-6d79ed10fd31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8bdea3a-fba2-4317-aae2-63c46ee929e9",
        "cursor": {
          "ref": "c4ccd1fa-fef9-49da-8801-64306b5c6f94",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "dceeebc4-9530-47c6-9c25-8914b656e738"
        },
        "item": {
          "id": "f8bdea3a-fba2-4317-aae2-63c46ee929e9",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e6b7c318-01d8-439d-b55b-52f9753b9cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81b9eda3-8e16-4d22-a003-bb2af31dce58",
        "cursor": {
          "ref": "b2dedbe1-14a1-4f07-b4d6-eb1e4eb63290",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f1bdbb2a-ed0e-43b8-9f21-2db323efad85"
        },
        "item": {
          "id": "81b9eda3-8e16-4d22-a003-bb2af31dce58",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "29da72a9-dcb8-4834-abdb-22f1beddb8d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6889f1c0-5372-48d0-bdce-9e0761ac11e6",
        "cursor": {
          "ref": "9cc7c076-16b9-454e-aaed-808b3906793f",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "8a1cb109-ef26-4835-b939-083327d85756"
        },
        "item": {
          "id": "6889f1c0-5372-48d0-bdce-9e0761ac11e6",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e6fd1143-1225-42aa-ae45-b680e4f8e2e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa527d2-343a-4614-ac98-3849ca0dd3ec",
        "cursor": {
          "ref": "6aff4511-41fd-4b06-a778-0b209dcabad5",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0c453d5c-8b26-496f-9735-7f2232c2949a"
        },
        "item": {
          "id": "9fa527d2-343a-4614-ac98-3849ca0dd3ec",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "44573ab5-d699-463f-bb65-a531161eb044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "985d1f7d-76f7-4b2f-a8a4-fe87bc9b47a4",
        "cursor": {
          "ref": "bea749d1-f7fc-40ae-8301-05bfce3cacde",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "594a051f-fc38-425f-8820-558fe78f948e"
        },
        "item": {
          "id": "985d1f7d-76f7-4b2f-a8a4-fe87bc9b47a4",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "0f923081-c1af-4ee5-aa3d-7006fd9d89fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2f3913-c3b0-452b-85f1-541b97f43d80",
        "cursor": {
          "ref": "7dc91e61-42a3-4b34-b459-5099429f419e",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a6fecd18-bd70-408c-8728-a3304651cb3e"
        },
        "item": {
          "id": "9f2f3913-c3b0-452b-85f1-541b97f43d80",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "16e3fd9d-b4c6-4a62-a03a-6a5135dc98e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37244831-479f-4096-99c1-16fcf1feb35c",
        "cursor": {
          "ref": "532805cb-5a31-48ee-a70a-bbe65f6ed8b4",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1fcffb33-f859-450c-976d-ac3fb7d5e643"
        },
        "item": {
          "id": "37244831-479f-4096-99c1-16fcf1feb35c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d87d88e5-2dfb-44a7-99cd-40492f2bc149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "952ea84d-01ab-4fde-8adb-0deff3f6b98d",
        "cursor": {
          "ref": "b29982cd-31ed-4511-9f54-c926a502891a",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "46c363db-3a58-4789-93e6-4930b32e50aa"
        },
        "item": {
          "id": "952ea84d-01ab-4fde-8adb-0deff3f6b98d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "23d51cd6-6872-463b-ab27-2d3103ab708b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5af4aa-9df2-498e-b252-69bcc1b64597",
        "cursor": {
          "ref": "9fbd3c20-2a97-413c-a4c2-5ea4c0196dd2",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9900c026-cc40-4558-929c-66b32407681c"
        },
        "item": {
          "id": "2c5af4aa-9df2-498e-b252-69bcc1b64597",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a41e33e7-80f8-4184-ad22-271d78e675fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d093166-4dd2-40ca-89f1-bceb30076c3b",
        "cursor": {
          "ref": "821942c0-d517-48ad-8d59-a10ebe328db5",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1e550686-7bfc-42c7-907b-c1327635d4d1"
        },
        "item": {
          "id": "3d093166-4dd2-40ca-89f1-bceb30076c3b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c334864a-50d6-4019-bc0f-22213dde44d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b1c6c3-b493-4a33-923b-abef623b8d64",
        "cursor": {
          "ref": "18c0ada1-a26f-4696-ac7f-ad72b1ca524c",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c80c087f-5d59-463c-9a7a-a3b2bcd35c7b"
        },
        "item": {
          "id": "d9b1c6c3-b493-4a33-923b-abef623b8d64",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6da3ba9e-ae9a-4945-bdf5-a62e5ae4822b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1059b6bc-a8b9-4a03-90db-f6e659dae40c",
        "cursor": {
          "ref": "7b0a24a7-6b70-4854-9348-d416f4e58d1c",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "05533a7c-32b5-4ce8-881f-2740dd3ec12d"
        },
        "item": {
          "id": "1059b6bc-a8b9-4a03-90db-f6e659dae40c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8c2a4b75-905f-4717-bd08-44bafb204a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff41c93-4928-4db4-b49b-f6d73d3343ca",
        "cursor": {
          "ref": "e1708d26-e0a6-49ac-85d9-ad4e0b7a3f85",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "3912198e-97bd-45ab-9a3d-f9f80c7c2336"
        },
        "item": {
          "id": "0ff41c93-4928-4db4-b49b-f6d73d3343ca",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "30a046d8-b073-4d0f-a0c6-735edd5176bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8fd52a-3be8-41fa-b547-6fb7be3dffde",
        "cursor": {
          "ref": "f1cb61ba-8557-4e59-ba7e-f9115382faba",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "771a4797-cd0f-4544-8989-558995015715"
        },
        "item": {
          "id": "1f8fd52a-3be8-41fa-b547-6fb7be3dffde",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "b3bf7c0e-4791-4063-bca3-834442be1c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "e385cea0-32e8-4106-afda-30a4c0e349e7",
        "cursor": {
          "ref": "1813f340-beaf-4689-8055-4021010bb912",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "377298a2-e549-4f29-8eee-03372881b9d9"
        },
        "item": {
          "id": "e385cea0-32e8-4106-afda-30a4c0e349e7",
          "name": "credentials_issue"
        },
        "response": {
          "id": "5ff7c7ca-0a32-4d7c-b852-a4230c2ac31b",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e260ca9-f058-4a7c-82e6-9610a07b4cee",
        "cursor": {
          "ref": "e17bfae5-ce14-49ba-9fc5-09d3a432af42",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "73ca1977-0e8c-4172-b3a4-a265dd84f636"
        },
        "item": {
          "id": "9e260ca9-f058-4a7c-82e6-9610a07b4cee",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d272d04c-766b-4615-8590-670b51a7f269",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab014a3-1041-443a-9339-67ca600337ce",
        "cursor": {
          "ref": "4835f01c-fb96-4cc5-a839-c19330555c4a",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "126dfbad-71a9-43a2-82f8-d3c2992442b2"
        },
        "item": {
          "id": "cab014a3-1041-443a-9339-67ca600337ce",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "74752a58-10d4-4772-9f78-faf4bbaa95eb",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f409b466-d419-4a96-a164-18b02b3bce8f",
        "cursor": {
          "ref": "20ac9f40-5891-4e9d-bd81-70ae23ace8b5",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "33c94f07-9645-47d5-ab39-a4d777125a45"
        },
        "item": {
          "id": "f409b466-d419-4a96-a164-18b02b3bce8f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1d903914-f398-4be6-933c-5d4520b0c12a",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "662eead2-aa02-41bd-b2d1-42cba735c89b",
        "cursor": {
          "ref": "ad7bc8cd-f7d5-4586-b767-7fd70e3258e9",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c3516e25-590b-4963-88c7-7905dfe5ecbf"
        },
        "item": {
          "id": "662eead2-aa02-41bd-b2d1-42cba735c89b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7b1c6b43-c862-4fa4-921e-2c260365c065",
          "status": "Created",
          "code": 201,
          "responseTime": 339,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-25T00:38:25.610Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-25T00:38:25.610Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "b5b7587f-ff73-42c4-93cb-3f874cef8f30",
        "cursor": {
          "ref": "0d9da628-cc98-4a5d-99d6-6a08ad628733",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "ce3fc464-8b05-4934-824f-554fb17269f7"
        },
        "item": {
          "id": "b5b7587f-ff73-42c4-93cb-3f874cef8f30",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "260d7bce-ff03-49ad-96f3-a6d7e0356997",
          "status": "Created",
          "code": 201,
          "responseTime": 390,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45129b6f-dc44-44eb-bd39-b0c601f10b5f",
        "cursor": {
          "ref": "b3c2bc7f-6d7f-4216-87bc-4149476ec6c3",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a3e2079d-f5ca-4866-ae81-7b4887aff0a3"
        },
        "item": {
          "id": "45129b6f-dc44-44eb-bd39-b0c601f10b5f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "427dbb40-cb57-4d98-b158-6e71456914f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "674ecfab-1a66-4591-9c48-6825a04553d9",
        "cursor": {
          "ref": "2f11a5d5-ba80-43cc-910c-fa632593558c",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "60a09adf-3be9-4965-815d-7aace91661df"
        },
        "item": {
          "id": "674ecfab-1a66-4591-9c48-6825a04553d9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1002b984-b6aa-4c3d-8d9f-7d4e88bb93fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dfb1d60-64f4-438f-8a54-e8d32cb3a2c6",
        "cursor": {
          "ref": "40e92ff8-336a-4964-9ec6-79520b38638c",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b70718dc-9a44-4bd0-8b62-adf8fc4f7776"
        },
        "item": {
          "id": "8dfb1d60-64f4-438f-8a54-e8d32cb3a2c6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "27e21869-2f26-4125-ab48-e5f9d72c1523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "308e4116-b38e-4f6d-bcfb-93edd782011e",
        "cursor": {
          "ref": "f28a222d-a2b6-41c0-b34a-ee2ea2a60ccf",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "643ee3a1-112b-410e-a60a-06fa3636a0f8"
        },
        "item": {
          "id": "308e4116-b38e-4f6d-bcfb-93edd782011e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b94fb1fa-38bb-4c38-85ca-7ac6053bee33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27717532-89e2-4179-8644-868ce4f7868b",
        "cursor": {
          "ref": "6e2637c0-204d-41db-a965-ab2715f529af",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "64ea0fe6-7cad-4bdf-9ad1-38b40fb345aa"
        },
        "item": {
          "id": "27717532-89e2-4179-8644-868ce4f7868b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "bfc4302a-4a1f-4571-a0a8-eeb1ff22018c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b90b5f-efe5-441f-a8c0-1519c3e4ec5b",
        "cursor": {
          "ref": "4731a940-5eca-41e5-9cf6-a8f30c1c5bf4",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "55f7449a-d1ee-4f13-825f-f8b92eb7d783"
        },
        "item": {
          "id": "31b90b5f-efe5-441f-a8c0-1519c3e4ec5b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "17f2564e-13f7-42a0-a87a-1e380ac3ac71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2dfe5e1-5568-4ecc-8e72-43b9008d82c0",
        "cursor": {
          "ref": "8f6c4424-6be7-4125-9917-dccfd79a3502",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "969e6934-d379-4757-b5f4-e245ba2356d4"
        },
        "item": {
          "id": "e2dfe5e1-5568-4ecc-8e72-43b9008d82c0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3a838e69-a97d-4eea-8565-e8812b8712b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ea63e6b-6311-4bf4-94cd-f63f8ddccfed",
        "cursor": {
          "ref": "69b45b7b-5c77-43ef-a2a6-13f95259bac3",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "16662172-c836-4bbc-9d2d-fc7c30e23616"
        },
        "item": {
          "id": "3ea63e6b-6311-4bf4-94cd-f63f8ddccfed",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "926f6c33-999c-4271-8e4e-101dd8bb1c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c81deedf-cd7a-4329-b3ca-98215c57135e",
        "cursor": {
          "ref": "55e63fa9-77a8-4cf4-95c0-b21fbfa2582d",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2df2c241-1237-4cdf-bf69-8766ce9d6c6d"
        },
        "item": {
          "id": "c81deedf-cd7a-4329-b3ca-98215c57135e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "78ae3842-5201-4eed-8473-49dd9f0d28f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f320e76-92e0-429e-b046-5cc9bb66d577",
        "cursor": {
          "ref": "e7546d20-95f7-4c0e-af51-5f7253a08b46",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "e5027642-3f9f-4a93-aa6b-87484e042603"
        },
        "item": {
          "id": "8f320e76-92e0-429e-b046-5cc9bb66d577",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "58780c89-51b0-4216-85d1-3e856dce586b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8ebe7d-a9cb-406b-96b9-c22224e8857d",
        "cursor": {
          "ref": "9c644302-59a3-43af-afd9-124cf7af4047",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "18cffc41-477b-4113-aa4f-3558caa08f98"
        },
        "item": {
          "id": "5d8ebe7d-a9cb-406b-96b9-c22224e8857d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8777c82e-395b-4721-9afb-44258074bc8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8004e8b-b704-4d39-b427-d45f47efc3b8",
        "cursor": {
          "ref": "aadba933-87b7-4df7-89c1-7bba97b67436",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c319a13b-1ffc-4686-84be-6b84c560991f"
        },
        "item": {
          "id": "d8004e8b-b704-4d39-b427-d45f47efc3b8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "478f1feb-f510-46a5-a4f4-b47e7629bd92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a7c739f-4034-449f-a19e-d96b48d5f3ac",
        "cursor": {
          "ref": "8c397874-fcff-4343-bca0-a2fad25e9cf7",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "17b7cd4e-e669-4c2c-8fa7-46205b523d4d"
        },
        "item": {
          "id": "1a7c739f-4034-449f-a19e-d96b48d5f3ac",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7eb668a9-ad8d-4433-af20-e16f0a6b610d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8954f0-eeae-4839-b8e2-b18d659ffa0b",
        "cursor": {
          "ref": "5f1bb2bc-5792-41be-99ab-466cc0d7e5d7",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "76812e26-8ce6-425e-b8f8-38eab02eb196"
        },
        "item": {
          "id": "6a8954f0-eeae-4839-b8e2-b18d659ffa0b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "26eebb64-2c69-41bf-9ee6-cc89328235c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 133,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "d48ff996-dc9d-43eb-8859-f012df625163",
        "cursor": {
          "ref": "5bc9ae62-db59-4986-a467-dd240b631b96",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "46a7bc5b-38b2-43fc-8ec6-7fadcbe8e481"
        },
        "item": {
          "id": "d48ff996-dc9d-43eb-8859-f012df625163",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2216c53d-4375-4c0b-b1ad-e87b985ff850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85877745-d9f8-46fb-8d08-b7f795e8412a",
        "cursor": {
          "ref": "987c578b-c421-45ea-95ad-7916a5271168",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "cb55fb91-9dfc-40e3-8e8d-03fe95129cad"
        },
        "item": {
          "id": "85877745-d9f8-46fb-8d08-b7f795e8412a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f80659e5-d49d-4013-a015-abf1cbd626c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4406b83a-e675-4244-80bd-563d711903e3",
        "cursor": {
          "ref": "c77bd2e2-2961-40ff-82f2-ab9a67664d3e",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "34fc952b-16ae-41d7-977a-3b2d9e1c2a14"
        },
        "item": {
          "id": "4406b83a-e675-4244-80bd-563d711903e3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ace08ecf-efef-4ce5-9bdb-008792b85242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804b95ae-8c50-4c18-8d3a-3327d7543ab8",
        "cursor": {
          "ref": "e6233129-2aa0-4aee-aacd-7d6a69d81d26",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d9e3b4ac-9c2f-4e25-87b4-abf6deadb527"
        },
        "item": {
          "id": "804b95ae-8c50-4c18-8d3a-3327d7543ab8",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b446c594-b6e9-40cc-ad87-9885abc683bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9839f3b-2165-4334-9093-4e4f0ddc3d38",
        "cursor": {
          "ref": "3b33906d-7cb7-41e6-aa5d-a937ba190441",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "090d17ac-e3d2-4a30-8aa8-6c0f333db611"
        },
        "item": {
          "id": "f9839f3b-2165-4334-9093-4e4f0ddc3d38",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d298fdcf-f230-4afc-bf20-34e037f0b8a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd45d91b-87c9-448d-9abd-6544083e5bfb",
        "cursor": {
          "ref": "3a0fe963-fe0b-4bc9-a06b-adc3dd854d77",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "da873d9d-ded0-4091-96d6-c3af05bc91ef"
        },
        "item": {
          "id": "bd45d91b-87c9-448d-9abd-6544083e5bfb",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "93737180-b0f4-4039-9adc-1acc80ff1991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9207186-d8b7-4936-a62a-5998359252bb",
        "cursor": {
          "ref": "906b6de9-4f06-4056-ad65-3b8ef2631a96",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8209bef5-3235-403c-8ecf-277363434d4b"
        },
        "item": {
          "id": "f9207186-d8b7-4936-a62a-5998359252bb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a75a50ff-3e5f-4b08-9adc-4395a04a3af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af3a0f11-ac58-4d6b-a172-db1e2cbfda05",
        "cursor": {
          "ref": "5930726a-a605-4dd9-8206-0aa465a60506",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d10c248b-949f-4529-b228-97b9d3030acb"
        },
        "item": {
          "id": "af3a0f11-ac58-4d6b-a172-db1e2cbfda05",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "00460ebe-a740-4b3d-acd3-53c2834a0626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2545d648-ade0-45f2-9953-a9e66e675b1e",
        "cursor": {
          "ref": "b225300c-a19d-4245-9654-3c07ec08723a",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e22c7a90-1cb6-4b8a-b8e0-55234bd71e1c"
        },
        "item": {
          "id": "2545d648-ade0-45f2-9953-a9e66e675b1e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c662c3fd-f5b2-4540-a3c7-62c1647d2e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a39ae0-3c6d-4b82-93c1-4cde285ebbef",
        "cursor": {
          "ref": "09fb000a-cf09-4fa9-8e1a-f5a7fc93dfbe",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "792ddbda-743e-4fd2-a22f-f407e1962978"
        },
        "item": {
          "id": "75a39ae0-3c6d-4b82-93c1-4cde285ebbef",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "cd71a51e-87e4-4727-a5b3-fd0ada9afda0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0a64be-4c89-450a-a0a8-a2e32a5e9692",
        "cursor": {
          "ref": "91637ec8-5a30-4e6f-985f-21c6eec01bae",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b135ecff-9d1e-48b1-870f-2585bbf640dc"
        },
        "item": {
          "id": "fc0a64be-4c89-450a-a0a8-a2e32a5e9692",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e0cd45b8-4fcb-425b-b7a4-fd88246ef027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c725e9-2bbc-4004-a44f-1b3f40f0924a",
        "cursor": {
          "ref": "9fac4180-4c99-4293-9a10-1c16d8f15687",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a4ef145e-8bbf-4e14-8d44-3a7fbbd6c7cb"
        },
        "item": {
          "id": "51c725e9-2bbc-4004-a44f-1b3f40f0924a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5797de9f-b577-41b5-96e3-f454a715eb4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b06c0ef2-e658-42e9-b20b-749cec500261",
        "cursor": {
          "ref": "96f4d306-bff4-444c-a667-fb2e92cf618c",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "74cfb1b0-4b64-4295-a204-4902dd1458a7"
        },
        "item": {
          "id": "b06c0ef2-e658-42e9-b20b-749cec500261",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "13a59c1a-60d8-455b-b542-4148130aed6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b89fd3-868a-46a5-9c1e-7184e265e5bd",
        "cursor": {
          "ref": "d83de8db-5eea-45ce-8441-9ebd5626fc33",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "21df900e-af73-4cca-9fe8-56c70581c21c"
        },
        "item": {
          "id": "f9b89fd3-868a-46a5-9c1e-7184e265e5bd",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6ee7af08-11a7-4fbd-8ec4-5da8a83be049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f1b7c1-194a-4bb2-8388-3ece1abcf024",
        "cursor": {
          "ref": "95eabd7a-0571-4d31-90eb-16c2d3f025f1",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f48e44ba-baf0-427b-9792-9dd0af6407ba"
        },
        "item": {
          "id": "85f1b7c1-194a-4bb2-8388-3ece1abcf024",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "dbf0e8ee-e054-4131-822c-9cdcf3e9067e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed57d10a-41ae-4381-b1eb-58ed1cd8c2ac",
        "cursor": {
          "ref": "80464cf0-2e71-438a-8cf6-75960f8ab4a6",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ebb1a841-a25d-44e0-8b7f-05acee98368c"
        },
        "item": {
          "id": "ed57d10a-41ae-4381-b1eb-58ed1cd8c2ac",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "329c2ae9-df0a-4bbf-a44a-b3fada0d3f88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc8c39d-741f-45f1-9755-d3d5caf7bf9d",
        "cursor": {
          "ref": "ef3df087-0d0c-41bd-8a56-6f13faa7ee26",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0da676b7-b916-420b-8710-e943741d079e"
        },
        "item": {
          "id": "7bc8c39d-741f-45f1-9755-d3d5caf7bf9d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "61df97a8-97fb-488e-aea1-2541974c54c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ee3684-b426-4519-a127-874b5abb292a",
        "cursor": {
          "ref": "0d41c5f5-dfca-4dc9-abb6-145a4f1fcd9c",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "224c38bb-00dd-4ef2-9253-da5c21172e79"
        },
        "item": {
          "id": "66ee3684-b426-4519-a127-874b5abb292a",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "86af7119-8d93-4b1e-afd5-86a0736d8f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cbaa778-c091-4883-90a2-71f3f73c894d",
        "cursor": {
          "ref": "18a98a38-cd56-45ce-9ac5-063e56818faa",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "de94c354-a3ba-4ab3-91c5-12900d3f7d64"
        },
        "item": {
          "id": "9cbaa778-c091-4883-90a2-71f3f73c894d",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "85669fed-c24b-4a56-8ecc-ca6d968548d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa9d7b6-b1e6-45a4-a6f3-f348e2bee981",
        "cursor": {
          "ref": "c89800b4-7278-495f-94bc-cd06414ebb89",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "46876ca9-46f4-4d03-beda-813f2ee0784d"
        },
        "item": {
          "id": "ffa9d7b6-b1e6-45a4-a6f3-f348e2bee981",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "29e9e00a-dc5c-4cb2-b83c-e8f908c6c9aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f6338c5-ff53-4895-98b7-cd88dd0f3301",
        "cursor": {
          "ref": "3ad80460-5ef4-4859-9d68-2cd883a66ca0",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1dca3bff-533e-41a1-a248-8e1560ac1f36"
        },
        "item": {
          "id": "0f6338c5-ff53-4895-98b7-cd88dd0f3301",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "d298a310-5cd9-4d0b-a9ea-8f0de6c9fe75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c879652b-1cdd-4482-9cdf-f496a876af3b",
        "cursor": {
          "ref": "140384d2-82b7-4f9a-9b3a-22839e82f0da",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3a50cb87-3b16-44ae-800b-67ccfbcd71d9"
        },
        "item": {
          "id": "c879652b-1cdd-4482-9cdf-f496a876af3b",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "3b24f929-2c96-4906-970e-5c5e081c94b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "810f71d2-003c-4ae0-801c-16f5d6f16b03",
        "cursor": {
          "ref": "0651cdc6-ce9c-40cd-ac2a-177ef9e951ef",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "acb0fa06-e742-44dc-868b-855d9434d325"
        },
        "item": {
          "id": "810f71d2-003c-4ae0-801c-16f5d6f16b03",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "3c9f8247-0889-410f-a2bf-286cdd1c43f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b001395b-a80a-4807-8aca-a9cc6ed1b189",
        "cursor": {
          "ref": "c3aae1c5-9213-40a1-831e-1fe025a05f54",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2b52e3d6-046d-48bc-bacf-a4277e45b6b5"
        },
        "item": {
          "id": "b001395b-a80a-4807-8aca-a9cc6ed1b189",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "80eb224f-719f-4ada-8115-edbdfc5246eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "875ac7b0-e732-49e8-9f7c-ffc51e05960c",
        "cursor": {
          "ref": "1b2fea14-05f2-40a8-a3b4-34c6f031f209",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b0cd5863-62dd-456e-b8b7-a3b784391879"
        },
        "item": {
          "id": "875ac7b0-e732-49e8-9f7c-ffc51e05960c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a0f63a48-7cf7-42f3-8977-211e55153ff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f9beec5-4abf-4bf7-b27c-c3fec08ec413",
        "cursor": {
          "ref": "6845a892-69cd-4db4-b720-f4f95eb80a3b",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9fcf4268-9b43-4185-9934-e950c456995f"
        },
        "item": {
          "id": "5f9beec5-4abf-4bf7-b27c-c3fec08ec413",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9a18c7ad-f25a-491f-a277-623b4872c667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ffc69ca-6482-43ad-928c-a7dd12f59259",
        "cursor": {
          "ref": "7c42dc55-2459-471d-9e61-98607da897cf",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ba76812a-c233-47e3-be1b-2482f15a4bf6"
        },
        "item": {
          "id": "5ffc69ca-6482-43ad-928c-a7dd12f59259",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "73ee18ac-e8fe-458b-bbc5-8b8a3ea11e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55d8037-4144-4cd9-9afa-7f38537a2c25",
        "cursor": {
          "ref": "c14cae46-9c41-4bd7-921b-6f5a402bb82e",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d0952dbb-b34c-4187-ad29-498a34cad8a4"
        },
        "item": {
          "id": "a55d8037-4144-4cd9-9afa-7f38537a2c25",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "fdd7342b-f945-4031-a4e1-1769cfd2ed72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66d0cc0-d85d-48b3-a243-551a7bb6e01a",
        "cursor": {
          "ref": "92a59ed6-9858-45b4-be21-9cbc2bbedea9",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d11798ec-a7b6-4cf0-965c-dc577ebc6dca"
        },
        "item": {
          "id": "b66d0cc0-d85d-48b3-a243-551a7bb6e01a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "84895f0d-322c-4cdc-9eb9-e801957259ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df97f306-a304-4902-9d58-0cd92c60fa26",
        "cursor": {
          "ref": "f6369f32-3c47-499c-a7b3-f44abb29af2d",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e839a304-51dd-4bf1-810f-bf5dfeda0730"
        },
        "item": {
          "id": "df97f306-a304-4902-9d58-0cd92c60fa26",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "bc155cff-dd0d-4cf5-b4bc-68a429bf409d",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "9084c172-e8a4-40ba-b8fc-7b8f491607b5",
        "cursor": {
          "ref": "6f57e377-10d7-49ce-a194-c3c1ac017bdd",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b8f6ec55-9341-4c34-83b8-b8443cc4ef1e"
        },
        "item": {
          "id": "9084c172-e8a4-40ba-b8fc-7b8f491607b5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "dd504102-c517-40a4-9b88-f1b2dbe36da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aefdd6c-8cc5-45da-a665-97972add13c1",
        "cursor": {
          "ref": "10e0a079-f7dc-4746-bd11-94779d6bcdb4",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "8ba81200-6bc5-400b-84c1-3cc7c3273fc7"
        },
        "item": {
          "id": "6aefdd6c-8cc5-45da-a665-97972add13c1",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "c52da851-c3c0-4280-80af-e08fc911b366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44140a09-353c-4657-bea0-59d5b6751e07",
        "cursor": {
          "ref": "089858b2-24a4-48a4-8484-0d698d3ad1cb",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6418beb2-a4ef-4855-ad17-01e6c47c22ba"
        },
        "item": {
          "id": "44140a09-353c-4657-bea0-59d5b6751e07",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "56d6f813-c61e-4684-94c1-51682b05e795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f680cc6-95ac-45d3-9803-510ed2708b07",
        "cursor": {
          "ref": "4982a9a9-59cc-4c13-b340-398b848b7a3f",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f2c3097b-0679-4f3a-a4d8-8f12e6943f4d"
        },
        "item": {
          "id": "5f680cc6-95ac-45d3-9803-510ed2708b07",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d2dee44c-18f4-40d2-bb4e-ed1a95bde969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b09704f9-ba18-4b1a-9cee-af426936da26",
        "cursor": {
          "ref": "9124e823-1814-425e-81b0-7562bc8ac032",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "25883308-5719-4413-a849-4e2998a06cc8"
        },
        "item": {
          "id": "b09704f9-ba18-4b1a-9cee-af426936da26",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ca5f2f60-3c1c-416b-b0ff-752a8ac7c6d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e01a06-c580-4df7-9c5a-5a23d6d15b2b",
        "cursor": {
          "ref": "27ec5916-4db3-4f72-b6a2-d3831bf5441d",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "320a5c63-8ce7-4188-bd45-ea3c7c5e1e75"
        },
        "item": {
          "id": "e2e01a06-c580-4df7-9c5a-5a23d6d15b2b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f9da0e78-2d80-46f8-aca1-3b018ff1a1c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66763da-3501-4886-b7a5-31f0152806fb",
        "cursor": {
          "ref": "2f0be054-1142-4f90-867b-b13ec73e1a4e",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a86fb9dd-875f-4eec-ae4c-0cf3fb3032dd"
        },
        "item": {
          "id": "f66763da-3501-4886-b7a5-31f0152806fb",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e1cbdeb5-25d3-4cd2-9e64-54c1b773ce26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49bb2fd4-5ad7-4b8c-9d75-0f811dc1f7ea",
        "cursor": {
          "ref": "75718402-9c17-427a-8ad6-aa5130171d40",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "55b998a1-0295-4f4c-927e-bf1292a358eb"
        },
        "item": {
          "id": "49bb2fd4-5ad7-4b8c-9d75-0f811dc1f7ea",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "ef157863-46c7-4ba6-a675-0f83c55c122c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "397ad164-f16a-400e-afae-0f0d98d261e3",
        "cursor": {
          "ref": "ff815d6e-15a6-4dce-996c-9f92b66edacc",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "828d247f-dd4e-4492-b0a8-97f3d39ef404"
        },
        "item": {
          "id": "397ad164-f16a-400e-afae-0f0d98d261e3",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "b95cc328-e50a-45a5-9c28-241956a8358c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0935896-deed-4b08-8b82-0a93f8fb90c4",
        "cursor": {
          "ref": "5f194504-c898-4322-bc98-ae191adfcad6",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "6d2be5ad-4fec-425d-8bfd-9f730fea0430"
        },
        "item": {
          "id": "b0935896-deed-4b08-8b82-0a93f8fb90c4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "95d2876c-e855-410f-a945-a23ea6f10f47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f89837-aa07-491f-975c-271951355271",
        "cursor": {
          "ref": "03932613-ed70-4f9f-a2a7-16e3d429ed55",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "db1e0e65-7d96-41cf-8b6f-3cb01c5ce8d0"
        },
        "item": {
          "id": "a8f89837-aa07-491f-975c-271951355271",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5f28b159-e2ee-49a3-a613-f6f2c5642f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbebdc1c-70d9-4d88-9d96-407e724050f8",
        "cursor": {
          "ref": "a2445a30-e91a-4959-a896-617bcb8d44ee",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3d736c92-9b41-4e08-a332-031326522979"
        },
        "item": {
          "id": "dbebdc1c-70d9-4d88-9d96-407e724050f8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ad8a716b-ee66-4442-976b-8b8e510c9c0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f906d0-8e67-4856-8a9b-aba47f9512c1",
        "cursor": {
          "ref": "6d90e1d2-5ca4-4c3d-aee8-5e93afc21c1d",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "edf8a361-add8-4964-b54b-7d3fbe0eb9be"
        },
        "item": {
          "id": "82f906d0-8e67-4856-8a9b-aba47f9512c1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c2a96908-94b6-4f0c-9697-f477a9b602d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34146d57-a815-478f-8f28-ff0a9201db27",
        "cursor": {
          "ref": "8dabaf46-857b-4f43-ad2b-634009939e0a",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1aba60dd-ff70-4165-85fa-a5ae218f5bdf"
        },
        "item": {
          "id": "34146d57-a815-478f-8f28-ff0a9201db27",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5802cc75-cfb1-4576-b27b-59ac674561d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f7d5aaf-a534-447b-be91-a1fb449137c8",
        "cursor": {
          "ref": "c511704c-e9aa-4af8-be0f-5a29bb245611",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c0b57798-c8d2-4e0b-8051-97dd3aa06bbd"
        },
        "item": {
          "id": "6f7d5aaf-a534-447b-be91-a1fb449137c8",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "406b3da4-4cee-4d6d-9894-003e87247681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "058496c8-e613-4f75-8090-8583a9196095",
        "cursor": {
          "ref": "4c8f4a4f-52bc-4395-824c-70cc04d45558",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "95adb62e-5692-4a35-8896-68143898be25"
        },
        "item": {
          "id": "058496c8-e613-4f75-8090-8583a9196095",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "7d805e35-1d8d-408a-9924-16f17b30fedf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c39131f-ffa1-4249-9cfe-90d8f2a45139",
        "cursor": {
          "ref": "2cd3bdbf-7ad7-47bb-aa7c-123613a8aa94",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "eb625bd6-a88c-4e5a-b864-b68c2c82096b"
        },
        "item": {
          "id": "0c39131f-ffa1-4249-9cfe-90d8f2a45139",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f4524b80-3ba3-4724-b75d-a5aac57f07d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18747b16-4cac-4e90-b169-044e7a1e566b",
        "cursor": {
          "ref": "1d09bcc3-8540-417f-b515-7b200251d270",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7ebaef28-a1a7-408c-b0d5-6ce8c0f37334"
        },
        "item": {
          "id": "18747b16-4cac-4e90-b169-044e7a1e566b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "145e8245-e8b6-4bc5-a096-febaeed8cfc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a6e521-e8e2-48be-b080-9e6d69a28115",
        "cursor": {
          "ref": "eeefd7f7-e6d0-4d18-9eff-f6f9b18fabf7",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "5a1f3482-15d5-4c36-b79e-1e4f39cc1ff9"
        },
        "item": {
          "id": "54a6e521-e8e2-48be-b080-9e6d69a28115",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "95af10a3-a73c-44f3-a735-09f2e644b42f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c754904-ff55-4d2f-a215-438502688b77",
        "cursor": {
          "ref": "4417144f-e0e8-41f6-adc8-f08aed7c4cb3",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "2f8bb308-2916-478b-b74f-8f60a8b157a8"
        },
        "item": {
          "id": "8c754904-ff55-4d2f-a215-438502688b77",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b9d634ce-d197-45c7-a68e-1f3bdba135c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6097255-64c5-4256-8420-65ed62edbeeb",
        "cursor": {
          "ref": "b3849787-b877-455f-8e61-a933d0fa9fdd",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "56595e5e-8faf-4556-9a6a-83bf953222ca"
        },
        "item": {
          "id": "f6097255-64c5-4256-8420-65ed62edbeeb",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e4d834a5-e022-4e25-bc25-fc82d2d6f9f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf6d295-e7dc-4588-ad8b-212571a8bc80",
        "cursor": {
          "ref": "92c8f10b-d501-4505-81fa-7df4324bf108",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3f6f02a0-9e22-43a9-ad51-8fc0826ce014"
        },
        "item": {
          "id": "ccf6d295-e7dc-4588-ad8b-212571a8bc80",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b9af521a-2b11-4eee-845a-1d7f164b18c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d55c424b-33d8-4c48-bd1e-730a9360b8ee",
        "cursor": {
          "ref": "42ab0bae-9433-4e1d-be9e-05f523ec659a",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "3efb83ce-d14d-40d2-b637-492be86c4290"
        },
        "item": {
          "id": "d55c424b-33d8-4c48-bd1e-730a9360b8ee",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5ddc00dd-380e-46ad-b80e-30e5f52a6f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7973d8be-b46d-4b74-a6ae-dcacc2b5a27c",
        "cursor": {
          "ref": "b9a936af-cfa8-4fe7-9a65-17aa07ec3cfe",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4f6281f6-1b54-4984-bad0-7d750dd98b72"
        },
        "item": {
          "id": "7973d8be-b46d-4b74-a6ae-dcacc2b5a27c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "06e429a2-0cb4-4553-8f6c-4cb149464d87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cdede2c-f31d-477a-aa76-8cc6220822cb",
        "cursor": {
          "ref": "f2df4947-9ebb-4545-9932-bffc0008364f",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1f75448f-cde0-473b-bd9c-22de87db3069"
        },
        "item": {
          "id": "5cdede2c-f31d-477a-aa76-8cc6220822cb",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "265602f8-dfd5-46d9-bb24-3eb6b362b56b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "562d141c-caa5-4a76-afd2-9fe47add3c79",
        "cursor": {
          "ref": "409c58e6-98de-44cc-96ce-d7a326a6b0cd",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "99fff864-4b86-49bb-8916-577d246b544a"
        },
        "item": {
          "id": "562d141c-caa5-4a76-afd2-9fe47add3c79",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "231d0aea-4be2-4f14-9e44-6a236762eaa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b08e2dc-b08f-4562-9459-7559d750dc43",
        "cursor": {
          "ref": "87a36591-16da-4235-b41f-44345adadc3c",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "bc58ce3c-b300-4459-a6d4-d46ce7d009de"
        },
        "item": {
          "id": "8b08e2dc-b08f-4562-9459-7559d750dc43",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "de0af068-23db-45a1-bd95-e54ddfe0d9f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dfa6ed9-acca-4ef1-aca1-7b335de6b4c0",
        "cursor": {
          "ref": "22b47174-a485-479e-b19b-1f073e0792f3",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8d6ea64a-9411-4d2c-a13d-ba2e55f97646"
        },
        "item": {
          "id": "5dfa6ed9-acca-4ef1-aca1-7b335de6b4c0",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a957db8e-e07d-4330-9725-47a432d36695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5cfb23f-953b-47c5-8d67-464860ce8708",
        "cursor": {
          "ref": "90b36b40-166f-4e60-a53a-950906f6c97a",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "39f3e2f7-bee9-48de-a5ad-592b2390e725"
        },
        "item": {
          "id": "d5cfb23f-953b-47c5-8d67-464860ce8708",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "70c80491-ef70-483f-9b72-de799fdf7c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b6df97-7b3c-4aae-a8ad-54297cdecc05",
        "cursor": {
          "ref": "868878d0-3a99-41f6-a3ee-cc546c56737a",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "869a210d-50ec-4287-a4ce-5496e63a5525"
        },
        "item": {
          "id": "b0b6df97-7b3c-4aae-a8ad-54297cdecc05",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6b09469c-07aa-4e11-9c60-b95600df0f2b",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "127032f9-0f2d-4b6b-8615-4f3c3e530b22",
        "cursor": {
          "ref": "4e97c405-2ae2-49b0-b786-1cfde948ab99",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8341ae35-cf2f-4184-a256-23465160f654"
        },
        "item": {
          "id": "127032f9-0f2d-4b6b-8615-4f3c3e530b22",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "da3f0b3a-4c2f-4bb1-b057-fa412fa0b889",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "3e32dca6-a225-4a66-bf49-89eb0fb0f85b",
        "cursor": {
          "ref": "1e725c98-7afc-4600-8115-37f0fe14509b",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "508a76dd-5e7e-48c0-b660-0b08bc1d54eb"
        },
        "item": {
          "id": "3e32dca6-a225-4a66-bf49-89eb0fb0f85b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "538eb79a-731e-46e3-8756-8c04a532e201",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "5468eb24-064d-42bd-8029-b401d50084f4",
        "cursor": {
          "ref": "e4100b4d-994f-4765-9386-cf7fe4a250e8",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "3c445dfa-fcd2-4894-860c-487c5dbc1113"
        },
        "item": {
          "id": "5468eb24-064d-42bd-8029-b401d50084f4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "50429dfd-edeb-499f-af52-403bdc332cde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5499848b-3a42-4560-97da-0b94da0fd13e",
        "cursor": {
          "ref": "59ebb46b-b537-4ae1-a41c-156bd4170886",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "18d9e588-93f0-48dc-91be-a04bedfa8cd0"
        },
        "item": {
          "id": "5499848b-3a42-4560-97da-0b94da0fd13e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7e6d7872-f3e4-47e5-ba5e-a7e959bb72bc",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "846b333c-66a7-4ffb-88e9-c39b4806a87a",
        "cursor": {
          "ref": "4808292c-0c0a-453e-b926-cc49829a70a0",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3f416064-a549-474b-a798-493ddf193de2"
        },
        "item": {
          "id": "846b333c-66a7-4ffb-88e9-c39b4806a87a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "51df3d44-049a-4c75-b400-5411a82160b2",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "841bfa25-b35f-4199-ac9c-dccdd36083b5",
        "cursor": {
          "ref": "6f93ab40-0f56-4b2d-8b82-10816c4704cf",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9c6be305-fbca-4317-a7bd-486cac48d0eb"
        },
        "item": {
          "id": "841bfa25-b35f-4199-ac9c-dccdd36083b5",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d373b700-b7ef-41f7-8896-09cec10d3dc3",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "f3417d2d-7ac8-4781-aeb2-2d85537a9d8a",
        "cursor": {
          "ref": "2457f6da-5f64-4193-807a-a2b153d19665",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "550625e8-a87a-46fd-b2b7-90b6e9c38683"
        },
        "item": {
          "id": "f3417d2d-7ac8-4781-aeb2-2d85537a9d8a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "edc3de17-f9d7-4019-bb59-0f8cdaa7e09f",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "e8b0bc0a-85ee-40fd-918b-b2bbe5af0936",
        "cursor": {
          "ref": "ffff848c-468d-4fbf-81c8-0f298872ff60",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a921ee1f-6f32-46ef-b41e-dd16a045db8c"
        },
        "item": {
          "id": "e8b0bc0a-85ee-40fd-918b-b2bbe5af0936",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e4f995e4-8b74-4798-8e58-737636684f5f",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "0867db24-ef97-41bf-8116-f05401fbe3e3",
        "cursor": {
          "ref": "44b10599-456f-4686-86d7-0bb207904f3b",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b9a8f9d4-6b05-4ac4-895f-6fdba8a0442a"
        },
        "item": {
          "id": "0867db24-ef97-41bf-8116-f05401fbe3e3",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "fbc211ab-820f-413f-86be-adc080614d5b",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "eb3de116-2fa9-4ba4-8561-27c15710a4f6",
        "cursor": {
          "ref": "537dc5ad-4c5c-483d-abf7-837199dc8d6c",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "784fc758-eab3-43fb-8be5-e9fd198a63e0"
        },
        "item": {
          "id": "eb3de116-2fa9-4ba4-8561-27c15710a4f6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5708b8f9-ff7a-469f-a4e2-e2e8d8de149b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3f13a7-4d34-4705-88fe-820583a8764a",
        "cursor": {
          "ref": "c95d16d4-9da4-47ed-afa6-8d509e5307ee",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b90b3df6-a7ec-4e4a-a71b-0c1c09d2f2bc"
        },
        "item": {
          "id": "ed3f13a7-4d34-4705-88fe-820583a8764a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "bee7116e-bc6b-4061-87ca-d1143e2cac9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2936679-2716-462e-87d8-b7d4f75047de",
        "cursor": {
          "ref": "b36210ac-912e-4264-a48b-b43b61f2a717",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c690b88c-a143-4ba0-887b-eeb1a0f41514"
        },
        "item": {
          "id": "c2936679-2716-462e-87d8-b7d4f75047de",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f962fb72-50a4-4fb3-bea3-76e9d4f645d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24135375-85f2-40d8-b69b-6dfcaf5299bf",
        "cursor": {
          "ref": "c577d518-6874-4a90-ab44-e40843b45ae9",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "33bffe55-76db-4c32-b489-a0540d628ac4"
        },
        "item": {
          "id": "24135375-85f2-40d8-b69b-6dfcaf5299bf",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f7d6d89a-8774-44cf-81e5-80c693b1fcdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6536b158-07dd-45a0-8793-47fc8dc8addc",
        "cursor": {
          "ref": "510e6cde-4a1b-4202-8844-14540812e5e5",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "45f201e0-b8d4-4eeb-848e-e491a86d3f64"
        },
        "item": {
          "id": "6536b158-07dd-45a0-8793-47fc8dc8addc",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ddecef19-bd2c-47b3-98ed-8dd8a179a270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580602ba-1142-4440-8c40-64d795824431",
        "cursor": {
          "ref": "e4c6ebf8-b0d4-4014-8d1f-d3f53b121dea",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e32ec754-c3a3-4c22-bb82-9d0b347e8a15"
        },
        "item": {
          "id": "580602ba-1142-4440-8c40-64d795824431",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "0bd7ecb5-eaba-416c-b210-97abf8c32bd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbfc4d15-f9e2-4899-b08e-e79af0056145",
        "cursor": {
          "ref": "419c7a81-7385-40e5-b5b7-646af7cdb3a9",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8fb0549e-0b56-4f5e-8ef8-2912a5822591"
        },
        "item": {
          "id": "dbfc4d15-f9e2-4899-b08e-e79af0056145",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6b91640a-d459-486f-8395-18dad644e817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e0f3d14-99a7-4070-940c-a9e819608eee",
        "cursor": {
          "ref": "9635566f-2823-4376-b6bf-49fbca2ddb22",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ab054e7d-319f-4fe4-acb7-4e661ac8bb0d"
        },
        "item": {
          "id": "8e0f3d14-99a7-4070-940c-a9e819608eee",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8f4fd491-86c3-47f1-8cf4-63b302cf95b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba3c0a3-b785-4b88-bfbe-044050298a67",
        "cursor": {
          "ref": "66edce91-358f-4759-9d25-660cdf4d116c",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "550a17e8-44b3-4dee-9df8-e93bd4fff04f"
        },
        "item": {
          "id": "7ba3c0a3-b785-4b88-bfbe-044050298a67",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9101d9ef-06e3-4514-917d-d8956e7de15e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48cbc78d-53f5-4b3b-89c2-ceaa75db2cd3",
        "cursor": {
          "ref": "40d448a3-920d-4677-914b-ecfad94a7d1d",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "94bd34e0-57e7-49bc-9b6f-9a4abc46a9eb"
        },
        "item": {
          "id": "48cbc78d-53f5-4b3b-89c2-ceaa75db2cd3",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "eac67ebc-52ef-4fcf-a9c0-f333ca925310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "330e7b6a-2101-401b-8d48-963b77481de4",
        "cursor": {
          "ref": "6d7d1053-b4ee-4da6-b9f6-d921c7d9c0a8",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6f1cdc1f-d587-43a3-b84c-36ecd5a27e4b"
        },
        "item": {
          "id": "330e7b6a-2101-401b-8d48-963b77481de4",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a88255eb-f83f-4d2e-88aa-e1e8860e5408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3094196d-f07c-4dd8-a7bb-61065a5ea45d",
        "cursor": {
          "ref": "ee77bab2-3631-4073-8db0-3bb6cb039e62",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "348ff4d9-cec0-42bf-881a-cc1f7a4d86ed"
        },
        "item": {
          "id": "3094196d-f07c-4dd8-a7bb-61065a5ea45d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b91479e7-f815-454c-b8f3-0b8949ad95ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d114765-51c9-4c1b-9fe3-4664e047f010",
        "cursor": {
          "ref": "c61cf40c-03a0-44b5-bd15-179bbbec78a4",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8b86d048-9182-4f7f-b80b-225e9a852dad"
        },
        "item": {
          "id": "7d114765-51c9-4c1b-9fe3-4664e047f010",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "73566755-53a5-4566-9a19-a1cd1109e9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d0bcfad-438e-40ec-87c6-83ba3790995e",
        "cursor": {
          "ref": "93903829-3f37-4d4a-984e-2d1f60e2bfc6",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "be1849da-58c0-420b-a050-7c9ed8bf0ec1"
        },
        "item": {
          "id": "2d0bcfad-438e-40ec-87c6-83ba3790995e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "fa82a34a-0072-4d57-81ec-d6d88989fa4d",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "e1b8e8da-9548-4126-b3ff-ac2e09e64d57",
        "cursor": {
          "ref": "dd7367e5-f224-4849-8947-3cf37fcf6e9a",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "88b8cc9b-51e0-4ecb-9630-a4153ecd6627"
        },
        "item": {
          "id": "e1b8e8da-9548-4126-b3ff-ac2e09e64d57",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2060ff86-2002-4acc-b3d6-60a217f07429",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "2caa2d18-d969-4e6b-b5ff-af48ce76a9ca",
        "cursor": {
          "ref": "3dae0b5c-2def-4562-ae01-b7f864bffcc3",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3cc9c733-bb2f-488c-aa08-2bd28e29b591"
        },
        "item": {
          "id": "2caa2d18-d969-4e6b-b5ff-af48ce76a9ca",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "253055f5-11e8-4e0b-b71c-ab7eeba971d8",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "ec132f67-c97e-4b8e-8d61-326a528a3316",
        "cursor": {
          "ref": "3c232674-236f-4db5-9b28-f6761edb6c0d",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a770ff2e-6864-47c6-aa9a-50c0cc41ee93"
        },
        "item": {
          "id": "ec132f67-c97e-4b8e-8d61-326a528a3316",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1162459b-b246-46da-b575-d528729c5bac",
          "status": "OK",
          "code": 200,
          "responseTime": 173,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "3be5c49f-13f4-4910-9f91-85362643be66",
        "cursor": {
          "ref": "4613bce8-6607-427c-a80e-d1e8852be1c3",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8b365e74-3375-41bc-be77-440767015ce1"
        },
        "item": {
          "id": "3be5c49f-13f4-4910-9f91-85362643be66",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4505c871-9fa9-410b-8810-d794b499a39a",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "a57f209a-c5be-4be5-9dae-a2b6764d520d",
        "cursor": {
          "ref": "a054653c-163b-46d4-80bc-76a1925b5bbc",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7ded7954-10ef-479e-b93b-87a8c2aa5856"
        },
        "item": {
          "id": "a57f209a-c5be-4be5-9dae-a2b6764d520d",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "10122229-7efc-49c5-a6b1-9f2cba156738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c97701f-030c-46cd-8d8e-7ff97ba33514",
        "cursor": {
          "ref": "525f0aaa-fe5e-4ba4-9b62-6ff8e9b268d5",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e5e5d8bc-5138-4be4-be20-674b990392aa"
        },
        "item": {
          "id": "0c97701f-030c-46cd-8d8e-7ff97ba33514",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f4d07774-80e1-49f2-8bd7-e5008aa36df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d7b6da-ebf2-490d-9e4c-029fa225a869",
        "cursor": {
          "ref": "3b8d2fa8-4557-4c5b-8d34-bb3d8961acae",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "289eae10-f2a6-4551-baf2-e461c2e0a34e"
        },
        "item": {
          "id": "96d7b6da-ebf2-490d-9e4c-029fa225a869",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "890bfbc9-c73a-4bb6-b223-32fd942337df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1259c24-f2e0-4422-bb41-bdae5a4c42bf",
        "cursor": {
          "ref": "1ba197e1-8005-47a4-b68e-0ce24172c097",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "99722f82-c945-4a96-924f-eca9b0f226ea"
        },
        "item": {
          "id": "a1259c24-f2e0-4422-bb41-bdae5a4c42bf",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "45e5b2f6-23f7-47b5-b028-fc0a2abf9dcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5746aa38-f6c8-4011-bc30-ae3eaa052bac",
        "cursor": {
          "ref": "9cf46486-fe45-4e63-973d-4fc9a319a7b9",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b203571c-df23-452c-9dc6-eafeda4633f0"
        },
        "item": {
          "id": "5746aa38-f6c8-4011-bc30-ae3eaa052bac",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "40368fad-63f7-4c5e-9978-56100acc9a64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d17d0a-cbeb-4f85-b810-81b8fccb4477",
        "cursor": {
          "ref": "ca78616e-915e-4cd0-ab47-eef606a679c9",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "7bc9aa4e-f984-467c-a321-ba3392d708f6"
        },
        "item": {
          "id": "91d17d0a-cbeb-4f85-b810-81b8fccb4477",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b5293631-b337-4435-b219-ee02c1d0abb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bfee522-4c1a-4684-bdfc-b00c96fb94bd",
        "cursor": {
          "ref": "354ba793-696c-45c8-89f3-091f6d5e9833",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "191ed087-6a34-4ffb-b902-311f53d76be9"
        },
        "item": {
          "id": "3bfee522-4c1a-4684-bdfc-b00c96fb94bd",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "81c7144d-4109-45e4-8371-d63620438e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52fcae7c-b90f-4491-bc44-192bf80cd118",
        "cursor": {
          "ref": "7ada9f02-98fd-45af-af79-aa188c4669ae",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "451e8f69-f8af-466d-bc51-a75d4c4e368c"
        },
        "item": {
          "id": "52fcae7c-b90f-4491-bc44-192bf80cd118",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "178c253e-bda2-4ef6-b8e3-9d71daf86f1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1eb229e-2af6-4450-9f42-d5cc0f3ce5cd",
        "cursor": {
          "ref": "a2b2a187-bb9a-43bf-9bb9-93e0bf01ac5e",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "388ea4a2-64fc-4d5f-a6c4-5be430f0ae88"
        },
        "item": {
          "id": "c1eb229e-2af6-4450-9f42-d5cc0f3ce5cd",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "be5fdee0-f3cd-4367-bf41-f3faa5285c16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e350f2d-fd0a-4291-81ed-0b012d81a2e7",
        "cursor": {
          "ref": "f0fb2eeb-92b5-42ec-a62a-b468851a1b63",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "badbbb23-b00e-41d9-a1e7-0776584d594f"
        },
        "item": {
          "id": "9e350f2d-fd0a-4291-81ed-0b012d81a2e7",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c7e99812-35f9-4c04-9568-99efd7d40d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b6e1ea-2fa6-4557-9269-7f76a958e594",
        "cursor": {
          "ref": "62f2a2a9-8099-451a-9e88-2e62ec83fe79",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "02962c2f-14a4-4a8d-a0f1-1e78baed7c4a"
        },
        "item": {
          "id": "82b6e1ea-2fa6-4557-9269-7f76a958e594",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "176c11cf-1773-490c-b7f2-503b368ff22a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a84f927-3ac0-480f-8d10-4d47da0727a9",
        "cursor": {
          "ref": "d9268788-72a7-4f14-897e-49bc7fc3218c",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c48b3a1a-7454-449a-aceb-c626472225f9"
        },
        "item": {
          "id": "8a84f927-3ac0-480f-8d10-4d47da0727a9",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9ddcef58-b415-4177-8efc-13e40ed4bdff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6219035b-a6ca-4da8-bcb6-0e3819ce76bd",
        "cursor": {
          "ref": "ab7c80c6-db89-4db9-93f7-67177e3ca340",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "01819393-c702-41d2-80ed-7a2e9749aa36"
        },
        "item": {
          "id": "6219035b-a6ca-4da8-bcb6-0e3819ce76bd",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "de7bc4f8-fccf-4836-a6f3-2dc98f99d2ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "709d8868-2be2-4336-b0b1-75835796e0d4",
        "cursor": {
          "ref": "0d4cf10b-7581-4298-8694-5ba412f9893e",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "46ab0945-7915-42c8-a2fc-fe8bce14a0f6"
        },
        "item": {
          "id": "709d8868-2be2-4336-b0b1-75835796e0d4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f4043818-37f1-4ae3-858c-7d1c4dbc98a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb83cf5-c8ff-44d4-aedf-3c360c4133c1",
        "cursor": {
          "ref": "cff29f79-32ab-47e2-ad17-720cca039959",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "974f979e-5ade-4adb-a0dd-df2f3e04aaec"
        },
        "item": {
          "id": "bcb83cf5-c8ff-44d4-aedf-3c360c4133c1",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1bcf1845-b34f-4c71-94ca-5701f33bd7d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f07b9fc1-771e-4700-9ead-11aaa223beca",
        "cursor": {
          "ref": "3a441d0f-3538-4fef-98e1-5a203f642ce3",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2853ce59-cb13-4a82-9c0c-1f4519d48002"
        },
        "item": {
          "id": "f07b9fc1-771e-4700-9ead-11aaa223beca",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e49df0ae-8327-4ac1-9c92-b5f7fcfd05a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c038cb6e-0fcf-4b2c-8318-02afbcb124ae",
        "cursor": {
          "ref": "fe49f6fa-435c-4dc5-b320-c7f786017e15",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b7d27a77-cb53-410d-9623-6dc4dbf75884"
        },
        "item": {
          "id": "c038cb6e-0fcf-4b2c-8318-02afbcb124ae",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1c0ab359-1fb9-4468-9ee6-010cc8bdd85c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48575c7b-f083-4995-9fb4-eed51848a71f",
        "cursor": {
          "ref": "29d8fb3b-2106-4e37-aabc-6414f6e295c6",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c55222f3-f5c2-48ff-a880-6e96cb0a1cbb"
        },
        "item": {
          "id": "48575c7b-f083-4995-9fb4-eed51848a71f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7dbc54f2-6fd3-4ef8-b3c7-74544024042c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d58bdad1-25ad-4514-8662-ab726f75b456",
        "cursor": {
          "ref": "68b62885-1fe5-43b9-b6c7-9a7343f9f3fc",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "17116ba9-6ffd-494c-bf0f-e06e75c0d857"
        },
        "item": {
          "id": "d58bdad1-25ad-4514-8662-ab726f75b456",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1081d0bf-bfe3-4f6f-88a9-0ac8966a3af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43f1f1cf-c193-4b08-a9d0-99707ef39b37",
        "cursor": {
          "ref": "ee571131-779e-4501-a52b-8e301698914b",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "facc0b0d-f45e-4d97-88d3-41efdd306918"
        },
        "item": {
          "id": "43f1f1cf-c193-4b08-a9d0-99707ef39b37",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "902dd3ab-7c91-4ad7-9937-8862c223d848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52bc5156-1d6a-46f9-9050-25a73929bc36",
        "cursor": {
          "ref": "bedaa4ca-9a1f-41cf-8359-45f772e7898a",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "92a3d5c5-7967-43cb-8050-7e7b6a78cc29"
        },
        "item": {
          "id": "52bc5156-1d6a-46f9-9050-25a73929bc36",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f0ee8d90-c489-4892-9967-938a16f75a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "308ac343-3ad0-4038-b8d5-a01d58a788b1",
        "cursor": {
          "ref": "a2d73f6a-3eae-4e71-8863-65dee4f9c06d",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "65c0ec76-0968-4cd1-afda-ce64d53666df"
        },
        "item": {
          "id": "308ac343-3ad0-4038-b8d5-a01d58a788b1",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "2e683a69-ac71-4a49-9090-a30c60c7f595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f5a7060-a6bc-4923-a4c9-a5162f605809",
        "cursor": {
          "ref": "a42d7755-ab8f-45c4-afd5-e2be1435a15e",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "28fb4bed-af91-443d-bb8e-88336d381806"
        },
        "item": {
          "id": "4f5a7060-a6bc-4923-a4c9-a5162f605809",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a670c569-2061-4987-94b9-0a7c7879f6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "584cee65-3996-4fe4-8b31-b27e4f4fe4a5",
        "cursor": {
          "ref": "346e764a-249d-43b2-89c2-90438eeb45ed",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4cb0b821-0329-41ec-bbcd-2cf40afa7e67"
        },
        "item": {
          "id": "584cee65-3996-4fe4-8b31-b27e4f4fe4a5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c2c0a183-3cd0-4a39-941c-dd07219a9132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86eb978f-6149-4c89-adc6-8588df721201",
        "cursor": {
          "ref": "e873baef-1720-4c47-aa7e-48194a98aae2",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2ed00821-67a8-4566-83ac-965f0bb551d3"
        },
        "item": {
          "id": "86eb978f-6149-4c89-adc6-8588df721201",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1a8b9dd6-9396-454c-8513-d38f96e7c232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860c0180-2900-48d5-b9a1-c9bed46da442",
        "cursor": {
          "ref": "fe810d9b-c5c7-4550-b14d-d5c3ca906399",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1253f86b-8885-4550-ba8a-d17f44536e63"
        },
        "item": {
          "id": "860c0180-2900-48d5-b9a1-c9bed46da442",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "20234547-ede8-4bf2-bf49-850f5cc80888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6facf0b-8d6d-405f-9594-dc6ea4a16520",
        "cursor": {
          "ref": "178764d7-32b9-4c3b-8060-4ec01d168e08",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5ea94e02-481f-45e0-832b-12d6c30b4dd0"
        },
        "item": {
          "id": "c6facf0b-8d6d-405f-9594-dc6ea4a16520",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8f2bd534-7bb3-4f66-add2-71cd120abbcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8c3222-bf43-45c5-8d42-35ed8212481d",
        "cursor": {
          "ref": "79677ef5-aaf5-456a-b4fc-912bcf0d5ff3",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c0e6482d-26cc-4283-834f-01b483daf5fd"
        },
        "item": {
          "id": "0d8c3222-bf43-45c5-8d42-35ed8212481d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "3e35cbe3-a722-4b21-a7bb-f37587286035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f570d600-c3ea-4a21-b706-c648a61e7db4",
        "cursor": {
          "ref": "34a47c73-9a04-499a-9573-1262ffddd77e",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7b793dcb-b55e-4cf9-8715-594cbdf86af1"
        },
        "item": {
          "id": "f570d600-c3ea-4a21-b706-c648a61e7db4",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ff35cf58-eb88-41d2-a455-68b9c7eb2d4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c50a06-f36d-49df-8737-af43c484ece1",
        "cursor": {
          "ref": "b88035c8-decd-423d-9a1c-b5695f4b2362",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7cde4493-a5df-4772-99f3-78f69f7e017d"
        },
        "item": {
          "id": "53c50a06-f36d-49df-8737-af43c484ece1",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9030aef9-a5a5-44e7-ab89-361ebfd7c388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8174a7-cf80-4fd3-ae32-8c8c01bcc96e",
        "cursor": {
          "ref": "99994893-fdc7-4e37-9e65-6c967d87f71c",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b881eaed-7aa0-4521-8f2f-38ce5b788371"
        },
        "item": {
          "id": "2a8174a7-cf80-4fd3-ae32-8c8c01bcc96e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6cf70e14-bc56-497b-87cc-5c87dabb6100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb8a2ab-c9de-4183-bcf9-db59a0a475f7",
        "cursor": {
          "ref": "f57e5ee5-963a-4d22-b619-0954757ff1d3",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "daba4d2d-5578-4332-8957-d0651c168502"
        },
        "item": {
          "id": "0fb8a2ab-c9de-4183-bcf9-db59a0a475f7",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "2556925e-1f67-4834-bc12-d89d58f150e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "312893fb-d2dd-46e8-8ec0-96fcd9e77e79",
        "cursor": {
          "ref": "b5e2d7ea-3763-4672-b62f-34017f573abf",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8c8f78ad-98da-42d4-a7fe-6d3e5f1e9162"
        },
        "item": {
          "id": "312893fb-d2dd-46e8-8ec0-96fcd9e77e79",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e9b9e83c-42c6-48d6-b8d6-04fff4171351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df05cc67-b937-45c9-ae0f-88add4b5f3b7",
        "cursor": {
          "ref": "a539d90c-1131-4490-926d-dc19858d9ee2",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9d3b41ad-5928-432e-af6c-07fb0208e6dc"
        },
        "item": {
          "id": "df05cc67-b937-45c9-ae0f-88add4b5f3b7",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8d7eccc6-6e5a-45c9-a1b8-78657f9a0435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c605ac-bb02-4c13-9dad-cbfda77bf672",
        "cursor": {
          "ref": "1f12b519-a519-4d67-8a0c-3f548c1209c5",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "57529c57-38b4-4fb0-9af7-ac9429fc270c"
        },
        "item": {
          "id": "73c605ac-bb02-4c13-9dad-cbfda77bf672",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e3bc7cf0-fe6f-4873-83d4-8fa087d5d592",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f07c06e-fe1f-4448-b7e2-825127e16d2e",
        "cursor": {
          "ref": "fa9703fc-8a55-47a4-adba-79329e4f6b01",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a2c2bf85-83c5-4761-b484-ed83ce37e271"
        },
        "item": {
          "id": "5f07c06e-fe1f-4448-b7e2-825127e16d2e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6014752d-5c56-43e5-8a0f-f3e5dff7cb98",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "dabd33ee-ce11-444b-86b0-f9f040aec75b",
        "cursor": {
          "ref": "f25fbe0b-72da-44b2-8e63-fd67613006c8",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f7a7d504-e4f2-472c-90ff-eb649c1b7b35"
        },
        "item": {
          "id": "dabd33ee-ce11-444b-86b0-f9f040aec75b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ba4384f6-0754-44fe-9ee8-641eab21c4ca",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcecb472-bdd0-4e14-be2e-458fb0445b26",
        "cursor": {
          "ref": "d6b6a73d-c1e2-4f7c-b4ad-b59ecbe0b373",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7147f752-0d76-4ebe-ae77-7e0e7c696735"
        },
        "item": {
          "id": "fcecb472-bdd0-4e14-be2e-458fb0445b26",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "85e54e9f-17f7-45a5-b0e6-5777be262170",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "32b30563-2b14-43b0-8113-2519cfe83fcb",
        "cursor": {
          "ref": "b1714898-ee79-46b3-ada4-13a9bc86c429",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7012717b-8bd2-47e4-80d9-47d6b6bfe6ca"
        },
        "item": {
          "id": "32b30563-2b14-43b0-8113-2519cfe83fcb",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a4d13e6a-c6b3-4fad-8fea-6cdbc1bed233",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32b30563-2b14-43b0-8113-2519cfe83fcb",
        "cursor": {
          "ref": "b1714898-ee79-46b3-ada4-13a9bc86c429",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7012717b-8bd2-47e4-80d9-47d6b6bfe6ca"
        },
        "item": {
          "id": "32b30563-2b14-43b0-8113-2519cfe83fcb",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a4d13e6a-c6b3-4fad-8fea-6cdbc1bed233",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "923e5b2c-290b-4732-aef5-55646b864463",
        "cursor": {
          "ref": "502e7e16-ca4b-440d-a6a3-e591521e4f50",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b924a5d1-c0f7-488f-ab1d-f39a7324d202"
        },
        "item": {
          "id": "923e5b2c-290b-4732-aef5-55646b864463",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "27975b0b-532f-4759-8701-9b3b2b328100",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f091fc56-df7e-4a09-805d-f338981f20b6",
        "cursor": {
          "ref": "f7240a13-bfb3-486f-bbb2-ba333ef9fd2f",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "74d234e1-b494-4d9e-8eee-073f4a1df3e7"
        },
        "item": {
          "id": "f091fc56-df7e-4a09-805d-f338981f20b6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "601acd36-3f95-41e8-a55b-6c7c6e567cad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}