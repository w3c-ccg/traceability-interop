{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "735724c6-1d49-4e30-a81f-503ca1a75674",
        "name": "Clear Cache",
        "item": [
          {
            "id": "dcb33010-e1b0-4c13-8629-ee1bbecd0364",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c31bc160-9c44-4af5-9e28-457b9238e911",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bf244ad0-3494-41fc-9aa0-c38575b0d514"
                }
              }
            ]
          },
          {
            "id": "6f5f1ff0-23af-4bec-811f-41a38a308828",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8f5c5e49-9b9d-49cc-803f-c5ac870d6c30",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4fcf67ac-9cc8-44ec-b517-b7e5d268490f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "83e7fd32-569f-4ced-95c3-577e457b7c6b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "018d3106-12c4-4f91-88b2-7de0001424c7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9a8b893a-be72-4f48-adab-57186f5f6b1d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5fa9242d-fe78-4d16-9a67-57aaf9cf4fc5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1a4f84f8-5862-4798-9374-1ee766120ef2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3a46ccfc-9dd4-40c8-939b-9e9c2a286245",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "999d9625-7f61-4c87-a206-f6d16ad31f89"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ad695ef0-d3f9-4248-9aa7-d915c89f6e45",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3c699e42-8a94-4821-b87c-7b9082115200"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f69dade-a9f4-41f3-8526-f0ccdd5e5734",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9a002385-e43f-42c1-be3c-3cbca2df5e02"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8087aa12-6fd7-4297-9a61-875246efa31e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9a5d1809-2c55-4ac3-b48f-ba40a7663a6a"
            }
          }
        ]
      },
      {
        "id": "25eea8c5-b019-46fc-a12b-e9c680d09732",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c1a148eb-5b1d-47a2-85af-ea5112b88978",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9230d20e-86fb-4f0e-9a2a-da19a3886e47",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "40f680cc-bfa6-4102-951a-40b7f198d0a0",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7ea17e-c84f-4a8a-8fcb-1047aa4cc7af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "122c7c64-9ced-48da-867d-866e894d7194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884bc8eb-3bea-42b1-b490-a8f7b348da74",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d0eeabc-3307-4108-946e-dd4c5d9b8333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b97f7542-11cc-4bda-851e-8bad59a52410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef966d0e-007f-4f48-b71f-c55cb42eff12",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "703be059-aafc-44fe-b140-764dad0d9f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a12cdd8-13cb-4542-a3a5-0d7b0db54262"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f9eb77f2-6481-4bf6-bdfe-56afebab49d8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5a5a89b9-4199-4fc2-943b-991fb8ce969f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b4d51f-3ea2-495b-b5cf-06e0b3826fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e60f7009-2ff0-4a5e-a7ef-5046bb34b08f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23bf427d-756d-4b06-8531-39b49c5bb8fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc1b2918-8d29-4a3b-b01a-15613e8c1dd6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "643fb5d7-6749-42f9-9390-3471ba816017",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3fa938ac-b43a-446d-ae58-57e2066fb591",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "99f6c64c-e248-477e-931e-84a7d901e768",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d6b3bd3d-bc60-41d8-9a5f-0bf5aceaa91f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cc56ba4c-18a8-4277-9c1f-845c9fed465a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "154ceb75-e8cc-46ba-b9aa-0bd27325c07c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b6d93ce9-59e1-4f66-83e8-5127a8f31abd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8e53ae40-8961-45af-8c8b-5ed1e4495d5b"
            }
          }
        ]
      },
      {
        "id": "3cda17db-ab65-4dc9-8889-798f764d90bd",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "6c9d8d7d-4481-488a-ac70-8b180842b849",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6df2babe-7db1-4830-9182-895ebe168b05",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6ce178fd-c076-4479-bae3-e29d0f1f90c0",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c52b7e-06ee-444a-81eb-da4061f8e74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b252c75-a92e-4799-b1c3-d3b958432753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d75fd3da-f9e0-4b0b-bf8c-89057b7058b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5da5f456-95ab-442b-a0b7-25ca1984ffed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f19903-bb29-4475-b6b9-dc4d6fc123f8",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "569da011-03d1-4342-a5cb-7e103593bec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9dba6c1-c758-4192-ade2-69f66bca6261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2be30a-73a0-41ad-9596-a9814fcbb5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "513ac129-5810-41b0-8254-ae12f9606d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3759ed5d-1186-4e02-b099-2706c059fac7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d92b50-be05-40df-b7ec-f1c719dd85b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80dc99f9-97f7-4607-bb4f-716eb69cc96d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60adac0a-7d16-4534-a455-4fdf7f178e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9b0fae2-e659-4351-9d4a-69ed9d9af332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11cd7be-5179-45c2-bc1b-9bf139c32155",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ac6a41-f8e2-49bf-890e-3d06508493bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcd544a6-b7b8-4ed7-a7a5-52f6f835c1e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e5105d-2f14-4d61-b63e-70dbdc565562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5de52a00-6765-49ef-97ef-223b2bb6a846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88f5c39-e97d-4557-8e6e-80ee0a6f7ce8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af072aa4-aa66-46a1-884d-370e88932eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1cd8853-e115-4911-8610-bd78a0a50109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5919a8e-2fa5-43bf-959d-e433b2f463c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff0d94fb-1b9a-4c30-b734-ca9fd12d4870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66efbc0a-d78a-4915-a0a4-081321e33efe",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23296c35-4d86-4d71-8a7c-142a668237d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea7151f3-939b-4c5b-acaf-347eaca31b98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf0f812e-9c41-4aba-8fd4-fb98457bb0d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b87043e-7465-4f4a-a5ac-6424c1d85ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c8a038-a924-48c0-9dc2-dc49a26801c3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19960dee-ee7f-42dc-af24-7e1bb302e365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a58e973f-b9f3-49c5-80e4-608ac61e1d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b06b6950-c76a-4cb4-b3c3-8a53084f2060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a060f7cd-cd8e-4235-bd3b-32c3ef57019a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87201082-7dd7-4374-a957-2042219befa3",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3489be-9ece-4506-8fd1-32ea8e633bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8be16815-3603-41de-a3e4-5da014d68642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362d7d58-5fbd-470b-811d-5d6cd41a671a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4eaf25d4-71e9-44b4-9cfd-a1f2409f9087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805386b7-67b0-4777-8d30-c8ea81a7996e",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b637d172-b6a9-482f-a5c3-eb2796a1c495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b17404e4-92d2-4603-b5d6-42baf8e1bfa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b842032c-e6a1-48bd-a3bd-dcfef9fec2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a814212-20d9-4b66-8539-03fd51b58bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c4662e9-f3fa-432e-9fc5-b6a81b71a00c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7853f83b-913c-48e1-8b67-bea342d68e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8777220e-d384-4bdf-be51-ad0bf657c269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5cf917b-cdc2-404c-9f93-9406e20acc96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b509fc0-e1c1-403d-84c9-7932ac5e9200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c563be58-10da-4113-81a3-57bc320d5bee",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a56b18-bf84-4926-a886-8e47f10ed375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "247f41ce-7611-4c91-975a-4f5b29f18da7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c787ffd-3cc5-4817-b36f-dace3de7c0fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46a36459-6aed-4497-bb13-f6eacc99bcbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75ae1d46-7422-4b3f-afed-491446032c91",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b77530-11e5-4c07-83b2-d2b813a5b1a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f1c635-3dd7-41b3-8c40-f8489cdd9e8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f44b13db-12a3-411c-8096-b00326366dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8851871c-fefd-407b-9f4f-17f3a920651d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e60f6a1d-8c89-4402-b2dc-10626b6eb3de",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7d9ae1-32b7-4733-abce-999c28b9bc9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4d82ef1-ed09-4572-b5db-5e4ccd913c78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa5e2e7-2f87-4af6-890b-7c80d1d11ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4b3b9fb-6c6e-43be-b375-64b0cde7e142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bdc6a88-8b94-4a6a-872a-d557c721c3d2",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8a2513-cd0b-41fe-ab24-5874ba019a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5117baab-180c-4212-bb26-a3de13ee28e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b83e606-4eb2-4811-86c7-e7551148ed50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ebfd9753-1fae-4ccc-b101-549a1e9f36ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4dd8b58-fe62-4203-8b94-83bb29fd2d96",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a218a97-dab3-4681-b2bd-2560a52745a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37415077-5bb6-4a8d-8d83-bdcfa46a7ba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef60e92-f0b2-43fb-aa14-924594645bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07c6b098-9194-44c8-b9ae-bf9b58bacde8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c2c7394-3905-4bad-ae5f-f8444737bce5",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5d7f9f-9684-422e-ac82-d51804a09acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd991097-397e-4c18-a9ba-3e4ab4d476c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8e39fa-1901-4b36-a6af-9759c9338593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1764d481-ff07-4679-a977-2e0fed36c366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066a0e74-6263-428b-8dd8-e4527f8b1f0f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "743710ae-3877-44ff-b31d-35f3290c197a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f78219db-f951-4e2c-8680-df7198233d5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e88a75-33e1-4e03-8448-8159db0a85a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "443df069-ccc1-4c2c-a066-d66c9142c19c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114119a2-d7f3-454f-9c20-f55953e86af7",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c00942dd-de52-4996-97c0-b4221827e366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfb922de-5645-4497-868e-a199f9f3cd33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b0399c-ee12-4dd2-91d4-9a7cec8e8406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "58c0bab9-eaee-43f0-817e-b022bb0d56ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227ff3c9-51bf-4a21-8bbe-fb3d6743a06c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7147e10d-4940-4131-b527-2eadcefd1827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b05e7db-fb07-4619-ac23-9948f2d27a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145d1dba-3392-44dd-af8f-36a84e1fbd24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc10b90c-99ad-42ca-b470-21f845256329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2f2468-77f3-4e7c-ba6c-68595247a516",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6c2ea9-3cc3-4324-af18-d6aa2e625530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be9e2d8c-de48-41b9-984c-703c35a483db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d558096d-c94b-43cf-a856-63423f623764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "494b9908-031b-41ed-b26b-de8c4126a79c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7810e55c-d6e7-46a4-8881-ea637c58cd78",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec04cd8-6c3c-4c8d-8965-8230d4ac4022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30702727-4a5f-4d96-8ae5-e7340d5ca15a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee906c4-d38d-481a-8b14-4682ba598136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "947c7b12-1a50-4fb4-ad72-5646b29d84e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f10e4ed-45c4-4835-a245-8df49080575f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "519b6d03-2b84-458c-8209-6d4587715332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcafc2ec-418f-4217-ba74-d5f224305319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba3f4f3-0895-4b79-a2bf-f2355cf39001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7e33f4d-1cb2-4d3c-beae-c51590fb44c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8db1a54-046a-4543-b6c9-042ccdfc2d20",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c3a76a-2edf-4d03-8d80-e81abeb41cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d152f2de-d693-4f07-9fae-98024cd4edc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ab20e8-7008-4103-a57f-85aaeb74e8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dc1368d7-3ae0-4b2b-9fdc-e45579bfbb66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad51500-32f7-46ae-b0a2-5b73eecb0833",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ef1a12-a570-4340-9d90-688ec609abcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9085ee55-78d9-4da9-8a63-51c8f9badf3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be5e036-5789-49cd-ac4f-42739bf0000a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "94a21c45-5f56-4252-bda2-58f85054c815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d02e23b-099d-40f2-9170-e9f9ceb72386",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0fd5621-8ad8-45e6-878e-507f4e995438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "854baedd-2140-4f61-8fd3-fd93200cf6ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d652bb9-5e45-4b5e-9c0f-89207b1c1f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b01cc979-7a12-4f6a-800e-d4364f1ce0a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b062d5a-b933-4030-84a2-ef7f7584f6c7",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d127fec1-acca-4697-b99a-05c339da7515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24eb9bb9-177d-4209-a8a6-35127b4dda88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d55e95-6204-412e-b66b-d84ece0460b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fd7be93-9168-4295-8c55-e9b8451270e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b100362-d1aa-44b7-ac9f-57edcbbe362e",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb3dd9d-6b28-4303-93d7-5aa0330e203a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25545cf8-8069-4e94-a50f-8aa6d5d5c14e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc282ed9-5473-4a23-aa65-9e1108c84027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1021c386-d189-43a4-8af9-61d21aaa4bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d258c26e-620d-4785-b9c2-1726c1d4a1dc",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a395ee-8dbb-40ce-8b19-d44d9ea9e63a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf1008fd-2661-4ae1-a06b-00ac4c64ecd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a395dbb2-199c-40dc-b664-c225357eb313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1df8f98-965a-4bd3-bece-fa3d6156dd07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e50dcd-a69f-4c5c-9b19-fb262b8c4a38",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b00134-d305-4785-bbf8-03e266d7799a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49826bb3-0461-4db4-9f4e-2a9438e67f62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f3e6b92-630b-4589-b009-44b36c38a8ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b42dc245-5751-463c-b98d-ef4a0a55aa0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30815e86-807b-48af-9f73-e65c8c83b4bc",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f737ceb-70f1-4007-9736-461b2bb0648b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1146bc2-0308-4c89-94e3-87f0ced840b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4af04f0-7daa-4bb3-a90c-2fc1268bdf9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd776248-f59c-4bd1-bc71-d18e22480ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a43e22-7a07-4378-88bd-eb7c564c4e43",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede91a10-619d-4934-8f4f-585f87db4908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e97d6555-90f4-4aa5-92a1-960c1ee5d78b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc56eda0-eacf-4fea-94c2-ad8ad031ac7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9985a7ae-a200-4fb7-adc8-5a40270fa2fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03bdc856-197f-4555-bbac-bda56f743372",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05187ee0-4aca-465b-82d7-b7acf89daf08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd58f0f3-d31b-4b33-8060-1960d18bf315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376e10c9-6e65-4da9-a227-c61e27278bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4212c894-a2fe-41d0-a94d-153b4446d0a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345641cb-c89f-4073-b616-105f25d4659a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74d7bb5-74bc-4c54-8f7e-187546b45ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62332095-606f-493e-b570-426f4f5e0ec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d9fb72-c207-4032-8b1f-047cddfc48a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "442848f3-0fc8-4dbf-8ef8-12994f8b94de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323a24df-a132-476c-9361-9bad48aa876e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cdc1021-9e7c-4f16-9c15-30f5348cbaaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b1ddfbe-96eb-44a7-9be6-5a34964b37c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c79f813-d951-4ec8-bbdc-7ec0aab57ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e0078de-9b5e-4fd3-9115-94d875642c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2550e854-d54f-4149-8bc3-44d913e826ee",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6fb26e-7f1a-4505-b6f0-9f25534244b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12bd7d71-2194-4251-bb2b-f537ad654161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f3621b-a81a-4674-9713-936162504931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "9fdb410e-6ddf-4664-872c-b739a397b8ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c30748-fc1e-47da-bb8b-5e9ad7ed6ce4",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01ea20e-e2c1-43ba-9d21-06a68a0c8a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6dd4b715-3bb2-463c-8303-279cab588cc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42a38b7c-db15-49a8-b526-3c5794c2f6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f91e0224-f722-455f-96df-4b72b167d62b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec3d0705-5b0c-4993-ad2c-d7037c7df986",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff098ab-c9d4-42c9-838c-03a22f1bb829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6196534-2f11-4f10-b4db-1a588e1e10d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3352a26e-23c3-4258-8b5d-b337c7a5f94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b17f1299-bfea-4161-99cb-84701953ffbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb4d6a9-70ab-47a5-9bf6-ae85d70ad996",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84af0ba9-9dec-4aff-93e6-66a1c07cb99f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c695430d-b513-4760-aae4-c6e265d09fb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4060418-45fc-4596-8105-561caca3b1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "96ad7a4b-a0c2-4a1d-952c-c67fd0c4e6ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595fbb2f-2bfe-43a7-8800-7a70caa39231",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de3ab27-3ddd-4096-a0a7-013d0247c170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29d39872-c98f-4708-8850-cdb2d3efd81d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af35ebe-d252-444e-a5b6-cfec5862a97c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c53d3e8-30aa-4b67-848a-cb9d2786e3cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "288dfeb9-564d-46ac-9ff7-b72bc9f32574",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c65b11c-a432-49e1-9a28-73a040080e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd36d81a-c528-4667-8501-395555322d3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c20934-31ec-4014-ae58-eca662d6f8f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "01954068-eb7d-4214-8783-4623cbfde9c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0782063f-f213-4d18-a8a6-dbf8fb92cf27",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "289fbab4-6942-4d8e-9128-1919617325da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "991ffa59-edd2-4321-90db-a0fa29d364bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8f1e4c-caa1-436f-9243-c7e4d4de876b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5ec3963-c5c8-496a-ae08-4ed7f4a508a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895ba92d-5d39-4b6d-a366-323a0ea6f4e0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91944412-8df9-4d1c-95d7-c18a841517b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b87b894b-a2f2-4c0c-9a28-ea95dffc6d46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ddf31e-29a7-4d5b-bf63-a138a6e7e7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "ed3aac4c-f493-462b-8a10-e839202f9613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20cf7325-3edc-44b8-b399-dd33b96e3e8c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95a93a9-3f48-43fb-98a2-516eae88e39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afed155f-6a0f-472e-bede-1388b613235e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb959f44-a05d-41f3-909f-7832a7715a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "33037698-8e48-4b09-a805-15616dd0b15a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7448770-7f96-48c7-86cc-bcb44d464b03",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b516bd7-f214-4ae3-85c2-0b0156de0256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1bc313b-678a-413c-87f3-3a27260c0377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d727a5-e4ec-4de2-8c5e-ef3a72140ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ae0842f-3cff-4a1b-ae7c-282e75ef9afb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c07162-b6c8-4c21-b3a8-1246cfc2843a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b7d49d7-bb7c-4288-9d3a-23a94382843e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0cd2288-3474-4289-aa72-8ac1860964e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c6c0351-5839-4005-bfa5-bba842b02351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dc7b8e2-c226-4880-aea4-da206a055472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96268322-724f-4fff-8863-a5770915d0e2",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b847ec0e-664d-41a1-945e-0340cb970e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d38658-1937-444b-b712-a0a5f2bbbd96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7b8069-1f92-42b9-ac70-2b470618283e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f08fa815-f274-468a-8e6a-5256b2a28fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed9628f6-9282-4000-9438-6ca76b5f87e9",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "336f996f-8675-461f-a0d2-2a84efe412e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8de122d-454a-4130-a7cc-af9547a5e940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e3a113f-1b42-4ac1-b9cc-bee31fa83784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "69f79ddf-0314-4951-b154-ab9bc4b8ca43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "413bae74-9901-43c5-aac8-199fd0ab92c0",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d155e26-f8c0-4521-b2ba-5067dfaa3287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a624c4a-ee69-4b13-8b74-4f938f053e0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524a1f68-cfe0-4150-b43d-c6bfe9b5f4fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e296cb88-b89f-49d9-9e92-0ae5f0e38859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5498448-7ca1-4c58-bb25-c89ba8566220",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9f8d24-8a56-497f-9980-98338815dc8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "694c7578-4f7e-47ea-be40-82ed96824b74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8843ca-2263-46e4-a1c3-0d4853ab1d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "67d10e49-134e-497f-90a1-b4611de023a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d05be7ac-00c1-48cd-8a48-209788198c53",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3bac0cc-9406-41a0-ab44-c3640208262c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fe063ba-b30d-4933-96a4-9a7d4d48f4e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "175e2d7e-e606-4a38-81b2-ce56904edffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8b4fd341-f6a7-4340-bdd3-2c7ba782a51c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "499343bb-436d-4604-855e-5071bc30c08e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b79e4ffd-8ca7-4142-8204-8a60773e0139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab22c41d-a89f-4778-8e48-53acf7c7cfe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d575db4d-e950-407d-8b5e-d7d0fe9c10ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8fc7cf0-9b8d-4cb4-b130-570346f7048d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8bcba6a-9ebc-4f2f-a13a-86cb78c65791",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9d6ad6-0218-4349-912a-fbf3ca7320e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b2c08b7-9872-4c4c-a16d-e1c889ceaf69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84189b9c-fa6b-4f95-9dbb-4a059b1ccc36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9ae01cb-64fb-440b-b204-feb7bf14f449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e43018-c5da-41cc-b527-758a80fd27df",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca3a9d1-8552-40e4-8cc6-3032d430f32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e025cd85-7d81-4b1b-a3b3-9638d06c559d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e118dc0f-0721-4ace-804f-1f7403dd5ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6515820-10af-4fb4-9797-844914769072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a150ad78-57d8-434c-9821-1c7c0e038da3",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4a0700-4cb2-4a6b-abe0-a1a37e66a785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "100f45ca-cc54-4f9b-9c19-89eb936f0ae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d886bc-26e5-436e-bc81-0a941c65766b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dab1fc4-fab4-418c-b8f6-8827b038c7ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac24438-2a73-4bf3-9e29-60338f8814d7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c355c2-299d-413e-964f-485d344994b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01a30078-186e-4d38-a12f-7d2d3b1b4cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62bb7955-d773-4588-92cc-c3b9dc6177eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "940432b2-beef-4410-8870-b685df6cdd6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3934eed-ef3a-4fae-924e-727e4ec677c0",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea9b3634-c04a-4f18-a9da-7b0e16bdd333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d2cc76-9370-4c0b-86d6-24ce37b8ebcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c9d613-2a29-4e74-9957-75f4e7c9620d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "7a8018ea-93bc-42d8-bf43-0e1a30a60dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b97673-2cc8-44d7-ad86-0efc4bcf0018",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efdda3fe-6f5e-4d7c-9bdd-db312253aee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58268ac8-d913-46c7-a0af-7b850744c401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43fe5909-582d-442a-a0f6-a217ef7df243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "72b80cb9-e2c2-420c-8c45-62e9ceda94a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a98797-969a-40ed-9294-26acbc7b62f5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "722b5343-654a-4f98-810e-e77b027931b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d72d7afe-da54-4835-ae2c-d835f8893bb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92f8fcf-4b6f-4398-beab-fcb9bc4f1521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7a3bb1a-b5d0-4ea3-a3c1-fbe4f84a6c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8367dc4d-ff4c-4ab2-9246-f8bc352af574",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1bd6da-93a6-489f-9061-a3085f389090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41d9578f-d288-4033-88e0-58e873aaad80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1110b9c-f2bc-4404-a5db-34b5ce109e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "72220a8f-6108-4f92-8916-724fcd2ba95d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31c4bbd-b714-403f-b8a9-4f2e9531d155",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1933e0b6-23ae-4847-8566-02b153dc7e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b8b76e8-8da8-4cfb-a815-88e5aedd18e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb756da8-c734-46b2-992b-aab10a34d759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8daf9946-0c97-477c-b3a4-fbceb1db2e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4cc448-d0a1-4e2d-802e-6f7ebcc38a30",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e070e000-7c42-4f8f-85bc-9880dac3373e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45960815-0279-4d13-8e83-88617cc7a9e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b0c333-868b-4821-815a-049c6e1da7cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "78e2483c-86d5-4d7e-b9ad-d3f77eb4f4ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7548b409-e1bd-4b88-baed-66bba4acde6c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dbf591f-100d-41a0-8033-eb317593fc73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e95528ee-8278-47de-88b7-46104ab25310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced48abc-6ddc-455e-88d6-d2bae8dedaab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2352416a-7471-4fbb-81a2-d83d04a3a6f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cae984e-73bd-48cf-ab41-3ef4e237c98a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c6b7ad-8075-43a1-9bfe-b754f3eb30aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8a6f8b3-682e-4e11-b54d-20900d881a16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53b0e06-1029-4452-a82f-564ef05656b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "146cc6f5-38ac-490c-a1de-f0ea3080a127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef2929e-b26f-4002-b8b1-9200d91e3cac",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da70497b-d8b9-44f6-90b9-e073ebe638de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed78ca19-3625-452f-8640-ace90fbba804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c74941-b650-4a71-b34a-8915ab9ff9b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "12ab53fe-eb08-401d-a920-06eb3b44ea5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f77b79b3-07a4-407f-a3d0-b63f4e33cb1c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c45a5177-af8c-4b34-a9fe-4e762185db2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "457d3c24-8dc7-4552-b7dc-5daa941d090f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bffc8ad2-acbc-4c4b-8f13-20d5c9a29ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "edc76ec0-6b19-43b7-a572-9763669cc566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4410a2a9-1201-4e70-bb4f-7db93c8910d8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf13a2de-87f3-483b-b4fe-5bb6e9d04375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "797daf8f-5fcf-49b4-85bd-0dc7fc93653e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc49e4a-d4e9-4656-9a2a-35310cfb36b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c3b8ea0-afd5-44ec-8b7a-5a8b8d4d6445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "221325b1-b1c4-4542-8889-c5b37e3d8414",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "187ae2b5-33e9-4c3b-bd65-a6c6b3fbb549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a9fbec-ca70-4c77-8ebf-397c20a801a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb35a45e-22cb-4312-bcf8-f4884763ffb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5883d2ea-b816-4d05-8f71-8c0b46ed1b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c92a2a-7916-4fa4-8ac8-086d4a4f8654",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb997fc-2a93-4f87-8c2b-b4b195ad6052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55111ac6-eeb5-4794-8b82-58d0f91cbb3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6d3165-5ac9-4778-9a24-bac67c22ed31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d703368-cdd1-4ae4-b5a6-880c221f176b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5192c508-0f72-4119-a89b-455cd35b0434",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45988bf-e3dc-4748-bb4f-840c5ef03dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "551d1fde-8230-4eb5-a95b-44c6b1b983fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc9d416-018b-4809-8584-1d334b79194f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e5b7da6-b4b7-45fb-92d3-841ea633b8b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57964be5-afc9-4680-9600-caa77aa626fc",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97b7277-e1de-4e8b-96f2-d149a3419b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d92a6798-2eba-471a-aa39-1ac937b3a83f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93643f53-df29-439f-9351-947dd237243c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc24f003-050a-4971-87ea-21192972b189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cebec0f-e0fa-4c0d-9a29-b95cf70e04e2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e77ec6d-e4fe-425d-9699-ff89fca911b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1bac24b-263e-4ac6-8d43-0e249c3b8a2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ecfffc2-a194-4ebd-b4cf-41e0d7272cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2237616-2f9a-4645-baf8-1828f2671547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c19e5cc-8f2e-46a6-a380-ba033352c95c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6417a53-1508-4f37-92ec-59fa5b51b1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f5b0e55-9bd3-4068-8bac-59a6a9a99388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf084c9-f047-45a2-8515-549b58eb7ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "91b9c16e-e40e-4131-b99b-636fb42c9af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa16f0ad-b97e-4cff-b0c5-21780a5e7071",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c93333-b409-414a-b66d-827e4a4dea6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "501989cb-e3b5-410d-b6a2-37d428c45b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443abe0d-0f76-492d-beb3-28385a37084c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "14cccf20-1a73-4652-829e-14a80114bd17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d7f07a-95ae-4749-b708-9ab62bc10970",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b8342b-9df9-4607-86a5-9c5b3067d216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afec3c91-8e1a-4542-8d9c-c08ce4d49667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35fee6f1-154b-40d5-8653-9b313368be42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ab63196-d81c-440e-bcaa-22e978594b46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a2a89b7-19dc-4b23-8d9f-cd71bafe5f75",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d563b2-9738-4b3d-a859-141fc907d045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4efb3cd-e34a-4688-9c1d-d79411f2335a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feba1628-266f-47ca-a193-06c0264f351c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "84606eee-66eb-495f-9908-7e225ab048be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6fd78bb-3adf-496c-9d66-e2da9267512e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "604d8e52-d065-4ade-b062-13e8d9b49ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f908bfc6-e8da-4dd8-ab4f-455206eb26e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d96806b2-7c2b-45aa-9e34-23033858065f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c972efc-fbc4-4831-879d-88a61e708224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6028d0b2-b619-464f-8c11-e8af3233fbb5",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96b666f-7fba-4958-910c-a778e14db003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe0c7d8c-ee56-4d74-b9c1-1e8c2e653a92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e105fa86-a1db-4db7-8139-06313c89f248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "184b1c16-866d-4a0a-b2af-e2aa603f6637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a2cae6e-7142-42f4-a71e-88722c46da13",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "586d4dae-0dde-4ac5-acb0-9820a839f5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ace8ae7-5e59-45c1-ac68-0698a2d3ae6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "233bff62-c5b6-4ef7-8a12-79dafa2663ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ac212fc-4822-4b7f-86e0-ae91ac798ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f97a2e-814e-44b8-88ee-fc016c3969af",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2b75de-ca3e-4b17-88ae-63755903cdd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff445d8f-6a9d-446f-a2e7-d6d5261a2cdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deba005f-aad9-4209-ad1b-89ee9332fae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c95db93-2d35-4c73-9cd8-d3b0ccbdc927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ce40ae-7982-4994-9ec2-8423cee06bc8",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4bd161-9f24-4fde-ac95-7f145039618e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9d2b5b2-be69-4b57-aaf5-7d4fdc15694c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cac42a5-044f-4c3d-80e8-b0b4de7af25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1645b362-d3f0-415f-9bf2-12e2933a0b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddec03d7-a62d-47cd-92f2-37c7b5ed4889",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73fd7651-7cb4-4df4-a186-0faea4078f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59aa94e6-ecab-4c28-8b45-c54bb58365e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006836b6-a9d5-4b90-a40e-b624d1fb0064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "05c8ff73-a344-4631-ae7a-043f121e4227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e0084b-930c-4769-a6d5-8f0239886c85",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b2c7c8-571c-44b9-89c4-8c2d5d908aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bbb4001-045c-4e07-87d3-514c6fa5eb7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "727e70e5-84ea-4a28-9577-baeb9a521a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d66ec652-f328-4cc8-9dda-ef6d42c3e143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "761cb44f-205f-47c0-98a7-07c7b90f97ae",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f1fd54-3b07-4111-90ea-abe82c2ea55d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc083a4e-7bb6-44d5-9407-8e1c59291c59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2435840-26bf-4c3c-b520-ea958c09f19b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ceb7d44-c2b7-4a6b-8ba5-3bd70a9596dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a9a8a8-fe3a-45e3-bad0-b600f1d9e7ec",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e8f0e7-d2c6-45b7-a06e-494e48a3c4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea27e25-b41b-4d38-9093-88e3669a0a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ad0af2-cd37-4bfb-8bed-632f0f8105f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d150db48-04e1-4105-9e3b-f73abb553036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51b2b91-9806-41f9-9fb5-fa0082e6b847",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93fa2409-da13-44ae-86fb-87283ce60712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "701a9ea2-0975-4a4f-b8e7-c01c6cb72b6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc9b9f5b-2050-4bf3-8545-5f9dc54dd3da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "da2b264a-6d20-46d2-a98e-8a32072fb18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef66293f-a241-42f0-b7be-9cdded3f7bf2",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "005f29b4-5853-478a-964a-a2f56fe9d2e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fee65f9-06eb-4f6e-a5f1-63590bee2b12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec5b1d26-5c78-473d-83ee-0c675f02e8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aba46d00-2ce3-414f-b77d-23d70e34f11c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5142ecc9-9054-49b5-b2f8-ac7d24c08faf",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "974de68b-3283-4eaf-beff-21d5384f1d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fee199a1-9365-48ed-a99d-369329c256bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd84f387-e58e-4a70-ab10-2094921efa20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "90b440ca-56b7-481a-9209-104d860d490a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8562823d-e463-4d44-90cd-acd1b6af026f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c5bda0-c1aa-4c8c-bf3b-d97e0b5cf113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a0b38f8-bc99-487a-a3ff-a20348bfff70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "519ad495-5a09-4a49-a5a2-253a3a012f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a8b2580-1e41-4669-8753-18583af6c9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b74fe81-986a-4276-9f1a-032b3d958fe0",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ec16d6-e410-4fa1-b211-7a198f49cbf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7423e478-372c-43ab-a4c7-25fa55c6cc8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37bd97a9-313d-46a4-bec6-491bcb9841db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a99345c3-9165-415d-aa08-e2f8676eb4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e25aa5fd-d7fc-40d3-abff-e4b21c0320cf",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce5f192-5897-422f-8dde-a2085f38efbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f1efb07-85df-4bcc-a19d-702098ca01ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93271ad-8dbd-4a17-a07d-d48d330c2004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a95cf49-f4ca-40a8-8086-55849b0e6f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "531b3adf-edeb-45e1-be57-6b32c1752fd5",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e376cd-1a94-46a1-9f2f-c2e7782395c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb127676-307f-4186-93f4-b7b7c3af2c13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5497efb-415e-4922-bac3-247c24e293e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2496f127-e24e-4437-abfd-243292286780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ab94cf-1c1a-4a09-86af-8fa7059fc571",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "365264b8-bd95-4d51-9c6f-6935a6b6f042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7ab4e233-2245-4093-af8b-d07a9deb32d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329db803-7dfd-4240-99b5-d2c71c0ff4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "55ef0d44-d547-483b-804c-fbb389406a0f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "dce36768-132a-4e68-aa60-93b3055a992b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0fab3ca5-bbaa-41a7-bee4-9105499d9125",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce39cd63-b3cf-46df-81ee-e8ba143dcbb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b40186a7-b995-4173-8193-f2eaf31c683c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7de38e-f16c-4a90-9728-a9857184ef83",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33d9a17b-7cdd-4d7d-bd19-0e064857e423"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8914894c-2b5b-4b99-b80e-6e59a5b30ab0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4865cabc-0676-41e7-b102-e38e78d07910"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b039162a-3e5e-4c70-bec5-37da30eaffa2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6bff2dc-4fcf-42b2-a689-a4396fb00717"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d94efd6d-88a6-4e70-b796-9cdd521e4868",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e61a6a06-ea83-4310-8af2-7586316b59b2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b03640f5-edda-4dfa-b8e2-a1c0347dfd70",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8c7cd0a8-15c5-4c22-984e-4e7471802908"
                }
              }
            ]
          },
          {
            "id": "26784b3a-b3ce-4ae5-8302-040795f3f25d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "99fc7427-047b-4c19-8d0b-f91fbb1d4c4a",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "1347c5e0-6aa4-4f7a-b136-e38ca31f344e",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "901239a3-e373-4739-b18f-760a8870fec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ebbdd8be-ae99-467a-ab94-0b0d2fb30229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2171bb42-b576-45dc-82ba-aa5d87a84921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a69f64f-1ef5-4a55-ba5a-031c6afdae97"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "06b1633a-5a90-4193-87b7-ac69c31e486b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "14a650a0-5a85-4e86-b884-9534442b753a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "45ad8c34-1c5b-4ff8-8b20-d7f97e0dff59"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe44acbd-2cca-403b-8fc4-436f2d403f7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d46d4d0a-5e7a-4df8-ba4a-79343d3f6194"
                    }
                  }
                ]
              },
              {
                "id": "4ecb2cfe-4ac1-43d9-9f9e-7d85280f9257",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5346cc52-cf0e-48be-8f0d-0f1258b71b84",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ecc21b6-72b5-44d5-9403-c322569454f5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b450ce9b-24b4-4df1-8d6d-64a3a7ed0555",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1c4d381e-cccd-4d6a-9735-8d1dda32e043"
                    }
                  }
                ]
              },
              {
                "id": "36b42367-0620-4ddf-b4f7-855b6cf3c2b5",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f044189f-1ff9-4066-abdd-1e3e1107d0dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8d14613e-1ade-4327-b021-365121eba31b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1406a4ea-02b4-4801-9485-a08ddbffabcf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8d6c6368-554c-4a48-bedf-ced8816dfee0"
                    }
                  }
                ]
              },
              {
                "id": "ed722eff-db95-4118-82f8-4f7bd672a63a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49c27ecc-1197-4ea7-b7a7-f14cbfddd8ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "17a5503b-a04c-4c8a-9a05-20db4e793fad"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ba2a0fd-d579-4450-bc44-9e6eca0a9ab9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "03f3627d-71f5-416e-ba6d-ecc54afeb038"
                    }
                  }
                ]
              },
              {
                "id": "86d60b61-0573-4410-87a9-7756167e6fff",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e75d5232-f120-4764-b91a-0d68db9343f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3b46fd44-a6f7-47ca-970b-e237c7753dc8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2108241-3790-4c43-8014-5c6aa5138e6f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "426aa24d-025c-4a26-b114-3b9fe99a842a"
                    }
                  }
                ]
              },
              {
                "id": "5a46b5ce-2db8-45b2-87f2-117505671b43",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "433498fa-0dbd-4b3e-8897-bfed158bf899",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "595105be-15a0-4114-8982-0a3349e1fcf0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d47062a0-af73-472b-991e-e403de92cea9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "989e0869-2fee-45b5-aacb-9c149d476082"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a908da26-2b59-4d01-84cf-658786ded690",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9536ddae-3019-458c-9d8e-011e6348b698"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "25749ebd-a77a-4c19-a9fe-ad438074c458",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0f2a04f9-c8b9-43c3-adbe-11805d84346f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b7f1472-6aec-4cfc-9fe3-e4f7cda50444",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ef04c82a-374b-4bcf-b83b-12be8679be2f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c844c5a9-8d49-4c14-9d3e-68b261be2efc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6314f021-ba0f-43f6-8f0b-5143c9002c29"
            }
          }
        ]
      },
      {
        "id": "475a14f0-12df-4627-aa9e-c37c321cf1da",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "735dbf44-5b71-439d-87a3-1e722f457892",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b6f985a8-e3d7-4d5c-9418-7f49277225ee",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "24bf7b6f-bdb1-4440-afc9-f63a85befcef",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3b4606-f9db-49f6-bd9a-ca804add0e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c04e31b6-daf5-4ea7-83a5-35cac68c933c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afbbb1d-fb2d-4f9e-8fa4-9a4078e7d254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e43aceb3-b4c0-49e8-b1a9-1a36b9da1fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ffc124-894b-447c-8db7-a14f90d5479a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c47a449d-cefe-4697-aa29-0b92ef1b3a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f696e09e-edd8-40f1-a903-1ab03ffa8d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6efe03-0fd9-4d58-97b8-8fe96eff5572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef8797b1-9ddd-4aab-b9c5-d9ec60449d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "247ab73d-58f1-4e48-96bb-9e9f3fe14a95",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6bc9ed5-e25a-44ad-a214-625f295530e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b47c1f2d-fb77-4353-bb81-da9d38026500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358eb28f-9fe7-41a9-aeac-e200b4a9f030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a63bad1-5738-4777-8457-51cb447660bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b681f7ee-0998-4d27-9df4-739f4ac98797",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa8123b-33dc-4de9-8ea5-b1694559c76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41067368-56bd-4354-9d27-572900118408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d688d8-5001-4bd1-ad20-3ecc0a39a9b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff3c483d-c04e-4397-9353-fa8a33153ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bbd264c-4a90-4658-885a-5ca5c0f8ef13",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "288c01d5-3967-4cd0-9be8-63f7106104e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e97730b-f03e-4e87-9ceb-3d1320537259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8486386-5e6c-4c04-8489-62afd9af347b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64a919d6-f242-4720-a37c-37a580acf1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7a33c4-06cd-48d4-92a2-8e00e1be21c1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40493c9-532e-407d-bbd9-c4131a1a5352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "445700b5-d140-442d-bd35-4eff95337cbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5fc6c1-2b52-4f85-94a5-76a46bf27bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "92f59be7-92ff-40aa-a00c-3f65da95a969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340dd69c-dade-4f0b-baeb-1a7e7260b8b5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da1083a-519d-47b1-a78e-d79293274760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd458676-bc4e-4d9f-9e31-9b7200526793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a202c4-66ca-464e-87b3-cb033078ce58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9d52169-5fb7-42e4-b203-067fb2e58072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "127f3079-40ba-415c-90b3-83734b878de9",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e7af6e9-4929-4075-8333-51b40dd04003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf82df25-3aac-4cfe-aebb-5c4957fcb6b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb3b089-9782-42ce-beb4-3511de48d0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2191dd59-c80e-4ae5-a10e-f07ae24dd39f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b93a124-3bee-4cc7-b9a4-e0bc6c545766",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc89412-bb40-4f1e-9498-838e169e6456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38b6b135-ca02-45db-9d30-c842ea597656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7843142f-8ab1-44c0-b2b1-bc532fb911cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ab57fa8-d38c-4d86-a459-1e26f8c9e99b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed97d4c-3bcd-4668-a939-e1b40fb4f000",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e470105-4fcd-479a-8dee-25ff1381ca0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "505a1cf2-baa8-4899-835f-150ce469f0d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f0476b1-cc69-44d7-a844-2466a039b012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5feac3c-a3c3-403b-a130-6cb012a18a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4db573-755a-4b91-8fcd-0417ad4c9a0f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd6a1545-2e59-40e8-9a1b-37b53d79b321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "671097e0-4fd0-481a-a150-ca2845292698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268c3b42-6c4e-4508-9cbd-2776c4a12438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "88a1730f-a119-490a-a190-c15d006c7d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "581162de-4400-40ea-b8e1-ac01f9e8600b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e686c6-0c27-430e-bc6f-043524390b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a29817f-d6ba-4041-8359-df67b6f4f590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702b85bc-157c-4eb3-8a60-111ae655226d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c611bbf-3fbd-4fd2-bf4d-fcc57e017f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a4e1c0-bf69-4c39-88b3-ba5f2b8a49bc",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e372a81e-b3df-4333-aaef-63ec244f4ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb13d9da-0e31-4536-992e-096037061a12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ff7d36-81f0-4aef-9b9f-48f8cc36858c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "055c5c37-e123-493c-b468-b05c04977eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e980b26-ea82-4846-b197-fe0a0968ce49",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee9ca59-184f-47c6-8002-2fee7622ac79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bde967b-f8a6-4b81-99f4-c931c1fd2980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e8ae390-1ad2-4392-b961-76cf90f39042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "982b2d1a-fb89-42a7-bc4d-21153ad38a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d56109-8ab3-4bd7-be17-4b74b89b2600",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "447fa626-9acf-47ef-92ae-ebaa497c7237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8a31a48-1350-440e-87bd-ccd98ffa1d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31daaaf4-4967-486f-9b40-9693eff0d984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "39c5d6da-1c77-4ca0-8d31-577bd2627ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715bdd00-039e-45b4-8ed6-00a6285e3928",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d1a407-56e7-4640-b9d3-3ea1d7086416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c17f9b9-55f7-465e-9a9b-e75fdb2d54a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adeddd52-e883-40db-b9b8-9443d9e369be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3fc1fdd-5e96-4c17-a814-af77eb7efd4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ea3ae9-bebf-4223-a827-8c5cfee33fae",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a732426-7d72-4e05-a0a8-076c3181191c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54d11074-55ee-49ad-b891-137f7a39a8a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d657c3-22a9-4b31-85d2-5b8b7f79479f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d82adcf-3bda-4a93-8d3a-e5553db85022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ba3ca3-05f6-4e19-85dc-a86b8bdca713",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b599cbd-8061-487a-b1ea-7f4b510e2a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91154f7b-938e-4e1a-a268-5bc9da45a24f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b7c6f2-e2eb-4f4e-9f17-2ff051bdebde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1f3d875-6508-4f29-abd5-23f0b397e58e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66009ff6-0751-4acf-b26d-2497a74da8fb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cef8af7-5a4a-43a5-b355-ab47eaf17715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0b16c3e-a601-45c5-9164-c5247529c5c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caee89aa-fde7-48a2-a46d-e49f8a5a6674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ff6de66-e3b8-4786-aa1f-8b658c5cee03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ad369e-1a08-4eb2-a51a-0c0ba4d49e1c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c408beba-fd1c-49d3-a942-1b1dc32d8100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ba109a6-3d8e-472a-8dde-088d287ce52e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a752871-4ea3-48b2-9c9e-1a61a47f4b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce857185-b7c9-4f88-ab11-94b532f3e03e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "852d816a-f89c-4b48-9854-4eb76bb6a203",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2195811-cc03-4d83-b871-151577fb7bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d1ef7c6-d654-494d-8a9a-ccc5102bd8ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6885bdb-1814-45d4-84bd-c365dbdf0c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bff1135-e32d-42ac-87eb-b75ccb6d31ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f513bcca-d10c-4364-b2f3-ecfee268047f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44ecc7c-4b82-4fea-aa35-9765917d06d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd85e0cb-7821-4bd5-8319-6a8179f199e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2747247f-7e32-4e4b-8d51-b97cabb91f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7690054-4c4c-48dc-b48a-59a201d9427e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14cd811e-93bf-4dd7-8270-60ec3e7cbff3",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e1115b-248d-4cc9-8bba-d0e21d845ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07b8d9ed-5210-4378-ad20-090f2bbfb806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cdb4efd-7e6d-445b-9260-a3b3dc4056f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b112b73a-ae83-48c0-b59e-3e007fc69d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f01b3af8-8d54-4688-8b3d-b388c1ea8338",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0888a788-4277-441b-956b-4d3065436a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b716d5e6-321a-47af-85c6-2e7b9c9403db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7742587-4c3f-4301-b002-ac20a29a055c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9853161c-1200-48d3-b4af-3fefb6934af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8501a754-02dd-42b8-81a1-140c3a0b5ea1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7100e5-45b1-48e3-8934-0f88f668bd7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af7d9b16-2e22-473e-a346-46465b0df12c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f5941e9-61c3-46ea-af8f-00cb8789ea3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27b9cc5e-b27b-47f2-ae76-55d96230e350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8444f015-dc2a-4018-9ab8-ca660232fc8d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a9d6115-1c0b-4299-a8e8-552733a59f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b25a9eab-04e5-4579-b14e-eb424c7f5698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01eea47-187b-4712-bcd8-5a09b540897a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc1ce102-8e58-4784-b6ad-e1237009faba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d62ccb4-47a2-46bd-932f-964a8ef6fa05",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce4e7b0-b10d-4ebe-b30b-ce580a2d44ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6baf3033-9f11-4449-8413-9bda57445457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c19980-342c-4f1d-8bda-0cb0f792d33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b83d67a6-d6e5-4244-90f8-ddb926709c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3feee7c-1789-4366-b6a7-27693d210aac",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0be2557a-0573-4c26-86a2-0389fb185ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09814d89-0713-4366-b83f-fc1f6e3b4799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60692f39-3bfe-43bc-9741-51a7fca65138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a010e2f-a3cf-43a5-97bd-49e93213bc85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08144b90-8964-4355-8ebb-67b3a8bc6897",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a94b558-8173-45cc-90e1-d2341e18ccc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c85988c4-0534-4b73-98cc-4ef6d401579e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7d9b3c-6124-4f1a-b4b1-394880b900c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a759fb4-2706-41d6-b954-a954c6ca5f3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3822ef71-c07c-4344-a0ca-ff03311548b5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da197048-5072-427c-b829-78e71444b440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa8536ea-9b2d-4ab3-ab76-069e694bac27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e71446f3-7945-4ca9-8564-1d9d8ffd17ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5483f8fd-7b8a-4702-ad96-5544c182e39a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32604452-2424-4ce2-b163-fd6e6f57264e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99b84a4-e72a-4789-8429-3490c9c05d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "957212c5-ca5c-4109-9bfa-6d32de6937f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f859052e-e3c2-4d44-89e4-ed927c745812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a240c577-b719-45ed-a057-2a9cf4cd6d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b559d02d-0439-4962-9e87-04b255a69afd",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d27fb1f1-c6b5-4a90-92d8-e57639110192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b0a6a16-0422-42e8-abc3-33cf6b5774de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a8205b-31ea-40e8-b82e-d9432fb9bb93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dea04982-8468-4ad4-8f0a-6930b645852b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "80b4d975-e18f-4281-974c-f9cca398151c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4af95879-3bc0-47c8-8647-80f36e566e70",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf5a1c42-7332-475b-9046-4cc1e87bf89d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d3c68c0a-e33d-40ca-b868-54e5d6e801ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f227b2-67f8-4742-a8ae-81e7ebc49b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89c2c9d7-eb33-4692-b180-79785bf4f1b0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b7f1f2f-0e00-4d10-9dac-49dc73cfa371",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43b64896-b547-4609-992c-296c31ea6fa0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec873974-73cc-4fe2-bede-d2130a70892f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d694b37-d4c9-41d8-9616-84425c677aa3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "21261d7e-b45a-4ea0-8702-6cb80265688d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cb325abc-a51e-4535-8490-d2ca67fb236e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6d9d6c79-8d5a-41ac-b0ec-68bfb79d5a89",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c1ca3105-635e-4b2f-b1b0-1c03d89e0892"
            }
          }
        ]
      },
      {
        "id": "47f48819-0406-4a7e-8b79-56f06a8ffc4d",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "1df31d96-6d0e-494d-8a93-1ecd7e0762b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e89ba5e3-e94e-47c0-83b4-58c6aa6d828a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a1fbf32c-0ea4-482e-8c6a-65b22b4f1403",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f4cd2e-29ac-497d-9025-bb76507c35ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3942242d-f7a3-4177-8f16-d3d284a0abc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0639cf4-c05e-48af-84ee-2bad9b5f3465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "45b3ae90-77fa-4f5b-8931-198d6c7ebc9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cff7576-1044-4ffb-96d1-5fb364973405",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ca95a1-c206-409a-bddc-34f49c09a5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbaf2467-84dd-4254-8190-b37280f2edee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc8b649-4fb9-4007-9b2e-5a14f1691a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "47f459fb-c8ea-485d-aebf-5c549a87c78a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297e7cda-2b68-4eb3-af5d-099cec6af711",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3e9677-890c-4387-a672-b0f95fafce39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f02161f-eb4b-49a0-b736-c9f96cb5029a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adbb43e2-344f-46cd-9cf4-4f3f33dfe23c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "28413a46-57c3-435d-b746-453d4d9a2c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a96faa4-c563-47dd-94ba-7c618d5d7010",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca39c45b-fff5-4298-8ccf-5ae075c15c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79ba22dd-58b9-4f2a-885d-8d2e8a05807d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14bd9640-28bc-4c51-b1b1-1bc57ada2a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "539a70b1-be80-401f-9c6e-fcd5c55010f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "283860f2-fbe5-4a40-a1c6-12c83626ab62",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c803a9b4-21e4-4a8a-8a54-4dea043de8e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eeda114-fff0-4d25-93d8-704e25ecd97d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7834101d-c61c-4974-ae11-9c5e2797d55d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "da79cf1c-5549-4532-b364-ed2b69baead9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d164a08-c129-4d2a-af6d-34b4fc7c80bd",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ef9013-18fc-4fa8-ad17-b3142584a47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bb3b6c1-f868-48eb-86b2-d139dd6b0c34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94a414b-9a5b-4607-9e12-675831bf2509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3837fc92-7921-4c76-85f8-3cb272d69d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f652296a-2cab-4073-9a7b-9cc787d0e574",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c85a97d-f024-4af7-8d34-a5148484eb00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57ef8c83-6703-4409-8125-319e08ef6e2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca2b665-965f-442a-8483-bbbd9b52e0e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "72f6e6ae-38c8-439b-9e80-71a0fd4e2fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e8e0ab-d93c-431e-8ce3-c059bc292cf3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5bb0e9f-bc88-4d7e-bffa-472f717ea613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "571cbabc-35e1-4ddb-a415-8811b77e944f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b12aca0-d33e-41c4-a539-236ed1e1fa27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a804b2e9-70b6-4a07-b9f7-e014e955a1da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e78e6efb-5719-40d9-8d53-07107d1fa3f3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b97e116-2cdf-421a-ae1c-5f4d52ec21d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea1f8fa9-ee8c-4ac6-8b1b-909de9b19db1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5fb36dd-9612-4b36-8451-c260a0178984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0e4ad7b-bdf0-45f2-b8dd-4181d4f78b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9a66c7-9104-46a0-9136-d8ff72cc1eed",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2043e0e4-d282-42f1-aeb2-718cbfa2537f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd419075-f9e4-41cf-858a-2dba93ea3b8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0714926e-1c03-4a28-944b-4d6b65ba942b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e9fd052-1acb-439e-bbc4-4753cc4ab0ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b7b810-6c05-47b2-a808-d3812304b8e4",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54020529-5b63-4e31-8725-9d05a174bada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07e53b23-2fb8-48d9-b2a1-2c5dbb3eaf97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1ea534-a178-4f68-b8fa-10124534cebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ad147088-19f4-4391-a88b-fd957991374f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "212d9e43-103a-4713-a871-13a581e2afe1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "834ec893-cf34-4583-8fdd-8997eff1cc4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08f7a5ec-86d6-4d6a-b1f1-81410d3735e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aedfb84-c248-46e1-8069-5191275c2aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f582b0e2-547f-4274-b050-e6352867594c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c279a1bb-f935-48dc-be82-6e8feb33c4d6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1345109c-e9b1-4cbf-898e-2da1daabaf20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f10c0de9-4311-46e4-8674-0a7786445854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74360ef-b2b6-43ed-a9bd-8b7d473abea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f76c1671-bed6-400d-b81f-65a58b7193d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e77fc96-6153-45d3-9e62-69e94e016ae0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c21806cb-52d5-4800-a39e-12c2f59a5425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68bd1729-0290-46da-912f-7c04f448521d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605791d1-5cd9-4c02-9edd-ee541577ea17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b3d6da1-6350-4d23-b4d4-10a8df6a7bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9952ae-691e-40d6-b7f0-db4b0dd8d765",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b69b7ea0-80cf-4cd2-9ecc-53e43360defd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3711d3fd-e148-4653-bd35-e55368e159f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2bb7f61-98be-4f2e-8f59-ad0c9418e014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "41d7dc5a-69d3-49e9-9758-a20806db006f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c10fb930-0342-44c9-8991-bff97a335629",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2314918c-c98c-47eb-b892-5b48c34ff06c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "748c4944-1a29-4879-936b-dcdbf959dabd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a740d91-7ad0-4d9b-8c1b-6a49a1783d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f33a93e9-4475-426a-9014-cf32c7c6a9b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3ca451d-657c-40b8-9500-0062345fa786",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abcc5a7f-daa9-4969-97bf-94d7b68f16b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "545dcce8-125c-4565-9859-18da40b996d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9264e8-acbd-4a7b-998d-ec6cacbbcf8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "26bf2be9-dd1b-431e-8d5c-3d8f1758d6ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34bf2fb4-ae03-4195-af0f-1cdcc3871662",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a034b389-7e34-405c-aa13-aef87a14c2a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea2a2d4a-a799-4d71-9572-4c99475f8ccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16bd9159-4c9b-4a61-9bd8-d59c12f89bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "89d78991-cd5f-458f-9fa4-0e5c1f28436a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db209e20-3026-4e4f-8fd2-3d0423a290bb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffcb1c30-f3d3-417a-919e-84eb2d64e6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f39839ac-1ce1-42ec-92d9-9f6a2ff5f08b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce009f90-1c02-49fd-b25d-2db1fd99826c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7dbd7aa-4ac2-4b61-9ee2-5ac997a3adb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b1fa7a-82ef-46d4-b2f1-dc6f01b2a28c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47cfb617-19a9-4e1f-b967-cfd95ab94fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d983c2da-494c-469c-bc00-dd3b100f1811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5299ff01-9fff-44eb-b547-bb44df22cd79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f41b613f-5bff-407d-9510-0886f6d0884c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f69c3f66-6cde-461d-b4d4-fd2c02b36b57",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3c7483-1d72-434f-839c-1fbcf0add198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23c22792-e74b-4df2-9513-b7dd5b2d32d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85cfa5c-937d-4e37-a43c-dae856bd66cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cf0590a-61e5-4685-a2b7-9b76f9a327e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d09a56d-e315-47c5-9764-f2163fa60008",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06ef458-58c5-4e4c-b716-996e3b7d910d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c92d2c44-e057-4d84-ad74-beccd864662e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97632754-b729-4aba-98f7-aa3769123c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dd25875-2244-4a41-b12c-0702c338059a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7cd4ad-9c6e-4f32-a3da-7643a00abdfe",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a3f94e-73f1-47b5-9b08-aaa7341552c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14a387bd-3609-402d-9eeb-c52c79a81d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb83c90b-558f-4502-a0eb-e229507f4f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c344d4b5-21d0-4a21-a036-b7e001cb48de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e4895a6-bf77-468a-8a11-4261451f41e1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a911e9f2-5f15-45f7-b8e0-504e6646066e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b129f7c7-56d2-4717-9bcb-239a68bec128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6c126e-ff2c-4131-835c-74c7b6f83249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "951f5add-1ced-4681-bb00-e9bfe6378e68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b39e11-8346-42a3-8fdb-4f7c22ccf0f1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee1f363-9e95-4905-9dfe-e6923df01811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03067f10-d9dd-4bd9-aed0-e0f23b796a72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762c692a-2981-4e1a-8c30-0b16ee1faec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b7d3130-ca02-484c-9a8a-34596944be1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac449ae-456c-4ac8-8c8f-b512a76093d7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b008c0e0-f515-4ee1-8f94-feb7229ae5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f98c5da1-4fbe-4a91-b135-f11b4fd95564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6276b63f-e3f5-4a51-a814-f4e468918c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80f324e2-9825-4824-a06d-36a7647db9c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d74777-b521-4168-ac96-d21b4748f01e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "610cc177-b16b-4f5a-ad87-98293db85ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe8285f2-eaa3-4ccd-b632-303c4c7489b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3bb28b-f35b-44e9-8a64-42f251bfea8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3aff0c2b-0061-4f04-8ae0-ae8cd3d89736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5d85ac-dc03-49bf-aeac-c8102d215946",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e892657-6740-4a9b-85d3-21b3804f871d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74be82ae-4a35-4b7b-a30f-90321a3bb729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a309850-78ed-414a-880d-8cfad1ae281f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "caf061c8-ca7e-4120-9dfc-a36e8070611a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4260a49f-9be1-4e9d-8789-0ec1f9a704fb",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8caf30-d667-4e02-a340-50e9cd925e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "265b66a9-74c6-4cf3-a213-b685debe9830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fecdef1e-4bfb-42e6-a3f1-9482a3f06764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f69501a-ca79-4ba9-8d21-76c71797cf9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79e474a-ff01-43d9-b04e-249e45c5df57",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b94a946a-af57-4f02-9d03-bbed82742a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79e74e9c-7d5d-4910-b07a-137125dc954f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcea3b71-46dc-46eb-a465-ae27371359fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c994e92-6a54-4afe-97df-6fd5faf5ce6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d760ca1-e125-45ca-a6cb-3a2b31fcc33c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b317f428-9142-4e58-ac65-bb0fd166d056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "573c1556-6809-4429-96fc-64ca225b8df2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4444b092-c565-4c03-a3d7-96a5f7845943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05474aca-79d3-42ea-94a3-bad39ec10c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2a8704-9fbd-45dc-b5f5-3147edebc009",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c45ba3e-91d3-40cb-96fc-21787c4e1ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e1dfe8d-72f7-45f9-8fa5-d78355d17421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26505fad-9890-4871-af84-dd9c6bdc8ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82da8366-a276-4fa3-8ee9-78191a30d74e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536f457d-a565-4ff9-9966-e8d7561cbf79",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39eee972-c595-4aa4-b5f2-353eab1607c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a447aa2d-957b-4d0e-bdc3-68ee9735b9c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37316d87-ffa6-4410-9dfa-73008464837d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1344e0c4-4f41-4600-b439-6032d0fa38f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9420e5d7-2262-4151-8b16-7d82a234d063",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3372167-21b8-4579-aa19-100c6d1d40cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a173762-f552-4806-998e-0bb61c39fb05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08020116-bb86-4ec7-9825-f2068954ef31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4959a3d6-f422-4949-a2ed-eac58a4a8577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a9083a-df5f-4092-a186-53deb9a64ec5",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa3b368-e5ef-4dc2-a004-8e84fdcc300f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bb83e29-1df4-413e-b80b-31800a3f8f48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "784bb549-a591-4f74-98d8-3b0608ed85af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbe253c2-4fa9-4858-8dab-8e0d8dbb9837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194ec0e4-efbc-4608-b56d-183f39cc4fc5",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f2ff3de-f631-48b5-9ddb-4b22a40ba79d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "530b0b5f-fc44-4ca7-8a32-f7394bc79117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac43007-902f-4f91-b3d9-e37b10c0acdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c001270-066a-4edc-91bf-428b92ff189c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568ce0bc-6684-4c45-ab0b-8d0bec52494e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49e6600-73b5-4ab6-89e4-690c6ef54afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6360127a-028d-4f20-8976-ecf1dd276514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "338a95ec-bee2-4248-a9e2-7654a51795b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad3981b6-905a-4ae1-9924-6f4b83f6ac46"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "95d357ef-c97d-459b-a21e-958211ff83db",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3bd616db-e942-496f-8412-90523bd57db4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e9688b0-f4fa-4d6a-9456-9787329993d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9b61264e-1a21-4f2d-92aa-ed4663f03759"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70554105-98c6-4c33-a25a-694c83945dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46ad9ba5-0458-4687-bcfd-29379b7835ec"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f50f2418-da26-42e5-ae8e-4ab8f281d20a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "773a9dec-2908-40d9-892c-bafe1466e38b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f007117a-af90-4d50-aeb0-c93abaf0abcb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb38f7a3-a4f9-46b8-8263-4095ed66b4cf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d3989d4-43d3-4ae2-9c64-7558e93b770a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9b330016-a99c-462f-ab3e-79188eaf547c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e353e045-fc5c-4b5a-b3cd-4e93aea1f151",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "14390a14-147b-4d6b-a26b-8e17893444ec"
            }
          }
        ]
      },
      {
        "id": "911c051d-3002-470b-9439-aa374a98dd85",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6f9da3bf-5656-42b0-b6cb-ab1c40f93b8f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "01bf1450-6baa-4726-ae73-0e268f589336",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cb34dfae-f4c9-413d-a2ce-46911d55c02f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2583912-0270-4608-93fc-4eb74b6585b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7c7c1f7-03e4-46cd-948e-f154125b1458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e59a9481-0668-4a9d-9310-235458ba2427",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba8bc74-1389-4146-ae46-f70df7b56dff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c1ae48-5355-42b5-9a06-710c7f01db37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac92efa-1cba-4a49-b409-3d6528db447e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "636d9a41-c660-4e92-8a72-c83ff1af47ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd50c911-b343-44f5-8142-5a3a7da82233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa4553b5-fff1-486b-90ef-56f5f2f533b8",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f363dc78-5325-4bf8-b9b3-161b8765e88e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0039c91f-287c-487a-8dde-fefdd4ffbacd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48980700-685a-494a-9298-06884b60b561",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42dd8387-6c25-4c46-9f7a-800e0f3fb2fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a3c21d3-4cc3-4cf7-8fee-868d64f83358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964d46ce-4567-420c-9aee-233c0cdbd6bc",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3703a4-0588-4b98-bfca-ef8d56a77183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21a90ebd-e983-40cc-9ba6-e20295ce7677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9826268-9842-499e-90fa-8d0e3d63c7b5",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d046a4-c92b-4306-b12b-d38ec39380e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e48e887f-39eb-4694-9134-6b126629d107"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e79d2323-2380-4f66-b0bb-45ebfeee3f08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11f8b931-0991-43d3-a1a6-43baeddc1b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "130f38a1-1698-496d-8f13-06f8a08780d2",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4deb418-d591-4036-bb3d-678d8eba48e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8dea396-fccf-441e-949d-94dc0c80f5ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7d8ed4-6e35-4ed3-83a2-5af237569c5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d061159-9cdc-423b-8bd0-8833d1740447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a382497c-d3cc-47ce-85d2-b92651478f20",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9058ace-df82-4e90-a053-31fe35246bc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d81bea84-a1c7-4562-a74b-78b59b5be611"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca5caf48-141c-4b30-8ccc-f0849da07eaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "593ce6d3-a420-40fb-80fa-870957e05651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572836dd-69dc-4041-9511-5213ccd7f3eb",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999bf203-14a3-4014-b7ec-da45fc80e0c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71abc16f-a798-4139-a142-f264e7a07ddf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b9df62-d9e2-4981-a188-e7a901f8486f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff9bd792-ef07-4188-a0af-a3d3be5be445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c38b3b31-1417-4c7d-b4dc-1f0752e57d36",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a078dec-cff5-47bc-959c-c4d2d2295de1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8667dbf2-8271-4d90-9311-11b9e995755f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db76eb3-52d5-4222-8f20-f1aa8e2d3572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f42f18-9387-48a3-97da-1fed19afc2fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4cca173-4c65-4821-9153-361aaf5c4ef7",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08807ec9-3294-4fd3-b304-d4106a8e2c51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a34d716b-2dae-4568-b3ba-aa2faf7b959a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "218887d2-c043-4aea-8459-7eb19fcda7ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa5c9b5d-316e-4e81-92dc-fed45f3a7517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44cb023f-b193-4ac7-a7b1-1307cbcf0378",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "845b9496-51db-4e03-bbd7-3c868b656548",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c0a76f4-2828-4d51-9bb0-7889b4295f59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4c3842-fd60-4e0b-a068-05e90874d214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcb72a5d-397a-41ab-a8c5-6ff94cc2b546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "190ed36f-fce7-4d53-930e-6db33e81c48c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d1f5c5-2478-49a6-a872-c088f647c4c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bb9fdbd-d92f-482b-8f1f-94f1cbd6f62a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a85974-e71b-4eec-969d-41d0da0a085e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1092037-46ec-4c39-96dd-89b15c8027d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "097ab80e-63ca-46ae-8047-a25ee687440c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0117b63d-f947-4696-9121-1706c0933bb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2ee129d-f62a-4768-bd21-72b072420a47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c772a4c-c806-435d-9475-adfcdb49e49e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "284744d6-b1d4-48a3-a2ae-86bae9896d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94739c5b-939a-4797-b0f9-98dc762b24fd",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f9b8529-3e9e-401f-b9fc-0956606414ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99fea937-309f-48ca-af4e-3752485b0d68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3065755c-1d6e-44d0-a755-ab99255f8a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15b89941-4673-482e-89f4-4fc8fcecea13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd3e8c5-48b5-447b-b552-b600ceb25511",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0d6844-5818-49c4-a21e-09856cf07457",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dd767a2-87ac-4722-be9a-e93ba6d0d29f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb6fb569-78ca-4c27-bca0-96036e011e4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa23b6c4-a19c-44cb-ab53-b799051b9dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23f97d3-f32b-49a1-87e9-19b8181a5aaf",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "018cf2ee-9d33-4de6-a04b-b1c80eb74d9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34893043-6d5b-4b8d-aaa6-c1d5ceaccbea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c604a93-090b-4ee8-8a4b-2504c813d8d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bb12ea3-feb0-4e03-8e7f-970a36a9c4ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7845143-66b9-41f5-801b-508a2ff48624",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3f96d2-8367-44c1-8cfd-80edb38a8dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5957062-eb1a-4dc4-809b-f08adea27aaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7573ed-04e9-4b9a-8e0e-c9f3e5bc0cc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b3ffe03-5bf8-4222-998c-efd02e1063ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4519b1fe-567a-41db-9cff-9ad876128b66",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b668b9-bed4-4c56-b1bc-27c7bb826b18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4247739b-3a7d-48e9-934d-8daa405d4aba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2b8a9e-0c8a-4448-9215-f39899c722f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d316694-e436-4c12-8a7c-1c69c9f4cc09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b0220b-78ad-4a69-87bc-1fa97c901917",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06093851-02b6-4f56-bff3-fb82e20a8996",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc25b667-02c0-46ba-b626-3026b277dda5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59519bcd-194d-46ac-96ce-44b753c99a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "703f12d2-6c9c-4554-8798-76729369c798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d60298-1168-4b7f-956e-6ee052043cc4",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73ea1a3-fab8-4620-9a16-a4c14bc2892f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea5b25f0-40f9-4652-93ee-3bc2b1691d36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20804b84-4581-40d5-b534-0bd8bb8e3089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04ff9229-cb61-4d1e-9b6d-f9d5e2639378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c4aa006-f2fb-474a-b8e1-eb832cde52b8",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "668c7eff-efff-41a9-8445-97a808d8c728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad493914-43fb-4c1f-ad0d-0e4935db0ccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d04276-ffb6-4782-aaaf-36b05e6ec2da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f36967ea-4bf3-43e2-b014-e55dbe41adea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ca9367-1ae2-4c7e-ae55-329a5861f1a0",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b609b2-9de6-4a18-8516-eb0ef5843d5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31e36131-6621-4cba-8a08-93549791f15e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8758af83-6c96-4c85-82e2-2dc9bd5f02b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36503b84-1a0e-4025-93c1-26db6093c354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252ba03f-b93b-4c5d-b3ae-da61d79c5c4b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e693ad-a4cd-4662-8279-8bb03efc5c3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "879ad218-cf6a-444e-843c-02d716ffbe09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aef217d-9496-4e81-975e-bea6dda9fbcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad7c6a13-1b86-4810-a651-b2a0d5820af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f13e1780-735b-4d40-95fb-d8baf15d754a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69bad21e-0e7e-472f-8808-6d45c1030925",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06c7475e-7ded-4e22-b1f9-651d98baff8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9cfd6bd-ce19-4d28-aaf0-71ad7e678bef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e2d7c3d-c07f-420f-8e8a-e334e42f9d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17ba908d-b4b5-481c-97d4-c6da1498ac64",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b58ca5a7-fa0f-4d54-b7ce-44dec56c0e2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db2953c3-2520-4311-8c0a-1b307d02a783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e976dd-f969-492a-8088-0b1d9924d699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03c695d8-2660-4d68-9233-2ef443e8ca9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e956f2-1dca-4ca2-94b1-abca2527df35",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bca00f5-2824-4b59-89ad-eeb681096e3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e297b2e9-1a54-4db1-aeb7-e213d2b01be2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c471f753-b4a8-4803-9c61-88647a100a19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da1c4546-3a76-49a6-a3d1-836b8b8c2b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44b56e48-5434-45c0-914a-b043f4801dd9",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e4ef6c-bc59-471b-8e64-5e1dc86b984e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ea99793-acbb-4663-95ce-68932b5edd31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd02a3bf-5bfd-492c-ba95-404fe9176014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "488d1719-fc11-416f-9f43-f4f25db67003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512af269-0fdd-4aa8-a499-075bb06131f6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b88c440-6bae-4b82-a8a9-0a88adefce50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00c3b71d-1e4d-4b90-8133-108fa22ce49f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5423e473-10aa-4dbc-a7e4-511774aa3115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ce5309a-f5e4-4e02-b5d7-5b5b618c2b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8037ed28-ba76-4ced-ae4e-f70c1311f8f0",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773edcf0-14dd-466a-96ab-7edadfa89f2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05bf13c4-a22a-4012-922f-29d5bd88d902"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef1965f3-3b11-4ed1-97e5-ca42575c0253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce949fd1-9400-4c16-86e6-8939c3bc9d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a85a2f-7bb6-4507-92db-4d2925108e5b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e211afd6-ec75-4798-b7ea-1ce1e057af6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ca3fd96-d6d3-4f7f-9445-ed203ca2950a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a31ffdb-f0dd-4198-8be2-9ded497a7193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f66d21eb-b2ae-48e3-83a6-d2e013712a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fcabb87-6cbc-4c0c-aac6-19787fd4569d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f65e889-d646-4d84-ad43-0b3efa6ea719",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2840c8c5-fb40-4f27-9b0c-ac217587ac33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fdc9685-b128-44fc-a298-430bd622463b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "266a6099-6540-49cf-9861-a5b9f4829fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3643468d-80b4-477b-9cfa-9389d859c250",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557a8e45-5228-48a7-996a-db4dd110b716",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5eee5b95-d333-4621-a8ee-1d61041db33c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a9a4ee-f376-4226-aa92-88563c4ff0da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2034caad-4cc4-439c-998f-63842ba39bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f3965fa-e4c1-4807-a003-5f741adcb308",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4468a171-73ee-4753-b01d-91632e31855f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4ffffdb-31ec-44fc-99ad-410efb7e7ca1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b2af3f-2df3-4c48-80e2-c5fdf7d3b9bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a988ab8-1cbe-434b-a0cf-d8df6e194bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a2e90e-891f-4411-984e-39a69a11108a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f2c87c-cf55-4c76-88dc-bea9b27562d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c59810c5-6412-4165-8dd2-7ce6bca40385"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b6a9c3f-e94d-4439-9855-42cfbe53eeb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "965fb646-3d68-4fcd-8ec0-4c8119151e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07df9718-e2d8-4d1f-a49f-c920c0bb9662",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79a5076-b5a7-4fe2-a72c-55470928a63b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "864f55b4-c21e-47ee-972f-af9b09c2a0b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b54d65ae-7bec-4827-b91b-288e5ee9e4bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71eeaeac-eb6c-4bd3-9743-21763b048dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d299602-d33b-48e0-b86b-06e7b06e76ab",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a2eb6c-6c83-4eea-8e26-1fa673bf9103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eceb77cd-6629-4420-a734-7359937c8a23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e75b338b-64d2-40d2-97d6-2c002c715ffd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67a10456-5bf4-4a11-be7b-2a4e9084b5ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22e0d23-7927-4e43-844e-1e684a2c00f3",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1bbf3a-0637-413c-8244-c5b5cbf3de50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88125543-c1f9-4ce7-845b-fa191507eb54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ceb4ab0-441f-4369-b639-1432353af6c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35e5dfd5-e424-49de-b9e2-59f643c7e7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b8ff11-5e88-4a80-b631-c47a97358f1e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca411f65-6cef-4c6a-a04c-c827c6e5e5e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16f4df51-750a-418a-ad23-fde5a24d2ce8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "024fa6e7-f493-47dd-b67a-d9379b545946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40f940b5-c28d-40c5-94f2-96671351d822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7acabf-01bb-4d4d-8ad0-5e1d690d75e6",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8fc81af-e222-4795-b502-1f20adc3c9c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfcda662-b22b-4638-ae3a-35192ad14949"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "483c637d-4de1-4461-98bf-8945c75a47f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1626e624-6f37-4c18-97c1-e3c9e7ac8f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c05223f9-7e64-49ba-90dc-86c49c22fdc4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f9aaf87-7ac2-424c-861e-3bddb8da2b12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e851f0e3-68ac-479e-8100-87cabf9ad90a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a990d20-8e77-478b-9b34-277576f01574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd709fd4-83ae-4b5a-9666-343d90101301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3d4767-6b4b-45d7-8b76-2bfe034cb68b",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a622d2-b94f-409e-b506-0adb6b9735cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9338604e-d135-4f84-81e5-20db8b22c25b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e7334fc-a1bf-4ffc-9ad0-7c80254c4b0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a68b7829-2dd6-4ed9-b45c-36e0b9264998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057dd4f0-b84a-4a5f-b02b-1c4e7d1f38f9",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497803f1-48b5-40d2-b726-93f7e9ba7cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e50cae7-838d-4fc9-b983-ca0523b298a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "463f2f7d-63c5-412a-959a-7a90bb0d8ece",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af380808-8b9e-4748-b9cb-af873321a915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "220b4bc2-ff92-475f-a307-00a6865e3c80",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f60a73-67de-4174-9e0c-10655805c365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55e1290a-7e48-422c-9d06-d780f379d0e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0269b7-5703-4f27-bfdf-bea2a3f46330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54b1592f-3b97-4ca5-8604-e0d763d6e4ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a42012-6f33-45ac-a7da-c873047c5276",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486dac6c-db32-4361-9376-2e07f02d5eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36299bc8-562f-4081-952c-121784be682f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeba1e29-6cad-43db-9cbc-49da439ea9c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e29ea172-3e6e-45f1-aa3a-f2bd5e6d2a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2622827e-203e-4d79-8a95-b19ed7452709",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c60eba-198f-4662-b5e1-d51a54822f1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8a92343-377a-4606-98db-d5fc36608a7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f5dba1-e8aa-45ab-b1bc-6c0a56102209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38624e08-c13d-46e1-8469-7abe457b912b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20348738-43e2-4864-b7e8-4e41792c337d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736d93a6-d3c7-4598-bb0b-e33a443288f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f69e8262-52de-470e-9512-14232ff924bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "617bf947-23c8-445a-ac05-c6d79212c191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ca3ee4e-8061-4514-8db4-5a91326f7e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274e49be-a477-4c1d-bc44-554cda23c68c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa9ccd4-c6fb-4cad-8f9a-1253ec7ce82a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b3fbc6b-22fd-4410-9fe2-c8400b32173d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "200701e2-95df-4dd4-9eb8-9f8a81868e51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eacbc6d5-a536-409c-9426-7d00c6a15984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64043f93-fc97-41fb-b24f-0f0e14ae3eac",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256f5329-7e73-465f-a4d9-7b796bfe5fcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64864fc4-e86e-4857-a1c1-5da740da6f41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d004777-a6e3-4a20-adb6-714a523f8172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a5b059b-2f49-4961-b26a-81852cbfe4b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d522f5b3-536f-45fb-badf-afba5a6728ad",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "494875c6-d130-4430-8e81-7c5e6881892d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68afb33e-2002-4fa3-8aef-deb8d8439e92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd515ed-0988-42ce-b75d-0138864e24f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90ff4959-dfa2-4226-a315-a9f1cba046d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c7fbb9-ee0a-4963-8f16-a360f9ea065e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c355fc4-4751-47f1-8ccc-bb9e9a4db3bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b51df74-2d07-41a5-bde4-9c8fbbd4faf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f6cb34-d8de-4867-ae71-aabd28695deb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db5ca665-0174-47d2-be3f-b66994151832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6507d22-7315-4e49-8b8f-16652aa3bda5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60923b7-a7e6-491d-bd89-7f0921ac0b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f36fb418-03db-4b62-8ad1-9a3229ef5447"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7781b66-39e7-4d0d-aa5d-783d54b63183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47918279-b7dc-4103-88a5-5a28bf3e0c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80451019-e0b4-41aa-b4fa-176634f788d0",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "804edd9a-27f4-4e59-966b-4e33edddd032",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f9921b8-deb4-42e7-839b-7b46ccbd8e3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e7a1b1-fa31-4120-ab51-3be40c83d26d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85a353ab-5079-4aab-9b6f-9c8ba477bd56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef9ef4c-f8ff-44e7-85a6-69305c6bf79f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd6bb1e5-4272-48c9-92cb-27f0a9d7093b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c3c58ba-7135-449e-9c64-e3e5f590b1f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "287b553c-1520-42fa-8e51-501bf8fd4cbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e19e585-b307-4bf0-a73e-3302560b9dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c67c4bcf-59fc-442f-92e8-759b0c0f21a8",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cbfa4b6-b50e-436d-be09-2e91a3597942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c293f60-0be9-4bd8-8cc9-1cfff0370d9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ca8ec8-7174-4ec9-9b5b-c566fe6caf61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af1d75b6-d269-4e15-8326-7e6e5ab0a55b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54acc17f-eeb6-40dc-843b-4805853ba0c2",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95eb07c6-f9c4-41a9-85b3-637221bf3826",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f02d24a0-480c-4597-afb9-a40fabd4e7c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1676d3a4-fe98-40e8-91f2-5e4e6cfdceaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab4529f3-2a2a-4814-a315-21d55632f53d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f3878b-88d6-43c0-9869-edecda0a3591",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d0a6a4d-c6df-4ea2-a717-906f43906b21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26489e46-4fc6-423b-884a-403fc0616eef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46261aa-04dd-4fad-9eb7-f63f75bc6ebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0cd1806-42f4-46ed-9d1c-bcdb3f8abd89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fe13ec7-9483-476a-8357-7a6eb5b64c39",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33305678-fa42-468b-bf24-312bac8f4454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60ae3b19-bff5-43a1-a3b3-f582e3b54a91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07cb34fa-5ac7-4834-a13b-0e6b596226e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01143da9-2e21-4b07-a06b-adab6a4a7261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1f1407-4142-41cc-939e-ef485e77eeca",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc311290-41c1-4c34-ad38-616c4f2c7dbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3626b7ff-1c86-406b-8659-538558bddd00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fbeddfb-220b-4c83-92cb-e8032863b745",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27f72782-1f3a-4371-8b46-069de606b427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835dc256-f021-4942-be9d-289878ddbb85",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd93f8b-0272-4513-b69a-013094134dec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82ea26ed-fd03-4cf0-acb2-0d67297e2d1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97dc5ea-db04-49b1-9bb0-8bd90425a799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb067972-1a77-4eae-a8f6-6cadf93aa207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1788b8-0dca-4dc1-81dd-54f741d83100",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed60c2b-4dea-4a37-8875-f77efe82cc71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23affa7f-3081-4870-bbe2-d9b189f0a5f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "678f06ff-b916-46bd-8183-849ffe476898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bb58eb7-8707-4a57-830d-45f1f4bae0c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4739d0a7-9f0e-4a07-8296-6fc20c235672",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc0834f-7cb4-4c72-8ee9-8374962db384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3054e6f9-0a8b-4817-b2b8-f3d553fe4026"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3965bb2-0930-42e4-9c62-c51dcb7242d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4daf28d6-0fd7-467a-99eb-d712183d727f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "844bec06-dba2-4ff4-8001-2fc3680d1fe5",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b713e0-a545-4c2f-9c5b-887c42c2be2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e404e74-fe87-4d4f-bd2e-03d6485f0bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc1ad40-12f4-44f1-a4d2-874f7ccbe2f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3127682-5394-4c0f-aa2e-fd1e92376bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a43d712-d08b-4961-bbcc-bca08b378116",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95688bcd-db0f-4970-917b-ff14304533cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b116ab1-cbf2-434b-97b0-9e25731304a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d459aa00-453f-46a5-b5c1-b1b3b79f92ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "467c9a8a-ee5c-43ca-aedf-a8202f1f5c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6952028e-3a45-4a41-bd1c-0e48b6013594",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfb0c72-11cd-4977-9cee-68c61c3cf040",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5649d9a0-f43c-430a-8061-bb6811b40b76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d63cefce-daa8-4486-840c-ab55c606626f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80f7238b-e239-4be7-b788-b951fc6516c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1d2ff3-ace2-438c-b990-a54bc93ac5f5",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8904246-8879-4f06-945f-a1f676cec245",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7962b669-6c2b-410d-ada4-ace419aeae0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae48580-9bee-4d7c-9745-b9bb472dcc5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d19dba3-e441-476d-9953-56b1a153878c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287dc5b1-906d-43f8-ac80-fb6534e6c82e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04b12c9-e0cb-4498-8342-7fdafd729d8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44545ace-a837-4a05-b063-7fdc58534b8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a4340eb-084c-4718-b169-328a0b1ecb16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87156843-b899-4c23-ba91-27ba6a659a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9137ed-0161-445a-89ba-02f25656a6d6",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67348eb-d254-4ee1-87f2-e36ebab434c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8af421fe-aee6-4eca-98d1-d822376500e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b52e85-2ec3-4190-aae7-74c13ad1e37f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a9644bf-f152-4650-b252-fa23ad04e61f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2fa4c7-e3fa-4c0f-895a-8b073432eda4",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe68de6e-567e-4f0f-9fb1-73362b873d44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "660de5d1-b4cc-4c47-8e07-9771e5c6d88f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59968808-7c6b-4aa8-9c25-92f733c1a63f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f340a081-306f-407c-80e9-a1b6a1597787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "528548e1-a81f-4268-937b-81b701023989",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44784684-d13d-46f6-a7db-97a2bf521704",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f74c4d33-7d1f-4236-9bcf-b715e81045bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "014cb6dc-26e6-4ac7-bd88-15b1f17a35d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b9f2792-5b84-4bf8-9637-894325eee59b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b755c359-5590-4b57-9ca3-330077bd1872",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf36c03-1296-492d-8908-235281310fb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "964d053b-1dea-4156-b906-5df7c240637a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc090ff5-ae18-43c6-8310-35c7db1ba2c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a77365cc-77bc-49e0-802c-8ad4281a0337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d927fc-077b-4eb6-ae7a-bdf82e62e197",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2217a606-60b5-4a43-9761-8a474fff9565",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b778f76-0954-4f7e-8195-6f98f2297ee6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56857b75-9924-4377-b61c-1660f001a9a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39ea3bff-d655-40ab-9aa7-a3e5afe9f76b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe220ae0-033b-4cff-9143-b53217742b6f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a9c46d-26f2-465f-9ab8-0ef7b0f17bfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b0ed1bd-edfe-4936-8adf-8855033eb019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "650af4f8-2d7b-4c46-8bfc-c5d6f1b0b07e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d1cb582-e9e7-4f0a-a5dc-58d6c53abf3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a32480fb-9539-4dec-b5ad-abaca0e60f55",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda5ec06-c75d-4a9c-bb71-b4b7236d1cca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b1139ec-4d28-4343-9c8d-a22995842e68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3019d11-8a29-4a36-91f3-3c2cc9b8aecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d774f6d4-e35d-4d8d-a1e3-25d5a6c87912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6522b525-f81c-4589-ac47-ae44d6a9f9f5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e642d37-f4ac-43ff-9b59-f9785ac4bda6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d54baa94-074c-4bd4-88df-1ab91dc7b68f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42883074-ab95-4dd9-96a2-088ceeec93a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf774d4e-5e51-4105-af65-f6154edc887e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de78d69f-e4ea-474b-a9a5-31de926e7ea4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b27af9ce-bb42-4eec-9154-822ca6cabe8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd5402a4-529d-4a28-9180-807d33176b80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83f47f7-ab87-4b60-aec1-2a5931c895d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc9e0461-8dcc-4a3e-b3f3-42981753b517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281656a6-17d0-4290-a0ed-6c98430f70b6",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b50dc1e-e64c-4c93-a829-73a1003f5de0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cde02e25-eddd-4c1e-b236-a17663b9b816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14da9988-d742-4292-832c-777b4a1b34c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f17b8fa-b9ce-4406-8610-8f5d36cb9c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3553d21e-db99-47c7-9001-acc829231620",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe888f58-65e5-4e24-b7ce-fc8e749abb43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee62a84d-b77f-484b-b9f8-73b7e9833f6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f86cff-e5bb-4666-b30f-576fa5603b29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4598fd0-9857-4c79-8f46-2b57aa1af2a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4dabdbd-a2ba-46b8-af2f-935067a82243",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ffb29f-fe5a-4ad5-819f-fed1e599425d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66ea7115-2798-46dd-b6c3-1a25e6628f67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da9cefb-d53d-4ed9-88ae-26b2ef8db316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11b4e3bd-38ec-4018-97cf-88adc77659c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d452ab15-4beb-4e11-bae6-74c6ccc0ff2b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786b5a8d-cebd-405d-9ffb-14e108611a81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79e57584-8343-4700-882b-2d7d4836ef47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "555df9c1-b11f-4641-9661-88174ae3c6d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "060ddcd6-6818-4de9-8833-1149c43bf8b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3a0c8c-d9b4-41d1-874e-d12795488c4c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4bcba5e-2fe7-4050-80d6-bcad8748705b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "573c0e18-1d6b-4c66-84f1-0bff8df859a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3785818c-2d2f-42e7-851d-80f02a2d7cdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36a8e7c2-f37d-4785-b87a-677676b1bed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f3684b-a490-449d-9d0b-06c6a8953920",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e24796-e839-4f49-a15f-9183febc557d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fbc48f7-983b-46ba-b668-08cf6a499cb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d836eb-c08a-40e6-a45d-0fcadda35644",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b21e81ba-9e9b-41ec-a2b4-c69d3db7c33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e020b625-0784-47cb-80d6-7bb2264fe454",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d172654a-14dd-4e61-b320-a24da0b46f63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fc93914-e980-43b3-9a5e-d89850cf1462"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "545779da-1fab-4d79-b4e9-ea56282203aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c6eecc5-b28b-4520-852d-baf1f8cb4888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f6a8e0-4479-4625-be55-e9ab7befd422",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3287a18-00ed-4d31-9525-e87cc382d25d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6734ca68-a5c2-4ee9-8a88-ffd56406f79f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "361f5471-f8c2-4d14-a197-33e2725eb56c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ba35371-a5e4-4494-afed-6c07a4f97477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20aa1e09-ca2c-49da-a747-a91da45f64f6",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "495646a6-8fa3-4fa0-a7cd-b008e2e77b9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab357e7b-91ac-427d-bfb9-248a4b82880c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5853446-a3f3-463f-9a65-05bdc3e4753b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57177fab-c167-44cd-b5d6-e95bc4ed8868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752f01e6-23d7-41a4-a509-46fcb60e3c55",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4043dd0e-fcc4-429e-a8fc-3b310dc6945c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a6113ae-f4c9-49f9-b644-a77f8ba35836"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "287ccc9b-6e5e-47c3-a24a-ec7c2b39fa2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46a05c70-27ce-45d9-86c0-728cdf4b48bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87060f35-9bb8-43c0-b11f-6ab245fb449f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e544b1d-c49b-4b23-b1d9-228d19867e8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6314212-48a2-45d9-9c2e-88928e38f4fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce9b146-2f10-4030-a90d-e55e9d2aceca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2b6f2e5-475c-494d-94e2-931d8708043d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ffa316-f2e9-4b4b-82ad-dfa042d17623",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a233fd34-d49a-4a4a-a03f-d5332f02d82d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29e9623c-68b0-42a5-bc7b-703c60fa78f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4f1073b-50f8-4cbb-a8fd-b182f1e8b5ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04abc19d-ecc8-48f7-a252-762d7c6e8d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6fe145c-6fc5-4d44-8e59-b7a1f4b946f1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a334a86-397b-4a2a-b60e-e27bad6896e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb2235e3-df85-4f08-8780-cf329bd069cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "723e36ea-50b0-451d-8715-9064eb5c2b24",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd5134f1-531f-403b-8df2-b0941ddf7672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed5f4fd7-aab6-4073-b297-f0f3adbbd043",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8669d3a5-1098-4bab-a451-7d91462a8e59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbf0df9c-88c3-4571-84af-6b1ea251a394"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c743e3d1-0f94-4003-aba0-2d5919f8aaf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "771dbbe6-21d5-4ec1-af7d-84aa4946b632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52702950-1c14-4812-8889-2ca1ef0f8ecc",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7fae5a-b492-4dcb-a26e-e8d8815b678d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f50c4fd8-8653-4b7c-81d3-e215fc117ce3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f9411f-a503-45dd-9989-0abeb9037630",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0c50c28-fc3b-48a9-a868-5177057f9a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c308e9c-0671-42b0-9415-ecfb5a0aab57",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef584d1-af59-4a8f-90f0-8320f2b0927f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ab5da58-ad62-4ebc-a05e-62b463b19d51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41dd8092-5af2-4224-b1dc-dbee8e0f673a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edddc469-3608-44c5-845e-90f8e8f8f058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c12e3377-4ae3-4e61-95c3-df1cbcb620fe",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc009ed1-49c9-4b9c-bdc3-b3ee2dd62964",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2ca34ea-1bf3-4e69-8e3a-8218c8c2fe60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ddca5f-83af-4b66-89ca-a93d2bff23d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98d22639-ad42-4145-9e13-4dfb80514692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d408e5-a6da-4d77-a455-6c2b86eadb07",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1566c3d8-4b89-4b9c-ae4a-14293fab2ad3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d368938-9099-47cc-b4fe-8bd0f7926c53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53155497-b111-4751-986a-fe4cee3cf6b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07baa256-ce5c-4ead-890f-c17300e670d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a677ddac-425e-4d7b-8748-cea76f5327c7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb6ee98-6f15-4abd-b690-9fcde717eb71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4001f2be-d899-4f49-9d1f-cf1a4c1bc1a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a39bee-5a3c-461e-be69-a153422f8c67",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbd61564-0af9-4267-b125-47d843060ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53709e42-0543-4bf6-876b-ff0e1008d3eb",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deccd67b-d190-414d-873e-0879719f4216",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fc54ed9-dea8-47a8-85cb-aac80c9784f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda5c2e2-4cde-463c-8d94-5d20393943cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75f18586-6461-490c-8938-0a2c076dad72"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5168c2d9-62fb-4432-aa43-dea36a568e83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "30c3db85-d438-4131-9afa-4c008d0cac1a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f679e00-ded2-4fe4-b4fd-6f3af764e013",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "69196cf2-70de-463b-a644-6466b8aecb3b"
                    }
                  }
                ]
              },
              {
                "id": "359e1535-c864-41c1-adbf-f3786a313b5a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "588c5aa3-8959-4b10-8335-38e775629192",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b03aecc-a69a-445a-8cb4-c1e385ed4dde",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "372fbc3e-758a-4254-909b-234b22c431cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "992f0686-e8da-49c3-b39c-dd15075a98db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94c80c61-f7e8-4435-a263-6149a565ce40"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4fb7225c-283c-41b5-9b18-8fad2404e23f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2597706-be1f-4fa1-ac88-4a49dda85892"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e4c9f9d-1a37-4d69-9ba2-c24051b0f14d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4e4c471-753f-4f6f-b7e5-b28a0063229e"
                    }
                  }
                ]
              },
              {
                "id": "fec49c31-88a1-44e4-8b8d-beb5013b8ef8",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "8efb1d2a-54c3-4e51-9b9b-2176b28e759f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a82bd8-3d33-43dd-b79c-e7b251e7c909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "1429d7ed-dcbf-4799-94a8-f73836462dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddee7556-a2b2-4480-b6d7-66b65a3e62b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00439a9a-827f-4037-9845-d5ff7d198ef7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f7a8b3b4-0e25-47ba-8a26-e42c5ad44e80",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8e7ad2d1-3f0c-42c9-bbd3-9455c872520f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "787edc46-0bad-44b7-b20e-e23300a97ee2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "84b7099b-fdb5-4590-9402-4e4e6922014a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2482145-313c-44a3-b58b-b063a782bd38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab3a1310-6ce3-49df-8236-075565236d04"
                    }
                  }
                ]
              },
              {
                "id": "0eb6f237-8031-4b9b-bb2b-2a251a3d3146",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "63e35745-577f-40e2-9b65-bf494384d7fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "986c352b-df4f-4be7-8daf-b41907b6ad71"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "529807bc-a2f3-40a9-8010-91912f9f70b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3cb595c1-1f8e-430c-b2fc-2d8af407fb89"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8c7d7794-a140-4f58-9f42-5ed899d41e41",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "cb5d3cc7-4a18-4498-99a9-fe75c3121894"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7d122b5c-1027-4c09-8062-2a4646a066ee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "68476ffd-1abe-4108-b1d7-e0f054da60cf"
            }
          }
        ]
      },
      {
        "id": "c56b0c9a-5185-43a8-9338-80ad9ecf2678",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4df89e52-7139-409c-a2ac-57382824c602",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0db4eb28-0446-4cc5-bc4c-b6b098043efe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "33e08262-b304-49d1-a7c5-6e971a71ae75",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "992e1dba-25f3-453c-9425-4df6827e5622",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4a8b7dcb-713f-4592-80de-e21e0e2288f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b538eef1-d9e4-4323-85e9-8d0ac951d91e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0428cb3-9bda-4fbe-87e4-8d19676a1fcf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e72a403-1ac1-4dfb-9823-dc279a5c28b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "787f9ca4-f523-4216-9bc6-8a303fd16164"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "26dbab79-a6c8-4609-839a-e2d564a41b0f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c481b21-5ba3-4086-81a7-9d81363b848b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "029e0335-4047-46eb-924f-c1fe58f6406e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3d3e9d92-2619-41ca-a84e-5684aa23779c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7785f57f-1ee7-47ee-83a4-db5ffd91da2b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f50fdf64-48e0-46cd-bafd-ca4fe8fec798"
            }
          }
        ]
      },
      {
        "id": "6c51a2ce-fd4f-46aa-a511-332e83a32b05",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "849f874e-898b-46c3-af31-2c49c1f8c529",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ec8c64c5-905e-4d9c-8501-2f007327b767",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "29dac47f-cc5b-44ec-89ee-5e3a53e2bc78",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65820bc7-c597-40d1-9883-c3e853cfff9b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47f1e79b-ac88-45ed-b98e-1c4c4a66d1ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab02811-0cab-4f3d-a971-cd3af7079351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6184739-b6d9-474f-b7b9-16d3cb17b7e3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03c3699f-7ef6-46b0-ae57-ac048020dfa1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c72ff7cc-1d6d-4bc1-a355-1c447aed2ef9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "562aa199-0f0f-4f27-96ee-3d2583f47d4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbdaf860-a944-4785-9295-8173ea5b709a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8b2cb0ed-59f4-4e8b-98a7-4b8f8b1152ff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a1007b84-c3fb-4a0a-ba30-dfe1498bd0d8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "14ef1389-7c9f-40f6-92d9-c3e086ea5f22",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "87b5f06b-d949-4f04-9007-2f9c2c4b9052"
            }
          }
        ]
      },
      {
        "id": "50248502-f708-416d-9388-6cc4bd67d2aa",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "26dca260-09cc-4d73-be86-3200150fd9e0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "022e1e8c-e5fb-493f-bd17-f9257b2a7d85",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e563cd19-d91e-4053-a93b-d5f073b9a61c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7605b545-45a1-4126-ae48-116c78d276b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b133e2a-954e-4387-b8d1-9f10be4b5b67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f330885c-6b76-4ddd-a3d0-fa0a164d56f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "912c7876-16ba-4ba5-9dd5-889cbaeca4df"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33ede118-d931-4198-a154-3d3bbb462a0e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ef63737-8577-481b-b7b9-1af830e1c42c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb80e63e-e8b5-4403-9f2c-7354c59734ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64ff460e-4404-4b1b-ab9c-f5319cf6b67e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0317d280-9c83-4da1-8970-ea56f88afa0a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "aad573d5-222f-44d7-ad29-bf884037365c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c95ac928-44ac-4383-85f3-45ad5355e515",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8caad53b-bca3-4250-a173-ed7a95be3deb"
            }
          }
        ]
      },
      {
        "id": "a89e82fa-ce4f-4b10-8a4b-64013073b923",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8473e636-3bd3-4348-baa4-fdb3652adefd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34bc57e3-ebfd-4567-b9c8-3a738bad0e84",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a4d09575-a9ba-454e-ad13-4884275fee50",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f4f80d5a-62e9-4f1e-a539-5c71450577ea",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc54cb08-3357-4f1b-96cc-2f2fd9719f40",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 59.800000000000075,
      "responseMin": 9,
      "responseMax": 671,
      "responseSd": 69.18324510680861,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1706488459228,
      "completed": 1706488485865
    },
    "executions": [
      {
        "id": "dcb33010-e1b0-4c13-8629-ee1bbecd0364",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8a786b80-d7f1-4ec3-97ef-c923302c498c",
          "httpRequestId": "0870b670-dd22-42fd-91b7-7a9458953e90"
        },
        "item": {
          "id": "dcb33010-e1b0-4c13-8629-ee1bbecd0364",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "21659fe5-f0c8-44a7-b0e0-219b17fee446",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 0
        }
      },
      {
        "id": "6f5f1ff0-23af-4bec-811f-41a38a308828",
        "cursor": {
          "ref": "f438f4a1-cc7b-4101-ae5c-9f7981d0fdfd",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a63b04dc-9e03-4005-b3d6-9cab0424d427"
        },
        "item": {
          "id": "6f5f1ff0-23af-4bec-811f-41a38a308828",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a4e327e7-5c8e-4d75-9bdd-03d76242b3ec",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "9a8b893a-be72-4f48-adab-57186f5f6b1d",
        "cursor": {
          "ref": "30bcad3a-aa7c-45ee-be08-20f85813bcee",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0dfb5770-daf7-4e61-b718-25eaa0250a6b"
        },
        "item": {
          "id": "9a8b893a-be72-4f48-adab-57186f5f6b1d",
          "name": "did_json"
        },
        "response": {
          "id": "195d62e5-22ab-403c-9433-f759c4e7a248",
          "status": "OK",
          "code": 200,
          "responseTime": 429,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f680cc-bfa6-4102-951a-40b7f198d0a0",
        "cursor": {
          "ref": "dd891c1d-cc3f-4766-869d-f07356bb3ded",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "695b08ea-d0cb-4bc1-b7dc-c8713b1e177a"
        },
        "item": {
          "id": "40f680cc-bfa6-4102-951a-40b7f198d0a0",
          "name": "did:invalid"
        },
        "response": {
          "id": "8a627d74-f165-4ae7-84ad-433b1613b8ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f680cc-bfa6-4102-951a-40b7f198d0a0",
        "cursor": {
          "ref": "dd891c1d-cc3f-4766-869d-f07356bb3ded",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "695b08ea-d0cb-4bc1-b7dc-c8713b1e177a"
        },
        "item": {
          "id": "40f680cc-bfa6-4102-951a-40b7f198d0a0",
          "name": "did:invalid"
        },
        "response": {
          "id": "8a627d74-f165-4ae7-84ad-433b1613b8ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884bc8eb-3bea-42b1-b490-a8f7b348da74",
        "cursor": {
          "ref": "32c67117-693f-40b6-a9e9-771acf2917e2",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3d26254e-f644-4c3f-8946-387f1cc05738"
        },
        "item": {
          "id": "884bc8eb-3bea-42b1-b490-a8f7b348da74",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c1a5ae83-b0aa-4c2e-a92f-104621ddfa81",
          "status": "Not Found",
          "code": 404,
          "responseTime": 90,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef966d0e-007f-4f48-b71f-c55cb42eff12",
        "cursor": {
          "ref": "8a55948b-a804-473a-8b51-4afe75410864",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f9c25624-d02d-44dd-9593-3c1860afbe50"
        },
        "item": {
          "id": "ef966d0e-007f-4f48-b71f-c55cb42eff12",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "1d89bfa7-4015-4b19-b150-e37a3f04bb9a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5a89b9-4199-4fc2-943b-991fb8ce969f",
        "cursor": {
          "ref": "9af6a2ea-6180-4802-8c7f-b5b5022ea8e6",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ba027ebd-1c98-4dd4-90e2-690cbde0b8de"
        },
        "item": {
          "id": "5a5a89b9-4199-4fc2-943b-991fb8ce969f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "15d3c8c7-62ea-410f-84bf-b5fa6c0e2d3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa938ac-b43a-446d-ae58-57e2066fb591",
        "cursor": {
          "ref": "ba2f7902-37b1-4382-989f-3943140df894",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "11a1410d-29df-49d2-938e-9c018ae7ed68"
        },
        "item": {
          "id": "3fa938ac-b43a-446d-ae58-57e2066fb591",
          "name": "identifiers"
        },
        "response": {
          "id": "53254ec4-d16d-43ff-8840-072179fbec87",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce178fd-c076-4479-bae3-e29d0f1f90c0",
        "cursor": {
          "ref": "31859804-4f50-4c77-8909-95d355eabdd1",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "18aac718-85de-4ef2-b51b-bcad814c5411"
        },
        "item": {
          "id": "6ce178fd-c076-4479-bae3-e29d0f1f90c0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "aa5d389c-8f91-4e81-8abe-c9e09646ccee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f19903-bb29-4475-b6b9-dc4d6fc123f8",
        "cursor": {
          "ref": "f64a8e8c-9061-4b01-b3d9-107e366ec866",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8cd1455b-3365-4b7b-a9b0-2f847d17894e"
        },
        "item": {
          "id": "59f19903-bb29-4475-b6b9-dc4d6fc123f8",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "50797c09-a4a4-4715-8cd1-d66c45a6baa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3759ed5d-1186-4e02-b099-2706c059fac7",
        "cursor": {
          "ref": "9bf95919-73a7-4ece-8c3c-fbf805a260d2",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "54154eba-b95a-43e7-afe5-25856aa1972f"
        },
        "item": {
          "id": "3759ed5d-1186-4e02-b099-2706c059fac7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "654fee29-bcc4-4631-857f-da812eb3e0bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b11cd7be-5179-45c2-bc1b-9bf139c32155",
        "cursor": {
          "ref": "572c1199-a33b-4ce0-af94-35f4a677c12b",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "875058c2-99c7-4357-886c-83e162769a50"
        },
        "item": {
          "id": "b11cd7be-5179-45c2-bc1b-9bf139c32155",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e72e4db4-879a-4528-b17c-195fd2e79cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b88f5c39-e97d-4557-8e6e-80ee0a6f7ce8",
        "cursor": {
          "ref": "079e1517-71b6-41c3-bbbe-bc9c24e2daea",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ef467c44-f0ae-452b-bcf7-8eb0f2e74477"
        },
        "item": {
          "id": "b88f5c39-e97d-4557-8e6e-80ee0a6f7ce8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "71570da4-3299-4ba2-b69b-12063fa6e80a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66efbc0a-d78a-4915-a0a4-081321e33efe",
        "cursor": {
          "ref": "7821eb41-2c74-4ede-9a3f-604fdec0246f",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "dec82941-3277-4c4e-b0b5-56c479d1326a"
        },
        "item": {
          "id": "66efbc0a-d78a-4915-a0a4-081321e33efe",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d04f0691-084b-42ac-ba74-0570a5805cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c8a038-a924-48c0-9dc2-dc49a26801c3",
        "cursor": {
          "ref": "2dd9dc56-7774-431e-8eee-bc2cd426a061",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0cd9d7c2-2f8c-4631-ae46-b8acaf677caa"
        },
        "item": {
          "id": "85c8a038-a924-48c0-9dc2-dc49a26801c3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4c4963a6-0e3e-427f-8cba-0ba8bb012c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87201082-7dd7-4374-a957-2042219befa3",
        "cursor": {
          "ref": "d7eab40b-cc8e-4595-89c6-8caec135ad2f",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "77096beb-76da-427a-be0a-cae30c41a10d"
        },
        "item": {
          "id": "87201082-7dd7-4374-a957-2042219befa3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7289d8f3-8e96-4453-aa78-d3b82c83d762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805386b7-67b0-4777-8d30-c8ea81a7996e",
        "cursor": {
          "ref": "145d40bb-b3e9-4ece-98af-9797aa28c18e",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f8c4dc94-760d-4e1e-a88f-96684f4e3b06"
        },
        "item": {
          "id": "805386b7-67b0-4777-8d30-c8ea81a7996e",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "aa6e9c81-e7b1-4847-82bb-08ba02a153b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c4662e9-f3fa-432e-9fc5-b6a81b71a00c",
        "cursor": {
          "ref": "698f1ef0-d733-4ae1-86e4-61737fcf3544",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "dabadb13-95cc-4c52-9530-f12237b7b6ad"
        },
        "item": {
          "id": "8c4662e9-f3fa-432e-9fc5-b6a81b71a00c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a7a67a5d-a780-494e-8112-445f82aa8fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c563be58-10da-4113-81a3-57bc320d5bee",
        "cursor": {
          "ref": "34e3f955-34c1-4f64-b61f-816746145bf7",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e1d9c0e8-b8fa-45e8-97f4-81e63f2cdd08"
        },
        "item": {
          "id": "c563be58-10da-4113-81a3-57bc320d5bee",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "492e9e7d-69c6-4d87-90c9-a1dde7092899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75ae1d46-7422-4b3f-afed-491446032c91",
        "cursor": {
          "ref": "dd8a45e0-5cd6-4394-a95f-7945a7ee7ace",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6ff13ac8-e505-4b39-9dee-74745e57d9b6"
        },
        "item": {
          "id": "75ae1d46-7422-4b3f-afed-491446032c91",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b77da142-d39a-4110-a470-50426ce75bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e60f6a1d-8c89-4402-b2dc-10626b6eb3de",
        "cursor": {
          "ref": "56f33b88-49b1-4307-91b6-98cef54be4c6",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e5a89fe1-d61d-4bd7-a625-483015236de7"
        },
        "item": {
          "id": "e60f6a1d-8c89-4402-b2dc-10626b6eb3de",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c51a3870-a82f-4b65-ab73-8b3975178c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bdc6a88-8b94-4a6a-872a-d557c721c3d2",
        "cursor": {
          "ref": "3df81cf3-8af9-4623-b008-1b43261291ac",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c2388d01-1a7f-4cd3-8732-a3c05fd58891"
        },
        "item": {
          "id": "6bdc6a88-8b94-4a6a-872a-d557c721c3d2",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2b5236dc-6e6d-4fe8-8ca2-dd22ea383f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4dd8b58-fe62-4203-8b94-83bb29fd2d96",
        "cursor": {
          "ref": "f509d229-a21b-4d16-a1a1-e1f973868183",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7da88ef1-8664-4b9a-8c2e-13548d5e80d5"
        },
        "item": {
          "id": "e4dd8b58-fe62-4203-8b94-83bb29fd2d96",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f7c60613-7bac-4b31-917b-cf2f5991e7e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c2c7394-3905-4bad-ae5f-f8444737bce5",
        "cursor": {
          "ref": "747b4192-5fd0-43cf-8cc1-b611ca854d71",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "40094708-13c4-4952-8ce3-311ad6c5c2f3"
        },
        "item": {
          "id": "1c2c7394-3905-4bad-ae5f-f8444737bce5",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a73ad32d-488c-4fcd-b7db-a4649ce3921b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066a0e74-6263-428b-8dd8-e4527f8b1f0f",
        "cursor": {
          "ref": "25ee5f2c-dbaf-432c-a2d1-6d5554f4e5c0",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9221cf14-5f39-4108-879f-0cf48b3be8f0"
        },
        "item": {
          "id": "066a0e74-6263-428b-8dd8-e4527f8b1f0f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c1253adc-8820-4027-aa9c-80f1552c06be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "114119a2-d7f3-454f-9c20-f55953e86af7",
        "cursor": {
          "ref": "97dbeb8f-2d6f-4ff4-94ce-708fe666d09c",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2e8de4dc-0604-43cf-8cd2-465de82c6c67"
        },
        "item": {
          "id": "114119a2-d7f3-454f-9c20-f55953e86af7",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6d11f8e7-e6c0-4eb5-8600-6f12c8cabdf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "227ff3c9-51bf-4a21-8bbe-fb3d6743a06c",
        "cursor": {
          "ref": "bab1e7b4-51ea-4e52-bc5a-c5a2df7546ed",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6fea9082-37f2-472c-acb0-b9c7d32ab520"
        },
        "item": {
          "id": "227ff3c9-51bf-4a21-8bbe-fb3d6743a06c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "88a360e4-a0a0-481a-b77f-457aa54c6354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2f2468-77f3-4e7c-ba6c-68595247a516",
        "cursor": {
          "ref": "2efe6d32-7eb1-4776-b8ef-5af985a2eaea",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "681960f5-dd10-479d-b635-974d7bc43786"
        },
        "item": {
          "id": "fe2f2468-77f3-4e7c-ba6c-68595247a516",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "01fc8d62-0baa-46ba-bba3-3eae193c3e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7810e55c-d6e7-46a4-8881-ea637c58cd78",
        "cursor": {
          "ref": "9dbd78c3-2218-45d1-be38-af5b6973b32a",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "32bdf385-10b8-4d70-a686-354b303f89d0"
        },
        "item": {
          "id": "7810e55c-d6e7-46a4-8881-ea637c58cd78",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2c8298ec-c28e-4ed0-8a84-870d632c04b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f10e4ed-45c4-4835-a245-8df49080575f",
        "cursor": {
          "ref": "7c24bf68-d121-4524-8cd9-6e7c88d38ae8",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e18b182e-b8e2-4580-9053-81008fbc2df8"
        },
        "item": {
          "id": "5f10e4ed-45c4-4835-a245-8df49080575f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6490421d-a871-4041-979e-c783f38b5b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8db1a54-046a-4543-b6c9-042ccdfc2d20",
        "cursor": {
          "ref": "53372934-c736-48ec-a33f-e8370d2247ec",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "78fd2f75-d79b-4e7c-a01a-7ab7bd438f59"
        },
        "item": {
          "id": "d8db1a54-046a-4543-b6c9-042ccdfc2d20",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ef64db46-2026-4d02-8e74-c196278cb646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad51500-32f7-46ae-b0a2-5b73eecb0833",
        "cursor": {
          "ref": "4c3e6ad8-bcb8-40e3-8590-039cb875a5d3",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ebbf292e-68fb-4a05-a575-dc2558a90799"
        },
        "item": {
          "id": "fad51500-32f7-46ae-b0a2-5b73eecb0833",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1fdef8db-501d-4157-96d5-f92e6ebf1c6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d02e23b-099d-40f2-9170-e9f9ceb72386",
        "cursor": {
          "ref": "2326912f-57df-4d40-8cb2-8b3247dc19f6",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "aeaa86e1-f0e8-4993-a61f-1fc45d39794d"
        },
        "item": {
          "id": "3d02e23b-099d-40f2-9170-e9f9ceb72386",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a60316f3-2ef3-4945-b150-65ce5bf3da2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b062d5a-b933-4030-84a2-ef7f7584f6c7",
        "cursor": {
          "ref": "b7bee2dc-302e-434d-8df9-a1696bfdb1cf",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "60c9b80e-0e58-441d-92ff-cb7f02d244ff"
        },
        "item": {
          "id": "0b062d5a-b933-4030-84a2-ef7f7584f6c7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f6383e23-c1be-4a08-9787-9f44b46b0fc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b100362-d1aa-44b7-ac9f-57edcbbe362e",
        "cursor": {
          "ref": "bb1885ee-de57-49be-83b3-60e4b37938e7",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "feb890c0-8e8b-4e73-84b3-c3190d6c4560"
        },
        "item": {
          "id": "5b100362-d1aa-44b7-ac9f-57edcbbe362e",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7641fa20-4a22-42a5-965c-365e62bff056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d258c26e-620d-4785-b9c2-1726c1d4a1dc",
        "cursor": {
          "ref": "851170ff-1641-4f14-8a4c-2553561f187b",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b86428a1-bc52-4ad2-8997-d5718b6de2f1"
        },
        "item": {
          "id": "d258c26e-620d-4785-b9c2-1726c1d4a1dc",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "9117eca7-1713-499f-beea-46414bd6d651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e50dcd-a69f-4c5c-9b19-fb262b8c4a38",
        "cursor": {
          "ref": "dfc5fe34-4f3e-458b-ab6b-24c1523aa3de",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c475860f-6591-4360-809d-76fe056f3906"
        },
        "item": {
          "id": "75e50dcd-a69f-4c5c-9b19-fb262b8c4a38",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "11d06624-ec07-4e15-b449-5f653a571478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30815e86-807b-48af-9f73-e65c8c83b4bc",
        "cursor": {
          "ref": "81078766-a5d0-491b-8ba1-5dc7efd799b5",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "58ad678d-d13b-4af6-95c4-20747c8eb31d"
        },
        "item": {
          "id": "30815e86-807b-48af-9f73-e65c8c83b4bc",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3ab71e9e-cd3a-4d65-ae1f-0a14a6a8f3f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a43e22-7a07-4378-88bd-eb7c564c4e43",
        "cursor": {
          "ref": "1cd6de74-569b-42f2-a5ef-f9fcbf2f74e9",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fb287b85-0a3e-4d95-91c5-a2b187e715fe"
        },
        "item": {
          "id": "b8a43e22-7a07-4378-88bd-eb7c564c4e43",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f5361fe5-1c96-4f4a-afef-dc3453ac3a5f",
          "status": "Created",
          "code": 201,
          "responseTime": 671,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "03bdc856-197f-4555-bbac-bda56f743372",
        "cursor": {
          "ref": "192a4609-f0bf-4da7-b6ef-e5b879e42a54",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f06ed4e1-af5f-4390-8208-ea3b7aa18042"
        },
        "item": {
          "id": "03bdc856-197f-4555-bbac-bda56f743372",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f6afd676-bd0f-4c05-a3cd-6e325dbf3ec2",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "345641cb-c89f-4073-b616-105f25d4659a",
        "cursor": {
          "ref": "8240a96d-89c8-40ee-a9ad-04be85783480",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "29ba3e2b-795c-4ece-ac32-dd3fcd36a48d"
        },
        "item": {
          "id": "345641cb-c89f-4073-b616-105f25d4659a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "feb1e927-f9c0-4e5a-b496-982df1db94f3",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "323a24df-a132-476c-9361-9bad48aa876e",
        "cursor": {
          "ref": "9ec8794b-209a-44ce-a9d1-9a04dc0b3c68",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0c26989b-1650-4bdb-90a4-94ff258db277"
        },
        "item": {
          "id": "323a24df-a132-476c-9361-9bad48aa876e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "02bbac00-eced-49f8-9ef9-7eab1517b602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2550e854-d54f-4149-8bc3-44d913e826ee",
        "cursor": {
          "ref": "99e252a4-1d69-41c1-af29-06e16c7b264e",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d7922da4-35f5-4015-9a00-e34ed20f0fa0"
        },
        "item": {
          "id": "2550e854-d54f-4149-8bc3-44d913e826ee",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1cecbbc1-49af-4391-b298-531c355cbe6b",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "60c30748-fc1e-47da-bb8b-5e9ad7ed6ce4",
        "cursor": {
          "ref": "a49f1549-56f2-4c14-84dd-4f9cb3659d27",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5957322c-8e68-47c6-a2aa-024c3d3a217d"
        },
        "item": {
          "id": "60c30748-fc1e-47da-bb8b-5e9ad7ed6ce4",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d3a5fd1b-e4a8-40a4-ab9c-d289e092fc31",
          "status": "Created",
          "code": 201,
          "responseTime": 215,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ec3d0705-5b0c-4993-ad2c-d7037c7df986",
        "cursor": {
          "ref": "099f7352-b6f4-44bb-a993-189be1af9bf0",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "efb112db-82f3-438d-ad54-5600886215e4"
        },
        "item": {
          "id": "ec3d0705-5b0c-4993-ad2c-d7037c7df986",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c3501613-0edd-4cd6-95ee-b8b3dd3dce64",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "dcb4d6a9-70ab-47a5-9bf6-ae85d70ad996",
        "cursor": {
          "ref": "0b76bd01-8c92-44a7-a5e0-01fa27221f6e",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "37b2bb4b-718f-4a67-9cee-da0d44c3b01e"
        },
        "item": {
          "id": "dcb4d6a9-70ab-47a5-9bf6-ae85d70ad996",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "67896540-55ee-40fa-932d-ed4a5ce595d6",
          "status": "Created",
          "code": 201,
          "responseTime": 225,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "595fbb2f-2bfe-43a7-8800-7a70caa39231",
        "cursor": {
          "ref": "cbeb7844-8fc6-4587-945b-94b8f342cbae",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "679be281-2d5b-41a7-a8b7-5d532ee4a33a"
        },
        "item": {
          "id": "595fbb2f-2bfe-43a7-8800-7a70caa39231",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d39a4a66-4068-4a2f-a17c-89ad74b7cf76",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "288dfeb9-564d-46ac-9ff7-b72bc9f32574",
        "cursor": {
          "ref": "937d0ad6-5fbc-405d-87bd-b26d50904ab0",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "bb96dc5d-735c-4997-b746-36fa0138b31c"
        },
        "item": {
          "id": "288dfeb9-564d-46ac-9ff7-b72bc9f32574",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "32ebdc15-af8e-4828-be31-582518f82ba4",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "0782063f-f213-4d18-a8a6-dbf8fb92cf27",
        "cursor": {
          "ref": "56ba082f-edc1-400c-8635-9f79cd5af97d",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3f1e3811-c435-49b6-8c6f-5630c5740a7c"
        },
        "item": {
          "id": "0782063f-f213-4d18-a8a6-dbf8fb92cf27",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d7bc08cb-3362-43d8-b4c6-26bbdbdc77ee",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "895ba92d-5d39-4b6d-a366-323a0ea6f4e0",
        "cursor": {
          "ref": "472e377e-78b1-456a-af0f-28c5ef99921d",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "cf9b14e2-19cb-445d-916d-3e24d068bb73"
        },
        "item": {
          "id": "895ba92d-5d39-4b6d-a366-323a0ea6f4e0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "80a46138-64b0-4f5b-a884-ff9c2ec77d5a",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "20cf7325-3edc-44b8-b399-dd33b96e3e8c",
        "cursor": {
          "ref": "996129c7-989e-4a9c-acd0-d0eccf2c7aae",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "aa7c8d5f-da88-4a5f-a7bd-0f08b20e1cd9"
        },
        "item": {
          "id": "20cf7325-3edc-44b8-b399-dd33b96e3e8c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "61f7ff51-9944-4d7f-a768-62ab373ce06d",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "d7448770-7f96-48c7-86cc-bcb44d464b03",
        "cursor": {
          "ref": "c01f4f0b-5559-49e5-9eb8-222fe9043f7e",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "0266515b-f299-4cdb-9d8a-c34c95d06107"
        },
        "item": {
          "id": "d7448770-7f96-48c7-86cc-bcb44d464b03",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d5a51a6d-1f21-48d1-b123-870ccc5c6429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c07162-b6c8-4c21-b3a8-1246cfc2843a",
        "cursor": {
          "ref": "f847ced0-2a05-40c3-bee3-1a5c18a73eff",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6bff9e31-2bb3-4c35-ba8b-85cb61ac3b50"
        },
        "item": {
          "id": "a6c07162-b6c8-4c21-b3a8-1246cfc2843a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c0820cf9-2abe-426c-a0c0-bf296104cd17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96268322-724f-4fff-8863-a5770915d0e2",
        "cursor": {
          "ref": "c119bb94-6c40-4806-96f1-72cef40951a5",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "68056ff7-71a9-4231-9f25-078f005667a9"
        },
        "item": {
          "id": "96268322-724f-4fff-8863-a5770915d0e2",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4e223a2f-a979-4b96-86e9-23b09f68e970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed9628f6-9282-4000-9438-6ca76b5f87e9",
        "cursor": {
          "ref": "c0d7b0bb-0ae7-447d-a488-a292deb214c7",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b0553464-093b-4980-b245-4b782ad1b359"
        },
        "item": {
          "id": "ed9628f6-9282-4000-9438-6ca76b5f87e9",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "12796ce8-b296-44f5-aaa0-e91de446bc79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "413bae74-9901-43c5-aac8-199fd0ab92c0",
        "cursor": {
          "ref": "ae0ebaf1-9770-4971-b5ba-8d5d26b0c61e",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4b2e3c15-a4e6-4583-ad93-7c8f9411cbd4"
        },
        "item": {
          "id": "413bae74-9901-43c5-aac8-199fd0ab92c0",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3712402d-6e2c-46da-aafa-062e3e6167e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5498448-7ca1-4c58-bb25-c89ba8566220",
        "cursor": {
          "ref": "f6620358-186b-436e-866f-f0b6c57ddfb7",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b7f660ce-b3fc-4b39-9eb8-c2d669ffb4d2"
        },
        "item": {
          "id": "f5498448-7ca1-4c58-bb25-c89ba8566220",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "99a09bf4-4fd8-42ee-9863-db77d8cb1eed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05be7ac-00c1-48cd-8a48-209788198c53",
        "cursor": {
          "ref": "cd4a3594-002b-4602-ac58-1a305c2548c9",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6a5dd746-719c-4878-b5ed-16c2caef4d24"
        },
        "item": {
          "id": "d05be7ac-00c1-48cd-8a48-209788198c53",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d5ec669c-58fe-4821-84e4-5b410277dba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "499343bb-436d-4604-855e-5071bc30c08e",
        "cursor": {
          "ref": "a34fd257-6591-447d-8612-3ae35f1630fd",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ab8f5ef9-bc1d-462e-9863-df36fb6dd686"
        },
        "item": {
          "id": "499343bb-436d-4604-855e-5071bc30c08e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "871e508f-22b5-4832-b002-bbb9651cbc47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8bcba6a-9ebc-4f2f-a13a-86cb78c65791",
        "cursor": {
          "ref": "2b696a23-c3f3-4201-9a86-9d9635343192",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "1ad790d7-bf1a-469c-aa80-5c3fd528b703"
        },
        "item": {
          "id": "c8bcba6a-9ebc-4f2f-a13a-86cb78c65791",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "334cff94-3c9f-42a8-8ca4-21a403550cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e43018-c5da-41cc-b527-758a80fd27df",
        "cursor": {
          "ref": "b64433a9-23a0-4c5b-9ff7-eeaca537ecce",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "49c268d4-49e2-42ee-8040-a9a16bf415c0"
        },
        "item": {
          "id": "04e43018-c5da-41cc-b527-758a80fd27df",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "87d1505c-f462-412e-a362-1a0fee7aa293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a150ad78-57d8-434c-9821-1c7c0e038da3",
        "cursor": {
          "ref": "5dca2c3e-677d-4f09-9376-7cfc4ef13f79",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6bc298a0-dfa7-4cb5-af10-224434c617bd"
        },
        "item": {
          "id": "a150ad78-57d8-434c-9821-1c7c0e038da3",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0a97d9b9-3748-4b7e-a5df-a2a6714591ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac24438-2a73-4bf3-9e29-60338f8814d7",
        "cursor": {
          "ref": "4f1b7d6b-1542-4477-90d7-2232f8668e24",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "63491ceb-be32-4dc0-82e3-a745212e3d99"
        },
        "item": {
          "id": "9ac24438-2a73-4bf3-9e29-60338f8814d7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "75b01129-3791-4e8e-8f7e-c5d849866084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3934eed-ef3a-4fae-924e-727e4ec677c0",
        "cursor": {
          "ref": "80d2af39-b913-4ea3-a501-0cda18d1e496",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e2424b5b-a14e-4639-acc3-ee97a26cbab2"
        },
        "item": {
          "id": "a3934eed-ef3a-4fae-924e-727e4ec677c0",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "abe6c1f0-50de-4b2f-bc57-a7d06fd48ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b97673-2cc8-44d7-ad86-0efc4bcf0018",
        "cursor": {
          "ref": "8b6bdd1c-6f4a-42aa-b67f-44a18e75f0e4",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e198ac3e-9545-4291-a281-ccf99eb61f72"
        },
        "item": {
          "id": "62b97673-2cc8-44d7-ad86-0efc4bcf0018",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "815d8697-c1b2-499a-bfa6-6dd610c6f2f3",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "b4a98797-969a-40ed-9294-26acbc7b62f5",
        "cursor": {
          "ref": "14cc18ad-eea0-4a3d-9d4d-fe851e838602",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6a7cae6a-b15d-4a2a-933e-38980434eba1"
        },
        "item": {
          "id": "b4a98797-969a-40ed-9294-26acbc7b62f5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "bc53ac92-65af-4d3a-88e6-3b92d796c554",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "8367dc4d-ff4c-4ab2-9246-f8bc352af574",
        "cursor": {
          "ref": "603a7954-43a7-4729-8280-80b79fafbd51",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "57117610-4d3b-4762-9f8b-ded39bd086e6"
        },
        "item": {
          "id": "8367dc4d-ff4c-4ab2-9246-f8bc352af574",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3457d44a-76a9-4c95-b7ee-c23d9661c954",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "a31c4bbd-b714-403f-b8a9-4f2e9531d155",
        "cursor": {
          "ref": "fa146894-955a-4083-8db0-39b37df89127",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c522117e-8551-47c3-9b0e-b90b53d3bf63"
        },
        "item": {
          "id": "a31c4bbd-b714-403f-b8a9-4f2e9531d155",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "03610195-09cd-4e06-a840-7a32b896345c",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "ec4cc448-d0a1-4e2d-802e-6f7ebcc38a30",
        "cursor": {
          "ref": "8ff10bfd-c357-4bf2-9043-8b1c4b4e8dfc",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "05439d50-52df-4151-8d0a-328c0a4eb811"
        },
        "item": {
          "id": "ec4cc448-d0a1-4e2d-802e-6f7ebcc38a30",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7d5cdbce-1c21-45be-8042-4825fe09e219",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "7548b409-e1bd-4b88-baed-66bba4acde6c",
        "cursor": {
          "ref": "068768da-4ac1-4b87-a964-422f83012968",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1d0b53e9-00a2-46a4-9332-3de7dc4d17a1"
        },
        "item": {
          "id": "7548b409-e1bd-4b88-baed-66bba4acde6c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "83789267-270b-44e2-b1f3-cdce6fcfe005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cae984e-73bd-48cf-ab41-3ef4e237c98a",
        "cursor": {
          "ref": "df2aa06b-19ac-42e3-9725-6fdf2249c965",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "95125522-abf8-4da4-bb2c-818462991257"
        },
        "item": {
          "id": "1cae984e-73bd-48cf-ab41-3ef4e237c98a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "94ffc42b-8a78-4e21-815d-caf00e901521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef2929e-b26f-4002-b8b1-9200d91e3cac",
        "cursor": {
          "ref": "e9d24e29-1e20-4682-bb9f-80cd3f114af8",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "0dcdb9c9-0ebd-455f-a8aa-fb410840c6bb"
        },
        "item": {
          "id": "3ef2929e-b26f-4002-b8b1-9200d91e3cac",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3bbb9ecf-06a5-4ca1-b52c-091601b63c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77b79b3-07a4-407f-a3d0-b63f4e33cb1c",
        "cursor": {
          "ref": "81a22f5e-d53d-4687-a74d-280386d6d7ba",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "660f62a6-8764-44aa-ad96-336f5fd81a72"
        },
        "item": {
          "id": "f77b79b3-07a4-407f-a3d0-b63f4e33cb1c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7edf61e5-2a1d-4754-b556-77bf85bc51cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4410a2a9-1201-4e70-bb4f-7db93c8910d8",
        "cursor": {
          "ref": "b842ca30-fa0a-422c-9a73-e9d0279c59ea",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "aa95cddc-0a2f-4a19-ac23-7ba9f3570486"
        },
        "item": {
          "id": "4410a2a9-1201-4e70-bb4f-7db93c8910d8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "cea3fa98-e51d-489f-b935-0759e74a08ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "221325b1-b1c4-4542-8889-c5b37e3d8414",
        "cursor": {
          "ref": "30aefce8-b735-4ec0-90bb-29da429c0de0",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3284cd5b-20ea-4c8a-86a2-192d98da3736"
        },
        "item": {
          "id": "221325b1-b1c4-4542-8889-c5b37e3d8414",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "63983e2f-7aaa-45e8-956b-990163c97b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c92a2a-7916-4fa4-8ac8-086d4a4f8654",
        "cursor": {
          "ref": "1bf4299e-8868-44bc-8cbb-d118661fc9d3",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "32b8fb57-b8a7-4989-b670-f220e9463c63"
        },
        "item": {
          "id": "a0c92a2a-7916-4fa4-8ac8-086d4a4f8654",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b22d1b2b-6909-40c4-a1ce-6258cd8ff352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5192c508-0f72-4119-a89b-455cd35b0434",
        "cursor": {
          "ref": "0075b969-44f9-4ccc-8573-ec486e3a9a85",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "439e0b59-73ed-467c-b656-0605b5342d5b"
        },
        "item": {
          "id": "5192c508-0f72-4119-a89b-455cd35b0434",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "65cd818a-6c48-434b-8b3d-82303d54b1ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57964be5-afc9-4680-9600-caa77aa626fc",
        "cursor": {
          "ref": "88525636-199f-4ffc-9cda-f1cd34d0e6bf",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "608f6a86-f730-47e7-b870-1ffe3b6e616c"
        },
        "item": {
          "id": "57964be5-afc9-4680-9600-caa77aa626fc",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c65fb631-42ce-46f3-bc82-16dbc0ab0b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cebec0f-e0fa-4c0d-9a29-b95cf70e04e2",
        "cursor": {
          "ref": "0747add2-90eb-487d-b544-d6a9fb115143",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e7f11cdb-3600-4165-8a11-2c4c50002af0"
        },
        "item": {
          "id": "6cebec0f-e0fa-4c0d-9a29-b95cf70e04e2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7e606690-ab9b-41a4-8d9f-e3404acff262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c19e5cc-8f2e-46a6-a380-ba033352c95c",
        "cursor": {
          "ref": "cce37cca-71b6-4d91-be5e-c8e97232ed31",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "358bb6b0-b61a-4767-b376-322a491d331e"
        },
        "item": {
          "id": "1c19e5cc-8f2e-46a6-a380-ba033352c95c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "dcbbfc9f-869a-4bbb-b301-61c340bba5ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa16f0ad-b97e-4cff-b0c5-21780a5e7071",
        "cursor": {
          "ref": "2b52af31-c889-4395-8fde-7512f1552b39",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "762dbaef-4fac-416b-b072-3a924da758fc"
        },
        "item": {
          "id": "fa16f0ad-b97e-4cff-b0c5-21780a5e7071",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9f8c6188-da42-4ebd-94f4-985d5c195244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d7f07a-95ae-4749-b708-9ab62bc10970",
        "cursor": {
          "ref": "5af3d475-cfa1-4eea-86a5-720db4606786",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "35b6ce17-1639-4ca6-8ef2-57d3ecb0341d"
        },
        "item": {
          "id": "d4d7f07a-95ae-4749-b708-9ab62bc10970",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3f4f20cb-5ea6-473d-b992-96491fa00bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a2a89b7-19dc-4b23-8d9f-cd71bafe5f75",
        "cursor": {
          "ref": "536d48a8-3fdc-4778-96e3-09e816ef7528",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "805e4b8d-193f-4b61-bf60-3618b686b4ef"
        },
        "item": {
          "id": "7a2a89b7-19dc-4b23-8d9f-cd71bafe5f75",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "7a3f449d-2dfc-4fa4-8956-e4cc0c299a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6fd78bb-3adf-496c-9d66-e2da9267512e",
        "cursor": {
          "ref": "db09ff6e-c389-4ef3-bf40-7f629d716c52",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "de168065-e491-4fbc-9b20-ea47bebe4f14"
        },
        "item": {
          "id": "b6fd78bb-3adf-496c-9d66-e2da9267512e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9e7d1768-de9d-437f-8694-5d4ccb3c982e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6028d0b2-b619-464f-8c11-e8af3233fbb5",
        "cursor": {
          "ref": "71dcbdc3-7cb9-413c-9595-1727335049d9",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "3a41eb1c-724b-4c52-9af0-90dea9caa84b"
        },
        "item": {
          "id": "6028d0b2-b619-464f-8c11-e8af3233fbb5",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0e8e0f9d-f2a5-45ef-90aa-a4ccaa8e9c89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a2cae6e-7142-42f4-a71e-88722c46da13",
        "cursor": {
          "ref": "18e37c9b-d57c-4a58-a06b-db3bd8dca88f",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ae9f591d-6327-480c-be5f-8eb3452a0ef4"
        },
        "item": {
          "id": "5a2cae6e-7142-42f4-a71e-88722c46da13",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "eb5c90fc-04ea-46f1-b0dc-29aec2bb8520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f97a2e-814e-44b8-88ee-fc016c3969af",
        "cursor": {
          "ref": "4199f54d-79dc-46c9-bdb6-5efc33ef1747",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "0d600467-d151-47d0-b553-63a5ade534f0"
        },
        "item": {
          "id": "d0f97a2e-814e-44b8-88ee-fc016c3969af",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ad68606a-f05a-4641-a1cc-9552de810ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ce40ae-7982-4994-9ec2-8423cee06bc8",
        "cursor": {
          "ref": "ac81efee-4cd6-440c-80b6-930ba07be895",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "7f5b76f3-50d7-4eb1-82ca-3b60c35dcf33"
        },
        "item": {
          "id": "f3ce40ae-7982-4994-9ec2-8423cee06bc8",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "511241d8-42ca-43e6-907a-b2f513ca194e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddec03d7-a62d-47cd-92f2-37c7b5ed4889",
        "cursor": {
          "ref": "a9e73d67-9bf2-41cd-8609-b697da2b05c2",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "2177d472-b563-4b30-935d-07e61990f39d"
        },
        "item": {
          "id": "ddec03d7-a62d-47cd-92f2-37c7b5ed4889",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b460ce98-6a8f-48ba-b93a-9b66834d5b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e0084b-930c-4769-a6d5-8f0239886c85",
        "cursor": {
          "ref": "f71c8444-af90-480f-b9b2-20c15eabdfdc",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ee917190-63aa-4fde-ba0b-c3f779fa4082"
        },
        "item": {
          "id": "48e0084b-930c-4769-a6d5-8f0239886c85",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5faa4a81-c393-4ace-a4ac-037397bf6228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "761cb44f-205f-47c0-98a7-07c7b90f97ae",
        "cursor": {
          "ref": "4ecc05a3-e73f-4f30-a93f-21464db2abf4",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "0d49e183-6984-411d-80a9-6dd19067e7a9"
        },
        "item": {
          "id": "761cb44f-205f-47c0-98a7-07c7b90f97ae",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ace57ca0-5e82-44be-a2be-8d00882b8444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7a9a8a8-fe3a-45e3-bad0-b600f1d9e7ec",
        "cursor": {
          "ref": "dde26b3d-34b9-4766-8c26-96fcdcb2e473",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e4a93a60-3ad1-42b8-a242-9d12db072930"
        },
        "item": {
          "id": "b7a9a8a8-fe3a-45e3-bad0-b600f1d9e7ec",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "26d0b6dd-a579-4721-8bbe-3f81c5973792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51b2b91-9806-41f9-9fb5-fa0082e6b847",
        "cursor": {
          "ref": "4125d7f3-bd52-48df-a5d1-f924d1626a21",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "74f921b8-be56-48a2-a4fc-dbf67182cbda"
        },
        "item": {
          "id": "e51b2b91-9806-41f9-9fb5-fa0082e6b847",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "07a482dc-aae4-48e4-9345-a754dea10e4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef66293f-a241-42f0-b7be-9cdded3f7bf2",
        "cursor": {
          "ref": "593ca58e-d93c-46f0-a33b-06937d6985ca",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "65eff123-2b81-44c2-bc17-720a5bce8469"
        },
        "item": {
          "id": "ef66293f-a241-42f0-b7be-9cdded3f7bf2",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "5bd628f0-35eb-4e5d-947f-059f1546cd23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5142ecc9-9054-49b5-b2f8-ac7d24c08faf",
        "cursor": {
          "ref": "0a18c6c9-bf16-424a-aad0-40cb3deb2033",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c2a4c2a7-a3fc-4594-993d-bc7a6fde49db"
        },
        "item": {
          "id": "5142ecc9-9054-49b5-b2f8-ac7d24c08faf",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9f12d7a5-561a-47b0-9b46-224993e81e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8562823d-e463-4d44-90cd-acd1b6af026f",
        "cursor": {
          "ref": "1a0844e6-2468-4fe1-82f8-e23ea066a88c",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "31736f07-4428-441e-8626-242571e117f8"
        },
        "item": {
          "id": "8562823d-e463-4d44-90cd-acd1b6af026f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "65da657f-60d4-4f23-8c75-224e8e22cdca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b74fe81-986a-4276-9f1a-032b3d958fe0",
        "cursor": {
          "ref": "6a5c1c8e-2af6-4eb5-8992-5935ae10a45d",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "cf0e3883-09d9-4a43-baf4-e7f74c1492f0"
        },
        "item": {
          "id": "4b74fe81-986a-4276-9f1a-032b3d958fe0",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "03276c3e-f8e6-4a70-8408-6cefbb66d9bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e25aa5fd-d7fc-40d3-abff-e4b21c0320cf",
        "cursor": {
          "ref": "f37312f2-afeb-483f-9943-7f32fc565d32",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b3d9144c-344e-421a-ba51-4a3d3b775893"
        },
        "item": {
          "id": "e25aa5fd-d7fc-40d3-abff-e4b21c0320cf",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "fcb4f17b-5a8a-4014-8e0c-73ef186c1653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "531b3adf-edeb-45e1-be57-6b32c1752fd5",
        "cursor": {
          "ref": "e4b39a26-4ec4-4afb-9e85-255dad5a88a3",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4b0a976b-2db6-4977-b6ac-0ab02d2075a2"
        },
        "item": {
          "id": "531b3adf-edeb-45e1-be57-6b32c1752fd5",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "cb8ce2d0-f2f5-4167-83f6-9189f9daf189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92ab94cf-1c1a-4a09-86af-8fa7059fc571",
        "cursor": {
          "ref": "bd467337-68a3-4a67-a7de-49ee37cdfc1f",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d24aceaf-90f3-4d02-89c6-f4994697d37d"
        },
        "item": {
          "id": "92ab94cf-1c1a-4a09-86af-8fa7059fc571",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a3caa1eb-63fe-4eaa-a30d-cb409b3e5973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fab3ca5-bbaa-41a7-bee4-9105499d9125",
        "cursor": {
          "ref": "9edfbea3-c1fb-44cb-a304-e87b141f040b",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "763df2c0-d3c3-4699-a97b-ca7a3ac82789"
        },
        "item": {
          "id": "0fab3ca5-bbaa-41a7-bee4-9105499d9125",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a5674ea6-e1a8-40e4-ac14-f6df193d7134",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1347c5e0-6aa4-4f7a-b136-e38ca31f344e",
        "cursor": {
          "ref": "a903aeb1-cd8d-4268-b977-adc6003f40ca",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a11f472b-47e2-4b97-8f00-4f487287984f"
        },
        "item": {
          "id": "1347c5e0-6aa4-4f7a-b136-e38ca31f344e",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "ebd06c54-2632-49b3-a7b4-cdda59dc66fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "06b1633a-5a90-4193-87b7-ac69c31e486b",
        "cursor": {
          "ref": "fcd3ee0f-e21e-4671-a924-739a37cc244a",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "55d148d9-b50c-4132-a27b-f798ebe727a9"
        },
        "item": {
          "id": "06b1633a-5a90-4193-87b7-ac69c31e486b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "51f0f3b4-e1be-4d62-8258-caabb9292616",
          "status": "Created",
          "code": 201,
          "responseTime": 206,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ecb2cfe-4ac1-43d9-9f9e-7d85280f9257",
        "cursor": {
          "ref": "12b573f9-a5e1-48a7-8a1f-adef0a53bf4d",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9a09968d-94c2-490b-8931-aa356172f9b6"
        },
        "item": {
          "id": "4ecb2cfe-4ac1-43d9-9f9e-7d85280f9257",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6f02228c-40a9-459f-b6ca-77ae49b69504",
          "status": "Created",
          "code": 201,
          "responseTime": 218,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b42367-0620-4ddf-b4f7-855b6cf3c2b5",
        "cursor": {
          "ref": "efce3707-14bf-4995-a33b-21d716527807",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4c8e1cb5-b613-48e0-a349-b9e030049356"
        },
        "item": {
          "id": "36b42367-0620-4ddf-b4f7-855b6cf3c2b5",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "38e55df7-8bc6-4d3a-8ff8-9830cf9ae027",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed722eff-db95-4118-82f8-4f7bd672a63a",
        "cursor": {
          "ref": "7fa8b20a-3e4e-44b3-bdc0-67fb6f408584",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b85ffb9f-2106-4dc8-9fc0-f3ba1a7a6707"
        },
        "item": {
          "id": "ed722eff-db95-4118-82f8-4f7bd672a63a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e3c8a4dd-eb97-40fc-a740-1b4ba1dcf611",
          "status": "Created",
          "code": 201,
          "responseTime": 210,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "86d60b61-0573-4410-87a9-7756167e6fff",
        "cursor": {
          "ref": "1fda4ef8-91dc-4ebb-af88-5b4f3f19dbba",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "14dc85f9-1bd9-4ad7-a75e-9fd44fc3552d"
        },
        "item": {
          "id": "86d60b61-0573-4410-87a9-7756167e6fff",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a7080011-88c0-48ff-9a26-badcbcaf6d07",
          "status": "Created",
          "code": 201,
          "responseTime": 204,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-29T00:34:32.547Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-29T00:34:32.547Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "5a46b5ce-2db8-45b2-87f2-117505671b43",
        "cursor": {
          "ref": "170545b1-5a54-4193-822d-6ea277129348",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b5694f83-d793-4dd3-940e-0f425391acc4"
        },
        "item": {
          "id": "5a46b5ce-2db8-45b2-87f2-117505671b43",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0baddf23-3b1b-4820-8bd2-1b2c37380f70",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24bf7b6f-bdb1-4440-afc9-f63a85befcef",
        "cursor": {
          "ref": "81542fea-1631-43aa-98f3-4e838ed9fc81",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "abdbc818-9d0c-48a6-81ab-510551db7f37"
        },
        "item": {
          "id": "24bf7b6f-bdb1-4440-afc9-f63a85befcef",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f6a0cc99-f47b-4610-ba92-8b6f2044b85f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ffc124-894b-447c-8db7-a14f90d5479a",
        "cursor": {
          "ref": "9d97b5be-1133-4111-b4d1-5b27e3c9c0fc",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "872eb519-096a-43aa-ba36-4bf9ef2be9b1"
        },
        "item": {
          "id": "e2ffc124-894b-447c-8db7-a14f90d5479a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e870ec81-4890-4e2d-9eaf-54a09818648e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "247ab73d-58f1-4e48-96bb-9e9f3fe14a95",
        "cursor": {
          "ref": "b6b73e62-7bb9-43a9-82c5-4cc94ffb5215",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d9115bd5-4d2c-438e-8222-ed253857a9ec"
        },
        "item": {
          "id": "247ab73d-58f1-4e48-96bb-9e9f3fe14a95",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1f8f0429-a4f0-424c-83f4-4459a2b10a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b681f7ee-0998-4d27-9df4-739f4ac98797",
        "cursor": {
          "ref": "f1be2743-70b5-4b08-9f1c-79a0e90c1ffd",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3a534c51-8b57-4627-873b-8abd628a34ab"
        },
        "item": {
          "id": "b681f7ee-0998-4d27-9df4-739f4ac98797",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7667ed7d-2392-43ed-b388-8bacee578075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bbd264c-4a90-4658-885a-5ca5c0f8ef13",
        "cursor": {
          "ref": "c988744e-e648-4423-b2d8-f4857c448887",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9cc41dd9-bf3b-42bf-bb3e-6060a0ed1db9"
        },
        "item": {
          "id": "7bbd264c-4a90-4658-885a-5ca5c0f8ef13",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c069124f-0743-4a93-bcbd-014e8fe02037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c7a33c4-06cd-48d4-92a2-8e00e1be21c1",
        "cursor": {
          "ref": "1584d5ee-a925-4a20-9d6c-702155bab542",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "94eb1f12-f1ae-4480-ae9a-188f77cc3a36"
        },
        "item": {
          "id": "8c7a33c4-06cd-48d4-92a2-8e00e1be21c1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2d802613-04f6-4c55-931d-509c67e2d4d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "340dd69c-dade-4f0b-baeb-1a7e7260b8b5",
        "cursor": {
          "ref": "55a5e18d-6fa7-4406-b635-0f25c4d23395",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7668f668-6925-49ed-8152-7a854885934c"
        },
        "item": {
          "id": "340dd69c-dade-4f0b-baeb-1a7e7260b8b5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8c0eed82-dade-453f-b9dd-ca12ecf0e414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "127f3079-40ba-415c-90b3-83734b878de9",
        "cursor": {
          "ref": "5d27adb6-c3ec-40e7-a2c2-800170e2acaa",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d021e763-6383-4cc5-a468-4140630eb9ba"
        },
        "item": {
          "id": "127f3079-40ba-415c-90b3-83734b878de9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d72e5ddf-d60d-44d1-b2b9-a3dc5f26541e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b93a124-3bee-4cc7-b9a4-e0bc6c545766",
        "cursor": {
          "ref": "9d8bed5f-33b3-461b-b496-1e1b8c7fd995",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "c5200df3-07b4-4e37-a5a1-adc99928520c"
        },
        "item": {
          "id": "6b93a124-3bee-4cc7-b9a4-e0bc6c545766",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "604f6666-4bd5-4600-b296-182fe4b16bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed97d4c-3bcd-4668-a939-e1b40fb4f000",
        "cursor": {
          "ref": "d8970e77-866d-4f25-94aa-681892017bc8",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7dd07124-80fb-4b32-b533-52917e47dade"
        },
        "item": {
          "id": "5ed97d4c-3bcd-4668-a939-e1b40fb4f000",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b2ac6a72-fdb9-4ad7-bb65-3728c6656db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4db573-755a-4b91-8fcd-0417ad4c9a0f",
        "cursor": {
          "ref": "37b61559-5193-4057-a580-eb4c78425702",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4d11648d-7fbc-440b-8141-a7b4a09e31fc"
        },
        "item": {
          "id": "2d4db573-755a-4b91-8fcd-0417ad4c9a0f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "453fe733-2fa5-4ff9-b2a4-9ed517c5de0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "581162de-4400-40ea-b8e1-ac01f9e8600b",
        "cursor": {
          "ref": "c1a87138-928e-409c-8626-56e4d825431b",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "08bf5b51-528f-4c81-b456-e228a89fed22"
        },
        "item": {
          "id": "581162de-4400-40ea-b8e1-ac01f9e8600b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2940b288-2817-4c58-8204-a85e8738689b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a4e1c0-bf69-4c39-88b3-ba5f2b8a49bc",
        "cursor": {
          "ref": "9c3ebeb6-0f63-4877-ae82-21a682a9c32d",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c9957cca-1685-488a-8ad3-ed272386667a"
        },
        "item": {
          "id": "86a4e1c0-bf69-4c39-88b3-ba5f2b8a49bc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c7fd53a5-7360-468e-9ee2-1c96373ec9ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "0e980b26-ea82-4846-b197-fe0a0968ce49",
        "cursor": {
          "ref": "645eb693-243c-4d7e-9d00-25d473722b62",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5c324fed-6371-459b-b0e5-84e905c4f0cc"
        },
        "item": {
          "id": "0e980b26-ea82-4846-b197-fe0a0968ce49",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "50bf6c6d-5203-4b5b-bc1d-ad4511ccb650",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "f4d56109-8ab3-4bd7-be17-4b74b89b2600",
        "cursor": {
          "ref": "303fc9d6-ebef-45e0-8a50-5da20a96f1e9",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6545bb09-7d20-4450-92d2-46bd0e7d0777"
        },
        "item": {
          "id": "f4d56109-8ab3-4bd7-be17-4b74b89b2600",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "79fd8214-b366-429f-800b-d779f1a478b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715bdd00-039e-45b4-8ed6-00a6285e3928",
        "cursor": {
          "ref": "e5aa687d-2d5d-4602-935c-c3e9c652f244",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7e19c732-5ff9-452b-a236-62254045db55"
        },
        "item": {
          "id": "715bdd00-039e-45b4-8ed6-00a6285e3928",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "88ba3f9e-7be6-421a-b885-b6dac7c3b14e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ea3ae9-bebf-4223-a827-8c5cfee33fae",
        "cursor": {
          "ref": "e01a3824-b5a6-4f73-a034-a6444a111e3d",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5b0dedd9-4269-4086-8b72-cdfc7365f5da"
        },
        "item": {
          "id": "d1ea3ae9-bebf-4223-a827-8c5cfee33fae",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6443378c-278d-4042-89d3-491d260d4d87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ba3ca3-05f6-4e19-85dc-a86b8bdca713",
        "cursor": {
          "ref": "eb40dd95-15c6-4cf7-88dc-898a00313ebd",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "daa7afd3-ca14-41b1-8916-321dda198ea0"
        },
        "item": {
          "id": "c6ba3ca3-05f6-4e19-85dc-a86b8bdca713",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5bbb96f6-2ae4-4c53-8aea-cb46b97ceef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66009ff6-0751-4acf-b26d-2497a74da8fb",
        "cursor": {
          "ref": "3f7a68a1-23c1-41ab-b39f-cc4aca999842",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "46fa8166-feee-4b6f-89b5-03c1268f6c1d"
        },
        "item": {
          "id": "66009ff6-0751-4acf-b26d-2497a74da8fb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4636e3f5-38d9-4b7d-8623-21a5a8bb8c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57ad369e-1a08-4eb2-a51a-0c0ba4d49e1c",
        "cursor": {
          "ref": "83765e5c-0bd5-4051-8605-83703c9c4ae3",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "20f51583-f0e7-494c-bb4e-d85b73b31cd0"
        },
        "item": {
          "id": "57ad369e-1a08-4eb2-a51a-0c0ba4d49e1c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f78878cf-7033-4c0d-b5ff-72b50d6f26b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "852d816a-f89c-4b48-9854-4eb76bb6a203",
        "cursor": {
          "ref": "3d34b25a-6888-4d57-8e73-69f4474abd2a",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "fd49b35d-ddee-4096-b93f-a5463281e1d6"
        },
        "item": {
          "id": "852d816a-f89c-4b48-9854-4eb76bb6a203",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ea47f846-0592-4b94-9ce0-53c2128489ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f513bcca-d10c-4364-b2f3-ecfee268047f",
        "cursor": {
          "ref": "321a0393-8737-4729-8ca3-a2802bb98cdd",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0ca4ddf0-9acc-4b7f-b8e5-2c01bbf78989"
        },
        "item": {
          "id": "f513bcca-d10c-4364-b2f3-ecfee268047f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0617fc4a-cac1-4ebf-bec8-6d5988d7ab93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14cd811e-93bf-4dd7-8270-60ec3e7cbff3",
        "cursor": {
          "ref": "1ebf4ab6-5f5c-4ab8-8ecf-ba8873b41850",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3423b8c8-3f08-4d78-8581-3e3fc4b292fc"
        },
        "item": {
          "id": "14cd811e-93bf-4dd7-8270-60ec3e7cbff3",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1751726c-8540-4596-ba12-e12b73bfc361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f01b3af8-8d54-4688-8b3d-b388c1ea8338",
        "cursor": {
          "ref": "cb4bea74-b0ac-4f06-951e-1b28e327cc0f",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "bff4c128-db16-4c62-b767-dd785ef79218"
        },
        "item": {
          "id": "f01b3af8-8d54-4688-8b3d-b388c1ea8338",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f87be1ac-1f56-4603-bb3b-79dab1d1d3d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8501a754-02dd-42b8-81a1-140c3a0b5ea1",
        "cursor": {
          "ref": "0b79d5c6-f2cd-4afb-bee2-facd5404e291",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "01930ffb-74ee-401e-b2ba-cc2fa47be641"
        },
        "item": {
          "id": "8501a754-02dd-42b8-81a1-140c3a0b5ea1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c6426164-2d56-4980-b1b7-56eff8583895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8444f015-dc2a-4018-9ab8-ca660232fc8d",
        "cursor": {
          "ref": "a30a36ef-dfc6-4444-a720-749160460a3c",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "89318223-3d7e-4033-b944-cc263a819f59"
        },
        "item": {
          "id": "8444f015-dc2a-4018-9ab8-ca660232fc8d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "dad75f2f-45d3-4a4f-9cf7-11dd3eab0239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d62ccb4-47a2-46bd-932f-964a8ef6fa05",
        "cursor": {
          "ref": "ecec84a4-ab7e-4b8c-bf89-8637c910d8b6",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "321e3329-889e-4681-81db-24da9c05dda9"
        },
        "item": {
          "id": "0d62ccb4-47a2-46bd-932f-964a8ef6fa05",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0af0ee75-fe3e-4d64-9308-c03a008364b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3feee7c-1789-4366-b6a7-27693d210aac",
        "cursor": {
          "ref": "5c3fb9ff-6c83-42ab-bec5-1dba81c01bef",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d7e2ff22-5cda-4afc-93b1-1340ac284176"
        },
        "item": {
          "id": "c3feee7c-1789-4366-b6a7-27693d210aac",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "be36f79f-4c32-4dd2-9e62-9a62b92c7ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08144b90-8964-4355-8ebb-67b3a8bc6897",
        "cursor": {
          "ref": "52951ecc-9dc8-4ad3-83eb-5ee88e18ba46",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8e9638e7-6ca0-464b-9ebd-b1a02bfac176"
        },
        "item": {
          "id": "08144b90-8964-4355-8ebb-67b3a8bc6897",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "80b1cb26-f664-403e-a038-204730de38c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3822ef71-c07c-4344-a0ca-ff03311548b5",
        "cursor": {
          "ref": "bb29e7f1-e38b-486e-8a0e-209ef8a31e37",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a8e8db49-a352-4827-8dee-a7948235f967"
        },
        "item": {
          "id": "3822ef71-c07c-4344-a0ca-ff03311548b5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5c77c7ea-c038-4208-b90d-bfd221c8c95f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32604452-2424-4ce2-b163-fd6e6f57264e",
        "cursor": {
          "ref": "0752bc67-df60-4200-a988-1d82e0ccb8df",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "cea3f04d-e8dc-4098-be32-ffb0bb76a8b2"
        },
        "item": {
          "id": "32604452-2424-4ce2-b163-fd6e6f57264e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ccbcf548-6329-4ed8-81fc-cc28af3daedf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b559d02d-0439-4962-9e87-04b255a69afd",
        "cursor": {
          "ref": "53ff7a6d-9340-40a0-9701-3e56559ed6b0",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0d82e046-e01a-4229-9b53-af4674cf6f0e"
        },
        "item": {
          "id": "b559d02d-0439-4962-9e87-04b255a69afd",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "69383e5e-a17a-4c99-a3d3-e0bddb622718",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "4af95879-3bc0-47c8-8647-80f36e566e70",
        "cursor": {
          "ref": "646dc54d-8122-42d2-9637-80a094ca9f03",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "237292ae-2930-4fc2-9ec7-0990d9cc73e6"
        },
        "item": {
          "id": "4af95879-3bc0-47c8-8647-80f36e566e70",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "98ba13a9-68de-4eae-bce1-1acc934ebf8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1fbf32c-0ea4-482e-8c6a-65b22b4f1403",
        "cursor": {
          "ref": "ad85ade0-61e9-4803-8b08-2a09a830ed5d",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "2bf656ce-3cb0-46c4-8002-8d97a7f60e13"
        },
        "item": {
          "id": "a1fbf32c-0ea4-482e-8c6a-65b22b4f1403",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e746a52c-d401-406b-b615-dae3b835bdcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cff7576-1044-4ffb-96d1-5fb364973405",
        "cursor": {
          "ref": "ea7bf9f3-dd65-4b06-bef6-87f2d4ffaf75",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3f4c3b80-85a7-4b36-ae6c-309703a947fc"
        },
        "item": {
          "id": "2cff7576-1044-4ffb-96d1-5fb364973405",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "76f968d0-8290-4a40-86bb-10b721dfb69b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297e7cda-2b68-4eb3-af5d-099cec6af711",
        "cursor": {
          "ref": "2d9ddc08-8ea7-48cf-b772-dc6738ef905d",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "85728ea8-0fc1-454e-baea-f66a094d567f"
        },
        "item": {
          "id": "297e7cda-2b68-4eb3-af5d-099cec6af711",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7ec4a0a9-7961-45ee-b761-31be42c4c8c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a96faa4-c563-47dd-94ba-7c618d5d7010",
        "cursor": {
          "ref": "f7c33777-52a6-4545-b007-f0944fbf6e87",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1e24b92e-4a55-447b-88fd-ea3ed73e335a"
        },
        "item": {
          "id": "2a96faa4-c563-47dd-94ba-7c618d5d7010",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "517378ed-b4b6-497d-bb1d-7b7b49e192d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "283860f2-fbe5-4a40-a1c6-12c83626ab62",
        "cursor": {
          "ref": "43a0d300-3333-431c-b663-b39244242c3b",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "01a898f8-8481-49dc-ba2e-31e186e2dd89"
        },
        "item": {
          "id": "283860f2-fbe5-4a40-a1c6-12c83626ab62",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "bb875bf8-8170-4373-8bda-62ceb2c4ae4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d164a08-c129-4d2a-af6d-34b4fc7c80bd",
        "cursor": {
          "ref": "e7ccbf78-99c2-4937-809d-6ffaa54f6889",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9c02ee63-d102-4849-84aa-40f3673aa443"
        },
        "item": {
          "id": "8d164a08-c129-4d2a-af6d-34b4fc7c80bd",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "71de9779-1bb3-40e9-81a9-28e2e1b8c202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f652296a-2cab-4073-9a7b-9cc787d0e574",
        "cursor": {
          "ref": "7a7721fc-32e8-4d99-befe-47bcf918b5f4",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "1b0335db-4063-43bf-ab6d-10feea73aa47"
        },
        "item": {
          "id": "f652296a-2cab-4073-9a7b-9cc787d0e574",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ff125a90-3fc6-4da1-8095-ca17349a63ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e8e0ab-d93c-431e-8ce3-c059bc292cf3",
        "cursor": {
          "ref": "eed92772-4180-4e7f-b54e-5a849628df1b",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2734743b-d39f-4b3f-bc5c-55f51e3edb77"
        },
        "item": {
          "id": "f3e8e0ab-d93c-431e-8ce3-c059bc292cf3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7f90a057-58b8-442a-9e2c-85524d743793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e78e6efb-5719-40d9-8d53-07107d1fa3f3",
        "cursor": {
          "ref": "58bd507f-6f11-400a-a325-71f9c0f39408",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "eaa8018b-5c5f-455e-9eb1-39a76a3c216b"
        },
        "item": {
          "id": "e78e6efb-5719-40d9-8d53-07107d1fa3f3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b96f99f5-f9b8-4f7f-bea3-4f05063dd679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c9a66c7-9104-46a0-9136-d8ff72cc1eed",
        "cursor": {
          "ref": "baff2399-3dae-4491-96b5-cab7358c26df",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "cccba45c-193b-4edd-99b1-51a30425213e"
        },
        "item": {
          "id": "4c9a66c7-9104-46a0-9136-d8ff72cc1eed",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "33ed1ceb-a873-48b9-8a34-8cb0f23f99a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b7b810-6c05-47b2-a808-d3812304b8e4",
        "cursor": {
          "ref": "4926f02e-bc51-406c-adc2-6fe1753e12d5",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f47462ed-425d-4636-a9e0-7c8184c158de"
        },
        "item": {
          "id": "e8b7b810-6c05-47b2-a808-d3812304b8e4",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a1a73ad8-f3d8-4c05-87ed-be6db8a6557c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "212d9e43-103a-4713-a871-13a581e2afe1",
        "cursor": {
          "ref": "311030e9-c065-486a-aed5-c7911be6026b",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c1d68cef-934a-4ae0-aa65-3659d9d3ae01"
        },
        "item": {
          "id": "212d9e43-103a-4713-a871-13a581e2afe1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6c9a2686-955c-4280-9e14-64b5dc87c12a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c279a1bb-f935-48dc-be82-6e8feb33c4d6",
        "cursor": {
          "ref": "8536b80b-930a-463f-835a-f7af62f2ca07",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "74d84d32-b666-4f58-a9d5-49581ca87dee"
        },
        "item": {
          "id": "c279a1bb-f935-48dc-be82-6e8feb33c4d6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "325ce9a9-8b93-44e5-a6ec-a7673209ffbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e77fc96-6153-45d3-9e62-69e94e016ae0",
        "cursor": {
          "ref": "9969ab88-348c-49e5-b4b4-49b4077f62e8",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "79a75188-994a-44cd-9b76-ad5e62a2e61e"
        },
        "item": {
          "id": "3e77fc96-6153-45d3-9e62-69e94e016ae0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d78b9285-9ab2-4903-8f27-39e0ae1efcf3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "bc9952ae-691e-40d6-b7f0-db4b0dd8d765",
        "cursor": {
          "ref": "92804654-d1cb-45bc-98e9-536cac66256f",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "24c647db-b491-477d-82ef-113820278c89"
        },
        "item": {
          "id": "bc9952ae-691e-40d6-b7f0-db4b0dd8d765",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a9f0b376-3d62-4538-87f5-16dfb11a45ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c10fb930-0342-44c9-8991-bff97a335629",
        "cursor": {
          "ref": "adbd4ba4-a43f-483f-a81a-309c432eb850",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "44476c89-efad-4216-aab4-be5a365c4217"
        },
        "item": {
          "id": "c10fb930-0342-44c9-8991-bff97a335629",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "82232967-6ca2-4816-b6be-49e2c70bb649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3ca451d-657c-40b8-9500-0062345fa786",
        "cursor": {
          "ref": "2e98f1b8-e0dc-48d5-a0ba-631ce806ab66",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d56298bd-a926-4485-8550-5b1e5def19d8"
        },
        "item": {
          "id": "b3ca451d-657c-40b8-9500-0062345fa786",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "10061993-37c7-488d-b655-96a04da757fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34bf2fb4-ae03-4195-af0f-1cdcc3871662",
        "cursor": {
          "ref": "c1556d74-d3c3-4775-ad27-1a27f39a9d19",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6ff6851c-6303-40fa-9e28-3ef383b70eb0"
        },
        "item": {
          "id": "34bf2fb4-ae03-4195-af0f-1cdcc3871662",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "66948efa-d4e0-4eb0-b8c6-53e49b2e3868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db209e20-3026-4e4f-8fd2-3d0423a290bb",
        "cursor": {
          "ref": "6f884d26-2b64-4dc0-84d0-b41e4b8b4d89",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ff0163db-705f-4ed9-a97e-91ecb5159436"
        },
        "item": {
          "id": "db209e20-3026-4e4f-8fd2-3d0423a290bb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7f3a76e3-8f51-44df-a1b5-8e132a9ca5ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b1fa7a-82ef-46d4-b2f1-dc6f01b2a28c",
        "cursor": {
          "ref": "c1b655c8-2000-431f-a2bd-8cbe107e681d",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5954b6c2-0ffc-4dee-9a50-bef55c16b6c2"
        },
        "item": {
          "id": "d0b1fa7a-82ef-46d4-b2f1-dc6f01b2a28c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "03061c44-2ef7-4331-9327-7e85f1623f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69c3f66-6cde-461d-b4d4-fd2c02b36b57",
        "cursor": {
          "ref": "ff46adc6-fae1-4c9f-9368-d1e7f71fb84a",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "baaa1710-06da-4dfe-8853-374dd45d6843"
        },
        "item": {
          "id": "f69c3f66-6cde-461d-b4d4-fd2c02b36b57",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "997d70a4-0c50-45c7-8ed3-9a1dcd506ada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d09a56d-e315-47c5-9764-f2163fa60008",
        "cursor": {
          "ref": "d1cb0a03-bd9f-4870-938b-0cc4b8b5b08c",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "086a8e47-13e6-46c2-8a78-f49bc3350c05"
        },
        "item": {
          "id": "7d09a56d-e315-47c5-9764-f2163fa60008",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d977cad5-6dad-4333-a2fb-aab58fb40efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7cd4ad-9c6e-4f32-a3da-7643a00abdfe",
        "cursor": {
          "ref": "764e3826-69de-4d3b-8770-a6720c92e071",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e7ee99fe-bfa0-47dc-bb42-d9ec1cf065c2"
        },
        "item": {
          "id": "3b7cd4ad-9c6e-4f32-a3da-7643a00abdfe",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c54ecb64-f312-4195-9bc3-176f67fe142e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e4895a6-bf77-468a-8a11-4261451f41e1",
        "cursor": {
          "ref": "05cbb17f-4d42-4f51-9396-ac0aab480d34",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "526f4ede-dda5-4e58-ae39-24889e6f73c5"
        },
        "item": {
          "id": "5e4895a6-bf77-468a-8a11-4261451f41e1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8eb8a96f-68d1-44aa-9f4c-16691ae37a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b39e11-8346-42a3-8fdb-4f7c22ccf0f1",
        "cursor": {
          "ref": "5577a95a-5120-4814-aa58-4201e95be10d",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "792de02e-6391-49bf-8dbf-8e2a4fafa3e7"
        },
        "item": {
          "id": "36b39e11-8346-42a3-8fdb-4f7c22ccf0f1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "025e6512-3a61-4c7f-8ab5-9f54d7543899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac449ae-456c-4ac8-8c8f-b512a76093d7",
        "cursor": {
          "ref": "8b083db9-a395-473a-9124-c187078a7331",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "11947297-0853-40a9-92c7-4c774f7b2f16"
        },
        "item": {
          "id": "9ac449ae-456c-4ac8-8c8f-b512a76093d7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1e79d8c9-d8db-4717-9b6e-1ae9b5b413f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22d74777-b521-4168-ac96-d21b4748f01e",
        "cursor": {
          "ref": "7dce69ed-0312-4d9c-b57e-5d48b173c702",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3a6f0acf-8b61-433e-82c4-614c68b4003f"
        },
        "item": {
          "id": "22d74777-b521-4168-ac96-d21b4748f01e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c7caa233-5bb9-4dc4-bfe7-c9d2335885d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5d85ac-dc03-49bf-aeac-c8102d215946",
        "cursor": {
          "ref": "e80c0cb3-a837-48b0-acf2-d08b1fea1a45",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "fb5442ac-a7b5-4b27-b494-df809fbd7cb9"
        },
        "item": {
          "id": "5a5d85ac-dc03-49bf-aeac-c8102d215946",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "48ae2391-0554-4200-80a3-ab0c8fd69f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4260a49f-9be1-4e9d-8789-0ec1f9a704fb",
        "cursor": {
          "ref": "0f152d33-fcb3-4f7c-8767-75cefb1f19e1",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ba6bcee7-78e5-41ee-816b-c73350020779"
        },
        "item": {
          "id": "4260a49f-9be1-4e9d-8789-0ec1f9a704fb",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "19eacbcf-2c0d-4c72-90c5-6e8409044703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79e474a-ff01-43d9-b04e-249e45c5df57",
        "cursor": {
          "ref": "c978cdcf-c9e3-45df-9d67-994aac4a5caa",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d9d507e8-1fd7-4e23-8d11-5914faa00f84"
        },
        "item": {
          "id": "f79e474a-ff01-43d9-b04e-249e45c5df57",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1e2ec5f4-1a4b-4feb-ac09-ed8e82c77887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d760ca1-e125-45ca-a6cb-3a2b31fcc33c",
        "cursor": {
          "ref": "a0983b1c-273c-4d55-ad64-a6f4ff6ee296",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "80177b8a-f979-4e8d-b678-c4925b5354a7"
        },
        "item": {
          "id": "5d760ca1-e125-45ca-a6cb-3a2b31fcc33c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e3e78a3a-b6b7-4a2e-9523-fce9ac27d530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2a8704-9fbd-45dc-b5f5-3147edebc009",
        "cursor": {
          "ref": "2af32e22-c563-4b1a-ac22-16ddb3379802",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "02dca56d-665f-4598-aa69-0bfb12a331f8"
        },
        "item": {
          "id": "9f2a8704-9fbd-45dc-b5f5-3147edebc009",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "58104b6c-339b-4d11-b91c-c39499de9ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536f457d-a565-4ff9-9966-e8d7561cbf79",
        "cursor": {
          "ref": "4103dd61-b1ec-4384-8edd-23db2a5540b0",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4cd3ab2c-46b8-42c1-8686-15595cf30d98"
        },
        "item": {
          "id": "536f457d-a565-4ff9-9966-e8d7561cbf79",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "a9bda890-b773-4775-bb83-de22fbae796a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9420e5d7-2262-4151-8b16-7d82a234d063",
        "cursor": {
          "ref": "948c0ae0-2844-45c1-a508-0ab39796c6a3",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2bacc3e1-4cff-4b6a-a888-f8fa6631891f"
        },
        "item": {
          "id": "9420e5d7-2262-4151-8b16-7d82a234d063",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "c9750ea5-f1d3-4fcb-9b6e-8034e6bb85ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a9083a-df5f-4092-a186-53deb9a64ec5",
        "cursor": {
          "ref": "e738815e-1705-424c-8085-64b2002265ca",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d35e1500-667c-48c1-ae30-d42f37303aa8"
        },
        "item": {
          "id": "69a9083a-df5f-4092-a186-53deb9a64ec5",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "86e33dee-42a3-466d-bcdd-d3ef3de2ddbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "194ec0e4-efbc-4608-b56d-183f39cc4fc5",
        "cursor": {
          "ref": "5e2bcee3-1d0e-4565-a832-17cd348f1eb3",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ace41f9c-dfff-42da-981d-8a97e2114774"
        },
        "item": {
          "id": "194ec0e4-efbc-4608-b56d-183f39cc4fc5",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "6fd0770b-83ba-4aed-8519-8cc9d17286a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "568ce0bc-6684-4c45-ab0b-8d0bec52494e",
        "cursor": {
          "ref": "f03c02a5-f3c9-4d66-9ae3-b5368c057f76",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e9ed86f2-f64f-40e0-830b-1a3b6ecfa4e9"
        },
        "item": {
          "id": "568ce0bc-6684-4c45-ab0b-8d0bec52494e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f5755874-30d2-4b34-bf0f-fedde20fcb08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd616db-e942-496f-8412-90523bd57db4",
        "cursor": {
          "ref": "1c81d2fe-96fb-4958-8808-f45dcf0581c5",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d86a1905-0412-45e2-92da-a47a55c1e4f7"
        },
        "item": {
          "id": "3bd616db-e942-496f-8412-90523bd57db4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "16dea98f-a5bc-4c08-9329-6f7203485962",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb34dfae-f4c9-413d-a2ce-46911d55c02f",
        "cursor": {
          "ref": "b149e8af-dbde-4018-b333-c9b4d8a1dd6b",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ddc892dd-f496-42d8-8110-4a58763082a4"
        },
        "item": {
          "id": "cb34dfae-f4c9-413d-a2ce-46911d55c02f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "06cdb797-e5e3-4ab7-a379-3bef4c8576eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e59a9481-0668-4a9d-9310-235458ba2427",
        "cursor": {
          "ref": "1248b803-1fea-4a04-a338-83880814f771",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "776c85e1-ee88-4a8e-8059-a77dbd8ed4a8"
        },
        "item": {
          "id": "e59a9481-0668-4a9d-9310-235458ba2427",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "57b686ea-36e3-446f-86f9-16bde3f6f585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ac92efa-1cba-4a49-b409-3d6528db447e",
        "cursor": {
          "ref": "b485172c-3398-46f8-af6c-79c80d8b2961",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e3f23d8e-4be3-4006-939d-9b862a7c753d"
        },
        "item": {
          "id": "1ac92efa-1cba-4a49-b409-3d6528db447e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "71e02608-c9bd-4542-970c-ecc5f28913e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa4553b5-fff1-486b-90ef-56f5f2f533b8",
        "cursor": {
          "ref": "0abfbd74-5d6c-4092-8c6c-dc7786786e3e",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d872f140-86c6-4094-8da1-71a34b62b773"
        },
        "item": {
          "id": "fa4553b5-fff1-486b-90ef-56f5f2f533b8",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "70483a53-a371-4303-ab84-98a8ee4cba4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48980700-685a-494a-9298-06884b60b561",
        "cursor": {
          "ref": "296c9368-e6f2-4aba-9eb9-c78fc4fe3427",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b671c7ce-952b-49ad-8ea6-6d139311f5c8"
        },
        "item": {
          "id": "48980700-685a-494a-9298-06884b60b561",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b8e63bdf-3609-4c6a-83ff-f9c881a12a13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "964d46ce-4567-420c-9aee-233c0cdbd6bc",
        "cursor": {
          "ref": "7c55f2f9-e67d-4523-9380-931037750288",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7ce28f29-908a-435e-8113-6ae3d509c239"
        },
        "item": {
          "id": "964d46ce-4567-420c-9aee-233c0cdbd6bc",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8634ed39-2d59-4a33-9fb3-a8984488d510",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "c9826268-9842-499e-90fa-8d0e3d63c7b5",
        "cursor": {
          "ref": "0ac7ac89-d423-4ad0-a1c6-5458ee8e67ff",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d52282c9-3a88-4675-8a1d-7370b46995a1"
        },
        "item": {
          "id": "c9826268-9842-499e-90fa-8d0e3d63c7b5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "76f73cc2-a2b4-4d5b-b0d5-77fa182121de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "130f38a1-1698-496d-8f13-06f8a08780d2",
        "cursor": {
          "ref": "22a4176a-5337-4da5-b9fd-101a3218f374",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "74a82177-9148-4d90-b3ca-e6684b5c6714"
        },
        "item": {
          "id": "130f38a1-1698-496d-8f13-06f8a08780d2",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "85b4eaf1-db3b-4e80-abca-996b7f5bd61e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a382497c-d3cc-47ce-85d2-b92651478f20",
        "cursor": {
          "ref": "2e9fff0f-7eca-4753-9061-775c70c9ad51",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3ba06dc7-bcdb-476f-918a-5457555e99d9"
        },
        "item": {
          "id": "a382497c-d3cc-47ce-85d2-b92651478f20",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3d79860a-2238-4160-8515-d659023ae551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "572836dd-69dc-4041-9511-5213ccd7f3eb",
        "cursor": {
          "ref": "215ab598-3112-4414-85d2-81350ffcac4c",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "3fb40dea-50d1-431f-81f9-9a2cba0dad39"
        },
        "item": {
          "id": "572836dd-69dc-4041-9511-5213ccd7f3eb",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3ec3636f-09ea-4aa2-a18a-bdd1a90d9a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c38b3b31-1417-4c7d-b4dc-1f0752e57d36",
        "cursor": {
          "ref": "5b6cd92a-283f-4d69-851a-4c9a60840d56",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f4bbff4c-88b2-45f0-b103-4254dd103c4f"
        },
        "item": {
          "id": "c38b3b31-1417-4c7d-b4dc-1f0752e57d36",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "42f62dc7-cc1a-4a6f-8f02-3815aa2457ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4cca173-4c65-4821-9153-361aaf5c4ef7",
        "cursor": {
          "ref": "ef6788d8-c73b-4b38-8783-53f92bec795c",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b5cdb818-372d-472f-83db-549c3aefe1c9"
        },
        "item": {
          "id": "c4cca173-4c65-4821-9153-361aaf5c4ef7",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6f17f31a-5596-4c8e-9a53-9419bf691768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44cb023f-b193-4ac7-a7b1-1307cbcf0378",
        "cursor": {
          "ref": "fca37398-9825-482c-b909-dc5dac535a1a",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8d47f203-8177-4c1a-bed5-aa13ef466b3f"
        },
        "item": {
          "id": "44cb023f-b193-4ac7-a7b1-1307cbcf0378",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "136581a0-b20e-47bb-b69a-c3603c1a032e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "190ed36f-fce7-4d53-930e-6db33e81c48c",
        "cursor": {
          "ref": "41100325-e77d-4352-bc51-da9e2eb80298",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5713814e-46ec-4503-a190-0b122f2d1de7"
        },
        "item": {
          "id": "190ed36f-fce7-4d53-930e-6db33e81c48c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "28c084e7-88b4-4481-9e26-5ccf1bd334fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "097ab80e-63ca-46ae-8047-a25ee687440c",
        "cursor": {
          "ref": "095a2754-820a-46bc-a64e-18bfa79ba8c8",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "73610766-b049-474c-ac6d-27904be3dfff"
        },
        "item": {
          "id": "097ab80e-63ca-46ae-8047-a25ee687440c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "592132ad-7076-4e01-8f13-280961a6cc06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94739c5b-939a-4797-b0f9-98dc762b24fd",
        "cursor": {
          "ref": "1338f024-f9bc-4f21-9101-b25df37113c1",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a3ce1136-ad07-46cd-9a24-e60193021a7c"
        },
        "item": {
          "id": "94739c5b-939a-4797-b0f9-98dc762b24fd",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8d88f70e-159a-46c0-956f-f63ee4f97d54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd3e8c5-48b5-447b-b552-b600ceb25511",
        "cursor": {
          "ref": "dc83ee64-c9b7-4098-83cb-c5546fdff745",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9e41ea24-efa5-4062-909a-79d50c7c4bc5"
        },
        "item": {
          "id": "1fd3e8c5-48b5-447b-b552-b600ceb25511",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "83104e80-d48c-44c3-903e-1c0b1d65c180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23f97d3-f32b-49a1-87e9-19b8181a5aaf",
        "cursor": {
          "ref": "6186aadf-2630-4b57-96ef-74d2717dab97",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "4014204d-68bb-4ff4-8bd4-72a53b9eec09"
        },
        "item": {
          "id": "f23f97d3-f32b-49a1-87e9-19b8181a5aaf",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f05b7761-c745-44e3-9d74-fb47bbddb877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7845143-66b9-41f5-801b-508a2ff48624",
        "cursor": {
          "ref": "d13c2146-3f9f-4629-9aa3-c7b01590d2a6",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f72b2150-29d4-4f08-8b4d-df794c5b7f68"
        },
        "item": {
          "id": "a7845143-66b9-41f5-801b-508a2ff48624",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "87d9c4e5-ae1d-4351-8d2d-f6d448ab75cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4519b1fe-567a-41db-9cff-9ad876128b66",
        "cursor": {
          "ref": "2fbd58eb-8afe-4694-a18a-31191f97ed08",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e9a319cd-bf54-494e-b497-e89724725aac"
        },
        "item": {
          "id": "4519b1fe-567a-41db-9cff-9ad876128b66",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d6e52195-7cc1-4fc5-be6e-a1d64b186d40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3b0220b-78ad-4a69-87bc-1fa97c901917",
        "cursor": {
          "ref": "1e5defe2-9ff2-4630-9b83-8baa4a1e7b8e",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5cdda42c-e0f6-4940-ab86-13ff026f562e"
        },
        "item": {
          "id": "b3b0220b-78ad-4a69-87bc-1fa97c901917",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "11ea882f-c257-4b95-ac55-128ca299b0d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d60298-1168-4b7f-956e-6ee052043cc4",
        "cursor": {
          "ref": "24a475b5-e020-4b0e-8e50-3119bc539ef6",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "356d5a6e-8de4-49c0-9faf-1713e7bdd1b3"
        },
        "item": {
          "id": "61d60298-1168-4b7f-956e-6ee052043cc4",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "50d626d9-5763-448d-9c75-24d88db0912e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c4aa006-f2fb-474a-b8e1-eb832cde52b8",
        "cursor": {
          "ref": "7b9feec6-cc92-4826-a2f3-ff64739699b7",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a68b1aa6-aed4-4d9e-a7a3-54d23dadfb0b"
        },
        "item": {
          "id": "7c4aa006-f2fb-474a-b8e1-eb832cde52b8",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "fe398712-bdda-4b6a-94f9-ab1aaf3427cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ca9367-1ae2-4c7e-ae55-329a5861f1a0",
        "cursor": {
          "ref": "95c770aa-aaa9-4a02-8f37-d1f47e24d2e8",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "bc3e496b-e402-4fba-bc87-454fd4c47624"
        },
        "item": {
          "id": "96ca9367-1ae2-4c7e-ae55-329a5861f1a0",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ea9c99b8-db7d-4b18-beac-27ce0f2d8d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252ba03f-b93b-4c5d-b3ae-da61d79c5c4b",
        "cursor": {
          "ref": "380c61f8-36e3-4eec-9b45-aff7cf964805",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5e04eb29-8f7d-45d7-99cb-9b295f3ef9ae"
        },
        "item": {
          "id": "252ba03f-b93b-4c5d-b3ae-da61d79c5c4b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9d2251df-ca4f-4b87-a5ad-8427dedb7ab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f13e1780-735b-4d40-95fb-d8baf15d754a",
        "cursor": {
          "ref": "b45bcb87-80ba-461f-b095-241ace92adc2",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "dba53be5-47fa-4f6b-96e4-f347ea132c16"
        },
        "item": {
          "id": "f13e1780-735b-4d40-95fb-d8baf15d754a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "5b21ad74-dc72-4667-ad38-e04e1fe12b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17ba908d-b4b5-481c-97d4-c6da1498ac64",
        "cursor": {
          "ref": "a05bbba6-bbbf-4ec0-b555-f7f787627cf6",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cee3cf88-c384-41cf-961a-fb3995c85d59"
        },
        "item": {
          "id": "17ba908d-b4b5-481c-97d4-c6da1498ac64",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "dbe48e22-99f6-4569-8be3-74d78ad0dc73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e956f2-1dca-4ca2-94b1-abca2527df35",
        "cursor": {
          "ref": "5a2ee64c-420f-4733-a917-67a443319295",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "12ab249f-c549-45b4-a653-e2e84d367b7c"
        },
        "item": {
          "id": "08e956f2-1dca-4ca2-94b1-abca2527df35",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "16d166dd-1de9-47d4-9fa7-b3a8c71e92e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44b56e48-5434-45c0-914a-b043f4801dd9",
        "cursor": {
          "ref": "4c2c1efa-9db4-41df-a3e1-2e298c2ff006",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "35037ed5-2130-4bcf-9851-e8a3635a6e87"
        },
        "item": {
          "id": "44b56e48-5434-45c0-914a-b043f4801dd9",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f0100f32-ae27-4e94-a24d-f1c8abfaf7d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "512af269-0fdd-4aa8-a499-075bb06131f6",
        "cursor": {
          "ref": "b4af68f5-0e93-4892-994d-a5a6027be129",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7e10b32a-b895-4216-8b9e-7d3ac9d4705e"
        },
        "item": {
          "id": "512af269-0fdd-4aa8-a499-075bb06131f6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "4562cbd6-3bdb-4f7f-ab05-7615d6a77d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8037ed28-ba76-4ced-ae4e-f70c1311f8f0",
        "cursor": {
          "ref": "a7880da7-13c6-47dc-b612-2ef430b7dbcd",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "ce824fcc-c4e9-4e8a-bc7c-ca492727cbdc"
        },
        "item": {
          "id": "8037ed28-ba76-4ced-ae4e-f70c1311f8f0",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b5136fc9-5a2a-4103-bdbb-68621c3e7a3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66a85a2f-7bb6-4507-92db-4d2925108e5b",
        "cursor": {
          "ref": "73d593cd-09f1-4e30-999a-1542aba62fa4",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e1f70509-8cb3-48de-9b44-04df2642deef"
        },
        "item": {
          "id": "66a85a2f-7bb6-4507-92db-4d2925108e5b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f4bd7643-165f-4b47-80ee-fc3ac451d0ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fcabb87-6cbc-4c0c-aac6-19787fd4569d",
        "cursor": {
          "ref": "7e58aa7a-264f-4708-a84a-281e88a5097a",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "c8be6d30-187b-4451-bc20-62242ebc76ef"
        },
        "item": {
          "id": "6fcabb87-6cbc-4c0c-aac6-19787fd4569d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "bccf2f46-6e3c-4c68-b7a5-647a31459cac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3643468d-80b4-477b-9cfa-9389d859c250",
        "cursor": {
          "ref": "8d914957-38d6-4b5b-be59-bb98e674fefc",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "26d3c1f2-7950-488a-8541-04b35a96b120"
        },
        "item": {
          "id": "3643468d-80b4-477b-9cfa-9389d859c250",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1408f482-91ce-4a8e-b2a8-3695bb988941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f3965fa-e4c1-4807-a003-5f741adcb308",
        "cursor": {
          "ref": "19d95533-8e41-4d7c-bb78-f42cf4569f7d",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "dc831b66-6b71-441c-9d48-c5e70e9892ec"
        },
        "item": {
          "id": "4f3965fa-e4c1-4807-a003-5f741adcb308",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "eab124db-23a6-4a19-afbc-a0e2f29a4cb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a2e90e-891f-4411-984e-39a69a11108a",
        "cursor": {
          "ref": "a1d99c7d-f307-4517-9343-6ae96f712db3",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "98364a5f-1b7e-4c42-a987-4c72d8f5d3ed"
        },
        "item": {
          "id": "62a2e90e-891f-4411-984e-39a69a11108a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8f6c4262-4fe8-4351-9518-966e30d104af",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "07df9718-e2d8-4d1f-a49f-c920c0bb9662",
        "cursor": {
          "ref": "8d85cd65-e556-4ebe-8321-00afd7a342d9",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "44cf0fb5-ac4c-4348-8e36-2ea129ff5358"
        },
        "item": {
          "id": "07df9718-e2d8-4d1f-a49f-c920c0bb9662",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "07e89f50-d228-4ce3-8894-420b760b59f8",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "0d299602-d33b-48e0-b86b-06e7b06e76ab",
        "cursor": {
          "ref": "50342a1a-e0e4-47f0-9019-71611852f4ab",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b092b4b4-347b-4991-9c4a-a12b2ff3dbec"
        },
        "item": {
          "id": "0d299602-d33b-48e0-b86b-06e7b06e76ab",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "86189ec6-a7f1-45e5-8fa1-c9e881b66bf1",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "c22e0d23-7927-4e43-844e-1e684a2c00f3",
        "cursor": {
          "ref": "47d4461d-6e32-4f5a-840f-1660cce9987c",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0bbf00ef-0904-44b9-b0ed-6ea563b92c92"
        },
        "item": {
          "id": "c22e0d23-7927-4e43-844e-1e684a2c00f3",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "1bab6a3e-7332-44af-92ef-4e4ebdf23333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b8ff11-5e88-4a80-b631-c47a97358f1e",
        "cursor": {
          "ref": "5ba6ec64-b8e9-4cbb-a961-3260827ccc2a",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "4efda2e4-150b-4a4f-a0cc-c9017de29dee"
        },
        "item": {
          "id": "d3b8ff11-5e88-4a80-b631-c47a97358f1e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "81d6dbd5-ff0a-44c9-867f-32ba9923ac20",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "9e7acabf-01bb-4d4d-8ad0-5e1d690d75e6",
        "cursor": {
          "ref": "8911ef59-7c08-44fb-a269-3cea3ccbc615",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8f5dabc4-fbea-4652-8afd-7bc8a48c66db"
        },
        "item": {
          "id": "9e7acabf-01bb-4d4d-8ad0-5e1d690d75e6",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "25b71c99-2bc3-4dad-b661-6aa6ef5f761c",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "c05223f9-7e64-49ba-90dc-86c49c22fdc4",
        "cursor": {
          "ref": "09b8cd57-ea9c-4e75-a8e4-6e84ea1953c7",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "faa7af66-e139-4467-b94b-440b0ece8072"
        },
        "item": {
          "id": "c05223f9-7e64-49ba-90dc-86c49c22fdc4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "bc99315c-383d-4930-b07a-600bcea0dd2e",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "bd3d4767-6b4b-45d7-8b76-2bfe034cb68b",
        "cursor": {
          "ref": "895cbb01-8767-4595-81e0-b60c4376ea23",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a299a181-ed0e-43c7-9c2b-410fc6ad528f"
        },
        "item": {
          "id": "bd3d4767-6b4b-45d7-8b76-2bfe034cb68b",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b8b9ff45-8d18-4403-acd0-3c74b619a59b",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "057dd4f0-b84a-4a5f-b02b-1c4e7d1f38f9",
        "cursor": {
          "ref": "14ad4a49-fbf0-481c-9706-0bbface29fa3",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4eeba668-8997-4515-b2d9-9eda50164bb6"
        },
        "item": {
          "id": "057dd4f0-b84a-4a5f-b02b-1c4e7d1f38f9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3b5f73ac-94a5-445c-998f-a1b78154d8f1",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "220b4bc2-ff92-475f-a307-00a6865e3c80",
        "cursor": {
          "ref": "5e208163-312c-4b50-9e38-4f3be71b747f",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1cf0ea31-f161-495f-8db2-3bd29be6cd37"
        },
        "item": {
          "id": "220b4bc2-ff92-475f-a307-00a6865e3c80",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7b023520-d229-4b89-94c9-ccf061f69e7b",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "f4a42012-6f33-45ac-a7da-c873047c5276",
        "cursor": {
          "ref": "3a9a6329-5e46-43b6-bb80-b7cf67ddd27d",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ae99b3c7-ca92-4a80-a870-148619a19f19"
        },
        "item": {
          "id": "f4a42012-6f33-45ac-a7da-c873047c5276",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e2064b72-7c66-4497-9d7a-802a9da3edb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2622827e-203e-4d79-8a95-b19ed7452709",
        "cursor": {
          "ref": "d6615b7d-1bb6-4420-8ab5-94dcf6ce9901",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "12cdf1d1-a5b5-4ae8-90c0-e441d222c6ac"
        },
        "item": {
          "id": "2622827e-203e-4d79-8a95-b19ed7452709",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "88c6d0bb-8fca-404d-8a98-51e526d40b41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20348738-43e2-4864-b7e8-4e41792c337d",
        "cursor": {
          "ref": "fcfa2091-78a6-4c4a-a739-bd0d1f0f50b2",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3c3ddab5-2531-4d4b-b074-5886bfaa0896"
        },
        "item": {
          "id": "20348738-43e2-4864-b7e8-4e41792c337d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e0fafa3a-335d-45b0-9ab2-c3245efdad14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274e49be-a477-4c1d-bc44-554cda23c68c",
        "cursor": {
          "ref": "6e6cfd7c-3921-4e38-858b-c247a3173485",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "727a8fb5-80cb-412d-b868-9cfdadd92fb5"
        },
        "item": {
          "id": "274e49be-a477-4c1d-bc44-554cda23c68c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f3ba7e8a-95a8-4014-9a6d-e293f779a3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64043f93-fc97-41fb-b24f-0f0e14ae3eac",
        "cursor": {
          "ref": "6034eff5-ae1f-466c-860e-d65f9c89169a",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7f6ae643-2eff-4d94-a663-fe446b41b7e4"
        },
        "item": {
          "id": "64043f93-fc97-41fb-b24f-0f0e14ae3eac",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f1ca9848-48d3-41db-bb1e-583ad10da028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d522f5b3-536f-45fb-badf-afba5a6728ad",
        "cursor": {
          "ref": "bcaad521-fcca-45c9-b87b-5c85acdfb020",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "56a9ef6c-287f-435b-a63a-46564c122f40"
        },
        "item": {
          "id": "d522f5b3-536f-45fb-badf-afba5a6728ad",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5516ce46-f835-4ba7-95d8-634291e3b66d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c7fbb9-ee0a-4963-8f16-a360f9ea065e",
        "cursor": {
          "ref": "6f07e932-2905-484d-a64a-4cdcdbf87626",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e55764a4-89ef-46cd-aad9-6cec10fd56c4"
        },
        "item": {
          "id": "06c7fbb9-ee0a-4963-8f16-a360f9ea065e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b5310f01-b2fe-463a-9100-6b27f712521a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6507d22-7315-4e49-8b8f-16652aa3bda5",
        "cursor": {
          "ref": "dea44daa-fc54-433c-8457-f06548aa2924",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "938c17fe-ba02-443a-831c-3d77e79d2aba"
        },
        "item": {
          "id": "b6507d22-7315-4e49-8b8f-16652aa3bda5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "58f5d09d-92f2-439f-bcb3-374748e923ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80451019-e0b4-41aa-b4fa-176634f788d0",
        "cursor": {
          "ref": "d5fdc28b-bc0c-4650-8f61-e150ef5457b8",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4016d3ed-0c9c-40e6-ada7-f3e923851338"
        },
        "item": {
          "id": "80451019-e0b4-41aa-b4fa-176634f788d0",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "41b8d026-75cf-4c93-8223-d9ac5d59a9b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef9ef4c-f8ff-44e7-85a6-69305c6bf79f",
        "cursor": {
          "ref": "61df57a4-a59f-4400-a442-c746751e684d",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "0b00097e-0165-4c52-9c8e-e1771322953f"
        },
        "item": {
          "id": "bef9ef4c-f8ff-44e7-85a6-69305c6bf79f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1c7ffd1c-25be-49f0-ae0b-bcd9c3df5e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c67c4bcf-59fc-442f-92e8-759b0c0f21a8",
        "cursor": {
          "ref": "970c8c6e-dfc9-4a87-9ac2-c33602b32b71",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e8396b5a-d8c5-43b2-a470-004248980e1a"
        },
        "item": {
          "id": "c67c4bcf-59fc-442f-92e8-759b0c0f21a8",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "bc7b44b4-072a-47ae-91cf-e7666b5af688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54acc17f-eeb6-40dc-843b-4805853ba0c2",
        "cursor": {
          "ref": "4e93c2c8-b177-44b1-b493-2976d1cde0e9",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d5d6058a-ecae-45b9-8c47-5e7633b625e7"
        },
        "item": {
          "id": "54acc17f-eeb6-40dc-843b-4805853ba0c2",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2ac2185b-7f2f-4ab3-a289-1f627db9e690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f3878b-88d6-43c0-9869-edecda0a3591",
        "cursor": {
          "ref": "0b5a2f36-6f77-4406-9400-e14357d21948",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "31b1e7aa-bcfe-4cb0-a34a-43de04e33bd5"
        },
        "item": {
          "id": "05f3878b-88d6-43c0-9869-edecda0a3591",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e7e9dc74-cd9e-4002-aa28-b3004dba0d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fe13ec7-9483-476a-8357-7a6eb5b64c39",
        "cursor": {
          "ref": "a6dbd54d-0b13-450f-867f-2275e89eb630",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b3884fdb-36e0-457e-9795-4518ac1135fd"
        },
        "item": {
          "id": "5fe13ec7-9483-476a-8357-7a6eb5b64c39",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1db3eeba-9818-4da2-9186-a1e0bf5499db",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "ba1f1407-4142-41cc-939e-ef485e77eeca",
        "cursor": {
          "ref": "7ab8dff9-890d-4ff8-81d3-2b897860f718",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "395fd62a-c31a-450e-be10-3549bac54225"
        },
        "item": {
          "id": "ba1f1407-4142-41cc-939e-ef485e77eeca",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0b5abad1-1740-44ea-a635-408f2bc31b16",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "835dc256-f021-4942-be9d-289878ddbb85",
        "cursor": {
          "ref": "b126f83c-234f-43bc-b824-1e900cfc3f48",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "38784beb-c452-48bd-a9f6-bcf68ae0bb87"
        },
        "item": {
          "id": "835dc256-f021-4942-be9d-289878ddbb85",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "519df6bc-90ce-4221-8c1e-ed354a7e1cd2",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "4f1788b8-0dca-4dc1-81dd-54f741d83100",
        "cursor": {
          "ref": "5f0c7e07-8b3b-498d-ba6c-467a8bded0b0",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f7bad7de-1058-413d-9d33-cbe38814d956"
        },
        "item": {
          "id": "4f1788b8-0dca-4dc1-81dd-54f741d83100",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e393fafa-9b94-4c7c-b735-41a4ea3e01ca",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "4739d0a7-9f0e-4a07-8296-6fc20c235672",
        "cursor": {
          "ref": "8f9dc650-2dab-4a91-b318-8cdcc08bfd64",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4fb724f7-b4bd-4f32-b440-9fd3ebd37d6d"
        },
        "item": {
          "id": "4739d0a7-9f0e-4a07-8296-6fc20c235672",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d942c2eb-6c00-4f5a-91ce-47e830499226",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "844bec06-dba2-4ff4-8001-2fc3680d1fe5",
        "cursor": {
          "ref": "655998be-8416-4d85-8bbc-fe1f131f6d2e",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "018ca85d-4ce0-485b-85a1-763748397c38"
        },
        "item": {
          "id": "844bec06-dba2-4ff4-8001-2fc3680d1fe5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a79c1c6b-e947-4e08-8388-95ce5573f50f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a43d712-d08b-4961-bbcc-bca08b378116",
        "cursor": {
          "ref": "203fbafb-6fe0-4466-95ca-014f50dd51ea",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6e05b0d4-eeb7-4798-a4fc-6b367eb7e790"
        },
        "item": {
          "id": "7a43d712-d08b-4961-bbcc-bca08b378116",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d370ee66-d984-46dd-87b0-aaf035ec807c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6952028e-3a45-4a41-bd1c-0e48b6013594",
        "cursor": {
          "ref": "cdf316c1-7b36-4ac7-951c-28428aa9fda0",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d9402510-9cb3-4555-865e-e2db50f432c7"
        },
        "item": {
          "id": "6952028e-3a45-4a41-bd1c-0e48b6013594",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "560eaa35-a6ed-416c-a92e-b48b908cbdf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a1d2ff3-ace2-438c-b990-a54bc93ac5f5",
        "cursor": {
          "ref": "b0132f97-835f-4103-93e7-26d792fcedbc",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "47ee489e-cf3f-45de-9457-e7ad76287021"
        },
        "item": {
          "id": "7a1d2ff3-ace2-438c-b990-a54bc93ac5f5",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "77c12626-9e14-468c-a58a-af76a3003c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287dc5b1-906d-43f8-ac80-fb6534e6c82e",
        "cursor": {
          "ref": "43a90dfe-22bd-41a7-bacc-fcd8a45a9888",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0bbda529-eebd-4bd4-9d40-64bbc05e0578"
        },
        "item": {
          "id": "287dc5b1-906d-43f8-ac80-fb6534e6c82e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "556a0879-ba31-43ce-ae47-22bca10dcdc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9137ed-0161-445a-89ba-02f25656a6d6",
        "cursor": {
          "ref": "48f0bcf8-e980-425c-9e3d-a484088569db",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8d961307-c1cf-4be4-a942-18335d535812"
        },
        "item": {
          "id": "fb9137ed-0161-445a-89ba-02f25656a6d6",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d6cf0b7a-719b-4e11-ad80-3748194bee38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f2fa4c7-e3fa-4c0f-895a-8b073432eda4",
        "cursor": {
          "ref": "ad646aab-70e2-490d-93d9-12b871c385dd",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "733b8d2c-5a42-410a-aaad-886ac14a075b"
        },
        "item": {
          "id": "1f2fa4c7-e3fa-4c0f-895a-8b073432eda4",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ec65ee0c-8c74-48bb-adbb-ad055d543fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "528548e1-a81f-4268-937b-81b701023989",
        "cursor": {
          "ref": "bca4cc78-867d-4181-878c-5c38cca09b1d",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d2c10b9c-745a-42bc-808b-128957b2ea13"
        },
        "item": {
          "id": "528548e1-a81f-4268-937b-81b701023989",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "bb1756cb-4fec-4ffb-b892-e4c5ae32ec8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b755c359-5590-4b57-9ca3-330077bd1872",
        "cursor": {
          "ref": "7a52fe84-fd04-48f5-a742-91fa78723253",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "def7e185-a42c-461b-8e10-c0e3105de451"
        },
        "item": {
          "id": "b755c359-5590-4b57-9ca3-330077bd1872",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "168f2187-6feb-4961-934c-679604e3cda0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d927fc-077b-4eb6-ae7a-bdf82e62e197",
        "cursor": {
          "ref": "2dc41b71-25a3-4368-9a48-790a114d3cc5",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "1b7bc06a-fab4-4683-9a5c-c3068ed9fed7"
        },
        "item": {
          "id": "64d927fc-077b-4eb6-ae7a-bdf82e62e197",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "a40a899f-b56e-4f34-982f-685160ab8417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe220ae0-033b-4cff-9143-b53217742b6f",
        "cursor": {
          "ref": "dbdd1925-2e77-4a57-bd99-3cf50333651a",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "3c8a552f-c157-4bf7-b863-301cd421787b"
        },
        "item": {
          "id": "fe220ae0-033b-4cff-9143-b53217742b6f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "474004e3-966c-438b-b8a0-31347ff498d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32480fb-9539-4dec-b5ad-abaca0e60f55",
        "cursor": {
          "ref": "14a7777f-8bb3-4431-8284-d94a5a929101",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "466ed054-ab0c-48c2-805d-faaaa17a5a9c"
        },
        "item": {
          "id": "a32480fb-9539-4dec-b5ad-abaca0e60f55",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "57ab3141-8966-4cf5-9371-f66513b7c00f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6522b525-f81c-4589-ac47-ae44d6a9f9f5",
        "cursor": {
          "ref": "f9cba709-f5d6-4806-b8fd-83117b09e4a2",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "a4395205-a39a-4f4c-9d80-fc08039506af"
        },
        "item": {
          "id": "6522b525-f81c-4589-ac47-ae44d6a9f9f5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "61f08b79-b8dc-4b9d-b991-dbc0c0436f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de78d69f-e4ea-474b-a9a5-31de926e7ea4",
        "cursor": {
          "ref": "49c79ca1-d26c-46fa-95ab-77020c69a431",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "fed19791-f253-431a-a9f9-6e9877ff24c9"
        },
        "item": {
          "id": "de78d69f-e4ea-474b-a9a5-31de926e7ea4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e33bf818-57d3-4d57-967c-7fb6a1f7461f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "281656a6-17d0-4290-a0ed-6c98430f70b6",
        "cursor": {
          "ref": "f62ecdef-e2c5-401a-94ee-e6c6f9a6d8df",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "7d8c29fc-f7a5-4d12-9296-c6799638a63c"
        },
        "item": {
          "id": "281656a6-17d0-4290-a0ed-6c98430f70b6",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "19da999d-50e6-47ef-b0ba-eacd76e1c437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3553d21e-db99-47c7-9001-acc829231620",
        "cursor": {
          "ref": "fc413519-8ca1-4ef4-811e-9a9becaf8cd7",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "794961fc-2bc8-4bd8-bd21-95a393a9bb63"
        },
        "item": {
          "id": "3553d21e-db99-47c7-9001-acc829231620",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "514f93d3-ca8f-4c55-b739-f8389ac0131f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4dabdbd-a2ba-46b8-af2f-935067a82243",
        "cursor": {
          "ref": "a3047cd6-7cc2-481c-af54-0e077d1dbd78",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "9269ba10-a3a8-4bf4-aef1-b32d4acb84c8"
        },
        "item": {
          "id": "b4dabdbd-a2ba-46b8-af2f-935067a82243",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9e0732e0-f731-481c-b9ef-10a43252e4f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d452ab15-4beb-4e11-bae6-74c6ccc0ff2b",
        "cursor": {
          "ref": "6a5177b7-3e63-4ae5-82b1-c5a72176c058",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "0183aa2d-7612-43d2-894a-01473ba11149"
        },
        "item": {
          "id": "d452ab15-4beb-4e11-bae6-74c6ccc0ff2b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7a8ae573-6dab-4859-8139-479e629a3a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3a0c8c-d9b4-41d1-874e-d12795488c4c",
        "cursor": {
          "ref": "b137e968-017f-4aca-87fe-34f7c9765f76",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "480d53ec-e0e2-435b-b8ff-d682e6904414"
        },
        "item": {
          "id": "ba3a0c8c-d9b4-41d1-874e-d12795488c4c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ce3fbdfd-daf6-4d24-8840-ff91c7d32ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f3684b-a490-449d-9d0b-06c6a8953920",
        "cursor": {
          "ref": "172cd1e7-8542-46c3-be80-2963744b1674",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "b24990ee-a724-4288-9816-107ced00c8bf"
        },
        "item": {
          "id": "28f3684b-a490-449d-9d0b-06c6a8953920",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9f7f4f40-18da-4bc5-af53-a9169886dab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e020b625-0784-47cb-80d6-7bb2264fe454",
        "cursor": {
          "ref": "59ba269f-e9e6-4b1f-b0b1-8595ffdd35bb",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "43b6ac16-68e4-4304-b4ea-ef07b84b51cf"
        },
        "item": {
          "id": "e020b625-0784-47cb-80d6-7bb2264fe454",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "4667b6f9-3517-40bb-a272-af27d8e9f53a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f6a8e0-4479-4625-be55-e9ab7befd422",
        "cursor": {
          "ref": "711c3d19-92e2-47a5-8dea-892a347d5ecf",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "576e01a2-e4f9-49f1-b69e-93fbb71933bd"
        },
        "item": {
          "id": "74f6a8e0-4479-4625-be55-e9ab7befd422",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "bb58a449-4c78-4643-8c1b-9ea9ed10745e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20aa1e09-ca2c-49da-a747-a91da45f64f6",
        "cursor": {
          "ref": "6b24a10c-3e44-4ec3-8a84-b971e763daf0",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "d5a2709a-73f5-4b3c-860b-0d7192fd7130"
        },
        "item": {
          "id": "20aa1e09-ca2c-49da-a747-a91da45f64f6",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e9cf50d8-f549-4573-8145-1c4e30a3806f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "752f01e6-23d7-41a4-a509-46fcb60e3c55",
        "cursor": {
          "ref": "7a023afe-67ca-4b43-9ff1-40386a7ecec3",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "237c847e-34a2-45e2-9dc8-056ac45dd839"
        },
        "item": {
          "id": "752f01e6-23d7-41a4-a509-46fcb60e3c55",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "fd7ff831-01f2-45cc-9567-9be4317a484a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87060f35-9bb8-43c0-b11f-6ab245fb449f",
        "cursor": {
          "ref": "af8fccac-e63c-4185-8a5d-49faccef206f",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "54c89f72-d602-400d-82e1-44a6b4f8802f"
        },
        "item": {
          "id": "87060f35-9bb8-43c0-b11f-6ab245fb449f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4b958848-5c46-46e5-9967-969d74eb4dde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ffa316-f2e9-4b4b-82ad-dfa042d17623",
        "cursor": {
          "ref": "694c1dcf-6ea2-45e4-92e6-d243e7e561ed",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "3f0dfe66-3852-4537-b3b8-9585a3a922dc"
        },
        "item": {
          "id": "96ffa316-f2e9-4b4b-82ad-dfa042d17623",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "4e39a8e9-e999-4edb-bb79-f0b04c0db02f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6fe145c-6fc5-4d44-8e59-b7a1f4b946f1",
        "cursor": {
          "ref": "2b0c0f33-a4ba-480c-bbf0-9de0aad0baef",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "6b314ebd-2672-4bc1-84f8-8dcea0ef62a7"
        },
        "item": {
          "id": "c6fe145c-6fc5-4d44-8e59-b7a1f4b946f1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c258a487-5e0d-4f77-aeb3-fc8c0eb88444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed5f4fd7-aab6-4073-b297-f0f3adbbd043",
        "cursor": {
          "ref": "b3a11f35-6f4c-445a-a92d-850083ff5398",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "96288bb8-73a4-451f-a6ce-c164e9d272c0"
        },
        "item": {
          "id": "ed5f4fd7-aab6-4073-b297-f0f3adbbd043",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a1567b64-b5fb-4d44-88e5-6da01beabad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52702950-1c14-4812-8889-2ca1ef0f8ecc",
        "cursor": {
          "ref": "13f5eb31-82d3-4e14-b486-47a5eb52959f",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "83ea2737-a232-48d5-8108-74c87bbe5fbf"
        },
        "item": {
          "id": "52702950-1c14-4812-8889-2ca1ef0f8ecc",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e453319f-a089-4709-9bcd-d8c2c565463d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c308e9c-0671-42b0-9415-ecfb5a0aab57",
        "cursor": {
          "ref": "9bf6ae93-9f66-473b-a61e-1cd2c1837219",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "2ebdd59a-d8f0-4cb5-b7b6-1b6a0aa00099"
        },
        "item": {
          "id": "0c308e9c-0671-42b0-9415-ecfb5a0aab57",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4d76406f-c6a9-40ae-a26b-f7a998383000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c12e3377-4ae3-4e61-95c3-df1cbcb620fe",
        "cursor": {
          "ref": "a7e9fdfe-859a-4e6f-b6cf-7f2fb5e3a8ea",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "3d83b9a5-17b7-49dc-b459-18516016128b"
        },
        "item": {
          "id": "c12e3377-4ae3-4e61-95c3-df1cbcb620fe",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "623785e0-dc08-4e20-9d42-c618a0a9cf3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d408e5-a6da-4d77-a455-6c2b86eadb07",
        "cursor": {
          "ref": "77913bf3-ad3b-4381-a7fb-2d0072baf701",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "058faf87-aa65-4dc0-b1f5-ca03a4b3f1d7"
        },
        "item": {
          "id": "60d408e5-a6da-4d77-a455-6c2b86eadb07",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "afb56d07-6e6d-4d8d-addb-4d9af0fdd1df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a677ddac-425e-4d7b-8748-cea76f5327c7",
        "cursor": {
          "ref": "9fdb2a7e-a7b0-443d-8cc6-9afcb1629623",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "913c9e5a-b9bd-4225-bc21-8f7efbafe928"
        },
        "item": {
          "id": "a677ddac-425e-4d7b-8748-cea76f5327c7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "824b9461-bbcd-4470-a7b9-74e399af4714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53709e42-0543-4bf6-876b-ff0e1008d3eb",
        "cursor": {
          "ref": "eea9803d-1db0-46dd-b7dc-6a337cfa038a",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "63efd68d-130b-47ee-a975-27c51bff9460"
        },
        "item": {
          "id": "53709e42-0543-4bf6-876b-ff0e1008d3eb",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6e38aa79-1a62-4d8f-ab95-712143e5a422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "588c5aa3-8959-4b10-8335-38e775629192",
        "cursor": {
          "ref": "872a9e79-f887-44c6-ac82-5969035ebf41",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "76835c35-4338-4742-bab7-5c4b6f045791"
        },
        "item": {
          "id": "588c5aa3-8959-4b10-8335-38e775629192",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d08f67d6-7e26-40c6-99cd-7857a1148d02",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8efb1d2a-54c3-4e51-9b9b-2176b28e759f",
        "cursor": {
          "ref": "2002ca63-13a0-44bb-9961-884514e22c06",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "c773a064-a73f-4a48-a97c-e0f590426343"
        },
        "item": {
          "id": "8efb1d2a-54c3-4e51-9b9b-2176b28e759f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "26dcfd0a-9fd9-495d-8ffd-ea62e43b3c23",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "8e7ad2d1-3f0c-42c9-bbd3-9455c872520f",
        "cursor": {
          "ref": "720d2081-6d91-4114-9900-cec81b6dc513",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "368cf987-bea2-4199-a829-314c3a8bbf82"
        },
        "item": {
          "id": "8e7ad2d1-3f0c-42c9-bbd3-9455c872520f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "bca81def-0f2f-492b-aaea-f7ea6db5c9ad",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb6f237-8031-4b9b-bb2b-2a251a3d3146",
        "cursor": {
          "ref": "dbc06fd8-11c7-4f2e-be70-e9df5bae8a7a",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "e40af2b8-91bb-43e4-8414-c05fea8cac23"
        },
        "item": {
          "id": "0eb6f237-8031-4b9b-bb2b-2a251a3d3146",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "73ac54b1-0f00-4ac9-bc04-f17e9aac890f",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e08262-b304-49d1-a7c5-6e971a71ae75",
        "cursor": {
          "ref": "799dbdd7-e567-42b5-a7d8-ad872a33ebfd",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "d335d883-f13a-48a7-b2ec-55aa0b2716f5"
        },
        "item": {
          "id": "33e08262-b304-49d1-a7c5-6e971a71ae75",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0361cef1-a136-4214-bc2a-fdce08813961",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e08262-b304-49d1-a7c5-6e971a71ae75",
        "cursor": {
          "ref": "799dbdd7-e567-42b5-a7d8-ad872a33ebfd",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "d335d883-f13a-48a7-b2ec-55aa0b2716f5"
        },
        "item": {
          "id": "33e08262-b304-49d1-a7c5-6e971a71ae75",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0361cef1-a136-4214-bc2a-fdce08813961",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29dac47f-cc5b-44ec-89ee-5e3a53e2bc78",
        "cursor": {
          "ref": "282178b6-b665-44ee-9ceb-a4174b2a64bc",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "adcbe028-ab32-4110-8c6b-9c5631537474"
        },
        "item": {
          "id": "29dac47f-cc5b-44ec-89ee-5e3a53e2bc78",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d1a50df2-82a9-433c-a819-e31888fa29fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e563cd19-d91e-4053-a93b-d5f073b9a61c",
        "cursor": {
          "ref": "93ca752b-d4f8-462d-be64-c672a2efda2c",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "f436a8d6-5a26-4757-b384-04292065f152"
        },
        "item": {
          "id": "e563cd19-d91e-4053-a93b-d5f073b9a61c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "173acbcc-6633-4b21-bdc9-b46b2cb8a866",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}