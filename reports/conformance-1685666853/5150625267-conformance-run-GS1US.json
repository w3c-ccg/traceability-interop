{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b2f10296-5618-46dc-8e49-507bfefc5a4a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8fa97268-2c68-4ff9-9def-287c8ba978e6",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "04e9e10a-3b81-4033-b24e-eb425173e637",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c901111c-c816-4a59-b1fe-c4d5d01a2339"
                }
              }
            ]
          },
          {
            "id": "67d460ad-55da-4e46-9987-088fac1ce868",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "54db37a6-05d5-4a9e-9d0b-f47c11e8bc1b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "40b3efce-2ce2-4bd2-b138-34e61cb16b9e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "62d1142d-f129-43f1-9506-55c1c8211f9b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e31a12b6-adfc-4fb4-b60e-18cd8f5468a8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "060c3df0-a51e-4a98-8ae9-db3a62e9c968",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e0b6aed-94a2-4f20-91b8-0ac459284cf9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "179badff-c758-4c6e-9333-93b66a146710"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "22d06418-e9ee-4225-be66-19f5841d2cfc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "503bf88e-7984-4a50-8a0b-e44ebbc38a0e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c6b8cfeb-3c17-4a0d-914f-7fe3a6b62f5a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bc369e63-c484-481e-a9c1-b677fcfe3169"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d4a1e0ea-217d-42c7-b686-1412e8ab1880",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "277781ec-830a-4601-8902-ead693ea2b9a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca6424d3-5f9f-4bae-a598-766e002ec1f8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2bd6d153-745c-42b9-bdc8-ded3b2bb031b"
            }
          }
        ]
      },
      {
        "id": "f7112308-d96d-4913-b7bf-ad7f5829d70d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1d572723-6a3d-47d5-ae64-3b0bcf796b3d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a49f26b4-1aa7-4344-915d-70fe4b2b8181",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "afbb79e6-fc3b-47ac-9d2b-e185b1b5f9fd",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a707c2d-044b-4177-a114-9f94d28f79b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "002599b9-0b95-4f0c-b62b-68566253880b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b5a8a1-671e-45cd-8a77-dc1c6f469d60",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2b7cd1-0706-49c2-b038-d31d0f494543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a56252a8-f4ad-49c6-83de-45b41e27eef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f75c852c-a2b4-480b-938f-adf5cadca0ee",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b3538c-07be-4e2f-ace8-245847fe2235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "71c7b798-230c-4fb9-8d7d-0abd3244df47"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d9c8bf1d-3b1a-4e91-88fe-775ddefd0117",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2b334a54-66d7-4527-b0a1-7f7b34d01448",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8f6189-fbb4-4aa3-8710-9065bc1c85bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec047a41-fcef-4783-8e41-3d310d4eb08b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41555692-5219-491c-9cb0-57cfba8d0228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e40c4412-c9c0-4cf3-89a1-9c3f914f9d53"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "565b937f-1111-487f-b877-e0c05c6fb116",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e0bd5c04-5775-4bb2-8366-cbaadb77ea8f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa4fd76c-9cb9-44dc-b85e-5650073c5b6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "8cd3bc14-f87d-4a94-a81c-4486d32e6216"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62db37bc-b3af-48ce-afde-a8637bfb5cf8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "cfc6285c-859b-4d5f-9cd5-81f13d6c7b3e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae50a3d7-8894-414d-aee2-ed309af051f9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "962c10dd-0331-461f-8dfc-5c1f2e254181"
            }
          }
        ]
      },
      {
        "id": "86d038bd-0e6a-46dd-9774-efff2f1db533",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7e570a1a-9e53-4331-8d44-63f1a6ade899",
            "name": "Negative Testing",
            "item": [
              {
                "id": "620ffd7e-095a-485d-8a19-b04b1eece105",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "789e40f2-7dec-40f5-9d79-3aead9babd73",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4eae30-6e9c-4404-a865-b53aec3b6d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6564abc3-42d9-4807-9656-4335a55b5301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7595f6-7730-441e-b206-acf6547c7547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e4f3a12-f3bb-4de3-9668-e008e0e23a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08d0276-8093-4da3-8102-4a685fb551dc",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f55a053-4935-4f9d-996a-97edcae910c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02004a16-fe3e-4d6f-95e4-99e73fda90d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb521891-74dc-4032-a01b-2a2a8cdffb92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "243f25b0-3487-4ecf-8b10-8cddf7517438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca4ee56-c884-43d6-81f4-18e06d063d4e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d975df-7f4e-4d26-8952-57a9f772cb80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b915c65-9148-45e3-9c53-72a57fa1e637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a32be388-36a9-45ab-a93e-c1a6b2f6544d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50c029d9-9fdb-420b-90a8-b98cd675335f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a8673c-64d6-4dfc-8fc8-e636ecd0e52c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "557ef405-a24c-448d-b9f0-3ad870f78d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f36db34-38a0-4cb1-aa84-756546b1a9f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7217af8f-b714-4c85-a317-7aab7f3d10b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d95f437-5116-4cfe-ab15-f07622ccbb6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4bccac0-928a-4c71-b883-aa9daf7a9623",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "239b9695-f213-4b18-a99c-932c2be40ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ac7dc83-b7fa-46e5-8c9c-afa87ded9b43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08b4f97-aaec-4dcf-9528-c3e356c5bb49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f77018b5-c61f-4c8d-a783-457a28bd5ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4310b1f9-12a5-49eb-bf7b-f73927d66106",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d87a63f-8b8b-4de3-9d21-073c7409569a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d3d1be4-e59a-47f6-b6e1-0ce7e7df9404"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12dd4e4-1d93-436f-ac96-5def85c5b252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf561b3f-a9da-4a44-a5af-09d828fd0505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf690d2-3f53-48e3-90bf-eca7f7131bb3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "119bb397-2670-4632-96a7-1f4800faa8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65eefdd5-e781-45ac-9bec-0c5dd694ba9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44a9161-da83-4f19-a203-1e71ce83c7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65b26681-84d4-4cd4-847d-c24c53514efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0467bb-910a-406f-9187-145d02bc0d1d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f21a440b-ee21-43a0-9610-fd46d03dc019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f84f1deb-714d-4bbd-a28d-bbcf38749013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c0f321-d107-472d-a906-9fd065976d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b5bdbdf-3f9a-4560-97c3-f3308491d32b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcfa7ffd-4269-4beb-8de7-0778ba7b05bc",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f49a672-ab7d-404d-8487-d280be3002a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bc46999-e7d5-4ae6-a7ae-96aa0edaf81d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f736fe3-293d-495b-b464-b4c791eb066b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5288459-6847-4065-bf4e-cabcc29a1a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2242e57c-fca5-4fc9-bb77-75eee833cf45",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9851a806-4aa5-4baa-8534-2be293f5afec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffff9722-be42-47a9-b5ba-d69c7d8a1bcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76522b41-59f2-43b7-a6b6-78a07a19f8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "299a598b-a22e-4a51-8d5c-4ca8d5b11ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6140e637-8845-42c9-9f2b-c7ac89bfe3e9",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd83786c-87b0-4172-add3-d62d6b2874fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd196b4b-0799-4f99-9a67-31b706cee5f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2fa449c-5b7b-45cb-818d-98d80e490f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "720be52a-7870-446b-8172-28c0202f50ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c7934c-a5a8-472e-9b77-e3ecdd3609b8",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a91c2a-1636-44b2-ac9f-22d1767a76a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f377b5d5-5400-4cbf-ab1c-68a14e1ff411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bbda969-dcdc-405f-ba85-c2a38d83f86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06638c9f-cb70-4c70-86e5-9cf29f164ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af75173d-f051-4cc3-a8e1-5c13b5d081d7",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c42a89-ee71-42f0-9e2d-44cbb382f886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8cd3ca8-902f-4c93-a975-0b7fe3767436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fadd964c-eafb-4e4c-a393-a0fffff50756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae3bcff5-ab02-48f4-b489-a58e9dce0814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df55a9a8-ea6b-4c47-b022-8fcfdd3c2fd7",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca6d660-5821-4e89-a2e3-1e67e9eeab03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "328b6cb4-329d-46df-b16d-edb4da0572f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b46ae8c4-5de0-4103-b35c-d3a3bd50080f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c78dc649-ad0f-4398-ad83-4723228c3f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c11d043-8074-41d0-ac87-76cffe90c0b2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b1f90b-640c-4de5-b498-738db7ec5c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae370897-16d9-4aca-ae12-f07e3ee8159b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a9d82b-2197-4d1b-9147-b92a76e17ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c82cf15-1491-4b08-85ab-1286598758b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec9b1869-8081-4738-9f27-b9225e697b01",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a0aeba-fdb5-4e4f-a81d-585b1ec0e739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5314ceb-9963-4e3a-8347-68de50adef68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f831688-f6a9-48f2-a9eb-72402cb12ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "751411eb-3bd1-48ac-873a-6824a7db51f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5181d595-3147-404a-b70b-29e5706ed754",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb95300-6e4a-402b-8e1d-c318b4061fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66c12060-88dd-43b5-b094-e78964387736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22984fb-494a-484f-8da0-c0b70eacc757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d62da1c9-737b-4d45-a17e-f522ddf6a1ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea049598-1627-4222-b5c0-df6bc97d34de",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0928b5ed-a5ab-43fd-9af0-df1ecd29754c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb6bc82e-1733-4bbe-9721-951bc39b3408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661749aa-f48b-4f20-8e52-336b6a72f4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d84e1c-381e-4729-8638-fc7ced159edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3efc53-813e-47c5-8c43-580c9928c1f2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa3ec6c-b2a9-4456-b255-a0d93877f8f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44a09abf-32fe-4908-adaf-4e7040fe9b5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a546722b-5060-471b-9597-16e80aa864ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a71e47fe-6e37-4e2d-8ba0-4eb0c7d897a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b3da9b7-7809-4e9f-8b27-a73a0310754f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f39970f-0a20-49d2-bc0a-f4e0a6b9374d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d3297ac-5160-48ae-92c2-d278f845213c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f83776b-0afb-4177-b0a2-2b97b90c89a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ea1b983-4542-40a4-840b-596df612efd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040694da-3887-4106-bdda-d6d2b49ccbbf",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "401958e1-d6a6-429a-b9e8-8bf3f1bdd974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fd658ec-57df-433c-9bd9-647028c9b784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e97edd98-7f8d-4f2e-b51f-e74cd7bc5387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0081700b-660b-431c-a3f2-515b70d1f24b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4222d2-0e9c-4212-9219-30ef9a9ccab3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d277c0-c9e0-4a34-8f9d-cd638b0d1ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19580394-aade-4eb5-ab87-f13b9482f1d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bab0b3a-b15d-4761-a44e-3fe77dd5af85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "69d0039e-2cf6-49f1-a4b5-84bd14f40cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde02eaa-b5da-4f5f-b5d5-f0da823c3a40",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf33252-99a6-4f47-82e7-1ed37d2f87d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "140695e3-8d2a-4ccc-9200-bb61e754b6ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb62174-8da9-4f50-988e-332498e9cd72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9848f49f-5e72-48fb-9316-7a0d0480aaf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "374c55ff-70e7-4580-9b7a-d0c98430c2e5",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3603764-901e-455f-9c7d-4257adc71e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d08711a-c27e-4dea-9e60-31af898fc10b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e450cb1c-8df5-4793-a45b-f42ae139a875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "facd02ef-5c1f-42e6-930b-e837a2a51830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b53818c-e26a-40bc-9a22-e8871fb9cc31",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98899d8a-3ff4-4745-a772-728affe542a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae57525f-cf6f-47f4-89c9-e50e54d0611e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3b4d85-a278-4df1-9f21-16c2cc327dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "22bfaba6-4b00-4f84-8b8e-944b6706a19f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8808dd2e-9116-4b40-8626-780dd03e1c33",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b45540-56af-4f88-925e-82942992dcac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8484b3a3-6414-446e-9f12-b16bb78b950a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "994fffc5-ebed-49e2-8a14-e3231e44be01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2517b489-a5c8-4a09-a295-d175f83d9e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e061dd5-746f-44ee-899a-f05d7dccbf21",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f49a855-1ffe-47d1-8663-abb310cffd11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b31607df-ea20-4e51-92c8-a3ad680b1a0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723c1294-2c35-42e2-81ca-e0a53279c1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e5c7acc-4258-4b3d-b5aa-93a836402d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "302fe8e9-5adf-49b5-9035-8c360238e2cf",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed38c1e4-c586-4474-bf2f-66771f7d0684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19320f08-ed0e-4028-b337-d4d332180da3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e813bee-190d-43a5-8f78-d8841c66f468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "10e64682-5dd5-4ef7-a13e-f655594fdd80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8950e92d-11c1-4215-8cd2-8d7b2c17a4b8",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eebe99ea-0b7c-4c1e-a821-218f9e663bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5e7c11f-6c16-46df-b0d0-3580023b9eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffdedc59-b707-4af3-856e-c31c65951158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1879c29b-6b50-4088-9d13-b1181b918194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee90006-cd54-43a8-b89b-7e75429b11b2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c4a363-6a94-4e44-89b5-b6d5a5f27fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a861a647-1058-4c17-b517-bf695591e5b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "482fa434-a8b9-4c97-b258-f44b2c4b0a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e3cfd42-2049-4a85-937b-f604391adc30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1545bd4-37d2-4551-99e5-dd85762da203",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21cf73e0-7a4f-4745-825c-e8e303ac5ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a99a79b4-8169-46ce-b976-475d9cef99f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35283fef-d0b6-47ba-afb0-2aeee324404d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2096ec9-6cc7-431b-93c6-97f19362f607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018b9690-63d5-4339-bc61-403b53edc64d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff41ca9-227d-44d3-a52d-ce9f2e56a210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33466c5f-c161-4f09-9c58-ea1d209ed0e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e2f6a3-1338-40e0-b599-3ab6cdf67965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "558ddc20-4fba-47e9-8a2f-0b01d5cda03e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4daef1e-c8cf-4ecb-b043-0c898eb6f133",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e034464-2aed-402d-baf6-453aa57f6b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6e487ee-ff2f-4fd9-8ad3-319aa3a524e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba9cd18-fdb7-47f6-95df-0e3f3671a823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "36a5b5f9-dd35-4dea-b35a-c43d9eeb9fd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "594a3420-14c0-4501-95cd-56f7193054d9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db85636f-98df-49f5-9f51-db4586541d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43054ac7-9314-45b5-a870-bb7e81864bbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ccd728-c90c-40c2-8ea8-0a475d2405f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb3c8a75-96d1-4f0e-8eab-ef81e7c2cb76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bcc5b3c-990b-4e12-b313-eaa84e2f8db6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c17bc17-1cd8-4203-b998-fdce85e50b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a622d3bf-04f3-4916-a1ee-fb4a5cf6d365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d01605-0b84-4ece-b1ed-1e89600ecb5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "368c69e3-99e0-4511-9457-0419116d0b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3acbf471-655b-49b7-8a3c-406c63f14ad5",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74395dac-4de8-4a5c-99a4-ca7f19bc3830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bdd93faa-621a-4184-823a-6b83bb123bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6402e5aa-32c3-4019-9c03-f06180b1ca96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eb590fcc-a221-4151-8593-52c22216aaf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af4b11b-5aad-465f-8b5f-7f117f79d9bc",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3375c611-c6b3-4040-941c-77f818289089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d8c9c44-a49e-48eb-8e3b-6961846db5fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22558557-e2b0-4d95-9a67-2bb436b40da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a2c58fe-42d5-4558-b7d4-f6535a998d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "decb3732-8915-4b32-9f81-22d65d46c5fb",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b01985-5a2a-4beb-b8d6-43b003cc469f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98e77c92-7feb-465b-8dab-e10990078254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf9b0f66-7a48-4de6-aed6-65d0fead3eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f7df822-2cc8-4d8a-a25a-1e8f6c679ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6c15ce-0698-48e6-8d82-d3ce900dae5d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38a3341-6706-43a0-92c4-5fe918ea749b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "126f642c-ec08-4848-b626-5243bae71df5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e7de6f-fbe0-41c0-9f65-fbbd5706ec88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "226ebcf1-a7f6-47fd-bfe4-1d4a17890dd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7b1ff6a-18b1-4ddb-9449-3c372193a0c3",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a119c01-82b3-4fda-8831-e6a4a50b6388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "241f9585-fcbb-4b03-b648-893ec7c8f09f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3899512f-26d1-4a02-8466-78efaaee0b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd2e830e-1bd4-49c2-b329-f98f287d01b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9197131e-db88-4773-8973-bda674c2c2c1",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa6d8c2-6c45-4e5a-ac96-d4d5bc2d872e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f58b26e8-ffcc-4e35-bb8d-463d3058642b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57fa98d0-bf07-48c5-a626-043302aec8dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "901df15c-59b7-4766-864e-68f387e547f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de8117f8-5cee-447f-bfa8-2ac002c85189",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4032dfd8-0ec3-47b5-a0d4-1fdc91fd9c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "822ccd01-1536-41c6-a7ac-47f0531c312d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a46e92-be6c-4033-a6bb-f82133aa048a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1baeca00-506a-4849-893f-e4a209e68db2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb19c807-404e-44fa-a2c1-adb63b6421bf",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1575e2ea-3ba9-491b-ac21-de7d0c7bd04d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87fee4a8-a40b-4cd9-9c9b-9b2d136898ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515d8abf-5cb9-41ce-8906-f637df4c5390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4447a07b-9188-4cd6-9e1e-6c4592d76d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15b1d27-6e8e-4f47-b11d-a68cf7d494c8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d16ce9-7a36-4693-810c-7354cd856270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ec73061-8966-41d2-a415-19b92f5c50e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d5c6b9-d000-4057-a086-803990ff3e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "18da25a6-fd05-459b-b8e0-8ff2a1808b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8548fd6-c840-4171-a3c0-e0c3e35df47d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73e6852-85dd-4c85-9d1f-bcae95b0d967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5420487c-f099-4b9c-89ec-4b7402bfa6ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99afa48e-5e8e-4ce4-9fb5-a486ed79c224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2d89644-bd02-49f0-ae59-e0cfe69f1fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50dfe5a2-5159-4a94-8cf3-110d60f8ca26",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "123badc8-534e-47eb-abf5-42f2fd7aadf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d06c12a-ee95-4f09-816d-9a0ef753396c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0148855-d8fb-4ed0-a026-e78529ca416e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3a283a2-7f3c-4236-a22d-409c1421a3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1086bdd-6894-46b8-8140-d92b520789cc",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2657e48-ae89-4a71-8fcc-a8c553f60323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1471c62c-f59d-40b4-8b07-d1bd6291939e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "996a9bba-1c73-42e0-b721-6a49de5424d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a28defa7-57b5-4fef-adf4-fe33193da120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6bef463-4bf5-4d49-a740-862d6b8e927b",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "271b41c5-3598-41e5-8131-8967f913c902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91a65aa7-6fe7-4c37-ad70-8c0e94535bf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f2b228a-9eb1-4339-b36a-3e7563c313fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b20faf66-234c-4118-8121-c2f0d6a80686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ee1c1a-4ac8-4f9c-b694-384e35b474d2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "570d86c2-6e00-4604-8c93-e29c60105d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "124cba21-4e42-4222-85bb-891d66f8d60f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae397f0-fc62-4e34-85d6-7b04ba903ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0c9b519-7826-44dd-a623-bb2ef8fc028a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0acd294b-bd01-416f-aeb0-8461be672c6e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce817e0-a12f-4a45-af0c-95b0b2a3ee29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "879f8db6-b7d2-4d6f-b040-8d6ef6a8626b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a61128-2ba9-404c-a8c4-a1c25c73c4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "33d1e67d-35a0-4109-a3f0-336509dbcd38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee0c69f-0421-4fdc-bbcc-66a112e42709",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80315589-fa83-4fae-9b57-712adbdb21ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bca11736-9a8f-4b17-b6b4-bfb6a046ebbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4f920e-8bfd-4d02-aa72-d94b37bca1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6c7ffba-39c5-4f24-ac4d-8cd8baa1693b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2961c0d2-4fa5-4369-a57b-d2dd0c99a776",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7272804f-5fb2-4be9-9890-3f35abfd5cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8032206-9cc7-41cf-b607-cb0b6dfde988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "060d9f6d-b422-4eb6-a9ab-db051b787454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "37ba65e9-9705-4072-a812-133e1e73e570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70967204-eaf7-4936-9549-b6c26965e836",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc6ac4b-6fae-4b84-856e-122fd37d5d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f93976c1-dca7-4945-8e45-64cf1f949e47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d54c2a-1777-478f-a0bd-5e90b3954e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fde0f38-4ffa-43da-bfde-46e85b53cc56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb06554-b2ce-427d-8fcd-e0fc480263f3",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c30801d-21f8-47ca-bac6-17a1ebcf2b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "293f68f8-ab2e-41f9-b642-72e39cde3ed7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "283cecd2-b79d-4ff1-97d2-b5f981026752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f52998ab-b606-4c09-a2d9-1c8c77452cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d415ed9-f660-4547-87ef-7b1c2d85ce40",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d57f28a4-dbb7-451d-a973-ce6f989fb3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06d849a5-799c-40c9-b44f-39193a9b8870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a210640-fcf8-4b00-8990-e32169722ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e708447-7249-4b9c-b36a-d78ef4ef9389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fdc81cd-c357-43fd-9e48-460a8f266007",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c46b1ae-3ec0-466c-90cb-2778a86585cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ce589ca-0ade-470a-921b-46176ccb02cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01b6135-ed89-4f23-9166-cd4bc343e5d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "533419e9-296b-4f0f-89d8-36de65895b40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "753951c8-3587-4380-a30f-07bd461a4660",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd93bc3-3314-4fc1-8bbb-22e5e3255f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76ea04fe-f722-4e8d-9469-b7b89476d31a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d12eee7-050d-4e71-98b6-b3aea7319d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "becc079d-83ce-4d6b-869b-1de87591e8af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c0a3e2-0995-4ebd-939a-a6539409cd74",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "037be6bc-72b9-40f6-8291-736d136d59f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3d852e4-1a19-479a-81a8-fa05084a05ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1855095d-35f6-4390-a876-a745893ef842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f0df09b-5972-4b83-ab5b-60ad816504e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50015fec-9dcf-4ee3-bf8a-55ebf16344ba",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31bfdfb-151a-4494-b851-2daad61dc1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37f083c2-156b-437c-a6ea-f277f05c713d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5be6c84-0eea-4a91-9222-a6e68ecc2d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ade7a8e3-bc91-4e58-b6be-0384c89afc7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3087275b-3067-466c-97cf-186a7b65e85b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96b2da4-c4d5-477b-a06a-823663f003b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df30e3c4-1e68-4527-bc23-96b6a3955d46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c23587-dcd6-48cf-8cf6-1bdb068c9a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "51138582-5d03-4cb6-9a15-30400166a148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5889169d-c21e-4cd2-a806-9c2457867016",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7266dd46-4e6e-4abb-ab94-a1f7c62fe2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6405f7fc-1e34-4eae-80a8-18cee86ac5f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe8d9e6-ea25-4b75-87ae-b30e52db34d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1635554-7194-4be6-96f7-69b2e8dc0714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc25eaa-dc8c-4b3a-9736-ae1d0ab5fcad",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b68d7551-b4df-407f-aa81-e23965b7bba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87b9d865-981a-4d33-bb2d-55af44098a70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b88f280-4b08-420f-8424-315d6da87c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcb78097-76bf-4cf9-a97d-1203415a0711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea194da-8d9f-46ca-8159-048e18e7b631",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec7199c-d50b-423f-b0a5-7699b7c4d23f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd4edfe5-8db5-4b62-846e-b4b2ee14f81b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f08f0b0-1dc2-49d5-aa73-baeb60051e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3c3aa90-ed7d-4ef6-ae08-8973f5cad5a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f4e339a-e203-464b-9e3e-a7b90a6d3746",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28abb64d-3965-4270-a621-9ce5f537775f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5141c1a6-5753-4c8d-9ced-44cc45d69d9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ca0bbf-d07d-45ef-ad01-29dc99684552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a11ff89c-3834-4245-81b0-bc5fca8378c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3f6d9c2-489d-45b7-8b39-412a5d71d742",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c8c17f-e2e3-4b80-bdc9-438949cd73f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c736d653-e6fe-4189-83a9-5b4122a48416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1e2279-cbd7-4389-833c-c7a46b45e5e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "32cf37ab-715e-4d6a-b2e5-a7094e1d66c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d71bec-d1d7-4e5a-aebc-4e6a23fb5bea",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a6bd16-a972-47bc-abff-6cc89aeb7908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5ae47f0-7b4a-411d-bcd7-8d410d9913ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db207536-eb1a-4c42-8c04-6ed8610bd703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfc581fd-0a44-4e90-8faf-7e1a4d402d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72414c1-b825-43f1-b9fc-680d9903bf90",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92afbbc0-b29e-4b5c-a17b-c6475c9daea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ca8d6e4-1485-4968-80a8-5881398487ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001a140d-088f-4ff8-9974-5ef569998085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0d9951e7-d44d-4b38-81b4-76f4b1ef922a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd278d7-5af2-4724-8b52-60847e8dbae1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb695828-505f-40a1-a9ab-dd7f785df675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5039a2e3-44c8-4741-94b9-13c2e3ee0ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd77d42-c804-42e5-beb5-0f67f1162ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "beac8e6f-b94b-436c-9254-64f318d86895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f0cdc0a-814e-4459-8a62-cc53ce0de0e3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f0bbab-49d2-4457-8482-f5b1eef63a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55cece5f-c35b-43f9-861c-f360ef9821fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b398cf8b-e76b-4704-ad98-ded034f058bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad9e9769-9b17-4092-b13d-bd7136cb8b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d0f58e-c85d-4b74-9338-16b793dcaffb",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c042d27-8e12-4066-8bfa-4c5cf8298559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "307027f4-e66b-44b5-8090-b37a8b5fd82d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d892d0c4-fbeb-4954-996c-46fb713582e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c117d29-81ad-4f30-8672-8f7f8482c4e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab6bd85-3259-41cf-8351-32ed17569282",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5b7fd6-7d6e-4d96-8cc3-c698867b79e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d815be09-d825-493f-be47-2816d4f7f66a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec4bda6-d864-4ffe-9aaa-6853ff867f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "44bd8954-5079-4969-8c0e-fce47e93a9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e575d1-cd68-4ef6-9e10-c8b2218ac56d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d471dd4-9945-4ded-b05e-b5cba637573d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "300861ef-42ca-466f-a785-c13ca6ad6974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1cd742-b508-4c32-aae8-8ebb7606f88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "35ebc59b-eb3f-4c92-9fb4-78d54658c45c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d7e53b-e3ec-440a-9dc2-28ac630421a6",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f6a26c-604a-4050-9a2a-8c61d1b409fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f87a113-537d-4030-8561-8a70d2b72a45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2f34948-cc5c-4df5-acbb-6385817ebf84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f723c20e-4114-4876-8abe-d34f9c222d01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40bffe2-a263-4946-b770-0739cc0fc6e1",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd62318-639e-4c86-864e-fb40b3de6c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3e7b5ba-c2b4-4522-8751-bbc748e8319b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4982d21b-c017-42d4-84f4-36f45971f4fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "524a6b62-3c2e-4d1e-b75c-f264b3d8a65f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "424652bb-d930-45bc-b2e3-7076b026af61",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89960228-69f2-44c8-b060-e8e80f2fa8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd606597-5fcd-4ed6-87fb-6e602fb35986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "822fd04b-b2c4-46e9-a0da-7cf5868673fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "26e9a2a3-94fd-42aa-97a8-0692205c1d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e60e8b59-0af1-431f-a1df-5415834db324",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b060f12-f258-44ae-a911-152536b17388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01becf04-68d1-4194-9d9d-31a3bcc42227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76557273-9e4b-4999-8f53-65345b6bb2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "68e9b8f0-c2db-4ac2-89e6-84ea970149e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ea31da-3f6a-4b99-8898-5c9fa725c972",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f68930-abe5-4aa2-b585-0b267983fcfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4301edd-46a9-46c8-b4b9-0549b0c94695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141957e6-e65d-4eab-815f-c5dad5bfa99e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "500b2a80-3103-4785-8c09-93e9451fb0a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3efc1a53-bff7-4d96-9fae-4de4776f04f7",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac3a28b-a994-440a-9499-ee5fd41bec3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ff683a2-edea-4147-9d4b-6f09891c1bf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb565e4d-8839-45df-8881-f8de6ebd1fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "50c7a3ea-78eb-48fb-b7b7-1227abf6e027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d94a4f7-0d32-47be-a49e-e0c2bf905caa",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee08a45-3513-4323-b8ba-0c84ab9ae677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c5803e0-941a-4c9e-b8d9-3d0bb77ec240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e800bbbf-ae01-4b76-a56c-d7e0135feaf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d15323cb-fd09-43df-b248-70fad4f51fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d364e484-d19f-4255-a120-81ecd8b756ba",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eafebee9-bec9-4cfb-8daa-0098ac239970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "579a1b6a-3046-45dc-add5-e7c7629bd12f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e812c7ff-9781-4f74-a8d0-8ef4636023be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "61693bc5-2524-456e-812e-71492c210ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19045ac4-1021-49e4-a7fb-5524f22c7531",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb318cd-1e49-4e3f-94a4-cfdd83d45f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76175642-f21b-4c1c-9c46-40875f9c6f14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03232a0d-41ba-4865-af01-d1e5170cb451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b06b6393-9c22-4cb9-b684-59d2a733945d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ffc6a04-cb6d-4cbf-8972-66c0ce02a59a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e407191a-d626-4e67-ac35-32b1b32cbb8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17a26f4e-26de-4983-88df-aeabd800fe76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e63a39-c832-403b-9b74-41fe34b4cb48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5eeb14b2-47e7-4d45-b05c-639ab10870fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92349c9-7b20-412c-8269-5f170c8822b0",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11f5bee-2a1f-4f29-831f-91a8e1db0929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f140a164-7b25-4ec2-a963-6e100f312212"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349e932c-5bc2-4272-b117-6c922541762d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f79f507b-9743-4bf9-84f2-c6afea5a96fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d81b320f-ff6b-44e7-8a61-a4e058e7d33b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba33552-0ae8-426c-bc8e-063ec1dbb698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c063911-e1fc-4c28-a4f7-cbe7f636443a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e98d5872-b068-48a5-9ec4-f4fcf5f15e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "69635531-03af-4e5c-94f3-5968af92e0be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99801d2-cff8-4237-89d5-858416f981cb",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed5aae86-fdbd-4787-a63e-5708a85298db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "260d72d3-4b99-45e3-86ca-afc0f8357c7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846e0646-6b8e-4dd7-9dc9-e22af278d486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8f1ddc3d-ed2e-4535-94b0-46d5eedfb302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afaa25c4-5a74-4a1a-bcc6-590120c7799a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcd74219-4025-4c3f-92c0-e07b7690d9d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c52bc223-3a22-4df6-8b6e-bbd9c8aa70f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b3c67ed-9d04-498f-92fd-36666c90d7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "691ca8f6-340e-4c95-ae80-14dcdc3d7b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb912409-c706-4a2d-9b98-f3f1d2804c20",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1078100e-1d1b-41ea-a966-bb7714edccd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "849c5423-3f8c-4d3c-97ba-0fdd3b4ca78a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762d5d05-d70d-4389-b2ee-ba52ff37726f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1011bc1c-2436-4b4e-af70-ad20162590f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0111271-9cf0-43d6-82df-ece5bd270ba6",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7764c5-5aa6-4f74-b6bf-667695eca2ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98c13e70-26ce-4f17-8673-be742b39ef22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b894490-c7cb-4950-9081-fc09b4437377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a1caabe-2fab-407f-a84e-8cfb6bc43e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79b25629-eeac-42d1-b9dd-f0e9665ab75b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09143b21-f366-4159-8834-0e6f8f8a1b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18a263b9-027b-4107-a28b-aa6eb8177177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a9c11d-c835-4b3d-9c53-41c117cd06b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c04a972b-6e7c-4610-b731-9ac3bc6325c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca8ae4d-5650-4917-938d-12d7123d5711",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "073073fb-4c90-4d63-96d4-e610ebf16b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03f3e785-f185-45ea-9639-4ae9b59210bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56acafc9-8bdf-47ee-9279-e9e73bd6a2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "09f0185e-6cb7-4ef1-bcdf-feb9c043c8fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a996a4a8-3179-4d23-b48f-8ec8f2490848",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0273af8c-a774-40fe-8a15-7cfe30800dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9deeaad-857f-45c2-bf5f-5919305fcf13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c79d927-969d-4e26-a38f-8c3196482da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "888077c6-8426-406f-9523-d640d48fb3ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309f4519-b097-44b0-bfd5-a17b626c27c3",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af87d4a-fd69-42fb-ac0a-51cce121dc60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f83aa3a2-9d83-4618-867c-1143d273c219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe6cad8-7442-47fd-a6cb-77a4ab886e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd4ad8e1-4634-4698-aa2a-5de8528c2d39"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "eac5038d-73f4-43b1-a096-2ac420677800",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e8f00e1e-891e-4d85-bd55-b1faa110c86c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a9893c-1013-4589-ac15-fee89e2870a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aaac6526-3ddd-4b95-84d0-5ee40b94789d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca511fcf-52c6-43ca-a43c-fdf2d1c5e5dc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a72325b1-9cdd-4a10-9d45-f50574d8c2f4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc093a8e-aa8d-4ab5-b292-bc91e1337d51",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d59f780-e0b8-4387-bebd-5b7323c68f9a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa8e0619-e73f-499b-85fa-3917b70ae1fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0a4e53c-3375-4962-b348-af61a7e4ff44"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c4ebfce8-3f77-4de5-b39d-b1a7b4d37804",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cbf316bb-bf01-460a-88b1-36dc4919dc1b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "373e6bb3-cc75-4413-819c-50811f4d7fa0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "55c7b402-28e9-4cfd-966a-6dea589ff52e"
                }
              }
            ]
          },
          {
            "id": "82f060a2-b2dc-4d60-92ff-d7372b14e550",
            "name": "Positive Testing",
            "item": [
              {
                "id": "94bf02d5-37b1-4671-bf8a-441912764012",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "08614588-d95a-4c6e-9bcb-d9f3cdf5a7a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "233b82bc-7553-4c8c-b41b-d89c8fe49e56"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "af21e56e-b5b4-429a-863c-32348be542df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8e1436d5-daf2-470a-b31f-a32a98c4ea6a"
                    }
                  }
                ]
              },
              {
                "id": "e1bfc716-fc60-42c1-802c-655e66f6380c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "de598ce8-a886-43c1-85f2-54edc4ee7365",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b3834935-245f-4849-8b53-f6c8fd950865"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e82c5065-a96d-4fa9-9b5e-570f54ffd6aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0025078e-9d09-4aaa-bcb2-3f5c487ba6bc"
                    }
                  }
                ]
              },
              {
                "id": "32635218-8cfe-4f84-b311-2ec13e5146c0",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd566ce5-a7a5-4cce-972e-e08c0206f2e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e491e74-42fe-4773-aa1a-40f38d8bbe12"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00afc94e-bebb-47a4-99b1-e5f344740945",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0d931ef3-9b0d-47e4-a67e-fca0198dbf86"
                    }
                  }
                ]
              },
              {
                "id": "3c28ab5a-001c-44a1-bb11-b7409a6aafeb",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "96453be4-d9e8-431c-80ad-f0c05aa75645",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "87872a8e-eb60-4855-b3a8-82c18ff1ca95"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "375404ec-c99e-48cf-85b4-55adcd13150b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a7c7002a-d902-42a2-b1c4-f4cfa33578a6"
                    }
                  }
                ]
              },
              {
                "id": "73d3e7d3-bfb7-4d38-bdcd-9470949983bf",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d074c69-f81b-4636-b092-fcc72e5ebd58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6c39483e-12be-4fb5-a7c6-2c285196e5db"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1cb64928-6219-41f8-b99f-fb1ff42d1fd7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f5e13ab8-6211-4158-a367-a31e776468e5"
                    }
                  }
                ]
              },
              {
                "id": "170e4500-c698-4b4a-ae6b-60b95790adc2",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef35e66c-f09b-4674-80b3-7d7ea4c14066",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "43660299-7106-43f1-b50e-c6e03098c1ae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2751664-e32b-442b-ab7d-57c6e402dbde",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "35141ff7-d8e0-4f04-bcf7-cc4dee0ebaa2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "78055feb-bd0a-4823-8184-7489c80bf6c6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8db5519f-abea-40bb-ae25-13df056116a7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c926310b-c19d-42fb-891b-1a6a870b4e18",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "34eebe34-b10d-43d7-b774-6f495544fdc5"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e3d68783-8ebc-4302-af08-37e031ec5a98",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9b28320e-ba81-42de-9696-a29a45b66f3b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2339655e-0c47-47ed-a075-b62e9c4dc357",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "26af04b0-7caa-4c52-8a25-da2f42000dd3"
            }
          }
        ]
      },
      {
        "id": "867632a8-666d-46d5-ae95-40dd25a73be6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "01a0b955-77a7-4675-a631-08e3dc403457",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dd1cf769-c7cf-4954-abe2-e9e55b6aadd3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "982108f5-0ad2-439e-8a2a-dcfc4339ef42",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93f7998-2522-44cf-8287-5b34f5c91e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e1ecee1-a9f4-47d8-8447-4bc3d9e24628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "052a2662-e3c9-44d3-b948-3d80d46dd535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5163648-f940-41f9-91f1-4a23a914bca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff44103-e3e4-4d82-a446-0d469863b907",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b340b69b-b0a5-4b61-a37d-7f5e2f8253c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc3e5bac-1c8a-489d-9030-db9f16b36a10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6169c3a-9ba3-4863-9286-ae7627521790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d3e2dc7-d05b-4d5e-9563-09a92acab838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c421ff48-6d7c-4264-81c4-0603af5c2b58",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "379ad5b7-2dd8-4cc4-9038-35120ec5b694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95286b9c-608a-4c62-8492-be7b5e046376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e106ae-aae7-43bb-a4cf-8023bc96bf46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "66dd9af0-8cf3-4afa-906e-ca1aeb113c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a020c8b9-deb7-42ab-b14c-53228992e800",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4648be28-d777-46ff-99ce-ce87e679e772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c38a6ef-1f1d-42d2-9e08-725226b05c2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfec240c-1aef-4941-887a-0431cfcadd54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "480c58da-3554-4337-b5bd-682bd058f3c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab237c87-1790-4a99-a27f-e9168b7fd8ee",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88601647-7a2a-4a6e-8dc2-649f5b0f7ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09d453fd-9e6e-4410-865b-0992e2af94d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d54022-7779-428f-b29e-a55002a3700f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4294fbdf-3322-4c13-bbd8-af17d27d9cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "994d6f01-3bdc-4290-bc74-c96c41c1554c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c83c599-aedb-4715-9706-104fbbf17fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f9e12d7-ada7-4b17-b4c1-6010d4ef6c29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718dca19-5e53-4898-a4d6-a1ee0af4b684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9aace498-54f3-4bcb-b23e-d37d0b8ff1c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e795330f-51c1-4aad-8c91-1e418cd6b606",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ca0d4b-b3be-4dc0-be47-6a9c9d7763c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5d8e182-f502-4a74-a872-36c511c883c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80fe8359-e8c0-43b2-bb0b-9f8eccb09434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8c7bcb3-11a7-4dd7-b93a-ca592b9420ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02775e23-f96b-4525-b76f-25b3f9d09088",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60c44a1-4719-42fd-b153-4467232093d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc9f2065-a494-4bc5-9078-df2bc309601c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81231c55-171f-4b7b-ab3f-d926817a91e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "439c1ca8-1ddc-4105-a7e7-9d27e1eeb068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b5e329-4235-4976-aa98-844d25581758",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4504bf52-a644-460f-8fe2-1a4407ec9e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b3f4731-9bff-4517-a926-ad55976fdf59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0e0c7e-f217-49d2-9b4c-b5ff9421fd7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "135be5bb-4119-48f1-9189-62a401731fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c2dc03-6fda-45c2-a07e-057b9a3228c1",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74162109-ed54-4691-8e97-3e878434c76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88729b46-7638-4143-b452-306f03d7d5dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e8718f-7c59-451e-ab19-5045fc9eb94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c07013f3-e379-4c93-bbff-1aeb48bde9d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc79fb9-af2f-4b03-a141-6018bbc81d0d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92bf72dc-89ef-41ff-9344-d015be22236a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7335e64-547b-4d3d-9997-ad830eb0048a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c521e062-5fb4-4a05-87f5-f05d95e98d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ee9b099f-6cd7-454b-8eb3-1501e0f29ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed82429-411b-4769-a013-1e29d26d7fa0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ebbf77e-dc5c-40d7-8873-f783f51ececc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6680ef29-85f1-4e95-badd-2ab5d26a1161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad4d834-5164-470a-b1af-fcdc690b78ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c73082cd-9d5c-4031-9e5d-7e2b5e48f021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa899c2a-d566-45db-888b-64c9abfbc9c5",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac10564c-15e1-4f8b-bd12-62e710d496a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6190f42-0fdb-4c85-8b5f-01815cdacf82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a069d7-aa1f-4659-8599-5f58b0968b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0538b4a-422d-4abf-b856-77c16a4d1396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e72844a7-3e0a-4aea-92a1-66e058f2a46c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba327c64-7b87-4092-94da-2efedfc8daaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91da8f2c-6563-494a-a678-445917d1ffc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886d0776-1165-4a7a-8d6b-ab92e5111089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a46014c9-3fea-4180-baca-e2bc1e5d44d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f17f92-511e-4419-a33b-9efdaa4185e8",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fe1559-91ca-4eb8-a060-eded4f80339a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8633c280-9636-4f28-82dc-23945c757287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c376ef79-86a4-4f34-9c21-f06ef89e7265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfb7f56c-9ad2-4377-b2a1-09e8237c5254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a47e1180-30b6-489a-8098-d3063a901e52",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58841eaf-7cb9-4f00-8511-34fc0818e8cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84eda36e-f125-4cad-bd18-1e73bb4a37c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ec9097-e534-4580-8fb9-51581492172f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4a09c88-185c-42bf-999b-d99d578efb56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1709abb2-4bb0-4b50-a00f-574f8752bbca",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7759d0-0b54-4bd5-8638-c31ce7e8b3e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3dc638e-c045-4b9b-8b56-f398e8e6350c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a40b1f0-894d-4fd9-b074-37eff8d0b417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "771dc826-3952-4d03-8f74-19cd7658ef95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d1ef4cb-d68e-4a40-822b-3cb4e647a9d0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96c6bd7-8f2b-4946-92b8-73c874f5f245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58336e34-d148-4456-b5de-3e8f68661dad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab4f1e8-c663-4bab-9f9f-99c91405e707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "37051eab-d474-42ab-9838-894a58e709fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d08a199b-6981-4be7-89bd-46376ed452d2",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7620dae2-66fd-419e-858b-4fda05247343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1804d1f8-8ba3-41f6-90bf-9f36bc0fc8b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afeb3fc1-9398-4c6e-b0e0-9d3b7fbf066d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca6137aa-1638-4f59-884f-1eaf40d580ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77cbfe84-bb86-4f44-a421-bd34f78c4414",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "265d6cb9-5f89-4475-acdb-7302d468b2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3141eb2-00c3-46e0-9cef-958ffe82428f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d78530-b60d-4efd-93e3-93ec95a3bad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dd2751d-3774-4ca4-b7e5-187ebe407706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b73e4a07-73ed-4e42-89e5-27256bce7a6e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb6712bc-e408-44cc-9f46-92b64d7f03a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ae6110b-2e1a-4591-803b-76cb69536999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8819cde-8d80-4b32-a23b-e1a45844d5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e05b35b-d9eb-431a-87d2-51c3a9675e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430aec56-5a5e-4b8a-b00a-e55d274474c5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24dc4d46-6602-4ee4-9df9-bc1237e3cd01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c2dae72-19bf-465c-8f04-af0ed090f4d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833f0fab-3602-4521-8d4a-6636394e92e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76a6dd51-b1b2-47cb-9f37-e083bbc87a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b2caa33-5b15-4599-82b9-1678221247f9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34942435-724d-45f6-a20d-f1a46699fac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbea5abd-02a5-4ecb-b722-dbcf6cb30fef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995c173a-322b-40f4-a0aa-0021c01cf2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef9ee7dc-d0be-4d7a-b7ba-6dcbba70b5b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f39426-b129-4c3c-b729-dc64b5d6d206",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71bbd492-726e-43f9-89ec-d6ac5f05b899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f9b540-72c7-4ef8-9085-9062662c60e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22770285-0c27-462c-a7af-4b1fd319d454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "364b7036-35e6-42ab-b3fa-95759278a4f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9290097-ace7-4006-b858-0507801a264a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44e3e22-3f7d-483e-9438-746a71dd30b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93921040-6732-4906-94ab-60d4b402c8c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35144a1a-cdf3-40a4-b920-ff25d3944ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ed1d4ca-8577-45e2-9bb2-92d40832f0a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e559db-6b63-41e3-9e32-a1d26ffa528a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "608a1252-ca54-40eb-a04a-2d1b61eca460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c52c9d18-4208-4f14-bfb9-386ae54b6d1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173c0c1b-82b4-4f55-89d9-fab9c73cb16d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfbf83cf-233c-47c8-8ca7-bba6c6218820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b755fdb7-b6eb-4b1c-b6ad-220483d93bb7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a693cb0c-4b0a-4b60-a795-80c377bfaab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e05acc4-24eb-4649-9c35-0b3d32fbba1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90199be2-f080-4c10-8f8b-c499670842de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2a6fa61-5aa2-43eb-bea2-bad4f6f05c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e7bd182-2a40-482b-ba57-0a19565a6b55",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e4de5ed-19b2-4be7-b5dc-128c6214346e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d75fe75c-6737-4ac1-afb4-d4975ce133c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3adf6b2e-33d7-4943-9a1d-20d93bf32fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "311b77b7-45eb-4870-b870-3df5922a9ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76539635-7d0f-4951-970b-15a4a4176e77",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "225c61cd-b3e1-47fa-8161-1220a811bc5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85cb9e3f-d04e-404a-99dc-abf5e9affee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1811a8fc-5a51-4e4f-8f39-1878b54056b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cc1ea30-79b2-4615-9f53-506dbb8d9c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d772d4d-45c7-49b8-aeb9-72d36e9a7326",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e2060c3-296f-456b-8011-96a84a45dcbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6794042-16f4-47f6-a4b3-3df3c5127d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64035b3b-e96f-4dce-b430-789158f0b101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2aac9c02-6240-4e6e-a1e7-9a25833a7cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b4daa8-8e16-4daf-844a-fb486de9c82c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62979b00-8dd3-4a6b-a0e5-edcf556e3a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ed36aee-1a6a-4baa-af0f-c0fd95a3a2e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "646a3439-ea46-48df-8146-9e4012dc508a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aab08df8-f8a7-4488-9754-633c8acf0e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6386a5-dea7-4766-9262-f0d38abd4e4e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d392e7-6468-44de-970a-aa3a345dc67f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86e2f0ae-9deb-45a3-9179-4603444a4cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df38060-c623-4b8c-afb6-51baa6096842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6979b638-6bc0-4aa5-bbdf-cc4e5587463d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "32abaad9-61f0-4258-ae71-0a1ab921e504",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e46c1f80-38c6-4882-8b0d-ade822d098c1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cde75df3-57d0-44e9-a752-2361c34ed3ca",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "65860385-d09c-446e-ae17-dd7cd9e0bd6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8283e9-dc48-4cb0-a885-34bcfcc19acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8fd7e92-4db1-4f07-9211-f8ad7150207f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db56a698-a3f2-46c1-b697-f3f0bcc628d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5c13bdd-d3e9-4b4b-a767-9554e8529d3b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4af8f380-dee8-4a81-a4bb-c9e53601666d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea6b7c07-92ba-427b-be20-8ca8449f5973"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ac0e7f4-2c1d-417f-9f20-deda2c7bad7c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8b965bf2-a71f-4c7e-aa62-c6deb4a3c53a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d7e6b1bf-94ec-491a-a384-ca22291ec38d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dd195dd8-0a69-46a5-977f-650776b29d34"
            }
          }
        ]
      },
      {
        "id": "32efc8da-1c3f-40d3-95f4-e6ddc6a08bdb",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cb625e09-63fd-48da-81f3-f81a04ab95f9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2ec29ecd-fe82-4d88-983d-6c67dca3cb46",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2273ac32-ccad-432c-8c96-ebd437ab6c30",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b67311-92b2-4cc4-82d5-2f2b264ff20e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14ba10d1-1327-4293-8f1e-df51d22e386f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344754b6-6c79-4920-af57-e9363d83eb7b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb615bf-d59b-4338-839c-d5843aab5459",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5757f6bc-a81d-4341-b6be-43e539923948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a963f658-ac22-437b-9a7a-c4f6aa2d362c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f88385-429e-4326-8895-6b33ff18ce5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0955fa85-9736-40dc-8773-52b56ce777fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac605d9-f79e-4392-bbf6-647c25d572f9",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5842bf2b-7a4e-472d-92da-b115ac0e619c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1675ec5-bc04-4859-abc2-4b7b28cd9196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c41b80d-2262-4cbf-802f-2d0449300fb6",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24dc07f-d068-4ef8-8602-65504c6cbf36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a17d6004-a260-4a03-bb76-dcb7a4cc3b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae0b8d59-704d-4bd4-8459-4b96d36e33c4",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "256bbc5e-96bd-4013-a6bb-5d306204a369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1caf1679-8008-46d2-b6be-42218c1fd208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb62ae1-7e19-47a7-ae7c-78a2401ba44e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b3483c-7304-4de9-b2f6-91d8b4d64129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4889ce52-26ad-44bc-9a84-cc880430d351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8aa46f-da50-4af2-ab7a-968eef9e3d7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f688b77-2c68-477b-aa11-7abd4a1d59b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eaac60d-536b-4038-b154-e550fd58f785",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb887b55-9fb2-4834-8802-41c463b61bc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9033f2a-e2bc-4ae8-9c3e-4ab9c7bc05bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "715f69f7-1180-4f2f-a1d3-5f129f059a12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ebc7662-8886-4475-b14b-18a04870b072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b08e176-1074-4475-8e12-9ca001ecafba",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ffba16-7751-4440-9d89-69fcd808efd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5045062e-df12-4850-a2dd-cbdb02c37a85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "346652b2-2d38-44aa-ac2d-9164c65edc68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7cbddd4-90a1-41af-b8c2-96bfbf63b53d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd177499-b867-4356-9073-b18b2ce17f7e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8711e851-2543-4737-9619-1e638650efc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "177de707-12ce-4a83-8fc9-e8899be37fdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b657778-e1f8-45fa-a50d-b7f6fdc5436e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aec23d3-b768-4401-a148-3fcc82f1f2d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1413a14-bdb6-4951-8dba-eac18952b432",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeda7d0a-ee8a-4210-8fe0-f74f7f17224e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a622ff2d-4a89-4fcd-8579-44685de4f9b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f502feb-489f-40bf-8c37-86db17d2c0cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "611ee60d-569b-4c14-bac5-6f47533eca2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b36f5c3-6f3a-4d2a-8777-691509b53566",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da249d71-3fe8-457e-a3f3-bb869fadf8cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c78f812-e6c4-499c-87df-cf6822d298ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe9a873-535e-48a9-8034-6a2bdbfbab75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "facaf43e-cbf5-423c-8e90-e25ab578ebc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d119854c-fa1e-4e84-b178-8ee6a841f422",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2422fc5-db05-4fb2-9604-0fd16ec456d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e11346a-62e5-4583-9259-cdd6e4f1c636"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84f35dc-733f-4b2d-accd-d53e7183c80b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f16842af-b9d2-4437-82ac-7f2bd4bdd7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceed3c8c-ae71-4adf-b5fc-8c8ec0ee22c6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a452dff5-b4d3-42c8-9929-20eeec4e5ec7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3f290f3-646c-45c2-ac9a-a5bbe00c8e5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89718c20-b73f-4be7-8d72-fd97e03f3e13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "656437aa-0056-4ced-b13e-7d61c91de6dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea62a62-9e7a-4351-abb7-4b6bb30ba5c8",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dbefb1d-d813-41d6-806d-ef56f919fd86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0293f859-d1a3-45de-84e5-5e0c64ad6885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2074b583-3eed-4489-a978-1178e1894d2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69c9e38f-dd14-45dc-a328-7ce0e4b936f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f5d4ec3-8407-493d-88ea-b946f739903b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b37ed82-8a0a-4356-aeea-280745226406",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a515223-b27e-4f8a-8100-f1827627084b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ffac052-21de-4934-bc70-2e61840a1f20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ebac166-83c5-45a6-8cdf-cd461f486f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "657737bd-c50a-401d-8d35-8ea29f807c5b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f031d637-f242-4036-a6c5-844af616aa40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6f09fac-5bc0-4387-b980-64541753b2ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92695352-0c1d-4298-85c3-07d2ca88eec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85632a77-8969-47c4-891e-f1ba134e1000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6330b742-560a-484e-b7e8-4f89658c1213",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4910a34-3612-4441-948e-b05bd780b824",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81c3d63d-622a-4dce-a0b7-445bb563c94e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54399b5a-29fb-4027-9010-fb37d615d7f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd27845e-e224-4593-8848-6bc49408568d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0bc84f0-9246-4239-9e20-e3254d4b82b6",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37f2dd7-ac3d-4ed6-8d75-400f69d978b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd76a76a-b817-403d-a991-b0e89740ccf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e665ec-c176-4708-af7c-b1cd6c428214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aa9414f-981d-4bac-9378-2699026e5951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67847620-39a2-4de4-bfb5-fa28bf783e30",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d5e31a-2eed-4132-ba2c-0d2bbf729404",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1075432e-ae13-49a6-a4a4-7674e28a4af0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "706f7a29-26d5-4999-a4a3-ea2a633db56f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "731c43a5-fb24-44fa-baa9-58b08b04ba18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a98129-b049-4aaa-85af-c312b868cc2f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77213ff1-91ac-4d88-a072-06aadfe648ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a80f0ea-dbc4-45bb-9538-e928276d4f19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f8bf42-b676-4db5-b89f-f0fa440946ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d16d14fb-838f-495c-901a-66e194acde68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea7a542f-bbb2-44e6-b9c1-d2c428ae2a97",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a7ef39-9890-4310-b80c-cc90f65b97f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "407f9f0a-00c8-436b-a24f-f516dd3c2855"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d803347f-1f9d-4e72-9c71-e0015518579b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd8735c4-da4b-4b9a-a361-ec6064dc40f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f40cd2e2-ca26-457d-a30e-0a332e23e166",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0942e1b-a481-4929-bd62-f7686958a8f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d13a8253-ab57-4f36-8d78-65f763dffa0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1755e3e-a4e6-46a9-af8f-cda2b2f4b446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "968c5a64-1075-451f-be9f-f9b44e685ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ae8be5-269b-4f86-8d61-9c4b5d8fd808",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecbf37c9-c850-4702-a365-f900b7b93730",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25bab0ab-f052-4408-aae4-521abab32c65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e7d5ce-d41c-4d63-8de8-79c762b4eea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dd5d9db-9ad4-4235-bbbf-600100d05113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a32cb7-c4c5-47e8-9d54-0e4f91ece422",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "519362b5-7aef-4e66-a296-397d5385e6cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6ffb83b-abde-49be-bfe9-0ffcb6423304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15cd0db-96a6-4821-8a50-d82d727afb04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81ef7521-7a51-4622-a409-15950fc6aec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cddf757-6b84-4e5d-85c7-cc895aa0b830",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3995c1a-6c8e-4d16-bfc3-3764ccb752d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac4a48d3-7fca-494f-b2fc-ce35805acb90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "940a60db-756e-43c3-8465-7ce66ffa5925",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "630061b4-4479-44a2-9743-ac50ad6e6a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "074faed7-0890-42ed-b740-b3fe0f363788",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef060074-795f-425d-85c4-b21675fbd34f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e922470-e0cb-4cf3-81d8-a90d1e0d7586"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c264ad7f-a522-4571-8358-e927f690a79f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc37794f-8ff4-4902-bab2-ee894241994c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81006230-ef61-483f-ab02-a922247a7a1a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9890dfa2-84de-4ca4-9dd9-76887406733e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69916075-01cd-406e-8551-95e61aca5db0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c27702-263b-4532-86c7-12a9f829efb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69293de9-dc94-4329-8dc9-0ac17dd9cf82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c2502c-35f8-4b52-8fe0-ddc8d119de2b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac5636a-60ca-4b26-8001-0e0771cc9362",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf06834e-6983-49a5-9f8c-1b5c4a6099f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7249b5a7-a4cb-410e-9052-e42d955ab626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5033a76-a412-49c0-aa61-d338f39114c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e29e990b-504a-4a21-8e47-775378a394bd",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bdfad28-ce1f-477c-86e4-dc379d9a6b59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c94fa0c6-18bf-4bf1-9b6d-cfe7feaf8873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60961b97-9bd4-4288-92a6-0d69c357b145",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab87cfb1-28e8-4b7e-88bf-990f91e3a42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25848712-2293-4ea1-bce7-e132842b37d6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5319d0b2-1b43-4b51-8195-5204e3bf7f08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c5f993e-2804-44a5-84e0-dfc41706032d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "190ce609-0b3c-4e17-b1d8-b8f472f7e978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dc63590-4fcc-41b2-a8ea-80c8f17ccf57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40994a91-fb5f-43bc-b0c7-f7f223beb6aa",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8506259-1cdb-4d88-97ba-dd0f03b3c869",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a7cac03-3035-4f2b-80c1-47c551a3e61e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e6b5606-ed87-4b71-a5be-2be252faaa7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c3248ba-2d5a-478f-b830-5738a7a2f92b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9c7ad4-c6c3-4d2c-b55b-5a9748466952",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e90df6-2b91-4921-8b55-53a59f365452",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e21cf40e-a115-45e7-93a3-a1b2dd0f35bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae99ece-78f6-43f0-a87e-cf0e498be608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe4976ce-ed57-45d0-97f6-24d9d4a38048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87688ca6-7b6c-476d-a63a-e6a4e21c5c96",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "911436dd-19b4-40f8-9d57-5dbbc56d3d34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eee0750e-bba2-4604-a594-35ac32164169"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8622536-f3b7-4b68-aa86-cb868d5b5c6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "191b4475-83b8-4963-a765-6e8668a75bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6047409-b10a-444d-a133-1f694456b452",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09c9dc2-6c76-44fe-b42e-b68a56bb2c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75acd2f9-29da-4e30-82f9-9a439a7f812c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd02d89-f4ef-4e7b-85ff-043289180ff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a2bd1e9-43e6-4630-ba22-040bebafae7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4649d218-74aa-4b1a-8b29-993f1fda3cfa",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2013dcc-c60f-4942-a821-08efbe886ea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "294c5a4f-ff17-42fa-90e6-9b23dcef510f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d3eead-50b3-4917-9f8c-20966d0e1337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76fadfb1-4387-4fc7-a3fa-989ad08a48f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dcd3993-e939-4cc0-9a05-036023af508e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3555cc42-fcf2-468d-9227-4c342e6ec8a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfba7b02-63b5-45a0-86f8-57290dd537bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e435eed-6593-4539-bb7f-fa11b9cfa300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc1fe7fa-3c33-492d-ab23-9520c985ddc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfeb1088-5048-4de6-b262-718feaa02c7d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ea7ee2-7cfe-492d-b3a5-9d1309e0c143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d2cbe09-612c-4111-8ca1-99e9d1655921"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e08c310-91d2-4ddd-812e-fb34a79aa12b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8728d315-3897-4956-ab40-6f08b1169b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfddfb9-6743-4a5d-950a-f72206a194af",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a3df75-a0a7-4923-9bca-a01c2f901f4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30fac335-d0d5-41ec-96c1-2893e6795f59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec016b89-2348-4872-8c79-60240b314a73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6603a1b2-dbbc-4373-a91b-7e6608359b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d5faf6-6997-4259-ba9f-0dcc1e8c2c41",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab51f18d-9f45-48c2-9885-e4c34b486b6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6993e20-7bd6-486d-8a1a-4f615309f1d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54add731-c352-468f-ac5c-e74f28f47cf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc3596f9-724c-4884-9c86-6142b6283434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f80ed1-f7cb-416b-84ad-02c2fad38a62",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ade05c-dee3-4ba7-8a8a-4c74eb24ee9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "780f668c-b6c2-4a43-8072-9759080cc97b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ac48d3-ff37-428b-a455-cc9c6b5d184f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24b57392-31e6-4da4-b95b-1c55d6ccf64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc51c81d-f1f9-4376-86ba-803e4e990fd7",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c141553-3ff1-4842-9b99-3996c97f990f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4b4b43-92e4-4ade-8f94-65fa6f33e8a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b983d33c-02a9-4f52-a080-b68663b8f7dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "108ef912-4dc3-4d20-bfed-6ca407396993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02315ce0-9a2e-4ee2-ae24-cdf906ba0434",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6060dda-39e6-4f2d-a335-fd2b2e81b653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09760302-e51b-4923-bc7d-894b9b65cd16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "484bdddb-1f8c-41ef-9af5-3530e9cf4f29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44742b2b-d7ba-4b32-a78a-6eb0224f3039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c952d97-80ed-437b-92f7-ea41d07999ce",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc998f99-1c5c-43e0-9292-838e8ff01f25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a2e43ca-3ec4-4bd3-adf1-d22fbd4c94e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a3bdb6-15b2-4dd4-ae51-80e8ee935d09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de2c3f5a-8261-486e-9520-8a9221ac28f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d346c5d-df76-492b-9d05-8f11eebc5fe8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5c2ea2-3888-4fae-8a23-66ac5492836b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cc23565-5262-46ca-afa5-ff5cb2151080"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4939dc79-fdd9-4aec-9080-c3060becced1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "814b4830-b11b-4694-99b4-45e7290a4ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6455e8dc-76c7-441f-b21a-3074cbc5bb22",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1492e69-2c9c-4850-a0f8-c0318aae21c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88484a01-58e0-4f18-9c1d-58e377eeacaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fdf084a-d8ba-4dfb-9e29-3930e7aae470",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6868cf8a-5f94-466a-aa68-50099366a868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da989d75-d4cb-4593-9968-33a0b1bdc328",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99774cf-5c40-4b4e-a111-9ec05843616a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "321a5772-3360-4954-8024-e9817da4bc10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab32a45-2cd5-47c0-9e46-13e76598fa52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "663bd0c5-cda8-4a3f-96d1-d7d783dc9271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6e0eef-8ae7-4874-b8be-8b36e4f969d0",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8ca524-6fcb-4dd9-a822-b52188b9aea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e088354-4f3e-4754-8cfd-08dfb083a669"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d92da64-0f0d-4cc2-908a-5db85ae08e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "046032bc-57cf-4753-a80c-e9255c97ae58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a58b6e82-8130-47d5-a8a6-d4dfb02af099",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be94b9ea-a6fd-40c5-a602-afa576335f69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35e21b58-f361-4946-9b2c-f0c9c7cd6962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0bd2b3d-67ba-42f9-8474-cb93d73aefd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb2b3eed-fc21-4d5a-9972-ce0926cb2596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5215849d-560e-4e94-b418-bc698ee40f5d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a54f94-8c5c-473f-95b8-9a4490dfd6d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5358f633-67f7-4326-b82e-5f48c0c6161a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ab6dec-ddae-4193-8b4c-9e26c4e5a866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84f09f25-19c0-4380-9ebd-3605a2918539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54839aff-3d41-41b1-9753-9b5bf47c8d36",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b402b7e-fa21-4625-bfe2-0b56e2372f44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "859eeb86-b76f-4340-95a0-728d4727c664"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "212ab2dd-09c2-4f7b-9daa-ffb9540e986e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46e8bb54-dc97-4e25-9948-7d7f99d1b28e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55604745-d280-4c41-a945-4faad5eb80b4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d07450-31bb-47ed-bb17-df351ed231fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15ad6ced-749a-405a-885a-f19d2d1491de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "226e6157-7b66-45d2-a146-315a24ad8724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94f14859-ed93-4aee-ac04-6db44f0138fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1209faf7-0913-4256-a307-6a19ec2607cb",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6630a553-1252-4046-8a28-3cd6a72a6471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd7d1691-47d1-400f-9ca5-1eb7de8555fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a50a699-e172-4f9c-b3b0-7347dbb029d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6ccaabf-1ae4-4180-869b-f1c024db7c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367dd33b-db93-42c1-8f67-6dd9b6e2e018",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ae75c0-2476-4647-a769-3ec9b8ba377f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3200aac-ec1e-42e9-8284-3d2937b410fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd101e5-104a-4bed-aecd-5864a346c218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23e98467-1940-476c-9b8e-c0e64f583a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06324cf4-0d9c-4bb4-81b4-f41a94903ec0",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c5ac2d-ab88-4ab8-8ffd-beac940db5f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4da5583f-5240-4b24-ac59-e106e4c9f21a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "079883c1-32b8-4f63-b395-9cb624242b1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7576b945-b258-42a1-847d-bc7c5e1f7035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab27a12d-c23d-4549-aa53-a46bdd817b98",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe0acee5-cc0e-4b7a-b6d1-8a48b06da01e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c780733-6bba-46cb-a69c-387adba0b473"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85628868-0189-48dd-83b7-36e63f6fd45d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93f555ec-ed1a-4c1b-bee5-e1932793ab9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81b5757-e77b-438e-bd30-5e6442f371c5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c15ab6c-93b4-450f-842a-94e29e762786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fec8f66b-9828-4ac9-9f0c-4e04544a6e35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3017c4c7-8b0a-4c61-868a-4719f795d5ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf71a76e-5fce-443c-9807-700cc6b22963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186b4a57-259f-4677-b8d4-95ee3976bfc3",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c23ec30-0058-4bec-b28c-b6d99a32e457",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d64b07d8-f0aa-4f78-a8d5-80538743c7bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93dfd8ab-a508-498e-bb0e-0ed67e547006",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7580757f-30be-4fc8-983d-686edd5a7055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f888e095-d94d-47aa-8aa5-077d71e8c4e9",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a2e93c2-3601-41f5-89f7-d77c44ec23f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e673d02f-f50e-4d40-9e01-ab10e2eebc7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4143c99-c07b-425d-8561-2e9557c0994f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5983d5c-8c83-4597-87b2-6f5cc79be59d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a5a231-2c55-433d-a222-48a5071779ba",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfbeb983-4e65-47e9-9107-43a0ada19a4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0e617ba-3aaa-460f-aeb5-aaa469f552dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ce0209-3449-41b8-95cf-8e147202c7e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec536a9-f5bd-42b8-9450-16ad70426155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b47223-9b3c-4d91-9085-f6a568711874",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d8b317-d500-474b-8cc5-2b79b12fddbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cb0569a-6388-4a63-bad5-f5d23879e094"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1135cdb3-bc87-49ac-92b0-2051e6270cd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64236f62-e4f1-4df0-85a4-bfe6da000d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c05cea49-68da-43d0-b136-e6c6340126e6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c4d8b2-c849-454f-8b25-6ffdf84bd8b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e8556b-5ca1-4117-baef-832d18e2abe0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5876282-3155-4c6b-a5b4-3a159967c440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "644383ec-b561-4b81-a6b3-a8719bbc1399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "407bceaf-4566-44b4-b13d-2d8c68a1e7bb",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8719cbde-35b7-463e-ab8f-c395b0a73412",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7078f745-8300-482f-95be-c2c0339081d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "728949c0-b143-4237-9f99-b87449f36f43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ceec6f5-88ad-496b-b570-b578587871b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a67d58-5676-44fe-93ca-d83591dfb29b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb77bfd-c25b-45cf-bebb-e52e2b63b379",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f63a569f-0cee-4d38-8918-ffdbf8957492"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f13e4112-51bb-46b3-b95e-a8906dc2fb3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d37996fa-f4af-4d7e-99b8-f1bbc4248d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "156cd5f4-6c27-4432-8f2f-b1d8397a2400",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44eab148-e3c2-4db7-a31d-f36a08250028",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a3e224f-ea11-4b7e-ae15-afe4b6ff9cc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "304f40c1-cef8-46bb-8139-eedf85e2c9e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f7ae40d-c51f-495a-932e-e73ae7f04630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9614298b-b7c6-4d40-8825-eaa19194b6e7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "737ebf6f-a71c-4704-afe9-51994d56bd3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "434bd18f-da65-4dac-8c63-97f91d47aab1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3cf3deb-894f-4b0e-9655-a1c4536e1d85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef4b4b4a-e00a-45f4-ba3f-2442587e69e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea7a74a-9d77-49e7-a89f-2ca6605e7921",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c1b2cad-443f-40ab-bc28-b36e0157d141",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd77a782-cf48-4261-964b-16d0073262b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6b4e6c-9728-4b4f-ac55-fd1c8ace706b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bb5a41a-ca89-4f4d-8c99-2611f275487e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe4a727a-ad1b-4a7f-8972-e581b243eb4d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92af0472-485f-4934-bee5-2b1162842603",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09045682-5530-4017-9090-1fb16e38f6db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9cfd425-004b-411e-9655-81dd218ca2b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "902e0d14-72d3-4bff-950b-2fc2d946fda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84326b2b-97dc-4ef8-b145-345204c0ad8e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294ae4e4-125c-446e-a86e-a43a0056e2c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "783d0b80-0879-4e43-933c-f7c40e2f547a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f9f29c-cf28-4f65-a21e-e88749e1b4bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a17c014-1a21-414b-9002-ee652702758b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f3a8bad-1a24-4c6a-ad5a-d95507ce680e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e888d23-b94a-408c-a840-1d73fdecc30d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4464a17-5f9d-4ab7-9d61-9727485faa59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6927d7bb-1ca0-4a84-a7a5-284a7c2ea9d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89b2f8f8-8acc-41ee-9d39-641221c025a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1555df68-4761-4667-8e4a-dac028595a7c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7b5a15-7a99-4362-be4d-a754f21a1a73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e811c206-6cb5-45d5-9104-dc997e299e52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56f11d7d-5ff9-4c89-bef6-754b44bb2c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfa334ef-60eb-40ad-8e02-8b90cc18f6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf74cea-d0e6-41db-974a-371122b42794",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f8a1ed-3ce8-4f3b-9049-0b3f1fb1dbcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ff3d265-0857-4dcb-9ab1-5c51c8e3c993"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2c61ca-9c25-4d97-a49e-daeccec95511",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f0f66c-d053-4a6d-bcba-78a57f72bbf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "727687c7-9d32-4696-88bf-0ce5d8c9fbdf",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8da34b99-5b1e-4d4d-b540-f55446bad8ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea7dc125-d1ec-4b7e-9a90-6fb5722e2b1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "781f9f97-fecc-4fdf-8310-091d7a251767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cfed8ba-e4ad-490e-9072-ee4f565eb7f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089b4b0f-2fd9-4119-a4c8-de29cef3488b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9226816a-2523-4d9d-9af3-f5bdd2594d20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28ed308b-5d49-4a79-9089-4c661f643704"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37424126-d663-46df-aad7-138829403d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "096ef282-11e9-488a-9944-57a5367faaf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d30657c-a13a-4ee3-9953-710e8bac5672",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2cf5c2a-a270-4c15-9145-39c77b9978fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68aab740-02f1-4f3c-bccc-e1c3eaddad62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a510971-1a57-4e1a-8ae6-788da15bf97a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ccf2d5-1910-4c8d-8ae0-64fedce0ec5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "528b7253-0e5a-4f17-9fb0-487a8e611304",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "636eaa17-f7dd-49fb-8a94-8f20d67603d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "393133dc-95e2-4a73-b275-8537ea12dc9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b28cf09-3d7a-4ce3-b09b-675991a56b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8e8cd45-9935-467b-b932-469c34ffe4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ef02c7-339c-4681-9d8b-614ddad3016c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4a61d6-64d8-4037-a885-2ca711e353fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8585761-bac0-473a-88dc-226272025a63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6614a952-da22-4743-b826-ef7182d45f62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5203087-44eb-45e3-aac3-d9139352b412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "570e082b-4392-4045-a0cb-ba24c6a925ee",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f253ba-f3af-4a41-88dd-d092a6144180",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0efedc65-b2a5-4f75-9da8-2939f5c63ae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "280c2205-ff1b-40c0-8ede-3cfa0e3ca15d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "950eafec-d6c9-4c82-8464-7b97bf5fe2c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44136e63-08fc-45d2-a5a6-dc99bd32f6d3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8772234e-6901-475b-af59-d55000ce442e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dee73956-80af-41bd-b41e-28e9b0d7fc5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b7f13a-0afd-4310-9e7d-fcddc1f6f6e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93554adf-9748-4a09-92bf-3c419025caf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2384589-4db8-4fc7-9a76-f98c80043fc8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f169241-b21f-41d1-a025-88eae85bb701",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "675ab269-d4f9-49fd-9077-a5c7bae8b4de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f365f0-257d-485a-84a2-bc74fe5b6a98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "927c1377-4655-40de-a6d9-66c70b68e4ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4eb1cf2-8b58-4e3b-a3db-c1243289131c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a137d8-3823-402a-a014-85c810658aec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54f79688-2e9a-40ae-a7cc-ef1d19659850"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3249016-a2b0-48ff-a758-9a49d1f26899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3780a7b7-2647-4890-a639-980e747090f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad0acd2-771a-41a1-8d2d-6bced19f4f3c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77bc495c-913e-4c21-97e9-f3425563e9a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "727c18f1-5608-4d90-8c4f-3d8a25890382"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46168c18-ad85-4172-91af-be6ffeaccd1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d105f6d6-2f99-4cb1-81ed-46319aa10bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a55f7b-1efd-434f-941d-12016160da18",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e59d70-ba74-49fe-b6b0-9f8be6b6f887",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38580841-fddf-4422-9e9f-892d2903659e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f4ef83-43b5-4d61-a613-e4e2b1860106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa0dd347-113e-47c7-8e28-46cf916bc749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec2968c-164e-41a2-b0b3-43ed64713047",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b989928-2abf-4f88-b831-a8f025ab553e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ffc99bb-3e5e-4d94-a638-e9c35cde6ec2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d869c3-a51a-44da-bbb2-e7157ce94213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a8ff629-82e1-4593-bb7d-4b635a02aff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8589840-2faa-4e11-87e8-c5e21851080d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b27b96b-822d-4b74-84d9-b109520ed544",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9476a28b-4d0f-405f-9247-b99dec2218ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "074e049d-9a6b-4e1a-a511-8d5ed64827b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e834972-599d-4816-bc24-727461b7fc79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae43ed9f-5c70-42a6-aedd-008b7214359b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c5bc77-6b83-49bb-a097-e183df844554",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1857c114-dd0e-435e-931f-da5a1490b4ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "259446ba-b250-4b39-850c-36229697be90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e1cbc7a-45ea-4bd9-be89-ce9a61827125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc76528-f67c-4ca6-aeab-55e2fbb1200c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2b28527-b883-477f-a477-5187692ba5e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c61529c-61bc-47f1-a623-3220a5ecf395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6831feb-c4ec-4641-b600-3aa98fbaabb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "055fa1e2-9ce9-4a1f-86c3-804d7281652b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "981503ec-cd0e-4c62-ad35-fc76700c7fc5",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f97151-8e67-479e-8af8-39f0831a75e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c72cc03-7d20-45dd-b57b-01a2ff97f494"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55dd6b6-57fa-460f-9a38-f1588190d0fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd01c5f6-10c7-47c8-b4a6-07e5e528c735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dece9f6a-7a83-4c68-9544-1c865af2d5b2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0436b9-01ef-4a08-bae6-45bec8560b3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03bd0106-8059-40a0-8a9f-cc4a47e9c07f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40020e02-74d3-4257-acde-b9f98e65a5b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6b34551-6561-4ccd-9010-266dcdbca068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52e9b0f4-688f-4601-aeab-3acee3418c81",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85fbed7e-6ba7-4b6c-b72e-08020a4b4755",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7593ad0-a379-4b2c-bfec-66787266f3b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4ef112-59c9-434a-b505-193b5c165aae",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "139f1bac-a7da-46f1-90bc-abf052ef140c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ce051b-e419-41fd-9ba0-2b2a057aeb57",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35364993-c672-4aab-87ce-9381394553d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16a699aa-c5d3-4fe8-9224-a02b1c9f831b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8e362d-799b-4cd6-a19a-65d90189b68c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87752f64-e00b-49f2-a505-4d23c5bf8988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d3fa5f-6800-49b1-98c3-1068361bdf2f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a5bd1d-7382-4d7a-ac65-e677e527dd08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3be2cca4-7051-4a75-a436-d0947533f4dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d25404-d287-4dee-a675-241d1de89425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de341ea0-0430-4f8c-824e-044e10d79bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa7c831-993e-41a0-84a8-f0e84bdb9879",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c75d52be-19b1-4702-ac19-35ef483a5f4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33a8b338-2c1e-4689-9877-b3529ffc898d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0378f60f-48fa-41f8-bd47-ad91adb770de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a82605bd-fdf6-467e-a2e0-519796ad6e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45340970-a6ab-4fd2-9ba4-f73786353e20",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76116789-0e8a-4b64-9628-50ddafd6f6e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aedc7f9f-14d7-4e50-8810-349bbcc8234f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8891e978-0d67-4be4-a751-4487a839bd54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "967dec89-8baf-43ac-8707-f38b9bf68464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc9800f-c7b2-4b2f-acf3-345ee1c03ee9",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db06eb29-3054-45ed-afba-9e85f3c46be5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a214e7f1-1305-4507-9030-8ac36601f7a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de5696a-b9f4-4e9f-a8fe-c855c5669f48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab9a073d-6732-49d6-aced-f140a48a9350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "514fbe22-3602-48d9-af64-60ab9d0029f5",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53fd26eb-0622-4405-a3c4-b1a0401cb616",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bee697b-d2c2-4994-9448-ae4affc86e2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45aa3f23-b844-45fe-84ec-ccf19a62ac9a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c345a7a-3caa-4728-8788-bab7df77a2ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56aadbff-258f-4728-ab4e-e91baa6553f6",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5863fab2-5e09-45c3-8470-fb2e6db02dbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b645cbc8-7ca1-4b59-af08-f59eb686e543"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96612322-cf6e-40d1-a935-306154cff6d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e15881da-e892-41f6-869e-455493a5d552"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92ede405-61c7-4f8e-9758-a0bb2e283624",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2befea54-d5df-4e5d-ac04-98f8f9a1656e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "733ec6a8-2302-43e7-9cd7-9ebd0c3308e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4f9f131d-211a-491b-a847-0a920d2d7179"
                    }
                  }
                ]
              },
              {
                "id": "5f499444-ab85-4071-8c4b-4fe97a831a41",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f7aaf8f7-22f5-4634-ac4e-c2db2dc38c2f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6103d874-68fc-4629-be08-1c39e9c5ad0d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1bacc033-3b2a-40c0-bf8e-38493ce07f37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87279140-0c51-4618-911f-5a00d431780d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a8ca2d74-4645-421b-801e-d93ec146f6b5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03eb2479-d35f-46c4-8a93-aa7e97fbbc7b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5584a0e5-6b15-4c5b-bc85-6ff68bb8434b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "93094c8c-762a-4613-a924-2fcefa352d59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a193f723-1087-4782-95b6-5b7a65dd1a20"
                    }
                  }
                ]
              },
              {
                "id": "da2f571f-b790-4d4d-befc-bf99d3105ef4",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "2c5a161b-439f-47d5-9d02-d7a4ac5e9f4d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f932e26-6ab7-4de9-ba1a-77d21ad42ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6e2170ef-f39e-4409-a448-02127dcabc53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e45e28a-cf38-4298-b648-09b8c8829627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89b9427f-9370-4e5a-b09f-c493691def3c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b86ff2da-e480-4ab0-abdb-182dd2d6c4e3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ccb22cfe-2b6f-4c35-96a3-81b58ac757eb",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cd068aa-43e4-41d6-91a1-cda0a0d86cfc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9f673ddd-775c-4517-b42e-f1d1235fa780"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ed41305-1674-43c8-bc8f-0ead8b1797d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd61bc5b-ec7f-4c46-9b8d-2c8354847a20"
                    }
                  }
                ]
              },
              {
                "id": "35341f08-d0e0-46ea-9a8f-de89dead9599",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2348bf4b-53b1-4ae0-8583-436804dafc7b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6c86cdfb-bf24-4139-832d-e1c7dbdb9393"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a34836b3-0db7-4db3-85a0-eb803376d496",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf855895-8073-414a-bf72-2c000e7bb0f1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f92a68b-31ab-49cc-b02a-03a484112ab9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "371e2a49-f350-4647-81b6-703dcc53fbd0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2837c7cd-f0e5-416a-8dec-ac9204884e10",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd0f0bd4-acc1-4a63-b8f7-bfa0c7a77cf2"
            }
          }
        ]
      },
      {
        "id": "54a62485-c83a-4508-b9c5-7278cc53e291",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e9d72938-14bb-4c39-af57-4da5d04f526a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b1f21d06-7569-4877-9342-b966f68a1191",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bf23343d-4799-40f7-bb02-6fa1cb524ef8",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "969e25ad-bc83-414b-a71c-4cc76e53d15d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "573b5202-d8bc-49f5-b6aa-75c4d75414fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d288af-76ba-43bb-b03e-2156dc84de19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43fb6266-1ea8-42b0-acd6-e81a1d85485b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45e53ef6-aa93-45a5-8fa8-bd7e879af31b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5b8f1d3-13c3-4d41-914f-3c446ba7d4fa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "55a29552-23d9-42ab-bf4b-20f48dd8f453",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e27c424f-97d3-4aca-8eba-482b132bc51e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4c94907c-0fac-440e-9123-d9a49c86fd76",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b637eb47-0dbd-4dea-8136-9d566b863cfd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f95cc017-504b-470d-bad8-f15ace1bbf21",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6db708b8-2d82-459a-8287-470da87570f6"
            }
          }
        ]
      },
      {
        "id": "c56aa8c2-79a2-45d4-abda-4840f7843d7e",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "fa7fb753-5c5b-401e-a07d-5ad9a340c2cd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "67757629-8a2c-4158-a452-4e5f15e56a9f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "61ce00d9-ca05-4682-a3a1-01b07ae09bd3",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca5d4d8-2642-451c-89b5-18e680093956",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b22f331-6d8b-426b-9ed7-e5f2aa993b9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de77b84a-31bd-4959-9963-527746cb9e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd4419ea-9fc5-4fec-bd08-81c9c89aaeac"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4d6bae6-0e0a-455f-b8cf-5c9f6673343e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "929522f6-c75f-4cb7-8830-ed25c3b62483"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5dcfe5c-3469-40bf-9487-6c61ad0d6aa9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d88b30c4-5c3d-42b9-9730-b3e29089c31a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "93ad9185-72e5-46fa-bbf9-25d7d6445f09",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f325e988-4533-43d7-9797-31eae039d2ef"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1603aa18-c5e2-4f90-b63e-ba4b0acbdb73",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9cb0b698-81fc-44dd-9ed7-8882cc2a8940"
            }
          }
        ]
      },
      {
        "id": "9dc2b1b3-967e-420e-91bb-89b9958bcd43",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "27c4d9c2-2109-47b7-8082-cb024fe741ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aa66b246-5868-4bf2-ab9d-2c3ae89d3790",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "72ec1f13-e4fb-4a16-957e-43f25376f7b7",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81945893-5107-484e-a0e8-b35ce0161467",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "447c9e59-c96f-4c59-848c-ecd378fef8f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ee2726-776f-4c9c-a638-11928b9fbd83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7d14a79-f9d2-4dbf-badd-2b19cd77fbdc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7774ec8a-cc63-4b62-8ad2-085f4018d3ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa442920-df65-4e04-88e6-e5beefb9bb00"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4423ac2b-7d55-419f-9dbc-3b1caf678cca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "90fabf42-fb93-4d04-8e4e-2d073fae0840"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "59dfdf78-4c75-4d31-8e2b-fc70438bb7a4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "db38ffdf-bf8e-42cd-9a30-5df7ec0fd44b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d389a25-f5be-431f-b1dc-754016d6a178",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "68496318-aabb-498f-98ad-190b66861c03"
            }
          }
        ]
      },
      {
        "id": "b503ff41-db77-4f5e-8b95-9b7cd7990f70",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "268c42bc-abd7-4483-bb5f-52510d236697",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2e8231d-4070-43c3-b55e-059cd0a9923e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f07b75e8-b3bf-451a-b074-62fd7454cda0",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f8b94b48-40ab-400c-ac33-4d013ee20895",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "315443d6-7478-4a7a-afd7-5f59b58780e5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 260.1626016260164,
      "responseMin": 10,
      "responseMax": 6610,
      "responseSd": 742.2338878631309,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1685666545256,
      "completed": 1685666619763
    },
    "executions": [
      {
        "id": "8fa97268-2c68-4ff9-9def-287c8ba978e6",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "87eedd45-516a-4f12-9d05-c959bb9b62c9",
          "httpRequestId": "a57cb5dd-1bb7-41c2-a913-4e19d646a2c3"
        },
        "item": {
          "id": "8fa97268-2c68-4ff9-9def-287c8ba978e6",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8e673c4e-cc5a-46bc-b10a-bbe56ecba803",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 0
        }
      },
      {
        "id": "67d460ad-55da-4e46-9987-088fac1ce868",
        "cursor": {
          "ref": "7ff93247-0254-4a2e-9cab-1d1c04194770",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b321ef7b-bde1-4f57-9b92-7118c4805927"
        },
        "item": {
          "id": "67d460ad-55da-4e46-9987-088fac1ce868",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8f65328f-fc53-4d00-9cfd-b46d698c9c49",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "060c3df0-a51e-4a98-8ae9-db3a62e9c968",
        "cursor": {
          "ref": "2125618f-758a-4af1-bb5c-abcec210bd8c",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fd573959-2444-42ab-aca5-7830a241f5ff"
        },
        "item": {
          "id": "060c3df0-a51e-4a98-8ae9-db3a62e9c968",
          "name": "did_json"
        },
        "response": {
          "id": "56db1533-1327-4493-8f3a-51294ddfd77a",
          "status": "OK",
          "code": 200,
          "responseTime": 370,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afbb79e6-fc3b-47ac-9d2b-e185b1b5f9fd",
        "cursor": {
          "ref": "3a624cf8-acc2-4244-ab0f-f8db3d679868",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6883a317-900e-4601-9afd-03ea01845da6"
        },
        "item": {
          "id": "afbb79e6-fc3b-47ac-9d2b-e185b1b5f9fd",
          "name": "did:invalid"
        },
        "response": {
          "id": "16c1466d-8c24-4ec8-a015-c560fdb78542",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1902,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "afbb79e6-fc3b-47ac-9d2b-e185b1b5f9fd",
        "cursor": {
          "ref": "3a624cf8-acc2-4244-ab0f-f8db3d679868",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6883a317-900e-4601-9afd-03ea01845da6"
        },
        "item": {
          "id": "afbb79e6-fc3b-47ac-9d2b-e185b1b5f9fd",
          "name": "did:invalid"
        },
        "response": {
          "id": "16c1466d-8c24-4ec8-a015-c560fdb78542",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1902,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "27b5a8a1-671e-45cd-8a77-dc1c6f469d60",
        "cursor": {
          "ref": "9ccf12bd-098b-4637-91ee-2764ff1a03e4",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d73c9e0e-217a-4c8b-94aa-836c1e27f7e9"
        },
        "item": {
          "id": "27b5a8a1-671e-45cd-8a77-dc1c6f469d60",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "49517e16-d465-48cb-abf2-c926f507b819",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f75c852c-a2b4-480b-938f-adf5cadca0ee",
        "cursor": {
          "ref": "e9c3fb86-334d-4296-9509-cacc29e36868",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d9f15cfc-5a00-416e-bd6e-0aa6f6093ed3"
        },
        "item": {
          "id": "f75c852c-a2b4-480b-938f-adf5cadca0ee",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8a0808c1-45da-46f8-ad95-76ed7306bbd3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b334a54-66d7-4527-b0a1-7f7b34d01448",
        "cursor": {
          "ref": "dda4d1ab-2726-4a8a-b2be-02a10c3b1c4b",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8d7210fb-9623-4572-b095-03cda69913eb"
        },
        "item": {
          "id": "2b334a54-66d7-4527-b0a1-7f7b34d01448",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f54673a3-7493-46d8-b147-28f0f1ad05bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 110,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "e0bd5c04-5775-4bb2-8366-cbaadb77ea8f",
        "cursor": {
          "ref": "6e40c18c-5f10-4436-acb2-c3aa930bf369",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "154fd975-a008-46a5-8ed1-a72d35af80fe"
        },
        "item": {
          "id": "e0bd5c04-5775-4bb2-8366-cbaadb77ea8f",
          "name": "identifiers"
        },
        "response": {
          "id": "ebb8dce6-8071-42bf-9839-5f95cd667cda",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "789e40f2-7dec-40f5-9d79-3aead9babd73",
        "cursor": {
          "ref": "faadad06-704c-435e-907f-d9f7ab4798f5",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "58fa485a-8f4e-41d7-8c8f-592aace034e5"
        },
        "item": {
          "id": "789e40f2-7dec-40f5-9d79-3aead9babd73",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2f2fc211-aba3-4d1f-aa03-c527c8432e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08d0276-8093-4da3-8102-4a685fb551dc",
        "cursor": {
          "ref": "5fd6365d-b001-44fa-8b8c-7265ac962710",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "52cf2969-b31a-4d38-98cc-c714397d93f8"
        },
        "item": {
          "id": "f08d0276-8093-4da3-8102-4a685fb551dc",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "efe9cfcf-98c6-417a-b4d2-7719e2eea747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca4ee56-c884-43d6-81f4-18e06d063d4e",
        "cursor": {
          "ref": "a6cbc7a9-f08c-4e50-9303-195461932b19",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "81975486-e2d0-40b1-a5f5-3167b29a4277"
        },
        "item": {
          "id": "eca4ee56-c884-43d6-81f4-18e06d063d4e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7ed569eb-7e3b-478c-9950-e7f7f268c376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a8673c-64d6-4dfc-8fc8-e636ecd0e52c",
        "cursor": {
          "ref": "9e0e20d6-be32-46bf-8a93-cd659dd7d7e7",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0148c4a7-5759-4598-b214-401a2d5b90a8"
        },
        "item": {
          "id": "b2a8673c-64d6-4dfc-8fc8-e636ecd0e52c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0c401181-a04d-46d6-bbf3-2b8209c26bfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4bccac0-928a-4c71-b883-aa9daf7a9623",
        "cursor": {
          "ref": "53caf4e8-458f-48f2-82b1-7f6e0178b424",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "293c902b-2d61-49ff-9e00-dbdd142906b9"
        },
        "item": {
          "id": "a4bccac0-928a-4c71-b883-aa9daf7a9623",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6a7094fe-6a73-417e-9b8a-4b3d42aac18a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 386,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4310b1f9-12a5-49eb-bf7b-f73927d66106",
        "cursor": {
          "ref": "53a2aab7-ad10-438e-bc05-b4d67a0907bc",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8f272994-4d0a-426b-adea-b308e6373047"
        },
        "item": {
          "id": "4310b1f9-12a5-49eb-bf7b-f73927d66106",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8f7f7bdd-0702-4198-89f6-aca7f58d6df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf690d2-3f53-48e3-90bf-eca7f7131bb3",
        "cursor": {
          "ref": "ce1cd48c-f2fd-4403-928a-3af01a050866",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "81d0071b-0db3-47b4-b10d-e41c8ce019e8"
        },
        "item": {
          "id": "8cf690d2-3f53-48e3-90bf-eca7f7131bb3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "54f52693-16ce-40d1-b493-183a2281e589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0467bb-910a-406f-9187-145d02bc0d1d",
        "cursor": {
          "ref": "ca1abd70-8cb2-4fd5-97eb-1aab67b93c62",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "decf845a-22e5-4bba-9c3b-3146838d1c5b"
        },
        "item": {
          "id": "0c0467bb-910a-406f-9187-145d02bc0d1d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0a15ae21-95ad-454f-9a3f-afa26e303653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcfa7ffd-4269-4beb-8de7-0778ba7b05bc",
        "cursor": {
          "ref": "66a41a1b-70f9-4729-9351-6c9cbfcfa836",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c699a2a0-d7a9-4b5b-bf15-aadb39ad8c92"
        },
        "item": {
          "id": "dcfa7ffd-4269-4beb-8de7-0778ba7b05bc",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6af19464-9871-468e-b4e7-d2a0f9c6010f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2242e57c-fca5-4fc9-bb77-75eee833cf45",
        "cursor": {
          "ref": "1403b894-7366-44a2-9a3d-78301243e664",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c466ca70-fecf-407b-b946-65abb8ca7ae5"
        },
        "item": {
          "id": "2242e57c-fca5-4fc9-bb77-75eee833cf45",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f5136fdf-6d7a-49af-aec1-807f32661e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6140e637-8845-42c9-9f2b-c7ac89bfe3e9",
        "cursor": {
          "ref": "a75b4900-cdc8-438f-b7a5-dd6d9ed48ee2",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "aac51ecc-0cab-4a5c-a44c-0144b54d953e"
        },
        "item": {
          "id": "6140e637-8845-42c9-9f2b-c7ac89bfe3e9",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "651e2526-e2a1-44ba-8516-12799f570af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c7934c-a5a8-472e-9b77-e3ecdd3609b8",
        "cursor": {
          "ref": "486cff4f-a75a-485d-aa44-fbbf73ec3631",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c5a47435-1757-4f9c-a799-09b0a7f7999f"
        },
        "item": {
          "id": "04c7934c-a5a8-472e-9b77-e3ecdd3609b8",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "436a6f37-ce6e-442c-af7e-258ce562c8c3",
          "status": "Created",
          "code": 201,
          "responseTime": 972,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "af75173d-f051-4cc3-a8e1-5c13b5d081d7",
        "cursor": {
          "ref": "75cea8b7-a65f-4cf4-900f-39544c20449f",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bd66a292-fb90-4314-9e1c-9c7d1f18c022"
        },
        "item": {
          "id": "af75173d-f051-4cc3-a8e1-5c13b5d081d7",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b6d6adfc-4dc5-433d-9819-f13803b6c0da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df55a9a8-ea6b-4c47-b022-8fcfdd3c2fd7",
        "cursor": {
          "ref": "902cd751-32fc-4fe1-bee6-464885f5ff42",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e9c286ab-ef0b-4cf2-b9d6-c2114377e93c"
        },
        "item": {
          "id": "df55a9a8-ea6b-4c47-b022-8fcfdd3c2fd7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ae11eda7-1ba1-482c-b188-1f131580b11e",
          "status": "Created",
          "code": 201,
          "responseTime": 6610,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "5c11d043-8074-41d0-ac87-76cffe90c0b2",
        "cursor": {
          "ref": "2f428dba-7bb3-4df9-a0a4-07f35c519f19",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7e7b354f-9d94-439a-9b92-63cb0a754b86"
        },
        "item": {
          "id": "5c11d043-8074-41d0-ac87-76cffe90c0b2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "289bc8e1-55ff-474f-8382-af6fbdb4fca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 278,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec9b1869-8081-4738-9f27-b9225e697b01",
        "cursor": {
          "ref": "238f3a1e-05b6-4548-968e-a7ef2f29557a",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3668f60d-2c02-43f2-9e75-4c6205330f5b"
        },
        "item": {
          "id": "ec9b1869-8081-4738-9f27-b9225e697b01",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b3fcbfc5-7837-4f16-a515-ff04123f2428",
          "status": "Created",
          "code": 201,
          "responseTime": 3765,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "5181d595-3147-404a-b70b-29e5706ed754",
        "cursor": {
          "ref": "ee5f024e-a738-4788-b0ea-496558359ffe",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "417d28d3-877d-44f7-8c69-973e4461d8ce"
        },
        "item": {
          "id": "5181d595-3147-404a-b70b-29e5706ed754",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "85bd9525-853a-47c1-b54a-84a33fcbbea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea049598-1627-4222-b5c0-df6bc97d34de",
        "cursor": {
          "ref": "6ea6df9a-24a0-4462-8445-e794db685217",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d897b434-302b-4850-b488-4e407de64eed"
        },
        "item": {
          "id": "ea049598-1627-4222-b5c0-df6bc97d34de",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "90aa98fc-0889-450b-a6a0-4d775466258a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f3efc53-813e-47c5-8c43-580c9928c1f2",
        "cursor": {
          "ref": "9af3c05b-c40d-49f9-90a9-f5381984986a",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "44db0807-5b6c-425f-bce5-78d79cba74e6"
        },
        "item": {
          "id": "0f3efc53-813e-47c5-8c43-580c9928c1f2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4d8c814c-a39b-4697-a879-1e9ea8adac70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b3da9b7-7809-4e9f-8b27-a73a0310754f",
        "cursor": {
          "ref": "f523fc27-c5ad-47ea-bc4f-cec36125093d",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "50bb204f-4872-4df4-8b1a-0b376055691b"
        },
        "item": {
          "id": "6b3da9b7-7809-4e9f-8b27-a73a0310754f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f1c90372-06fb-4565-9d2f-b11ed5bf8542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040694da-3887-4106-bdda-d6d2b49ccbbf",
        "cursor": {
          "ref": "5e9c3749-f7ba-41fe-b16c-1622e16a678d",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ca52cc80-d3a9-4f65-8b4b-145d7e432952"
        },
        "item": {
          "id": "040694da-3887-4106-bdda-d6d2b49ccbbf",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4b9c2b01-52ba-41ac-a794-406191c4bc31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b4222d2-0e9c-4212-9219-30ef9a9ccab3",
        "cursor": {
          "ref": "6fffea3d-c9eb-47d6-9658-65d0029cdb33",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "150e8f77-6f51-4bf4-ab3e-9c0a83976a31"
        },
        "item": {
          "id": "5b4222d2-0e9c-4212-9219-30ef9a9ccab3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2938eaec-53d4-46e2-bfeb-be1dbee1a48d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bde02eaa-b5da-4f5f-b5d5-f0da823c3a40",
        "cursor": {
          "ref": "24811795-47f3-4c72-9588-a2ea3f18615e",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "88c4d1df-87fd-4d2c-96ef-0769be6c3869"
        },
        "item": {
          "id": "bde02eaa-b5da-4f5f-b5d5-f0da823c3a40",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ace58995-2706-4e9d-b95e-4bf32c115b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "374c55ff-70e7-4580-9b7a-d0c98430c2e5",
        "cursor": {
          "ref": "d49df266-c367-47cd-831b-66df1899415a",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "91b72ebb-9451-4b7d-92b4-541b6487292e"
        },
        "item": {
          "id": "374c55ff-70e7-4580-9b7a-d0c98430c2e5",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1146046c-b550-4c48-8a62-f6652e82fe65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b53818c-e26a-40bc-9a22-e8871fb9cc31",
        "cursor": {
          "ref": "24309496-e08d-4267-a766-fba04ae55d48",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1dbe3fbe-dd5b-439a-902e-d7dcd749d0b3"
        },
        "item": {
          "id": "6b53818c-e26a-40bc-9a22-e8871fb9cc31",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "96620aa4-9259-438c-88b9-c72c61700ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8808dd2e-9116-4b40-8626-780dd03e1c33",
        "cursor": {
          "ref": "feaed70b-da1a-4b3d-a4dc-5137569795bc",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "015979bc-463c-4ec2-990e-3469e463bd24"
        },
        "item": {
          "id": "8808dd2e-9116-4b40-8626-780dd03e1c33",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "86bf2855-17b8-487b-8e56-d693c5f416be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e061dd5-746f-44ee-899a-f05d7dccbf21",
        "cursor": {
          "ref": "99560200-c62e-4583-8cce-c091b28c9a4f",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "34c09032-2c45-46ef-8955-b2b30f7eefbd"
        },
        "item": {
          "id": "1e061dd5-746f-44ee-899a-f05d7dccbf21",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0819d702-4a1c-4138-b8e0-07403ab95688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "302fe8e9-5adf-49b5-9035-8c360238e2cf",
        "cursor": {
          "ref": "a7139172-22b8-43b7-84c4-53e94a3dfb84",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7d6c9488-f1cf-4d7b-995b-df35637691f8"
        },
        "item": {
          "id": "302fe8e9-5adf-49b5-9035-8c360238e2cf",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "dc1ee170-3cae-486c-bcc6-53775b3b28e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8950e92d-11c1-4215-8cd2-8d7b2c17a4b8",
        "cursor": {
          "ref": "9c1bfc17-2420-4a15-8f30-a0d631f22d72",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e78384b7-3a47-44dd-bf40-485bd47629a1"
        },
        "item": {
          "id": "8950e92d-11c1-4215-8cd2-8d7b2c17a4b8",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b3c5ea13-ba0a-48a4-b342-f6280d3a50c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee90006-cd54-43a8-b89b-7e75429b11b2",
        "cursor": {
          "ref": "46eea011-de7b-49ce-bc99-8208b79a634e",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a764448b-e365-437a-baad-837d60b40809"
        },
        "item": {
          "id": "6ee90006-cd54-43a8-b89b-7e75429b11b2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a97ee88c-171a-4713-a500-b4837744c021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1545bd4-37d2-4551-99e5-dd85762da203",
        "cursor": {
          "ref": "b8b25de7-9bcf-4da9-b77c-f343d58a15a3",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0c69455e-058c-4ed0-b45e-1837a39f8923"
        },
        "item": {
          "id": "e1545bd4-37d2-4551-99e5-dd85762da203",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "41dbe901-3d6a-479d-a579-562f90435ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018b9690-63d5-4339-bc61-403b53edc64d",
        "cursor": {
          "ref": "cdea9f32-b185-4c89-b2f5-498503146dc2",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "26909e27-f492-4e80-bf72-933e78bd08f2"
        },
        "item": {
          "id": "018b9690-63d5-4339-bc61-403b53edc64d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "3da6936e-8314-42e0-86aa-3173cf38de90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4daef1e-c8cf-4ecb-b043-0c898eb6f133",
        "cursor": {
          "ref": "b7404c98-362d-4c27-8e20-d944eba81187",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4b3443ed-3fb3-470a-bbf0-05519674058d"
        },
        "item": {
          "id": "d4daef1e-c8cf-4ecb-b043-0c898eb6f133",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "caf21b86-aa7b-4000-ac28-b0abc1c0e171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "594a3420-14c0-4501-95cd-56f7193054d9",
        "cursor": {
          "ref": "dbf15ecc-73b2-45d1-b2e3-a2c21db2e748",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f37fb2c8-9f4b-4916-a0be-b10363266ad1"
        },
        "item": {
          "id": "594a3420-14c0-4501-95cd-56f7193054d9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b48b5071-240c-4123-9a96-793f3e6d4cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bcc5b3c-990b-4e12-b313-eaa84e2f8db6",
        "cursor": {
          "ref": "6d7a243a-4017-438b-98cd-0a2ba463f28a",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9d0e1abf-8a64-4499-bb64-6d1de87b59c2"
        },
        "item": {
          "id": "3bcc5b3c-990b-4e12-b313-eaa84e2f8db6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ce5e6c3c-8eba-4d48-bcfe-83186f2c141f",
          "status": "Created",
          "code": 201,
          "responseTime": 2522,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "3acbf471-655b-49b7-8a3c-406c63f14ad5",
        "cursor": {
          "ref": "07e48b83-d74e-489b-9a55-832f0f83c53a",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c9f236f8-e633-4c45-bc9f-0e4257a1a072"
        },
        "item": {
          "id": "3acbf471-655b-49b7-8a3c-406c63f14ad5",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f8248d43-d5be-4ba1-8cab-a785df62c35e",
          "status": "Created",
          "code": 201,
          "responseTime": 2878,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "0af4b11b-5aad-465f-8b5f-7f117f79d9bc",
        "cursor": {
          "ref": "3766b98a-6e28-4e63-8136-a8ed589aaf18",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "80c8613a-bbcc-4e7b-b1d0-c68bbdd628cc"
        },
        "item": {
          "id": "0af4b11b-5aad-465f-8b5f-7f117f79d9bc",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b9e46595-37be-469f-9f2d-b186a30243b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "decb3732-8915-4b32-9f81-22d65d46c5fb",
        "cursor": {
          "ref": "6d81fb62-9412-4f9e-b1b4-385ae4526bbe",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "db13a37c-c120-4e68-aff2-20627cb71d28"
        },
        "item": {
          "id": "decb3732-8915-4b32-9f81-22d65d46c5fb",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0c65ad5c-a0e8-4f0e-b3a9-10514933ab62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6c15ce-0698-48e6-8d82-d3ce900dae5d",
        "cursor": {
          "ref": "7ddf13fc-c6a3-4c85-8c1c-d42abfc690ac",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "89b7921b-61bc-483e-a61d-7a61f6c1e19d"
        },
        "item": {
          "id": "cd6c15ce-0698-48e6-8d82-d3ce900dae5d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "cc66dfcf-a911-44c7-946e-c102d4a445c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7b1ff6a-18b1-4ddb-9449-3c372193a0c3",
        "cursor": {
          "ref": "76caeae1-fc35-4b07-a743-b47466a61c7f",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7f12c0c1-b07a-48a0-bf3b-fa9cbbaed5ef"
        },
        "item": {
          "id": "b7b1ff6a-18b1-4ddb-9449-3c372193a0c3",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a76466ff-6b47-4e75-a765-5986c7ddd002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9197131e-db88-4773-8973-bda674c2c2c1",
        "cursor": {
          "ref": "335570f1-d3df-44a6-ae85-fd7e586c3853",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "316934d0-2378-4d10-8395-66f8d1ec4ed6"
        },
        "item": {
          "id": "9197131e-db88-4773-8973-bda674c2c2c1",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "27d89f43-93ad-4775-886e-9e09cc687be2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de8117f8-5cee-447f-bfa8-2ac002c85189",
        "cursor": {
          "ref": "00a888f0-a776-4d66-a755-3e9d2586e517",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "440785ec-05b5-47cc-b60b-d900169e11a3"
        },
        "item": {
          "id": "de8117f8-5cee-447f-bfa8-2ac002c85189",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "573d4748-88df-4677-92ae-911cb46b0888",
          "status": "Created",
          "code": 201,
          "responseTime": 1863,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "bb19c807-404e-44fa-a2c1-adb63b6421bf",
        "cursor": {
          "ref": "f96c7f1b-9f0a-489a-a665-dc83a952bc8f",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1977d25a-c1db-4cfb-84a5-a5cac05f07fd"
        },
        "item": {
          "id": "bb19c807-404e-44fa-a2c1-adb63b6421bf",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f147b3c7-7962-4b84-a92a-7f10e783969c",
          "status": "Created",
          "code": 201,
          "responseTime": 2506,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "c15b1d27-6e8e-4f47-b11d-a68cf7d494c8",
        "cursor": {
          "ref": "f7a4f446-be92-4439-9fda-1d661172fb25",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "757d5e1e-14ea-4046-9449-a188082695e6"
        },
        "item": {
          "id": "c15b1d27-6e8e-4f47-b11d-a68cf7d494c8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "807edf1b-d010-413f-a050-36ec7262ec27",
          "status": "Created",
          "code": 201,
          "responseTime": 2929,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "e8548fd6-c840-4171-a3c0-e0c3e35df47d",
        "cursor": {
          "ref": "18913015-1e66-4d6b-9146-154fead24bcc",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "97b95266-0f3d-4855-88bb-280f8d700433"
        },
        "item": {
          "id": "e8548fd6-c840-4171-a3c0-e0c3e35df47d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "995bf6e9-f926-4f74-8845-1e4fa5734514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50dfe5a2-5159-4a94-8cf3-110d60f8ca26",
        "cursor": {
          "ref": "75f6d14f-a92e-46f6-aea1-27a5c50d8551",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "22bc822d-fd29-4697-b9d5-2bd6815093f7"
        },
        "item": {
          "id": "50dfe5a2-5159-4a94-8cf3-110d60f8ca26",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "8f0005e0-f350-4402-a757-5fe7d0e37d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1086bdd-6894-46b8-8140-d92b520789cc",
        "cursor": {
          "ref": "584b5f66-cc44-478b-a28c-e5be36f311f7",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "4aaf1c97-8570-4346-b13b-6a1b171d1710"
        },
        "item": {
          "id": "e1086bdd-6894-46b8-8140-d92b520789cc",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "da3d981f-d822-4901-99a4-e0bdd3f1ec61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6bef463-4bf5-4d49-a740-862d6b8e927b",
        "cursor": {
          "ref": "41cf8d41-4870-4f8f-a570-002d6d8aae52",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c0f3dd12-59fa-42ad-b5de-bfbe1d8c757f"
        },
        "item": {
          "id": "e6bef463-4bf5-4d49-a740-862d6b8e927b",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "90a36ecc-3f07-40ff-8542-a12ee704a1a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ee1c1a-4ac8-4f9c-b694-384e35b474d2",
        "cursor": {
          "ref": "8badc0ad-661c-4367-89b7-e1b0a3ab854d",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "85c46a26-53b0-4763-86cc-b83903e7f1ab"
        },
        "item": {
          "id": "82ee1c1a-4ac8-4f9c-b694-384e35b474d2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "38fc5e17-72db-42ba-bcf8-1982e0eaffa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0acd294b-bd01-416f-aeb0-8461be672c6e",
        "cursor": {
          "ref": "47fe8b1d-7508-4a57-acf2-c6fd55ce1d0f",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "85f2751d-c3fe-4dcb-a899-08ae0bb9547d"
        },
        "item": {
          "id": "0acd294b-bd01-416f-aeb0-8461be672c6e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1e25a67e-b40c-4102-89cd-77b583f2815a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee0c69f-0421-4fdc-bbcc-66a112e42709",
        "cursor": {
          "ref": "adf9b3fb-f2aa-4789-8afd-29010d3bc2e5",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "20f2a48b-6cc6-4976-b790-7781251394aa"
        },
        "item": {
          "id": "dee0c69f-0421-4fdc-bbcc-66a112e42709",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "cf1c02a4-bcd6-4d1b-a32a-216fdcadc65e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2961c0d2-4fa5-4369-a57b-d2dd0c99a776",
        "cursor": {
          "ref": "12b06774-a6b1-4942-ba60-1151766210d9",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7db983e2-e866-445d-a34c-d9561e085950"
        },
        "item": {
          "id": "2961c0d2-4fa5-4369-a57b-d2dd0c99a776",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e19316d5-e629-44eb-bf1f-3697ba91496a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70967204-eaf7-4936-9549-b6c26965e836",
        "cursor": {
          "ref": "c2c140e8-6620-4939-bbb0-93ed716028b1",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "18ee9de6-bc1b-4de6-9469-a341de4d7de7"
        },
        "item": {
          "id": "70967204-eaf7-4936-9549-b6c26965e836",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "85a55e9f-c61c-4b20-97ab-aefe1f2e4b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbb06554-b2ce-427d-8fcd-e0fc480263f3",
        "cursor": {
          "ref": "4554f2e6-8594-476f-bddb-07fc46d73f43",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "162f501e-bc20-4331-82ad-2af7285bc9ab"
        },
        "item": {
          "id": "fbb06554-b2ce-427d-8fcd-e0fc480263f3",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "97549909-6311-47df-b557-f398df050d14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d415ed9-f660-4547-87ef-7b1c2d85ce40",
        "cursor": {
          "ref": "931012cf-3465-4b3a-bd97-014bee2b07f9",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "1b02d4ff-6a76-4025-a590-a2ac099ea205"
        },
        "item": {
          "id": "1d415ed9-f660-4547-87ef-7b1c2d85ce40",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b9d59082-c26d-45bb-a40a-5972042282dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fdc81cd-c357-43fd-9e48-460a8f266007",
        "cursor": {
          "ref": "0450ed95-ec2e-4fbb-9eff-bfa99720e295",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "89728cba-572b-480b-9e59-8e2cb50d44c6"
        },
        "item": {
          "id": "9fdc81cd-c357-43fd-9e48-460a8f266007",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "5bdc867c-57b9-473c-b475-c58390ceb8cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "753951c8-3587-4380-a30f-07bd461a4660",
        "cursor": {
          "ref": "d7b3281e-456a-4b30-b84a-cfe25c934af4",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "abb8d94b-f156-4186-8ea2-b844f3802b9c"
        },
        "item": {
          "id": "753951c8-3587-4380-a30f-07bd461a4660",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0943106f-fb31-4bd9-af07-234b63b3d39a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6c0a3e2-0995-4ebd-939a-a6539409cd74",
        "cursor": {
          "ref": "a9386e19-f2e1-41d2-ab88-9dd595b84b0e",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "7b58dbff-da66-4981-bc48-7a85d7514468"
        },
        "item": {
          "id": "b6c0a3e2-0995-4ebd-939a-a6539409cd74",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7d76ce30-d0d9-4cff-9616-20292f769771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50015fec-9dcf-4ee3-bf8a-55ebf16344ba",
        "cursor": {
          "ref": "8aae2d50-eaed-4ad6-9a21-77ed1c25aa1f",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1e7c0d25-5f03-4b7d-84bc-5d2e7cb55f67"
        },
        "item": {
          "id": "50015fec-9dcf-4ee3-bf8a-55ebf16344ba",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "7bb05ee2-4d7e-4c59-acd1-0fc803af9e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3087275b-3067-466c-97cf-186a7b65e85b",
        "cursor": {
          "ref": "2639cf90-8de9-4f50-88f0-d3b59e24eecb",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2aa20950-2e7f-4939-851a-a3777866a11b"
        },
        "item": {
          "id": "3087275b-3067-466c-97cf-186a7b65e85b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6de1b7df-f708-488b-bbe4-9660f119a1b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5889169d-c21e-4cd2-a806-9c2457867016",
        "cursor": {
          "ref": "381b9074-7eab-4ab1-bed5-15820f0e1533",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2f512cb7-bf43-43a2-a474-43ac59f6d4b2"
        },
        "item": {
          "id": "5889169d-c21e-4cd2-a806-9c2457867016",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "78f6bbba-dd6d-4887-86a6-0a15031edecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc25eaa-dc8c-4b3a-9736-ae1d0ab5fcad",
        "cursor": {
          "ref": "b0a089e0-fe20-4de2-bfc4-bce3925da3e1",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c12e2a48-16b1-490c-ad1e-2653f89fb640"
        },
        "item": {
          "id": "ebc25eaa-dc8c-4b3a-9736-ae1d0ab5fcad",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "182a9f3c-74fe-4ac3-bce4-160807dfbaad",
          "status": "Created",
          "code": 201,
          "responseTime": 2210,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "4ea194da-8d9f-46ca-8159-048e18e7b631",
        "cursor": {
          "ref": "12f2f48d-246c-424d-bd4f-b1382c81cef1",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e2e841ae-a926-4e46-a28d-770de32bc642"
        },
        "item": {
          "id": "4ea194da-8d9f-46ca-8159-048e18e7b631",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "002090f1-67cc-44a7-a60b-0ee3e79ca4e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f4e339a-e203-464b-9e3e-a7b90a6d3746",
        "cursor": {
          "ref": "ac8d7c04-0fa8-4824-af5a-8d0b646d1132",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "16c76d4a-bc4e-486e-94a7-f8f4df54774a"
        },
        "item": {
          "id": "1f4e339a-e203-464b-9e3e-a7b90a6d3746",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a797b755-699d-4208-8c9e-c65f593e39c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3f6d9c2-489d-45b7-8b39-412a5d71d742",
        "cursor": {
          "ref": "aa16786c-b7fd-4d53-b129-3006c7ceb88d",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a852bfad-0a31-4036-a2a8-1753ecedef59"
        },
        "item": {
          "id": "e3f6d9c2-489d-45b7-8b39-412a5d71d742",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a0d2486c-029c-494b-9d80-24efcfe0dfd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7d71bec-d1d7-4e5a-aebc-4e6a23fb5bea",
        "cursor": {
          "ref": "dd2d4682-8a2f-4585-9209-3b86d700ebcc",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d52caa2e-4c11-4a3e-8c06-7f14ebe7388c"
        },
        "item": {
          "id": "f7d71bec-d1d7-4e5a-aebc-4e6a23fb5bea",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f48fff7c-2858-455f-b41f-eec38e64af18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72414c1-b825-43f1-b9fc-680d9903bf90",
        "cursor": {
          "ref": "5a082c30-6003-44b5-a981-8947507feee5",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6c8b37d7-2a20-4129-be3e-bad215df9b53"
        },
        "item": {
          "id": "a72414c1-b825-43f1-b9fc-680d9903bf90",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c6d69b73-cba1-41ea-b7d5-b99eae21fc63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd278d7-5af2-4724-8b52-60847e8dbae1",
        "cursor": {
          "ref": "cea65289-ee3e-4821-93a0-4fb69c62bb0d",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "4c020872-bb95-4075-801c-c745533652ba"
        },
        "item": {
          "id": "4dd278d7-5af2-4724-8b52-60847e8dbae1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c5502f86-10b2-47ba-bb36-244094f6f98f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f0cdc0a-814e-4459-8a62-cc53ce0de0e3",
        "cursor": {
          "ref": "57c12d16-7d0e-460d-b1ed-29e8dc8aaf68",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0bab70c8-92f1-417a-8809-f0d2f3225ac7"
        },
        "item": {
          "id": "8f0cdc0a-814e-4459-8a62-cc53ce0de0e3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "037ebf92-996f-4ca0-bb5f-ed4eda7bafcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09d0f58e-c85d-4b74-9338-16b793dcaffb",
        "cursor": {
          "ref": "7a7259db-0826-41d9-8a83-88b3864081b7",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b8ac6f06-d016-4050-8ecf-cae7eb6c630f"
        },
        "item": {
          "id": "09d0f58e-c85d-4b74-9338-16b793dcaffb",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8b1c4fcf-4834-4185-bc00-021e0423a91b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab6bd85-3259-41cf-8351-32ed17569282",
        "cursor": {
          "ref": "f5bdc504-6273-423f-96a4-5ea29159debf",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c67b75f0-6dfe-4c92-8d7c-a34534585490"
        },
        "item": {
          "id": "9ab6bd85-3259-41cf-8351-32ed17569282",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f6aaf1bc-0989-4c5c-966b-d340a05c7349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e575d1-cd68-4ef6-9e10-c8b2218ac56d",
        "cursor": {
          "ref": "4b17bdbc-339d-4d53-83d8-e43a7a49d726",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "539a542c-f250-45a0-94b2-2c2026d50fd5"
        },
        "item": {
          "id": "a5e575d1-cd68-4ef6-9e10-c8b2218ac56d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "fa1d4ef2-c327-4cba-ac3c-93f3eec59b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d7e53b-e3ec-440a-9dc2-28ac630421a6",
        "cursor": {
          "ref": "f304377b-07c3-402b-8e28-926514f7e766",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7a44555a-3bb7-483a-984a-7ab268ec7e08"
        },
        "item": {
          "id": "54d7e53b-e3ec-440a-9dc2-28ac630421a6",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9bb9217a-81cf-4395-b1e7-44862e9e1053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40bffe2-a263-4946-b770-0739cc0fc6e1",
        "cursor": {
          "ref": "d51bfe4b-7a18-4b55-b7e8-126a0570c086",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f6500ca5-73fe-411c-b4ba-e90676ef6972"
        },
        "item": {
          "id": "d40bffe2-a263-4946-b770-0739cc0fc6e1",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8ea26022-f2ca-453e-9550-a9dd3d81c2a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "424652bb-d930-45bc-b2e3-7076b026af61",
        "cursor": {
          "ref": "66c33440-6c0f-4750-a356-ab519c555e75",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c6671029-e660-45f2-a1fa-563ba94617d4"
        },
        "item": {
          "id": "424652bb-d930-45bc-b2e3-7076b026af61",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f6c21450-50b8-4e7f-a6c0-952637ce9ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e60e8b59-0af1-431f-a1df-5415834db324",
        "cursor": {
          "ref": "4d2dcb25-795f-45b6-964a-14869018e1bf",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "0069891e-389a-4ca8-af54-a218225150ad"
        },
        "item": {
          "id": "e60e8b59-0af1-431f-a1df-5415834db324",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "96f94d58-8937-49a9-9211-868072573951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ea31da-3f6a-4b99-8898-5c9fa725c972",
        "cursor": {
          "ref": "78f8991e-40c7-4a44-9c65-355a8818d40f",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "34f82900-9202-42f9-950b-5261cd75ddf5"
        },
        "item": {
          "id": "95ea31da-3f6a-4b99-8898-5c9fa725c972",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "b055dede-6aa1-4123-a7a0-320b4de51f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3efc1a53-bff7-4d96-9fae-4de4776f04f7",
        "cursor": {
          "ref": "182e34e0-2713-493d-8d11-b3209faf2479",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5a8b2ae1-9812-48ef-8582-b0621864d9d2"
        },
        "item": {
          "id": "3efc1a53-bff7-4d96-9fae-4de4776f04f7",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b54e94c0-ab6e-4d7e-9151-70cb6558ed1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d94a4f7-0d32-47be-a49e-e0c2bf905caa",
        "cursor": {
          "ref": "e18e05cb-18cb-4bbe-9b00-f4e492c238da",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "fb5f5785-5682-416e-9984-703f50dce060"
        },
        "item": {
          "id": "4d94a4f7-0d32-47be-a49e-e0c2bf905caa",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8c3b1075-7f89-4c69-8916-0774f7193f8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d364e484-d19f-4255-a120-81ecd8b756ba",
        "cursor": {
          "ref": "8cc8d6bc-2006-4209-9838-7598cb2b5b3a",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "affda0f6-4c08-48f6-8400-8e9dc0b29f11"
        },
        "item": {
          "id": "d364e484-d19f-4255-a120-81ecd8b756ba",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ab32a9df-6154-4287-a2d6-f86ccdc4ce1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19045ac4-1021-49e4-a7fb-5524f22c7531",
        "cursor": {
          "ref": "08e3fcd3-0cef-4889-a42b-51052a2be444",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "851fe4a1-921e-4a71-9693-960e82dd5edd"
        },
        "item": {
          "id": "19045ac4-1021-49e4-a7fb-5524f22c7531",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ce5eb89d-ca59-4cf5-bf72-8e680d9009c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ffc6a04-cb6d-4cbf-8972-66c0ce02a59a",
        "cursor": {
          "ref": "9702b205-f8bb-49dd-b9e7-9eb8b85103ba",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "96444c41-f30a-4a12-9111-ef811f0325c9"
        },
        "item": {
          "id": "1ffc6a04-cb6d-4cbf-8972-66c0ce02a59a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c7bcb079-5c07-4014-9ff9-619c9e867beb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f92349c9-7b20-412c-8269-5f170c8822b0",
        "cursor": {
          "ref": "8de908d4-5bf1-4ac8-bca4-d64f6f845bce",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d1d3e4a9-fbb3-4760-a468-7bb364b2e438"
        },
        "item": {
          "id": "f92349c9-7b20-412c-8269-5f170c8822b0",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9c0daf7c-49de-4af2-baf1-295b4d640eb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d81b320f-ff6b-44e7-8a61-a4e058e7d33b",
        "cursor": {
          "ref": "7788e1dd-5118-4cdd-9b15-6d430439fc67",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b5534380-db6a-4dde-ba15-bdf04799851a"
        },
        "item": {
          "id": "d81b320f-ff6b-44e7-8a61-a4e058e7d33b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "fc6971c7-ddd4-43f8-b92f-c24bb5f68ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99801d2-cff8-4237-89d5-858416f981cb",
        "cursor": {
          "ref": "18e1b966-e345-4f51-9b1d-9f1dbddb2a40",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "16d52dcb-d926-4774-b610-5e5fafa077d2"
        },
        "item": {
          "id": "f99801d2-cff8-4237-89d5-858416f981cb",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1fed3f3c-0592-43e8-99cf-cd95c01cc88e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afaa25c4-5a74-4a1a-bcc6-590120c7799a",
        "cursor": {
          "ref": "bf608622-5e7f-4e32-b086-869efbf0e882",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "62f40903-66a8-4d55-92df-812999dc72f4"
        },
        "item": {
          "id": "afaa25c4-5a74-4a1a-bcc6-590120c7799a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ccaa8385-321b-4818-8bd8-4906cec66954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb912409-c706-4a2d-9b98-f3f1d2804c20",
        "cursor": {
          "ref": "83318651-2ece-4886-ab8d-fdb05b6885a9",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "df07f2ab-0f76-4675-8508-fa3a8bb5c1f6"
        },
        "item": {
          "id": "bb912409-c706-4a2d-9b98-f3f1d2804c20",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "cd0df41a-8175-48ef-b645-d56f959b24e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0111271-9cf0-43d6-82df-ece5bd270ba6",
        "cursor": {
          "ref": "fb921119-17d6-4ff4-ae66-0a219f0e0c1a",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "45e43b31-d6c0-47ef-a389-7d2cf41a8e50"
        },
        "item": {
          "id": "d0111271-9cf0-43d6-82df-ece5bd270ba6",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "09428381-fc8d-42c6-a5d4-da975e539ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b25629-eeac-42d1-b9dd-f0e9665ab75b",
        "cursor": {
          "ref": "2f605ccf-3c3c-4fd1-8c5b-0b1820a254fe",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "fd8d2bca-71b7-4ccc-b7df-159bafb39b53"
        },
        "item": {
          "id": "79b25629-eeac-42d1-b9dd-f0e9665ab75b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ad00fddf-7b42-4316-8ad9-e22adfaa5536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca8ae4d-5650-4917-938d-12d7123d5711",
        "cursor": {
          "ref": "65321ad2-20ba-4aff-8af4-a0b418ed76e9",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "19f92894-077b-4937-a42b-5552faee28fc"
        },
        "item": {
          "id": "bca8ae4d-5650-4917-938d-12d7123d5711",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f5bb1bfd-b5fe-49a2-bef3-efdfeab1cc0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a996a4a8-3179-4d23-b48f-8ec8f2490848",
        "cursor": {
          "ref": "9a714e5e-7502-426f-8b46-fdc36357cae3",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "34238551-dc25-42e6-a650-898ca0cfcb34"
        },
        "item": {
          "id": "a996a4a8-3179-4d23-b48f-8ec8f2490848",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "90079929-d3d7-4a78-bf14-8e7f72a98c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "309f4519-b097-44b0-bfd5-a17b626c27c3",
        "cursor": {
          "ref": "c77c7816-4438-4fa0-9e8a-54e54d71fdea",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2b53fe7f-37b1-49b6-9a37-e66b2fa61fb0"
        },
        "item": {
          "id": "309f4519-b097-44b0-bfd5-a17b626c27c3",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8829d2cb-058f-4600-92aa-a48048407060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f00e1e-891e-4d85-bd55-b1faa110c86c",
        "cursor": {
          "ref": "e1e7aee5-90da-4537-a397-3b4cc7ff61f9",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8916b868-b366-485d-9bd4-ea88e9045eba"
        },
        "item": {
          "id": "e8f00e1e-891e-4d85-bd55-b1faa110c86c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "eb62fbe9-abfb-4a66-ac0e-e2e84d28394b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "94bf02d5-37b1-4671-bf8a-441912764012",
        "cursor": {
          "ref": "9900c5d6-3ce8-41ea-b93a-bd83bb6f7fa2",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9d64f4c2-a500-49d6-a6aa-fe1dd6d95059"
        },
        "item": {
          "id": "94bf02d5-37b1-4671-bf8a-441912764012",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f3383b37-1c1a-42e8-8d6d-be1391f3a31d",
          "status": "Created",
          "code": 201,
          "responseTime": 2106,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1bfc716-fc60-42c1-802c-655e66f6380c",
        "cursor": {
          "ref": "c59444e9-a84f-4d96-8040-4d41f87ffbde",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a5a2c28a-dde8-48d4-87b0-05fda0d4e5a9"
        },
        "item": {
          "id": "e1bfc716-fc60-42c1-802c-655e66f6380c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "9d0e5a20-c0b1-4d92-804b-feb5b62b39a6",
          "status": "Created",
          "code": 201,
          "responseTime": 2230,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "32635218-8cfe-4f84-b311-2ec13e5146c0",
        "cursor": {
          "ref": "1bee326d-0cfb-4108-9ad7-9c32af2f0281",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "971efad3-27e1-4b33-8951-dd95b6a41c0b"
        },
        "item": {
          "id": "32635218-8cfe-4f84-b311-2ec13e5146c0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "94c027d0-e30b-404c-a5e1-230460db0d08",
          "status": "Created",
          "code": 201,
          "responseTime": 2301,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c28ab5a-001c-44a1-bb11-b7409a6aafeb",
        "cursor": {
          "ref": "5717888e-b37d-4537-ae91-d961f9549b9f",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7b12ec8a-4324-4210-9e7d-96d7f9c0fc24"
        },
        "item": {
          "id": "3c28ab5a-001c-44a1-bb11-b7409a6aafeb",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e6a53bbd-4cea-40e8-8a26-c45af08c5c2c",
          "status": "Created",
          "code": 201,
          "responseTime": 2424,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d3e7d3-bfb7-4d38-bdcd-9470949983bf",
        "cursor": {
          "ref": "c811be9a-90ce-4e79-8707-071b574c218f",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "730b0b95-f72f-492e-bada-7dbb91be2002"
        },
        "item": {
          "id": "73d3e7d3-bfb7-4d38-bdcd-9470949983bf",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "951e755f-2d50-4937-ba8c-fcc429b21c2e",
          "status": "Created",
          "code": 201,
          "responseTime": 2542,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-02T00:43:15Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-02T00:43:15Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "170e4500-c698-4b4a-ae6b-60b95790adc2",
        "cursor": {
          "ref": "bc3f6892-ef64-4a72-b345-415c3e9f821c",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5debe590-7bf8-4115-8d12-2e4a1da53819"
        },
        "item": {
          "id": "170e4500-c698-4b4a-ae6b-60b95790adc2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6cfad96e-4323-4dc3-963b-d8a3e9ef4ff3",
          "status": "Created",
          "code": 201,
          "responseTime": 2389,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "982108f5-0ad2-439e-8a2a-dcfc4339ef42",
        "cursor": {
          "ref": "2d747a45-eec4-4974-8326-25bd725291c2",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "89853881-20e9-4183-a94c-93b70a011a72"
        },
        "item": {
          "id": "982108f5-0ad2-439e-8a2a-dcfc4339ef42",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "78abbf28-70d1-4468-8de2-45a9e1a9117e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ff44103-e3e4-4d82-a446-0d469863b907",
        "cursor": {
          "ref": "83af89f6-ebc0-417f-bf0c-f9591c946fac",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "338c4370-c0d6-4dcb-9b7a-5b83bce5c578"
        },
        "item": {
          "id": "4ff44103-e3e4-4d82-a446-0d469863b907",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "49b8795f-5028-4007-bdfc-cd16208e79d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c421ff48-6d7c-4264-81c4-0603af5c2b58",
        "cursor": {
          "ref": "0a1d696b-7ecc-4518-a6f1-dbd442510c73",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "650d2e45-f68b-4bfc-928b-fbe41c9755d0"
        },
        "item": {
          "id": "c421ff48-6d7c-4264-81c4-0603af5c2b58",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a64579f0-ab22-48c0-bce5-0be33797913a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a020c8b9-deb7-42ab-b14c-53228992e800",
        "cursor": {
          "ref": "f8dcd085-484f-496d-ab98-e0e3ec6513ae",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1a4cfd3b-0a4a-4e02-a6e4-119686aeb14e"
        },
        "item": {
          "id": "a020c8b9-deb7-42ab-b14c-53228992e800",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c77110bc-0b81-47b4-98e4-7d80b6ef3f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab237c87-1790-4a99-a27f-e9168b7fd8ee",
        "cursor": {
          "ref": "c8909744-9e50-415b-8944-94bfc70c2a36",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7d6482ab-31c2-4d97-9d3a-2a57c29df3dc"
        },
        "item": {
          "id": "ab237c87-1790-4a99-a27f-e9168b7fd8ee",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b97889fd-bc0a-4b61-90e3-bcf1fb02fb62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "994d6f01-3bdc-4290-bc74-c96c41c1554c",
        "cursor": {
          "ref": "aa407b67-fe69-4b95-b515-156cf4a13896",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7dee2c0f-ce03-4595-bbc3-60401112c88e"
        },
        "item": {
          "id": "994d6f01-3bdc-4290-bc74-c96c41c1554c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6fa7e4af-6fa4-462c-b741-4f6e16d255e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e795330f-51c1-4aad-8c91-1e418cd6b606",
        "cursor": {
          "ref": "846754fd-53d7-4bf6-8342-38dc60d053ed",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "0a9eaefd-1f52-455b-a623-3843fa192948"
        },
        "item": {
          "id": "e795330f-51c1-4aad-8c91-1e418cd6b606",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d5d3ee4c-e426-4f6d-80e9-7498a1d35b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02775e23-f96b-4525-b76f-25b3f9d09088",
        "cursor": {
          "ref": "479edf78-ffbd-4689-a2f5-8915d8f4387a",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b2d7761c-34df-4f21-993d-e3ea0568400e"
        },
        "item": {
          "id": "02775e23-f96b-4525-b76f-25b3f9d09088",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "25aefb17-cd74-4806-ae24-23c8cde1ae58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b5e329-4235-4976-aa98-844d25581758",
        "cursor": {
          "ref": "f3f2488f-3f48-41b0-b9d1-597cca00960c",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "94a0ee26-bb59-4bdb-96eb-115b173ec318"
        },
        "item": {
          "id": "11b5e329-4235-4976-aa98-844d25581758",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0900dac3-8500-4d35-befb-ab54f2af4590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c2dc03-6fda-45c2-a07e-057b9a3228c1",
        "cursor": {
          "ref": "14a79260-c2ad-4b43-93d4-5a8ad377edec",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "bf735f31-ac3f-4810-a7ac-7e1fbdbc8ba6"
        },
        "item": {
          "id": "c4c2dc03-6fda-45c2-a07e-057b9a3228c1",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "866e7e6c-ab21-4fc3-bb09-061b6aabfcc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc79fb9-af2f-4b03-a141-6018bbc81d0d",
        "cursor": {
          "ref": "495233bf-99e8-4a65-95b0-a71c9d015a1b",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "cfd6d7ad-142b-4980-88ab-23eb15dc6023"
        },
        "item": {
          "id": "acc79fb9-af2f-4b03-a141-6018bbc81d0d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "112ea2be-3553-4188-b127-fd57b3f7fe36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 669,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed82429-411b-4769-a013-1e29d26d7fa0",
        "cursor": {
          "ref": "a44f1eea-9954-4fff-9f0c-738aaefa000e",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "15ae14d3-f450-4a00-a193-30e3059e7799"
        },
        "item": {
          "id": "5ed82429-411b-4769-a013-1e29d26d7fa0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c397990d-2bfd-44a2-862e-5c6d48981807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa899c2a-d566-45db-888b-64c9abfbc9c5",
        "cursor": {
          "ref": "182443ea-c140-416b-802d-1e604e6a661e",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d8f262bf-e0d4-4755-91f2-96c0c62ed611"
        },
        "item": {
          "id": "fa899c2a-d566-45db-888b-64c9abfbc9c5",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e2d17951-7ea3-40b1-96d9-0e72180ebb0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e72844a7-3e0a-4aea-92a1-66e058f2a46c",
        "cursor": {
          "ref": "a1ad743f-2bf0-4d3e-b1e4-411731fb18f9",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d3ebd751-d6ce-4a40-9e0f-b334521188fe"
        },
        "item": {
          "id": "e72844a7-3e0a-4aea-92a1-66e058f2a46c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5953a64c-dac9-4cec-bf1d-24a62cb3a96c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f17f92-511e-4419-a33b-9efdaa4185e8",
        "cursor": {
          "ref": "7cceadff-2ae6-4363-aaa8-977d5c549b04",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4ed1ce53-15e0-4b49-a52a-787022809e3c"
        },
        "item": {
          "id": "59f17f92-511e-4419-a33b-9efdaa4185e8",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e093f35b-a409-417a-9c0c-e0f527a4f218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a47e1180-30b6-489a-8098-d3063a901e52",
        "cursor": {
          "ref": "7eb8257f-bac0-4d92-a24b-92f03cdd8fdc",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f0787d2a-7d6b-4d26-9896-7449b2601f39"
        },
        "item": {
          "id": "a47e1180-30b6-489a-8098-d3063a901e52",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d7a87b7d-f265-41d0-80fa-e875df4a6b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1709abb2-4bb0-4b50-a00f-574f8752bbca",
        "cursor": {
          "ref": "d84857dc-46c6-4ea0-8407-434b5769289c",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2026b02c-f082-4639-b1eb-a9630b0a6a33"
        },
        "item": {
          "id": "1709abb2-4bb0-4b50-a00f-574f8752bbca",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "dc552af8-f226-4b59-b00f-2d0a58b85a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d1ef4cb-d68e-4a40-822b-3cb4e647a9d0",
        "cursor": {
          "ref": "d815feab-ba38-4af8-afe8-5335e7e6a227",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "303ab166-9b6c-4676-a769-ae3bccaa1dfc"
        },
        "item": {
          "id": "2d1ef4cb-d68e-4a40-822b-3cb4e647a9d0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5a44df3a-e309-43e4-8207-13e9fd2c7599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d08a199b-6981-4be7-89bd-46376ed452d2",
        "cursor": {
          "ref": "655f4449-d734-4d51-a8f4-2e55ba314bba",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ade70882-c62e-42be-96d8-d7f3c2121de9"
        },
        "item": {
          "id": "d08a199b-6981-4be7-89bd-46376ed452d2",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f8099bfd-3fe0-404e-a00c-b8aad69a1fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77cbfe84-bb86-4f44-a421-bd34f78c4414",
        "cursor": {
          "ref": "98229d84-a926-4d01-a6d7-af08be011cf8",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e35cc448-5a0a-4923-a858-1a899b8272d9"
        },
        "item": {
          "id": "77cbfe84-bb86-4f44-a421-bd34f78c4414",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "926d2647-366c-4d29-8764-2fa75096e4d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b73e4a07-73ed-4e42-89e5-27256bce7a6e",
        "cursor": {
          "ref": "17673027-c8b0-4f98-9975-ab034be7ef04",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0aeb7c56-3ff2-44f4-90c9-f9ffadb0f35e"
        },
        "item": {
          "id": "b73e4a07-73ed-4e42-89e5-27256bce7a6e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fdb2c995-d958-4794-963d-f85910a93849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "430aec56-5a5e-4b8a-b00a-e55d274474c5",
        "cursor": {
          "ref": "f61cf098-9ae8-484d-87e0-4373203ece4a",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1b852a7f-b492-4a0e-ade5-6fa11f65b9fd"
        },
        "item": {
          "id": "430aec56-5a5e-4b8a-b00a-e55d274474c5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ea9ad649-fb6f-43ad-badf-1deef1157659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b2caa33-5b15-4599-82b9-1678221247f9",
        "cursor": {
          "ref": "4a6415e1-ebee-4292-a101-5eed3541c690",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0cf883a9-402c-41b0-81f8-d893e3360c92"
        },
        "item": {
          "id": "0b2caa33-5b15-4599-82b9-1678221247f9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f186a250-a5ce-4b32-829a-90123ef373c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43f39426-b129-4c3c-b729-dc64b5d6d206",
        "cursor": {
          "ref": "22ca3aca-1d74-47d5-8081-3510b7bcd639",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "67bac153-78f9-4a4c-8c80-5a1e34e34761"
        },
        "item": {
          "id": "43f39426-b129-4c3c-b729-dc64b5d6d206",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "92eb19c4-f4b8-4b2e-b6de-5d694286db65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9290097-ace7-4006-b858-0507801a264a",
        "cursor": {
          "ref": "2ac1bf31-4fc1-4a7d-a9e4-be0ce2623704",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "139dc42f-3441-4ced-8130-1d6536514ac3"
        },
        "item": {
          "id": "d9290097-ace7-4006-b858-0507801a264a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d7a77f2b-0386-4020-820e-55ddae0f24a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e559db-6b63-41e3-9e32-a1d26ffa528a",
        "cursor": {
          "ref": "62594feb-4b63-4fbe-b18c-0eb86544121b",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7491553d-38bf-40a8-a4d8-b492e4e5d060"
        },
        "item": {
          "id": "75e559db-6b63-41e3-9e32-a1d26ffa528a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ca959d09-c387-4dae-9fd0-189f23371f41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b755fdb7-b6eb-4b1c-b6ad-220483d93bb7",
        "cursor": {
          "ref": "31dcdb63-4118-49fb-876f-1c19bd999a04",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "916df028-da08-4c20-834e-57e85909c00e"
        },
        "item": {
          "id": "b755fdb7-b6eb-4b1c-b6ad-220483d93bb7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "453dd94c-4057-45ed-903b-d855e1ba9385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e7bd182-2a40-482b-ba57-0a19565a6b55",
        "cursor": {
          "ref": "7f74ae44-d0ef-4032-85d6-873f0c73b0e6",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7b120c4f-3ea5-4675-bba7-6ba05c1a8a17"
        },
        "item": {
          "id": "1e7bd182-2a40-482b-ba57-0a19565a6b55",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e47d89a6-62af-497d-afea-e54a8a1c2b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76539635-7d0f-4951-970b-15a4a4176e77",
        "cursor": {
          "ref": "d67fec2f-eb21-470f-beb4-d6b609a62b30",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "454ab25e-ed1c-469a-8dc7-95450d709d7d"
        },
        "item": {
          "id": "76539635-7d0f-4951-970b-15a4a4176e77",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1a763a2a-9ae3-4357-82fb-94656afb659a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d772d4d-45c7-49b8-aeb9-72d36e9a7326",
        "cursor": {
          "ref": "d77927cc-aee8-400f-8110-6b87a8beafd4",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "59c6eb81-bc5d-4286-a4e9-816e18658fcb"
        },
        "item": {
          "id": "2d772d4d-45c7-49b8-aeb9-72d36e9a7326",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2f6b53ef-1c2b-4216-a20a-0d72e372ed36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7b4daa8-8e16-4daf-844a-fb486de9c82c",
        "cursor": {
          "ref": "94d254be-a4ed-4f7c-b7a3-6f4e06d35df3",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "06ad9473-f6ef-4578-b53e-1f43b98774f3"
        },
        "item": {
          "id": "d7b4daa8-8e16-4daf-844a-fb486de9c82c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0741480b-c2ad-467d-a2f1-a299b52db954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6386a5-dea7-4766-9262-f0d38abd4e4e",
        "cursor": {
          "ref": "e502fe12-880f-40c2-9614-660d974c97c2",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "51ec1dd5-fd67-44b0-820f-5907010d4871"
        },
        "item": {
          "id": "8d6386a5-dea7-4766-9262-f0d38abd4e4e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ee50d798-be50-41b6-80fb-7c376c9cb1b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e46c1f80-38c6-4882-8b0d-ade822d098c1",
        "cursor": {
          "ref": "ff10cc02-7853-47c0-9e1c-f264c2f2fc15",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "187360ec-7d05-4906-89cc-49ecdc7e3a63"
        },
        "item": {
          "id": "e46c1f80-38c6-4882-8b0d-ade822d098c1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "de516f44-4d41-4ca7-8b26-f06a53ed6f07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "2273ac32-ccad-432c-8c96-ebd437ab6c30",
        "cursor": {
          "ref": "8805bec6-0ee6-41d8-8b58-474ca2911c0c",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "433fbddd-9fd1-457b-a285-850d52b8d683"
        },
        "item": {
          "id": "2273ac32-ccad-432c-8c96-ebd437ab6c30",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "76c66474-45cf-4e96-9042-4841b15c28ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "344754b6-6c79-4920-af57-e9363d83eb7b",
        "cursor": {
          "ref": "82a7b5e3-f329-4df9-bb21-be7c38186a14",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "15978593-7922-4896-87d7-c92000fc5939"
        },
        "item": {
          "id": "344754b6-6c79-4920-af57-e9363d83eb7b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "81b7b940-60d3-4351-a6bd-67dec136600a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a963f658-ac22-437b-9a7a-c4f6aa2d362c",
        "cursor": {
          "ref": "23902a18-d7b2-4bfc-96ac-c774ffcdfc22",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2577a0b4-6824-474c-b411-ce124b85a9c0"
        },
        "item": {
          "id": "a963f658-ac22-437b-9a7a-c4f6aa2d362c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "411a6b95-907d-47f5-9ce8-0af041b7239c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac605d9-f79e-4392-bbf6-647c25d572f9",
        "cursor": {
          "ref": "e835b415-ed9a-45fc-9390-411aa5d22177",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ff1faffd-a26e-4bc2-a1f6-1a995c7488d0"
        },
        "item": {
          "id": "bac605d9-f79e-4392-bbf6-647c25d572f9",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ad1fdf68-d356-48a7-849d-3a6df3272df2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c41b80d-2262-4cbf-802f-2d0449300fb6",
        "cursor": {
          "ref": "f5a3efc5-ee1b-4f25-9314-c4d7b8fb8822",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ede7f188-b38a-4ac2-b81e-19c10244b406"
        },
        "item": {
          "id": "2c41b80d-2262-4cbf-802f-2d0449300fb6",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "889bbc3c-6810-4f43-8992-2d6e59537e0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae0b8d59-704d-4bd4-8459-4b96d36e33c4",
        "cursor": {
          "ref": "3a9e192f-509b-4076-94e8-13414534b053",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "719a38d2-7bb8-4c2f-bdf3-9457d93875a7"
        },
        "item": {
          "id": "ae0b8d59-704d-4bd4-8459-4b96d36e33c4",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "614381a9-3287-4a8f-895d-39f6f9cfaee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb62ae1-7e19-47a7-ae7c-78a2401ba44e",
        "cursor": {
          "ref": "25a15fae-78aa-4726-91f5-d2250d27e42b",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2ac1773e-dad4-4785-b5bc-4e926201cf49"
        },
        "item": {
          "id": "6eb62ae1-7e19-47a7-ae7c-78a2401ba44e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b62caaac-0b36-4199-ad74-89dae5df167d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eaac60d-536b-4038-b154-e550fd58f785",
        "cursor": {
          "ref": "af6b80e2-09bd-45c6-9339-83c298bf3b36",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2ba0437b-2aae-485f-8705-172ee52f5587"
        },
        "item": {
          "id": "5eaac60d-536b-4038-b154-e550fd58f785",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "efcb75f0-5b93-4421-967f-5ed0ca04cbc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b08e176-1074-4475-8e12-9ca001ecafba",
        "cursor": {
          "ref": "d2a075bc-8635-4f9e-af75-bd15c670c679",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "23574dcf-73be-4c2a-8055-c7a5b7eeb0f8"
        },
        "item": {
          "id": "5b08e176-1074-4475-8e12-9ca001ecafba",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "235cf163-b64d-482e-acc7-f42b911827b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd177499-b867-4356-9073-b18b2ce17f7e",
        "cursor": {
          "ref": "7f442efe-f548-4c2f-b211-dfcdbe06041e",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "56bcd6e9-a6d9-4427-8c0f-bcb367205fd9"
        },
        "item": {
          "id": "bd177499-b867-4356-9073-b18b2ce17f7e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "877b713c-2d4b-4d71-af7d-55b0908b26a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1413a14-bdb6-4951-8dba-eac18952b432",
        "cursor": {
          "ref": "dd68920d-2dfe-48d9-8279-076a2f9c742b",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d8fcecb7-48da-4e80-8d2a-927b463dc480"
        },
        "item": {
          "id": "a1413a14-bdb6-4951-8dba-eac18952b432",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2baec66e-5865-4e47-9e64-83dd2f14205c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b36f5c3-6f3a-4d2a-8777-691509b53566",
        "cursor": {
          "ref": "06b25232-b337-492b-a40b-afd41f45eb36",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "487fefdd-960d-4248-8626-dc4747f253d6"
        },
        "item": {
          "id": "9b36f5c3-6f3a-4d2a-8777-691509b53566",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "95446640-42fc-4d30-bfa7-f241d9e46679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d119854c-fa1e-4e84-b178-8ee6a841f422",
        "cursor": {
          "ref": "f060abab-9214-4174-b254-bba61ad9d145",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7e9ede8c-1b32-49cb-8d2d-642141e77199"
        },
        "item": {
          "id": "d119854c-fa1e-4e84-b178-8ee6a841f422",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "54a3614f-2165-4f63-9b23-fcbed1397ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceed3c8c-ae71-4adf-b5fc-8c8ec0ee22c6",
        "cursor": {
          "ref": "1ec8a411-ce2c-445c-9852-387cee4f2c98",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b0b22040-1e4d-42d3-83e7-6ccec23a3c7e"
        },
        "item": {
          "id": "ceed3c8c-ae71-4adf-b5fc-8c8ec0ee22c6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "56f84abd-c4fd-46ea-a04e-a1412f262a53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea62a62-9e7a-4351-abb7-4b6bb30ba5c8",
        "cursor": {
          "ref": "a7f5dbcb-d5c3-427c-807c-81ce462d508b",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1549b20d-0cdc-44f5-ba85-6121e7097120"
        },
        "item": {
          "id": "fea62a62-9e7a-4351-abb7-4b6bb30ba5c8",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a7bea592-891c-436d-be6b-c60cfd25a104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f5d4ec3-8407-493d-88ea-b946f739903b",
        "cursor": {
          "ref": "dacc0721-e98b-4ecd-ae2b-84dd0d3c0427",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e5803ce8-4e0c-4a11-a54d-4db287840a09"
        },
        "item": {
          "id": "0f5d4ec3-8407-493d-88ea-b946f739903b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "17ba3789-bf17-42ac-bbca-2ef27c976f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "657737bd-c50a-401d-8d35-8ea29f807c5b",
        "cursor": {
          "ref": "18a7df18-d17f-4ffd-b485-53e6b159ce8d",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7c1d3097-a332-402a-87d7-e28986f986f0"
        },
        "item": {
          "id": "657737bd-c50a-401d-8d35-8ea29f807c5b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e54f29c7-6327-47b4-bbde-42459430d1a3",
          "status": "OK",
          "code": 200,
          "responseTime": 436,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "6330b742-560a-484e-b7e8-4f89658c1213",
        "cursor": {
          "ref": "cb7c48ab-b233-4c93-95fe-4faaa09eea56",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "de478896-af05-4130-943a-19eda48df42c"
        },
        "item": {
          "id": "6330b742-560a-484e-b7e8-4f89658c1213",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "fe3c6b23-e582-4ff3-ad52-ec6feadf88c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0bc84f0-9246-4239-9e20-e3254d4b82b6",
        "cursor": {
          "ref": "532d2d37-b59b-49d5-a304-ea08aef1f02f",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9205d0b2-f906-4605-ba8a-de345e16605a"
        },
        "item": {
          "id": "f0bc84f0-9246-4239-9e20-e3254d4b82b6",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6e63b661-94dc-44a0-8827-413e6d0c0874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67847620-39a2-4de4-bfb5-fa28bf783e30",
        "cursor": {
          "ref": "18d16129-a183-4b0d-bbd9-5a1278d7c8b9",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e04bb273-69d3-4b6e-bde2-ea95d917faf0"
        },
        "item": {
          "id": "67847620-39a2-4de4-bfb5-fa28bf783e30",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "22dc2eba-d84b-4ea9-94dd-cfa6e8645453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a98129-b049-4aaa-85af-c312b868cc2f",
        "cursor": {
          "ref": "8112e83b-3c7c-4787-8e4b-5a6bc8b30601",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "22a5ba30-01a2-488f-b3bd-50e582dd6495"
        },
        "item": {
          "id": "b3a98129-b049-4aaa-85af-c312b868cc2f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b607c3b2-97a4-44f1-95ab-c141b239bf5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea7a542f-bbb2-44e6-b9c1-d2c428ae2a97",
        "cursor": {
          "ref": "afee1d45-0b8a-4b88-91fc-59eba5686086",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "986201e0-3d97-4755-940a-9d50d864880b"
        },
        "item": {
          "id": "ea7a542f-bbb2-44e6-b9c1-d2c428ae2a97",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8f218454-23ad-4273-971d-1aa2f90e3c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f40cd2e2-ca26-457d-a30e-0a332e23e166",
        "cursor": {
          "ref": "f5a5f3b5-42dc-4dbf-8184-c4ab5652e2b6",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c415bdac-08aa-451b-a1d9-a0111fa04c69"
        },
        "item": {
          "id": "f40cd2e2-ca26-457d-a30e-0a332e23e166",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c62347a7-627c-469d-9d9e-dd23827ae5dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ae8be5-269b-4f86-8d61-9c4b5d8fd808",
        "cursor": {
          "ref": "3b1c5b6f-3e93-4301-a547-7c4f7274db6f",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3ab9e421-7633-48f0-b71f-8ca71e021b62"
        },
        "item": {
          "id": "c6ae8be5-269b-4f86-8d61-9c4b5d8fd808",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "41af3dd1-a535-4a86-aee5-74ad3f4d4900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a32cb7-c4c5-47e8-9d54-0e4f91ece422",
        "cursor": {
          "ref": "94542ae3-1f97-4546-a919-7d7e447f4e56",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "948a9d51-791d-4d89-a4e5-7c0165113fb5"
        },
        "item": {
          "id": "19a32cb7-c4c5-47e8-9d54-0e4f91ece422",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "bdbdf1bc-e8b1-466c-8eb7-389f2d47ce93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cddf757-6b84-4e5d-85c7-cc895aa0b830",
        "cursor": {
          "ref": "fb9a44a2-a20e-4a2f-872a-549011b06368",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "8074b922-5f08-46a7-bbe3-179759abdad5"
        },
        "item": {
          "id": "5cddf757-6b84-4e5d-85c7-cc895aa0b830",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ccffa5fc-945a-4199-a301-886764c5ec9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "074faed7-0890-42ed-b740-b3fe0f363788",
        "cursor": {
          "ref": "41618e7d-8ba2-4ae3-be52-861c3b8f1102",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6479ec14-cc4f-4334-bc3d-0c5545ed186e"
        },
        "item": {
          "id": "074faed7-0890-42ed-b740-b3fe0f363788",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5a092f5e-6b1b-460e-88e0-89952e33e0c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81006230-ef61-483f-ab02-a922247a7a1a",
        "cursor": {
          "ref": "6f6dde30-b891-4da4-8e1c-22ba7c319c3a",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e87fc465-1b84-4e82-abb9-a56947d897aa"
        },
        "item": {
          "id": "81006230-ef61-483f-ab02-a922247a7a1a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "46066740-d987-4ca2-b2f0-0ee01a337c9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c2502c-35f8-4b52-8fe0-ddc8d119de2b",
        "cursor": {
          "ref": "6114fdb9-d942-45c2-879a-6295b7ccd377",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "701ede4e-b6f1-4bbb-a11d-9bfdc4eae60b"
        },
        "item": {
          "id": "80c2502c-35f8-4b52-8fe0-ddc8d119de2b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "28264514-1dd6-4a36-b2e9-22e67b719a23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e29e990b-504a-4a21-8e47-775378a394bd",
        "cursor": {
          "ref": "e2491123-2e7f-4215-b903-8b19216d62f3",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "1a87828b-872d-407f-b154-02aaedb8d0e4"
        },
        "item": {
          "id": "e29e990b-504a-4a21-8e47-775378a394bd",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "4de110da-6484-4e8d-9b67-ccc78bbe5e41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25848712-2293-4ea1-bce7-e132842b37d6",
        "cursor": {
          "ref": "25775d54-cb7d-4a84-a63b-23354d4593ad",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a2e33430-63d7-4e91-901d-e7b7aabcd33e"
        },
        "item": {
          "id": "25848712-2293-4ea1-bce7-e132842b37d6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f6484772-7f06-46df-8d85-dc1cba52ab61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40994a91-fb5f-43bc-b0c7-f7f223beb6aa",
        "cursor": {
          "ref": "7ed4299d-5af4-4f05-94dc-aacd32e7527c",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b0f7126f-ddef-4524-a424-cc2f8785b9ab"
        },
        "item": {
          "id": "40994a91-fb5f-43bc-b0c7-f7f223beb6aa",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3b054adc-bfa9-44b3-a42d-2b20f26c8af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9c7ad4-c6c3-4d2c-b55b-5a9748466952",
        "cursor": {
          "ref": "935e743b-4e1b-4de3-bc3a-251544ac0b4c",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "564fee0e-4af8-4877-a3ce-c5e262b19199"
        },
        "item": {
          "id": "eb9c7ad4-c6c3-4d2c-b55b-5a9748466952",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d1ac819b-dd79-431d-9333-705016536b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87688ca6-7b6c-476d-a63a-e6a4e21c5c96",
        "cursor": {
          "ref": "de22bc6a-2c77-4cbf-832a-635419287f27",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3beb2fff-6906-48c5-aa44-4ec22cd2f1c1"
        },
        "item": {
          "id": "87688ca6-7b6c-476d-a63a-e6a4e21c5c96",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "fb2ae11b-baf2-4fa5-b027-c97de32529df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6047409-b10a-444d-a133-1f694456b452",
        "cursor": {
          "ref": "d7cb20f3-a6af-4b86-9062-2fabf3fb202d",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "bbfe156f-e3d1-469f-9c61-19e8992f1d90"
        },
        "item": {
          "id": "d6047409-b10a-444d-a133-1f694456b452",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "00532032-65e1-43af-b934-6db19b2b5f94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4649d218-74aa-4b1a-8b29-993f1fda3cfa",
        "cursor": {
          "ref": "8d8ef7d2-5af9-4bc4-b486-1c77e83b4982",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d08310fa-2d8b-4c22-ac4f-9984b17acc54"
        },
        "item": {
          "id": "4649d218-74aa-4b1a-8b29-993f1fda3cfa",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a407f305-73eb-4370-8284-b0899851f99d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dcd3993-e939-4cc0-9a05-036023af508e",
        "cursor": {
          "ref": "82d9be41-94be-4c4e-8c4e-30ad9b1025cb",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4f98b292-f470-428a-8207-bdc92198e033"
        },
        "item": {
          "id": "2dcd3993-e939-4cc0-9a05-036023af508e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "40740dcd-e8f2-4004-8efb-9d163d681988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfeb1088-5048-4de6-b262-718feaa02c7d",
        "cursor": {
          "ref": "c16adbfb-d09a-4d02-9568-1c456dbf1786",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "96bba814-8a4b-4734-b2fa-136824c0530f"
        },
        "item": {
          "id": "dfeb1088-5048-4de6-b262-718feaa02c7d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "42182194-ee90-4290-b18a-66583b6723c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbfddfb9-6743-4a5d-950a-f72206a194af",
        "cursor": {
          "ref": "47ec1535-fe26-4008-940c-4ce04c239de2",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "056c7fe0-d609-47a8-9ba9-477566453bf7"
        },
        "item": {
          "id": "dbfddfb9-6743-4a5d-950a-f72206a194af",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b9a7aec3-8bcd-4969-9de4-88a5139ab6d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d5faf6-6997-4259-ba9f-0dcc1e8c2c41",
        "cursor": {
          "ref": "327f014d-034e-42f8-95b1-71829cb5db79",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8252cf94-70e3-4781-a37f-80cc73fbc6ec"
        },
        "item": {
          "id": "59d5faf6-6997-4259-ba9f-0dcc1e8c2c41",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f305eac9-0d61-4f47-8015-b7240e1dc66f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 445,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f80ed1-f7cb-416b-84ad-02c2fad38a62",
        "cursor": {
          "ref": "9276c0b2-ff3d-4223-9078-f6e989b26f62",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "527e8cc4-74fc-428d-9e71-2f86308863b4"
        },
        "item": {
          "id": "19f80ed1-f7cb-416b-84ad-02c2fad38a62",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d637a9f7-9bc8-4440-8cec-a0da1bc1f8c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc51c81d-f1f9-4376-86ba-803e4e990fd7",
        "cursor": {
          "ref": "5122cecf-c569-4705-a055-a37d37041edb",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "1656b343-6f7b-429b-9c04-aee9fb8b9b7b"
        },
        "item": {
          "id": "fc51c81d-f1f9-4376-86ba-803e4e990fd7",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1f8eb816-f5e2-407d-8524-88b350bd1aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02315ce0-9a2e-4ee2-ae24-cdf906ba0434",
        "cursor": {
          "ref": "da19632c-5fd0-4373-8602-244ca1967291",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2a87357d-6f43-4cca-8446-59439f57879d"
        },
        "item": {
          "id": "02315ce0-9a2e-4ee2-ae24-cdf906ba0434",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6ce69f3b-78f0-41be-9d7f-f869775d6b43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c952d97-80ed-437b-92f7-ea41d07999ce",
        "cursor": {
          "ref": "0c31f536-2b08-4c3c-9f19-bad8889ae3b1",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "614cef29-4477-4e14-a2a8-6507e151bf59"
        },
        "item": {
          "id": "5c952d97-80ed-437b-92f7-ea41d07999ce",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "76cf3ce0-7a1e-4c71-9425-e00a48174a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d346c5d-df76-492b-9d05-8f11eebc5fe8",
        "cursor": {
          "ref": "6bb7b2b8-a51d-472e-95c8-8c7686351368",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "74cd6604-42ff-4837-8502-d07810019627"
        },
        "item": {
          "id": "4d346c5d-df76-492b-9d05-8f11eebc5fe8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1eafc86d-940c-48d5-903a-359800433901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6455e8dc-76c7-441f-b21a-3074cbc5bb22",
        "cursor": {
          "ref": "3600c704-74bd-41f5-84ac-726c110b46db",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "92415ae8-4087-44a9-85b1-92093e0839cb"
        },
        "item": {
          "id": "6455e8dc-76c7-441f-b21a-3074cbc5bb22",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f1059aaf-4f21-453e-a619-f13d88af4101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da989d75-d4cb-4593-9968-33a0b1bdc328",
        "cursor": {
          "ref": "6f6a9ffb-af89-410a-8012-d54ec2e94315",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "55a27590-ceda-4baa-8202-922bbeb0daa8"
        },
        "item": {
          "id": "da989d75-d4cb-4593-9968-33a0b1bdc328",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "363391b8-edb2-41dd-b6e6-fdea784fb05c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6e0eef-8ae7-4874-b8be-8b36e4f969d0",
        "cursor": {
          "ref": "6ebe6d1e-84be-4815-8f69-2cc3b55c547a",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ddd156e2-1fcd-4166-ae60-e62b7f259806"
        },
        "item": {
          "id": "ac6e0eef-8ae7-4874-b8be-8b36e4f969d0",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b1209377-a199-46d4-a227-37ae0e66dffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1610,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a58b6e82-8130-47d5-a8a6-d4dfb02af099",
        "cursor": {
          "ref": "f8bc0bb5-e6f8-4c53-93ee-7012663d07a1",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "cc8e59d7-4bec-4d19-a796-a8ef6d4b428c"
        },
        "item": {
          "id": "a58b6e82-8130-47d5-a8a6-d4dfb02af099",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "22f0d821-a6c1-4e9b-92c2-79f447b01f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5215849d-560e-4e94-b418-bc698ee40f5d",
        "cursor": {
          "ref": "699eae42-6493-4cf1-9a53-c0c7e0f9d532",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9f1f16cb-4d97-40bf-84ea-4328af70424a"
        },
        "item": {
          "id": "5215849d-560e-4e94-b418-bc698ee40f5d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "667e7960-9db8-4ec1-8c07-835aee696ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54839aff-3d41-41b1-9753-9b5bf47c8d36",
        "cursor": {
          "ref": "a55a135a-3a18-4da1-90ae-a1ae6f6c08bc",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4e413e3f-c654-4b30-8869-790bf8283b47"
        },
        "item": {
          "id": "54839aff-3d41-41b1-9753-9b5bf47c8d36",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b7d3b8b4-2e6f-40f3-8009-f3c66fe66ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55604745-d280-4c41-a945-4faad5eb80b4",
        "cursor": {
          "ref": "e9b9a74b-9d84-4d52-8340-cf926615eaa6",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "66e69291-e7c3-4b9a-966a-27657f81f82d"
        },
        "item": {
          "id": "55604745-d280-4c41-a945-4faad5eb80b4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d2a963c2-df64-4185-95a3-5cb2b2eb1baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1209faf7-0913-4256-a307-6a19ec2607cb",
        "cursor": {
          "ref": "73b63018-38b9-4098-b486-508276677279",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "dec2c322-603c-459f-bc47-b73238b8bc02"
        },
        "item": {
          "id": "1209faf7-0913-4256-a307-6a19ec2607cb",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5fa4e243-d0f0-458c-829c-2f7721fd0410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367dd33b-db93-42c1-8f67-6dd9b6e2e018",
        "cursor": {
          "ref": "43a6a955-bc1d-4bee-a77c-5c9508e4f103",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "df05de2a-24cc-4144-81a1-6e762daa869e"
        },
        "item": {
          "id": "367dd33b-db93-42c1-8f67-6dd9b6e2e018",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8ab3428c-cdec-43fc-b830-5515874ad073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06324cf4-0d9c-4bb4-81b4-f41a94903ec0",
        "cursor": {
          "ref": "20e90e1e-1b19-4837-ba02-839b05f0329d",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "621aae7a-92c4-4f5b-b666-bcd45cc15965"
        },
        "item": {
          "id": "06324cf4-0d9c-4bb4-81b4-f41a94903ec0",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "00d9b825-413a-4c3c-b4ac-0115e6eb0e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab27a12d-c23d-4549-aa53-a46bdd817b98",
        "cursor": {
          "ref": "e19b284b-b276-48a2-9e10-d5e384fa62ec",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "96395e00-9508-41a9-acfe-f353393f8f1a"
        },
        "item": {
          "id": "ab27a12d-c23d-4549-aa53-a46bdd817b98",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "37b92ddd-3449-446c-886c-ea96e4bc32cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b81b5757-e77b-438e-bd30-5e6442f371c5",
        "cursor": {
          "ref": "b3fe32c8-9ab0-4fa3-ace6-cdfda9242cb4",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "4145f240-fb9a-4db2-a618-e488a33d74e0"
        },
        "item": {
          "id": "b81b5757-e77b-438e-bd30-5e6442f371c5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "86f02aa0-9de2-4f3f-8f19-cc75adf20fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "186b4a57-259f-4677-b8d4-95ee3976bfc3",
        "cursor": {
          "ref": "677c1efb-4859-4182-90cf-7fe6428b5327",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4229b29a-a110-4e2e-9969-7c13fd05113b"
        },
        "item": {
          "id": "186b4a57-259f-4677-b8d4-95ee3976bfc3",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d173a7a7-a085-490e-9cce-919a77dd5277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f888e095-d94d-47aa-8aa5-077d71e8c4e9",
        "cursor": {
          "ref": "420dc121-ad44-4b74-a76e-8950fb71cfbe",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "219d5a9d-086e-4ac7-90ec-5a640468c852"
        },
        "item": {
          "id": "f888e095-d94d-47aa-8aa5-077d71e8c4e9",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "4ced9bb1-3928-40ec-a90f-4b64e8a9020d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a5a231-2c55-433d-a222-48a5071779ba",
        "cursor": {
          "ref": "8cf6fbcf-3518-4f2e-b0da-9def5f2ef191",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3fd9b726-d46c-4245-ac9e-60ec1ba1d844"
        },
        "item": {
          "id": "f3a5a231-2c55-433d-a222-48a5071779ba",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d11ed328-c24c-4783-9701-1182a05e30f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b47223-9b3c-4d91-9085-f6a568711874",
        "cursor": {
          "ref": "a5d822cc-6176-43a0-8ac1-5509d0997e15",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b003a46c-7877-4897-b6b7-2963e0fc58ee"
        },
        "item": {
          "id": "55b47223-9b3c-4d91-9085-f6a568711874",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "00c4d481-481c-4501-82da-dc10a75fa0f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c05cea49-68da-43d0-b136-e6c6340126e6",
        "cursor": {
          "ref": "f43770cf-9a76-42e2-8c8f-10a5be70c0e1",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "98294692-e530-476f-bf14-e8daeebff299"
        },
        "item": {
          "id": "c05cea49-68da-43d0-b136-e6c6340126e6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0635c88b-f179-4767-adc6-31a69bbb45e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "407bceaf-4566-44b4-b13d-2d8c68a1e7bb",
        "cursor": {
          "ref": "eef6c108-20ee-41ea-99da-0ccfa08e31e7",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "69014875-45ad-4354-842a-ba9b7ab570b6"
        },
        "item": {
          "id": "407bceaf-4566-44b4-b13d-2d8c68a1e7bb",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6ed3be30-962d-4ed2-894f-bfa59dc0efe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a67d58-5676-44fe-93ca-d83591dfb29b",
        "cursor": {
          "ref": "7615ade9-fc6a-4ac8-862b-777cf7d2a4c2",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "99983c2d-535d-4ce1-ae66-513c2ce98177"
        },
        "item": {
          "id": "15a67d58-5676-44fe-93ca-d83591dfb29b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8b915d33-fb26-440a-bc62-a428cfc6bdcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "156cd5f4-6c27-4432-8f2f-b1d8397a2400",
        "cursor": {
          "ref": "96a415d7-d7e7-477b-91a9-77524e60b953",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "75072be2-d10c-46f5-b969-959455ef04b5"
        },
        "item": {
          "id": "156cd5f4-6c27-4432-8f2f-b1d8397a2400",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e0074c53-79bd-4890-9101-e0ecd1ba4b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9614298b-b7c6-4d40-8825-eaa19194b6e7",
        "cursor": {
          "ref": "1c5cf16f-a9f7-47dc-bef2-ae6bc2a41517",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0825292b-6f33-4d1e-955b-913a01cde790"
        },
        "item": {
          "id": "9614298b-b7c6-4d40-8825-eaa19194b6e7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "3e456430-6d17-43a0-a3f9-16ec95027bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea7a74a-9d77-49e7-a89f-2ca6605e7921",
        "cursor": {
          "ref": "05d57239-86de-4902-82b8-1289d8ec1a36",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "da8b1478-1861-4b78-a828-beeebaf7e0c4"
        },
        "item": {
          "id": "aea7a74a-9d77-49e7-a89f-2ca6605e7921",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "fc56a8c5-5216-4407-a12a-ba9cce51c4ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe4a727a-ad1b-4a7f-8972-e581b243eb4d",
        "cursor": {
          "ref": "217b81ac-bf88-41ec-ad84-607eba26f502",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "86995e20-88b3-4d41-9023-c37c602d8b35"
        },
        "item": {
          "id": "fe4a727a-ad1b-4a7f-8972-e581b243eb4d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "372fecaa-261d-4c96-924b-a685f14c580a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84326b2b-97dc-4ef8-b145-345204c0ad8e",
        "cursor": {
          "ref": "9aba8f40-c1fc-449e-8582-f143cbadbfae",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "5e40120b-f258-4abb-9438-f557b6928175"
        },
        "item": {
          "id": "84326b2b-97dc-4ef8-b145-345204c0ad8e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "67d01ecf-4ead-43cc-b2b7-ffa605f9363e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f3a8bad-1a24-4c6a-ad5a-d95507ce680e",
        "cursor": {
          "ref": "2b58c0f0-a9fb-4da0-b9ac-761d7b85b4bd",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a19b0aa7-b3fc-4639-a90d-8cf5104c07b2"
        },
        "item": {
          "id": "1f3a8bad-1a24-4c6a-ad5a-d95507ce680e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ee7244d6-4c91-4adc-8b49-10efdaa69990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1555df68-4761-4667-8e4a-dac028595a7c",
        "cursor": {
          "ref": "848a2fd0-32eb-4772-a9bb-ec27bd101577",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "667194ba-4c76-465c-9015-f2c296b3f77f"
        },
        "item": {
          "id": "1555df68-4761-4667-8e4a-dac028595a7c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b162a01c-9631-4768-889e-3fef53dd5089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baf74cea-d0e6-41db-974a-371122b42794",
        "cursor": {
          "ref": "9de01d9b-0d21-44c0-8e33-ff803b9c1647",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "21d2fcfa-fe20-446a-bfbf-565c7a6549d0"
        },
        "item": {
          "id": "baf74cea-d0e6-41db-974a-371122b42794",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c7ae9844-8e12-423e-ab38-d0c05b44b956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "727687c7-9d32-4696-88bf-0ce5d8c9fbdf",
        "cursor": {
          "ref": "b05b1222-5c12-4740-a8ea-b8ebb5673571",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2c12b921-148c-4a27-812f-8894bdfebea5"
        },
        "item": {
          "id": "727687c7-9d32-4696-88bf-0ce5d8c9fbdf",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "a144dde2-25a2-47fd-a58f-2023e169ee82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089b4b0f-2fd9-4119-a4c8-de29cef3488b",
        "cursor": {
          "ref": "1bdc24c2-31cc-415f-9eac-bbb313499d4f",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "66fe2b2d-bdbc-46d3-bb7f-0d465cb41780"
        },
        "item": {
          "id": "089b4b0f-2fd9-4119-a4c8-de29cef3488b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8fefb047-878f-491d-a259-ba4dd54a3e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d30657c-a13a-4ee3-9953-710e8bac5672",
        "cursor": {
          "ref": "ba249e16-0845-4f03-992a-4921d876ae59",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2e3f2bb9-185b-40e9-b362-c7d2d264019c"
        },
        "item": {
          "id": "1d30657c-a13a-4ee3-9953-710e8bac5672",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "bf0ac6c2-6e79-46ab-adc9-7f98d2857716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "528b7253-0e5a-4f17-9fb0-487a8e611304",
        "cursor": {
          "ref": "e0109666-df0c-4f0d-a4bc-82732fa7f95d",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "21823cd6-da97-4a6c-a22e-2eed005ba957"
        },
        "item": {
          "id": "528b7253-0e5a-4f17-9fb0-487a8e611304",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e3fcd360-f49d-4273-8636-3d83f7a64b6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ef02c7-339c-4681-9d8b-614ddad3016c",
        "cursor": {
          "ref": "d2d1408a-5e86-494f-9d46-8dde402016a2",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e8b2975d-67e0-4a1d-ab39-d91f9c79d27b"
        },
        "item": {
          "id": "b8ef02c7-339c-4681-9d8b-614ddad3016c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e911194b-f860-4f30-9dcd-c2c8e046feec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "570e082b-4392-4045-a0cb-ba24c6a925ee",
        "cursor": {
          "ref": "7ae35f0f-16a2-4a3c-b64c-8cd2117ecdbf",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "89f657d4-ca46-4300-9520-59ac62634968"
        },
        "item": {
          "id": "570e082b-4392-4045-a0cb-ba24c6a925ee",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ed26f534-e93c-4f0d-9561-9afb8f7787c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44136e63-08fc-45d2-a5a6-dc99bd32f6d3",
        "cursor": {
          "ref": "11508a69-3058-4afb-ab64-11ee4d286745",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1b56af6e-65b6-4f3d-bf4b-5d328fb6c7ca"
        },
        "item": {
          "id": "44136e63-08fc-45d2-a5a6-dc99bd32f6d3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a0b22535-d922-46d1-b7f9-80755df5545d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2384589-4db8-4fc7-9a76-f98c80043fc8",
        "cursor": {
          "ref": "70399b92-5662-450a-bfa6-99541cb2b80f",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8a0be2d4-dc67-4b1e-ad7b-6ec643c55615"
        },
        "item": {
          "id": "a2384589-4db8-4fc7-9a76-f98c80043fc8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "639177bd-baea-4f8d-9cd9-2f0e1d728d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4eb1cf2-8b58-4e3b-a3db-c1243289131c",
        "cursor": {
          "ref": "5e792b74-6370-4c68-bcf6-108d92e16cc4",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "500c1300-228c-4d77-b456-46e2669ed338"
        },
        "item": {
          "id": "a4eb1cf2-8b58-4e3b-a3db-c1243289131c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "925d11bb-29fb-43b0-aaf5-4a137c9538ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad0acd2-771a-41a1-8d2d-6bced19f4f3c",
        "cursor": {
          "ref": "611975b6-8a71-4490-b9af-bcc8562b6c18",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "43411774-e014-4466-98bf-472b41eb8bcf"
        },
        "item": {
          "id": "cad0acd2-771a-41a1-8d2d-6bced19f4f3c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "065e21c2-cad1-4ecb-96d6-72500bcef18c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a55f7b-1efd-434f-941d-12016160da18",
        "cursor": {
          "ref": "19dcc2a1-ee62-450b-aeea-09c5f04bc9b2",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "547583d7-ea96-412d-a837-2f86b0ea70b1"
        },
        "item": {
          "id": "d7a55f7b-1efd-434f-941d-12016160da18",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "aba55189-1483-4fc0-9545-e66011b40e60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec2968c-164e-41a2-b0b3-43ed64713047",
        "cursor": {
          "ref": "db1834b7-76c9-41f5-89ee-0eb335b8a773",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "53170b2b-bd1e-44e0-b8c2-370930551453"
        },
        "item": {
          "id": "eec2968c-164e-41a2-b0b3-43ed64713047",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a3979915-bed0-465e-a7bc-445e55395c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8589840-2faa-4e11-87e8-c5e21851080d",
        "cursor": {
          "ref": "144bd627-e541-4b1a-abe2-bad45ae92de9",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9fbac411-354a-45c5-9ba0-8356f3d6f8f0"
        },
        "item": {
          "id": "f8589840-2faa-4e11-87e8-c5e21851080d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "96f41f69-6c3a-4805-841f-718dd98d9aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae43ed9f-5c70-42a6-aedd-008b7214359b",
        "cursor": {
          "ref": "d1111906-85ed-4b33-97dd-f4a986ce7ba0",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2be0ea29-d7b7-4a17-84cc-cc64bfb212fb"
        },
        "item": {
          "id": "ae43ed9f-5c70-42a6-aedd-008b7214359b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2e6cc93d-58a6-4937-874a-68e30fe53fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc76528-f67c-4ca6-aeab-55e2fbb1200c",
        "cursor": {
          "ref": "4ca2667f-7ba0-408e-8322-aff35d248592",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6c822eaa-763a-4126-a64c-4ef545de6a4b"
        },
        "item": {
          "id": "4fc76528-f67c-4ca6-aeab-55e2fbb1200c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "332fce5d-cd43-4845-8595-66c9fb595f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "981503ec-cd0e-4c62-ad35-fc76700c7fc5",
        "cursor": {
          "ref": "1dc117d5-0ddb-4347-9fd5-5eccadbd7603",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8a657a9b-702b-404c-86f1-5f950f1fe29b"
        },
        "item": {
          "id": "981503ec-cd0e-4c62-ad35-fc76700c7fc5",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5b06e0e5-8769-4b57-9dec-d84f9d9e2b5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dece9f6a-7a83-4c68-9544-1c865af2d5b2",
        "cursor": {
          "ref": "9d929add-316e-412a-869d-7e61bd59e9c6",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4bd84ef2-2b33-4f42-bc9d-944423eaff20"
        },
        "item": {
          "id": "dece9f6a-7a83-4c68-9544-1c865af2d5b2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e54a26ef-e1bf-45ee-9786-99e2250bc82a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52e9b0f4-688f-4601-aeab-3acee3418c81",
        "cursor": {
          "ref": "fdd99148-b1e9-4e8d-9cd9-2e180557e695",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c4d63bea-e67b-4569-8032-3506d253fb85"
        },
        "item": {
          "id": "52e9b0f4-688f-4601-aeab-3acee3418c81",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "def8db1b-8913-46af-8dcb-cf306528353e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ce051b-e419-41fd-9ba0-2b2a057aeb57",
        "cursor": {
          "ref": "a31f40ed-ea5a-426e-86e8-14fe5a048c46",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8e39f4ab-577c-4acf-91df-0880a3c9d068"
        },
        "item": {
          "id": "b7ce051b-e419-41fd-9ba0-2b2a057aeb57",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "47aa15d5-898b-497f-8b56-bccf14af545b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d3fa5f-6800-49b1-98c3-1068361bdf2f",
        "cursor": {
          "ref": "49b8448d-6a60-4fb9-88c9-dd98bbc92492",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "45954bdc-123a-4406-8a22-ffe67ac13e31"
        },
        "item": {
          "id": "52d3fa5f-6800-49b1-98c3-1068361bdf2f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8725959c-8e64-49a4-891d-e74f27525867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa7c831-993e-41a0-84a8-f0e84bdb9879",
        "cursor": {
          "ref": "80034bd4-c6f7-4073-9d8c-45b74b9b340c",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "beb1f41d-8770-4858-9b9e-b608da2a0b41"
        },
        "item": {
          "id": "3fa7c831-993e-41a0-84a8-f0e84bdb9879",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "dda5724f-a676-4730-8735-a2a8908b894c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45340970-a6ab-4fd2-9ba4-f73786353e20",
        "cursor": {
          "ref": "1b43b706-38dd-48f2-99d4-9f6ae346f308",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b509846d-f878-4adc-ae65-dd3e7fcc45b6"
        },
        "item": {
          "id": "45340970-a6ab-4fd2-9ba4-f73786353e20",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4947522f-5610-4b6e-ab76-7aa339848c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc9800f-c7b2-4b2f-acf3-345ee1c03ee9",
        "cursor": {
          "ref": "52949294-3bf4-445f-97f9-7500bfd7f823",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4964c6aa-b08f-493d-bc20-9a435530e745"
        },
        "item": {
          "id": "8cc9800f-c7b2-4b2f-acf3-345ee1c03ee9",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1dace084-55e0-4e2f-adcd-f3ae49d030a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "514fbe22-3602-48d9-af64-60ab9d0029f5",
        "cursor": {
          "ref": "4968703d-3d62-4023-bb49-6dc3601d1edf",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "6355a590-b326-4a65-81bd-d7fc4312fda3"
        },
        "item": {
          "id": "514fbe22-3602-48d9-af64-60ab9d0029f5",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ef869853-4b4b-46dd-9c70-e81f3c70753a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56aadbff-258f-4728-ab4e-e91baa6553f6",
        "cursor": {
          "ref": "42b33071-b6ca-4513-9395-9fb6371fdd4e",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ab09f735-b330-49ac-ac2a-9fdbe7c2cdc3"
        },
        "item": {
          "id": "56aadbff-258f-4728-ab4e-e91baa6553f6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "15b8a997-117d-46d5-a9fc-58f5b1de7e7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7aaf8f7-22f5-4634-ac4e-c2db2dc38c2f",
        "cursor": {
          "ref": "62e461e2-0e2b-4636-9853-560dd7957b6e",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "eafb1d25-f109-417d-94d2-696f79f8479b"
        },
        "item": {
          "id": "f7aaf8f7-22f5-4634-ac4e-c2db2dc38c2f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3ee55ca3-531b-4859-88a7-9cc6d2570e7f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "2c5a161b-439f-47d5-9d02-d7a4ac5e9f4d",
        "cursor": {
          "ref": "024bd0a5-8397-43e4-900b-c35761838502",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "366dbcae-09b7-4576-bf88-89b4e2516640"
        },
        "item": {
          "id": "2c5a161b-439f-47d5-9d02-d7a4ac5e9f4d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "0fa6b588-4c23-437b-9ba4-9353a18d9b1d",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb22cfe-2b6f-4c35-96a3-81b58ac757eb",
        "cursor": {
          "ref": "2fb6943c-1892-4aa4-8753-8e08a27dce05",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f1c32d7b-6ef5-470e-a4e6-3e2665286a48"
        },
        "item": {
          "id": "ccb22cfe-2b6f-4c35-96a3-81b58ac757eb",
          "name": "credentials_verify"
        },
        "response": {
          "id": "25282ad3-1de2-4b3d-9f6d-473db8b27194",
          "status": "OK",
          "code": 200,
          "responseTime": 2059,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "35341f08-d0e0-46ea-9a8f-de89dead9599",
        "cursor": {
          "ref": "8f72f1da-26c7-4ffd-b182-65dd3d8379b1",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "715110c2-a4b7-43b9-9d63-3ad483c6fe49"
        },
        "item": {
          "id": "35341f08-d0e0-46ea-9a8f-de89dead9599",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ddd86742-30c2-4fe1-9a31-1b3aff9e60b9",
          "status": "OK",
          "code": 200,
          "responseTime": 2286,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf23343d-4799-40f7-bb02-6fa1cb524ef8",
        "cursor": {
          "ref": "690631ce-d236-4637-9580-ed3e8c6ee8fc",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2d71e2de-cb84-4583-9082-0e9b0587a95d"
        },
        "item": {
          "id": "bf23343d-4799-40f7-bb02-6fa1cb524ef8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ef81ba40-ee2f-465e-a92e-40a5de98e448",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "bf23343d-4799-40f7-bb02-6fa1cb524ef8",
        "cursor": {
          "ref": "690631ce-d236-4637-9580-ed3e8c6ee8fc",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2d71e2de-cb84-4583-9082-0e9b0587a95d"
        },
        "item": {
          "id": "bf23343d-4799-40f7-bb02-6fa1cb524ef8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ef81ba40-ee2f-465e-a92e-40a5de98e448",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "61ce00d9-ca05-4682-a3a1-01b07ae09bd3",
        "cursor": {
          "ref": "fa2e6987-df16-41ed-92c8-775a4a5132bd",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c1459ffb-ad32-4f56-8754-d46313735f4c"
        },
        "item": {
          "id": "61ce00d9-ca05-4682-a3a1-01b07ae09bd3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1dc51892-f7d0-4533-8d2f-e4a84a8210c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "72ec1f13-e4fb-4a16-957e-43f25376f7b7",
        "cursor": {
          "ref": "137488c5-0e8d-4688-b181-16f221eed510",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5a114eca-f303-43c4-b4d7-f4b020752d3f"
        },
        "item": {
          "id": "72ec1f13-e4fb-4a16-957e-43f25376f7b7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "bd7f6351-29c0-451a-9053-4293081c2f8e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}