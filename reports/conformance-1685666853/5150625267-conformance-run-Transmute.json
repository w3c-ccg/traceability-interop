{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "996b01e1-2a7f-47f9-b266-5a5d2b1f359e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b1d628c5-280e-46b7-b59c-747a1ae6ecb7",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f6cecf95-3710-4d02-a0e5-154c099b0f0f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "44b3d36d-58cb-4a45-9759-79107a513aa4"
                }
              }
            ]
          },
          {
            "id": "bcadc95f-0cb7-4d4c-ac21-e69b56bc1613",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "14607cc8-fb26-4488-96c9-218ae787e1e3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "31232ba4-90af-4849-aa35-6d6a369feadc"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a9ce3da1-bf73-4b53-bb1d-00a09d6a04f0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "176dd8f5-40d9-478c-a037-f3725bf320b9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "faeaa189-536e-4803-b271-e38970182141",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "67f94c02-a05a-4822-8e97-9c21ef27189a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "db7cbfa2-4c15-4bfb-ba21-fecc36933012"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ec425396-a2e7-40c0-b1f1-451f996f5fb7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c1d9d5a-c7d9-443d-bd58-9954c7a4558f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "93a78dc5-cd7b-4ac0-82b7-f46b653ab915",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f7f9c12f-afed-4f54-b9c1-3e6304c0cbf4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "078c2e95-16f7-4cdc-bcf9-de80eee8ef37",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "377840d2-c6c1-465c-a37d-84cdf93fbb42"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7f8f8d48-d86a-4d84-8d80-ec6d07e630c6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c353a8b0-f92e-45d0-938d-df198084938e"
            }
          }
        ]
      },
      {
        "id": "d53b9187-de74-4409-950c-0638da001a24",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "acecc76d-0171-4f43-bc70-a71d45fa8973",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ddcfb04e-6aa2-4443-ac22-ca06917b61d3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "62ba2a5e-3e94-48cf-bc90-87febc4157a5",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc876d01-0f35-4c4b-8f31-53e8612811f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70c810af-ce1a-4329-a3a2-bbc65703fe9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58170f50-1477-48af-9aa5-a9ea62c15124",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7749d276-c8b0-4ca6-8476-8635a345e1be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f25b3d9-4cde-4906-b0c2-063ded22528b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c534ef-fda2-41a9-8407-d6884cedfaac",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f603d11-cfa4-4611-807e-72f85fb876c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10f9c035-a91a-49ba-9afd-cd41339f2266"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "96285995-10ab-4a66-a9e1-7934044e80f3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "37842819-5c06-4204-9f7a-0a2dbc116d2b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3857ab3-028f-49d1-be0d-1d009b9bba90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "604d0539-6551-46b9-92d5-1b7f4afa538e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c14137-f0a4-43f9-8952-6604733956dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f2b25b3-1b7f-4245-a14e-9d11db3a29e0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5dbf0d43-6783-4b69-90f8-c12589de3f57",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c14bad81-0d4f-41e5-b820-3f15f57ced1f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b41b618c-a6b0-472f-92d2-f2373f3e2897",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4421ad73-4dcb-41a6-b626-6c6200fa0ed3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d92c9ef-ff3b-4b12-a680-2254dd0c5078",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "5311b401-1007-467e-ba1a-ac10dae67008"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98099b55-e782-450f-9423-eac1208fcfac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "70ef17e7-14f0-4396-b938-08283ebe2e8c"
            }
          }
        ]
      },
      {
        "id": "477dd147-8bcb-4159-8f22-e4dde6194ca2",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d6a5e309-1d80-4769-a1b2-92c0b075bc68",
            "name": "Negative Testing",
            "item": [
              {
                "id": "81d10ec3-fa4f-44f4-82d8-0e4280708f11",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2f15169c-4352-493d-bea9-dec8d1deca82",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0288c92d-6834-4e42-b9a8-f9777f114f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4564405b-7166-421b-9769-3b99bbbd384b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265d0089-5c42-4b1e-9687-78bf14cc6c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a181bf1-50f7-4cad-b2d5-0047afe74a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9263b7a2-f1fa-4817-8db7-dca5e9f1cdaa",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2439ffe-e04e-4190-b9f9-d40618e3c51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ef9bde0-5261-4eac-9299-8c2aed16391e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea795ab2-1c08-44f3-ac2a-82682d4e3169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c3fa563-77bf-409c-a468-460b7d716864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbec4389-77e5-448f-b794-edbe4e396913",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30fa4656-3ef1-4a3c-96ac-942810d8fdfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ada16d6b-e5ab-4583-8e10-528fc11c86c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173f9dd8-6ce7-4c59-9ec8-c87d520c8255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae6db42c-75e3-4b8e-8e9b-6d5aca8b950c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f101450c-4ed4-4152-9fbb-801e96cd8565",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23dccaa0-dd3c-4cf7-82d8-71c800c27402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ada9f73-dcf7-4bcf-a3ad-cd3a2caf39f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08bc074e-e935-4d8e-ae2e-db5634dcd5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b57dda4-470a-43b2-bb7a-c1e392c8fff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dbe048c-98f8-414a-8884-8ca95bc86f1e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de1e32ed-9738-440a-9e73-bdece9876c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccb2279d-0474-4efb-af70-cc1bde403096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96064fca-f41c-419d-a271-ec6462368897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dfee7993-a92f-4726-a5c6-4dcb041f1b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5970209-442b-441a-bdb9-74e82a135a97",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94635421-ecda-49c0-bf38-0b7bc05f849c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b3f1b46-55bd-4aed-b6a2-a8be9f0eb1b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73730146-d49c-40a1-a05f-99c9c9581f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2ae47c0-98b1-4371-8b92-2011f8d35c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521eea62-d626-47a9-bc62-bb1ad8c2a2f0",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93dda514-bf98-490f-a57b-4418a2812f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eb5b5f2-dad2-40b1-8231-eba9f5d2958c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe9bbc3-95a4-4e05-9b74-3b27b968092b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c8cbcbb-99f9-4bff-bdcb-b64764ad8c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63164beb-0c55-487c-a68c-cfe7156f1b77",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3837c28-898d-427a-a898-76d18b397e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df7c4f6b-162b-4853-a3de-c5239c1af658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b26d880-da00-423d-a9bd-d684d1dd35f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38f0858a-d785-4726-9b79-723242d662b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f4bcd0-1f00-49d9-a4e4-7518767e820d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b29ec5f0-f58e-4f80-8532-79e8001bcb42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31b32753-52be-42f1-885d-d14444999c67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0d5c28-e45a-420b-9972-97772d389c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b1a9f4b-fcf1-4017-bcf2-f0a307cbd9b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65895d02-23e1-4c9d-8814-b407d66f2503",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d76c36-3af8-4942-877c-1d989197c709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89df86db-6fdf-4c1b-9207-09913505419f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1236d296-7698-4e4c-b399-2dca6a630b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c451783-5580-4a1b-a0cb-a913a1b9b519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d56726-154d-4287-a479-91c782d6e1ad",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c9b898-868e-46f7-8d51-eaca04a1fb7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63787756-fbc8-4ce5-a7cf-4dc42a2f6425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba38bb97-823b-42c1-a7e2-f93e860a2b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e082c900-6e05-45c9-9f98-50ff904e21ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff21b3c-12ce-4691-aeb5-17309468810a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68f6d3d-86b1-43f3-bc43-1e9efc613a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cc58f9d-30a8-4a8d-afef-03214b3d326f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4aecfc-2075-4781-a0a0-35f85c8783a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad347f7e-f06a-49cb-9ff8-df819e700db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7463054-8047-4c37-94cb-102f539f5c2b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4b7b77-c0d2-4a20-a11e-8dbe8d86c379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "178139dd-ceb0-4fe2-a477-b82449c611ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c8c726f-6981-408e-a645-68c3b7698543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f95306bc-6e6f-4948-819a-63f4c8e398a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "712b8215-b728-4e72-9f3a-8c76ea344903",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6921ecb-7bea-434c-ac72-2671b3760f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa02c47-4b24-4b84-9c27-b6c70c77f130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9bce6da-9f62-4744-b134-a8554e20a26d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5421d956-f729-4d24-b3c6-f8bb53279586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc2849b-94a6-480c-9475-089880bae2b7",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b4991e1-7947-4265-9181-6a01a10d3334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7935feae-40a0-4efb-aa83-fce50711a8e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f640b6-0731-4fe4-859e-340174d9e13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "557696b2-998b-47d9-9d59-cea31e194127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b7f34b-ca30-4633-a8af-a87623062fc4",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ebfe98-6649-4e78-9ce8-4584d9211997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "574ec45f-96c0-47ee-985c-498703dbe533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7940c943-74f2-4b8d-880e-dca73be02048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7bf6f6a2-2c90-4bf0-ae0f-78fda5760594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0d40650-b857-4de5-be9b-1ea57b1a55d8",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b859fc32-8384-4d89-a096-74c3942c3dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d11d62f-e5f3-48d0-a7b9-406593471a06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592041b5-fd64-49e8-b60e-0881c0c9e1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "385649f2-80a2-4093-99f1-0e04a3085c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a95905-9a00-47a2-86f7-f51a79d43b1b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e72833f9-8fde-4222-a028-a928fec38cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4154f124-4be5-48fc-b8db-be23095516ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531c002d-77a9-4c1a-85e3-4dc29ebcaeab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9979f7c-2be3-4e32-8189-b078808faa7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "961817d3-4278-4c24-b6d6-bbc2d27d0115",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bcbabd3-3505-475c-adce-366885b418af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c9c4f31-62e0-4191-9439-7e45dbb5f8d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af81b1a-d284-4495-ab0c-648650a437c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "47bf793b-8710-495d-88bc-660238069e30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a22872-fec1-4e38-b759-c1e1c410802d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efdec8e0-44de-45ef-89da-a32b259f7c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e30c2448-3d3a-432d-a6f7-0c860d3e645f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f9dca7-f291-4443-95a7-ae827e02288c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "769573b8-cd83-4a79-9a53-d6e5dc291e68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51777763-d9bb-4cdf-96af-a26aa3198d50",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df1d8731-c982-4272-8479-b23caaa80718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "812cd937-c7b5-47b0-bb77-1fe9fc346146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3325234b-e0d2-45d2-a274-fbe4af5be1da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa2761d0-d573-4a34-979e-af05ef852c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2895fed3-71ea-4bc3-9879-8887c50a83c3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00640171-c342-4412-9705-353128a8fc5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a930370c-66b7-4ef9-be87-2512dfaa8df4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b513e02-80a8-4aa8-bc7a-07025e9c1519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef9f96be-8891-4574-be92-63539d1a504f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e19f68de-de9d-40bc-a786-40343cb9e155",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "521409ba-96c9-472f-a8f0-de5444ed6e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68cf82d9-2851-4ebe-8a5e-5fdaed4a974c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b84ab9-b62d-46f3-91db-bfa3d0224254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f0924bd2-9fa8-4c41-8e7b-1aff40e305da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68ae8b6-1487-44ef-8783-eb3a3b6a68a1",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3fe7369-9fb5-486b-add9-a8ff34cc4944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "720ea165-c540-4730-a731-30a737a69fcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2b26b9-d6e4-480e-add8-c3cebc721795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea07017c-f23c-47df-aa84-6e64152c64ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f09fe8-bd6c-436a-84de-1b71e67e43a7",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be9207d-a70f-4fef-8560-fe2e26d659d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7efb2183-0372-456d-80e5-b833c8baad4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adacfae9-c69c-4af1-a158-3d2d3d2b7e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "179887fe-483f-4d13-a796-17953c83548c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b66e510-68c8-4c67-a928-d479b1626aad",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8731fd-fcb6-4c8e-9fb8-69a58f41d0ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "411b88c0-082c-46e4-9909-227194dbc9bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffca0204-f206-4495-92c3-08b4739a3e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "256ab707-a286-4f8f-99b8-323510792634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206209cf-71f3-4caf-a37c-8ddc36ee7b32",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be0b7e3-3335-4b9b-907d-ca76d647f3c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efcb5077-472e-4ef3-a181-7d62459dba9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca50c1d-c5a9-4d5d-9ea5-bd8e885728e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "54267271-ff5e-43dc-bdda-876d2c27db0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "182f5294-98e4-4fe3-ac59-5b15a4be6d65",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d5c30f-8da3-4017-8d56-709228d16a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "296e90f8-71d1-4d0c-b697-7f8c75a0cf47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2876a85f-8256-43cf-b63d-e7f8f1438aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "181e3754-feee-4b84-b260-af74324f6457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac71890f-3bbd-496f-b429-acfc194c9319",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9538c9-0821-4b53-9bf6-0b56becc147e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "256876bf-dc65-4bb8-988e-2cf553e8ba72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f734534-2b3f-4a22-b57f-80bfdac4eadb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8ae1da1-1bb1-41f6-b746-e2f73d59efc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed906d2-1c92-498d-bf16-a1c73ff3b444",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ca3a6e-1538-4367-9f51-79cca67ae23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "393fd052-171a-4e54-a7d5-79af999be117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c531b6-8dc4-43f2-a7e6-8dc0e15a24b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "87e3eab7-ccdc-45f1-983c-2e295bd89dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d434c45-a263-4dc7-8a57-0ea48b06bb7d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c17b3b8-10d3-4f47-8017-9e03c5708a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcbb8d14-0b05-47d9-85e8-283ef87e5b74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ffe0fab-afd8-481e-be56-58210a16f3af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c33ace31-3f64-43ad-9225-57b71706c322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22e4248-2006-42d3-8f17-54a7e5bcc830",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bceceea-d43e-488e-a4f0-3d7c514ba530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d2530d6-55da-45b9-8edb-6007b5d33625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae5b61e-06ad-473d-bc62-2b0aea6f79ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6dd29b10-c681-4528-adf8-9b410c126156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac13504-482e-41bb-b822-e78769f88ac9",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e891fab8-0e13-4ed7-8dd1-6fea356bc213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03d9378c-4b18-4e46-8abb-1c5ea50470b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a2ea07-c96f-4012-a693-bd154105dbcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7327deab-21e8-4f1d-9f61-b5d5ce89ee21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c09e3673-a7cc-48fd-982b-26b4c5bda298",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb5beb2-f166-4cc6-9cb7-b8f021b0a72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81c55ab2-3fb0-41f1-93ac-97be1f4b3842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe28a5a-57bd-46a9-a8f6-ced85a9fb1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e66f39e-1a71-46e6-9288-7b26492f4279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235332a2-70b4-420a-9d98-9bd37084d59d",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b924bd0-a60a-47de-8af2-b990683078c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e58217a-cd72-49a7-a016-62ab4e30af6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38acdc3c-c44b-40f5-be9a-1476afa8421f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a24be6f4-36cb-486f-bbfc-d5ef0becf1f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132960ef-97e9-49ca-826c-39e5e001e9ea",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c538aa3-02db-46f0-af41-e097a4f8b17f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "14181c8e-d482-462b-bcd4-8991bd464553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9637609-b6c0-4dec-be62-a92d445ac8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "70435b64-1cf3-4834-aa2f-996aba13d8da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a85d8fb-22a2-4347-94ae-0975912a39ce",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d551062b-9752-44ba-84dd-c9eff87c1ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b96cb04-6925-4dd3-8dbd-4f9acbaa512e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050faee8-875f-4705-a894-2d659e21b40f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb78bdb5-41aa-4d3d-8c0f-62e2941d5cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6148def-f3ff-4b3b-a7bc-d420205f52f8",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f9229d-e58a-46f1-81c5-0aba37c972cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a202330e-670f-4c3f-a105-1963509f6fca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daac2019-152e-48d6-b315-5e376a1ebecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "425619b2-db84-4319-8d94-2e76699e454e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8249ff2-2a07-4859-be7e-d6e1b87cf1f2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "589a9ebf-9c16-4f9a-9878-76f9717f6b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ed7de03-b5e0-41b6-89e5-510891d8a199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8025d747-f01e-4cff-99cd-1d6efbc2a3e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4979db3-e77c-4152-b33a-322f83eb8b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "955606e7-52e3-42ab-9da8-9b6660671e28",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9a3eaf-7438-4876-a6d2-add8edda6e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7981898-06d4-4d64-b294-96e61d6a872d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918988c7-ef09-42a8-bebe-27e63604147c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ec265af-3fc0-49c6-af5d-2cf661f816cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0139e2de-1290-41d5-a3f0-fddaf905d449",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f40769-45cf-403a-9489-b6123140742b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85058e90-adb3-4583-8de1-8e579772e004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "787d544a-6097-4058-9b92-493a0aab6eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ea91320-93a2-43e7-a340-4adf5d79e5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8ba27d9-6f83-40ad-817e-22d43dd5ad68",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fefed2c0-402a-451a-b81c-11a6a38e841e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb2f58ae-5f23-4997-9925-c9cef62288b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96febc3-c1e1-40a7-ac2f-365d1c373695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3f7ad5fe-f550-4030-9498-03a197dc7dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05a2655-bf4a-4628-a112-2545143dbee7",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b98edf7-c191-4d6d-a386-d8be4a1ce962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5a599b2-e715-4d3a-9e10-c372eb6c71b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc58f97-836e-4293-87cd-81b38643f159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "81de2926-0950-414b-a5b6-8ecaea5f8ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c6f265-0b34-4104-af9c-a346c41edd0c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ef0a3e-c599-46c3-9b3f-142d8c3e21bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "879b3711-5aa8-4e08-a52e-848b43cb593a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab872fd-eadb-4b37-aaab-a062c47b46a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f25860cf-95f0-446d-ae87-f9e8a919b806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6407ea08-0ca0-4598-910b-6480c88df1a1",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6498f453-5eb9-4325-b91d-5cbd05c8a765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f10b4623-58f9-4fa5-aee5-3682fbc7ac7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f6e6e9-f2d0-4def-bbd1-e5eca2513e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "89915351-c6f6-4f98-957d-4a393f3dfcb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc6f6210-3891-4a2b-b9c1-997921f3f76c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eabc3a97-af47-4a55-9c2a-5d83e32fea25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "379de537-8c3c-42e4-8a8d-3e3e5e3001cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f32a7a7-2fd4-4c54-a897-af5bf2a36fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "66b0b997-d754-4de2-860c-38989da8d419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc00477-4598-41e4-982b-558bd708ecbf",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7823c501-4632-4807-b4df-c6f4bcc8a46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfd97fdb-2f46-4612-8a22-200d5eb55693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88bcf140-4ab2-4d67-8b3d-72ebee74a142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8570acc2-c500-4663-9b1a-cf81b9d8e32d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a5ec67-e1b8-4152-998d-e38fea4e5b2b",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d76827f-4f29-49ef-8616-f6fe57d02a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dd46d6f-9f12-49f4-bb2d-e3c818f71946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e3292c-11c2-484b-9d65-847fa008bbf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8d7281d-37e2-46e8-999a-5bc35ecf1ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bcabad0-60cc-46ad-95ee-c7949ca9d103",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac38e92-a165-4438-9964-727f6a5aada0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88b95ba0-9f71-403a-b663-cb05bb49625f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e06829-cb41-4424-b611-e46f3fe45017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "663af5dc-6104-4bcc-bcf7-e295232d8afb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45653c1a-baba-41bd-9ad6-0b6062f339f4",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2715f583-fa2e-4fe7-abba-d0eef3364dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1535b21-595c-4369-9f2b-7da724a4ffcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50eba102-6eef-4df7-8647-5f9fc6270ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ff35c265-e84a-4f61-b1a2-7fa3b0c8174e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb1a044-6048-40e5-b3da-0567ad28dd49",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa265e75-8099-4df5-a17b-c5449ef58ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56f5886d-b8d3-488b-a4a5-0804cf863623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d4765c-3c5f-4270-8a1b-b146fe435316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b898d494-be31-486d-9eec-75f2da5c4d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d616e3a-cc9e-4a40-8899-23421849be6a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b6824f-95a5-4563-a413-cf4a7b7cc209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52552f8d-dc28-4524-bcb5-0d377d3173e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b24e00d9-f46d-45cf-9278-e233d3d684d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad353738-6d28-450f-97d1-f9379afa573f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ab3e7e-92f4-40f0-b4d1-77a6e7755a6b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a51604-ee18-4596-b560-28a6e41aff17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ea841b7-6ab1-4d7f-b998-21a9050b3aa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d06e8c0-7326-4515-996e-49b75c7dac42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1f41ed8-b844-433d-ad1e-b8b9c929de9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f5d9d77-6211-4b52-a8f5-56323ae10ffc",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a47440cb-8f1e-4f26-b8c7-0cf0e467a5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff90be0e-4c8a-4fd4-b548-0a4f705cc695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b46cf2f3-6f19-4d30-a555-70011dfd0ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3169593-4091-4bdc-9bef-7958c4f52ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd65fcf-f073-4c07-b4cd-c74c34cb1576",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b5b826d-a677-4b55-9386-571ba84a1659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "036bbcd1-cce4-4600-8bc1-5a3ec25e9f24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf8b6f9-0a8f-4b8d-a9a4-0df09edd0687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddeab3d6-d35c-4f96-b815-284960d2c238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e57868aa-e7ba-44d7-a03e-5c9f605152c4",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0252846-2023-4967-93e0-3108850d6cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b556deb3-594b-46c2-8ede-fc8cf54bc5c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d11d098d-c568-4b75-9815-7acc2539312e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "f2445501-06ed-4b67-a1d6-76ba726e2d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a77776a-fe65-411b-bfd9-4c5a018d8f11",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13fa006d-0c16-4981-8e72-14e7e1dac6bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bef79a2-e482-455b-87f3-e68a52a90276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3334793c-897e-473e-b41b-00437c2f3ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4f11353-1124-4a0b-bfa0-c6643b6710d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6779cbe7-cfa4-4d7c-83e3-52cb1ee75b92",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0ac9a3-7dc6-45bd-b18a-6a237ce5003e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea5e378f-e486-4acf-a3b0-f61b4b66f0d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd60cc4-8238-4cc6-98f6-debc8e4025e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f46fced2-be97-4db9-b38e-f7ee2ce737fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34675329-24d4-4fd0-ac4b-79c8fe10ba8f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2fc94e-c909-465f-aacc-a9631f97158d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09508816-0f17-4675-943d-6801ceee45d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4276c38-66f5-4890-b59a-51121ae00239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf60d3d2-4b00-48af-8f8b-0c5996f589c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f843314c-a785-4275-a63e-5a1c07f66776",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8caca07f-4e34-4ef0-8f37-2c47bd5d29dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "167e47a1-5b3c-484b-ae1c-7e76dadc48d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed91731-2a25-4e99-ba2d-d6707706a7d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd839ac2-7e7d-4e76-8efd-f8c45285ad36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ed5ee0-1b7c-4c9c-85c4-29eb2295bf4c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "347a5abe-56e4-4c87-8409-e05e00bb919d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f77430-9dc3-4281-9985-e7ffc24f5fb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac03e7c-97df-4fc3-90a3-4bbb2076ef25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5cf11a38-4b52-4c9d-829f-d721e9de3861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3681b45-8eb5-4522-acc3-0df97a31e13b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b31249-ff06-40ea-b521-1939e2bf2144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bd71196-b865-4280-addf-e4fb32f9529e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace44b8c-5bed-4dc3-a1ec-ca9117b5ecbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccc2c8fd-5ee7-49cd-a100-79a66b075563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef771ffc-1cb0-4afc-9686-08a67a50bda3",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41531a32-303f-41ed-8bf5-88acf06bb6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9090884-ac8b-42a7-b6ac-17903dbe02c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997ae20c-f16b-41b9-9869-9cd69206f7cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcd5c2bb-1228-439d-902f-c75c6e671e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a0f036-395d-40b7-9306-79ff9c6fdd44",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a499ed-aab2-46c1-9ae5-d783d3424594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a1cb11-0643-4cdc-938b-8b6d1aa1e219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda956a3-7751-4e53-b13f-afc4d8d20ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c5f4bda-6241-4874-ba04-a859f1f9e6e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25767fc2-9ef4-46bb-b568-4ed0c6c4c237",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e42c3bb-4975-4be5-a19f-afb8903a0a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "771534ed-ec2b-4abd-bbe7-2df8780bf2de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b710ee17-b59c-4e8a-859d-7e60243b19c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "171a7827-ee60-44e2-af3c-943d2d753162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bfb690f-44d1-42b9-bc4a-2d6ca067c62b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ae8dc4-22e1-418f-9221-59b670c75c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7472d84c-5929-4d87-8ad5-01b0128f4845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62a805d-1502-45b0-9385-b9c2d5d87756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e91631c1-b8fa-4cde-9ccf-5afc91a7f1bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53e4824-f6eb-4f62-b42a-f602ec2703c3",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e033523-46fb-463e-9e22-0ab8d0015c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cecee55-81b4-48d6-b9c3-d2a65ffd1076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "272f548a-d621-4dbf-be2e-58931d406fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0b4dc764-81dd-409f-b9df-ea7fe2109096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b6c55c5-dba0-4f23-a461-35008f232751",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2377fd8a-4e40-4782-9818-6ba465b6859a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f3d16f-b8a1-41bf-a583-b93e093cd600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8395c45e-c834-46e8-9376-4f202ebc1a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1b3e941-69b3-45f0-b813-df6639f98cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace978cc-9a05-485e-8bf6-9e263e6017bc",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b1d924-74d2-4654-9042-cb3c355558dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a04e8fc8-90c5-4581-a758-ca7bd24a633c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5f0cf1-55ed-4ac1-bb76-5a8876c0b4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7476511a-e546-4889-825a-1afcaf315311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d2522e0-f6a1-47f6-9781-bcd9d9da62cd",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39e5d61-89b3-4a98-8de7-b7cd1a9c28b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7906147-ec10-4993-aba5-fcd8b25eb970"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa580d6f-0145-4575-9693-4737e9100b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3c6a3e3-e591-42a5-9b36-cd1e8b8ab528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7995b2c-302b-469b-93ac-e538fb111f47",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7108e346-6e14-499b-af16-79f1a0523fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e0ae316-5932-41b5-b0b8-b0814dfdf56c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4462ce88-ce6d-4099-a9bb-a017e4e1c743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f37c586d-1d19-4eb0-b877-a186f43b49b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ab1d7f-6004-44ae-9a61-cbc556fc56f6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7842429d-fe67-4aad-a671-f78de5f2c88e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b6b984e-b822-4b2f-ba83-66e5bacf6d2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea893229-f91e-4d3e-af5c-b8992f2b131e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca25db6f-aa8f-4ea5-b9cd-3df8afd92a80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001769be-d3c8-4f66-8080-d3f790a5c59b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92dfab2e-d2c1-42eb-a6a8-73179b84c53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "230aad05-ac80-4ae3-bf34-25c00a5dc32a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4fa947c-fd17-40e0-8195-647fa1da2d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bcb410d4-0482-48a9-810c-ab67551d436f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dead56d3-a7e7-43a0-b435-b1e3c9a366ed",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "969d3ff3-59f4-4202-bec7-65bb97593c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15089053-dff7-4f02-88c7-6852472e0bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b0193b-ea0a-4dc6-b19e-a428d49b1a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "95215063-9bf1-4315-bde2-ed55fdacad2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d967c990-f168-4e41-aff5-c4b2ad0cbad6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3c78a6-00d1-4b40-8535-173f7a91dd8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cee259a5-ca59-4598-8448-72c3f998bc4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd67a0c9-3d90-4288-b689-0e63b3ed1b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "55229a69-5e7f-4819-8904-a5753baa5be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae0e3bd-9da4-4df6-9bec-df0b0c77b8e4",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01755377-9145-4600-afd1-22acacf8d4cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb093334-e8c4-4f39-9b05-70a30a72aafa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82847d9b-9028-4632-8ef4-8c5947f90715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed408a40-eb75-427a-bc7f-36be5b9b9251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9eb27a8-6425-455d-ad3e-a9a7bb12d3c6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611034f2-e2ba-4b7e-9d10-9941cdca8377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dc25238-986b-4f7d-914c-eb7345e499d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef7833c-8d01-4080-a227-d66effcafec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d42fa19-5edf-4887-87ce-81d88243bafb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e8b11f5-9fda-4ac1-b8d3-2077e26848bc",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d009331f-c219-4e04-9848-84f6b916d634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d55b53fc-39ca-4200-a9dc-c328d10b08e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b1f260-c74b-407d-8acb-62f5fd4507be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e869aa3-ef29-4b29-927a-c0f6c164febf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c8792c9-b9a5-4bf6-a5d5-fd3a58dc3315",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8beeb50-1a3e-4ffc-836b-685d0d5955bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "def7aff3-a876-4092-8fe9-5f369e910d98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8892c7-93a8-44f4-aede-e336bdaefee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe52284b-1a31-4762-989d-40c95a3373bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84085451-771d-4847-a86a-af90fc5e97ca",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd4d609-87fc-4cbe-947b-1bf095127993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a194c134-3504-43f3-bc1b-7126bac2aaa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f95781-d7e9-4971-91ca-53f517889133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "20682243-1cda-4f9b-9c11-d9f119a392ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e41eb846-8c38-4449-9cc3-d06587a60b0e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78328f09-fd7b-4056-bf13-0233e453b15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38c067e4-7d21-492f-8c65-df484e6578ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ee2f2b-358c-416d-a54a-4c51ee355c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "18dd4b37-f68e-4c8a-9c1a-883561b51587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e234c48-67f5-4dfd-84d5-31cfcc4cce5a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66215a66-a777-45bd-8669-a28223b13927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0dedab5-66f3-47f8-80ab-cd20087284dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c710162-5687-4847-b0c5-45c7fd711ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "26de75b4-9654-480a-bfa0-3a9828741ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "735bd568-5d20-404f-b508-5557b4d3e39e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cca98b4-aadd-400d-9bcb-fc21c515373d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5867ec09-5ee4-4b21-9df3-010f7c987980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e924ba-ef3a-493e-8306-e315a8a37a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "25227bfb-97b2-46e6-979f-999673029ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81448552-9f44-40ee-aae8-9af296a3347d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e4c711-c912-4282-b57c-e56b6f6e61b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2841b9e2-136e-4976-8996-e47b9f669ac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff592d5d-aea7-4ff0-b844-dd10ab411ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ca746ad-8326-4aca-9eb4-ef6e2591d405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075642f9-d3e0-41a6-b759-1a5ec7044bd6",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae386574-7d98-4b2a-bca0-ff738813716a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "995bbd66-4fd1-42de-830a-90774c30502c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4863e6d-659c-45b1-9e97-cac6bb21b878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "69aac50e-a620-4eb3-a8e9-5d8138478602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e2df96-44e8-4bb9-8942-9e29b1565541",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b85247-d539-44a0-8478-6952415eafa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b0c219e-a8e9-4994-b2f1-c74024145d95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e98a286c-1b5d-4566-85b6-cc2aae4dd9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc014067-8304-464f-a6a2-aa72cf6b5ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85068b58-2ef3-472d-9f76-0431d4082625",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac69132-c28f-4fe7-a89c-2feb0ef21496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7d8350e-01cf-446e-a113-c028fd61aa6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d5ea23-b573-456c-8198-b163e1e5f9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9543b0b3-5165-42ff-ae51-22eed3c0f09f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e296fc3-4fe7-4f6d-9c23-f9aa76d3e358",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9f0627-2d1b-4db0-8d0f-81523e522d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1ccefe4-80ab-4b37-8485-6ae4cfbd8ef5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92435e4d-4455-4ab2-a4f7-eb243a7adbf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1834fe30-1378-4a06-9fbc-b53a91e74bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e191580-5f29-470c-b5c5-857c658d2114",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc805bf-f2f2-4816-9579-c7270e6b7dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33adc246-b934-4a07-ba28-13628055e8a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "615929aa-80bf-4569-9ba3-fe85cde02b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e2d3950-ed44-4ea6-b9c2-c518d1fc1694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c0cdce-0cbd-4f52-960e-72157fbdbb73",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "798eb214-402d-4ddc-85cd-4d42ab54970e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56a2a841-3454-416d-bebf-9fda84575369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93725b2b-39e3-42dc-af76-a14a28172d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d631d663-e1dc-4172-8a28-c6d0013698cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0dbac3a-06a3-4865-a0b5-76ed68100ba9",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cbc9b97-d334-486f-9d1e-a512b378151c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea72a20c-81bd-4f79-8c84-354d7ffb468e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bbddc20-df17-4e1a-bd48-668a7344021f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "09150d6e-3db2-4df8-be04-2cbd7e220d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d8d1ac-da05-4e9d-b9ec-74dca0ee7e9a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a399cb39-916f-44b3-b702-41019fe0f205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "496cca70-2896-49a5-a877-ac68ad2afc53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c1cdf3-a4c0-4c44-883a-179920bb468b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "43724ed0-2dfd-4843-bd33-5459d73079dd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f93a44de-8732-47af-9049-990aa8178298",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b3d0d5ab-4fb3-4ffe-899f-bdc71f75f98d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f74d19c-6497-4f97-a8e0-95405d49a917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e9ab08a-dea4-4164-9411-7a0114ed7e66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b5ddd0d-70dc-4fc9-bc76-9d478880a3fa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "464105f3-02a9-483a-b5fd-bbddd41be84f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38578932-1894-48c3-901f-478d11c11f1b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8410a383-7883-4677-bd4c-fec08c989ff6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2eeafe7-946f-4ac9-b617-593ecbf1be0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "739d9c3a-bd15-46bb-9281-5c331ade8a1a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d9ddb6cb-8477-4f0c-ba14-68259105dfad",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "01fb794b-c606-4a29-9e9e-845cbefa26ec"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a9fedffe-9016-47b8-bd87-0f1a4b597730",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0e79e653-ed0b-4cff-b2f0-ffd7ba89c8d5"
                }
              }
            ]
          },
          {
            "id": "9ed2f514-71ee-41e5-a36f-c1bb3e0b56f3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "55d9a34b-3357-416a-8f65-de338a8e59cf",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "167f76e7-4cd5-4dad-b3e2-9f14f8bb7f34",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ecb7b2a2-633e-491f-ab21-777d9aa8b508"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a404de7-56a5-44fc-b3a5-20c687ac0c17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a97677cf-debe-4a24-87e7-4d8b3ec237d4"
                    }
                  }
                ]
              },
              {
                "id": "fa62ca70-f7be-4b0f-9e55-1a80e231e95f",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0bd9d4b7-a9d7-4aa4-89e5-206932907d45",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d735a594-4ea8-44b3-96d9-b14c471cae85"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e865b226-bd53-410c-94d5-14531f8d6cea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "49324c5f-d0c8-47d4-9d41-0d604927a5b6"
                    }
                  }
                ]
              },
              {
                "id": "f2ac73aa-3b16-4996-8011-7812e888a549",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8bb3e8a-d0fe-4ada-881e-14b9fe4b8578",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cdd7ebb1-af0a-491a-944f-96c712aa3ee6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20c3b414-9d3d-4483-942d-b7a55b25fba2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "40e42f45-8ff9-4a03-a698-cd2e1f91ce17"
                    }
                  }
                ]
              },
              {
                "id": "90e0ac98-59d3-402e-92cd-672421c9b5f8",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8baa8358-028d-4d10-a370-652949b45821",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1efed65a-80a7-412c-b536-083a19bebfc8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e22fdddf-0bb3-45a9-8f51-76d9e13e0a42",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "cced1477-73ad-4063-81aa-cd97256fd6b0"
                    }
                  }
                ]
              },
              {
                "id": "9a7970bb-cbff-4333-a36e-a18158c0bd23",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19b73f46-64d5-44c1-a66b-061841f87d7a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e37c4164-9194-4cbf-affd-636dcca58cee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dad0b31f-bda4-4931-8349-a9e663196d1a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ffe02dd1-7b6e-45b1-b683-7322a0bf9833"
                    }
                  }
                ]
              },
              {
                "id": "df82bdc4-a22e-49f1-bb53-bd06a1dc546b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f087a98f-3fed-4533-94ce-85a9ddde4ec4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "423e30d7-eeb1-4969-91c2-0fc68368ce95"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aafeffee-6d4b-4aa0-8809-52d68eedb26c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "93f7da11-4c23-4105-9fcd-30ba8d97ba9b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "302e9423-699b-45d7-8ff7-f167685296eb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b4262d0b-db6d-4444-84fb-78227ee86264"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e763d696-c747-4b9d-84dc-f300b7188a29",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9695643e-e654-43fc-ae4f-121b4e294185"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e03463f1-b966-46cf-8901-f49944ecca90",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3b5b7338-b862-4578-8e57-99b71b80d797"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f3316a7-fdd4-44e3-b85e-066aeed11798",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "45ad2427-e995-461a-840b-cdd8206a16a9"
            }
          }
        ]
      },
      {
        "id": "2f0a61f7-88af-443a-a9e6-0f45e6202792",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a735df88-4f7f-411e-8519-d7a0672dba5e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "07006558-7ce9-4baa-9be9-c78286389c0f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a29f1378-89cd-42ee-a92b-962cacbee690",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1c2d7d-c28e-4a5d-8c50-d65d9c9acb82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0962ef9a-4e16-4044-95f6-f3f4421a9ddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37497fe3-7624-46be-a8b9-9be6825f4b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d857ab17-ddb4-451a-8c2e-4b09b663730f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e3ec50-ada2-4109-97c5-493305608f7c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed7e300-0e1a-4dcf-9bba-bf1184752e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40ff2044-b27e-4041-ac51-3b83baef1393"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "278188a2-d818-4132-916b-4c64bed2f10b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d39aca7-b305-4b4c-bb38-c9236d6b6f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "591bee41-513d-4827-94bc-6c30cea875a2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a380dc1f-f2ed-49be-8eb4-4626037e44fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcf56fe4-80fa-4508-9379-36922218f377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9aee394-3a1d-48b1-a9bf-f3acc2bf789b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "45a8e289-dc68-4c80-ae35-cde16bbcf737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d89c98-3ee2-4070-9dfd-08713b9efdd3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "017ffccc-3f10-4f66-94a4-063c00920e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "721224d0-71b3-4291-9883-31bc5873bada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e4b669-9c49-49fd-a972-bfdbb62d3762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ede9885-d515-4e61-aa02-6868c2c61b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "037a87e9-a06b-4954-9da5-ee11625c29b7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be526ef6-a63a-4b21-a6e3-dc02c5e2b720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75c786a7-c458-4ffb-b493-64e3666b62e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61898cfd-db4f-4c3f-a316-f91cec3d19b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7cfb691-c159-4d72-8f3b-bbe5c2c4c9cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89fca687-0caf-4c6f-b664-835b683db5df",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd323c50-e304-44b3-b6ad-8c5171612bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51ce9a3f-1da1-43ad-9f84-ad9ed0dc05a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af2e224-614b-4e35-9df0-3586f3d53505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "437ef2e8-f4ab-4d6e-9414-f4f94a410671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e48e095b-2211-4085-928e-b6c1325a4f9e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6468a65-44a9-4f4e-9561-e6ab4f141333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04a8c14e-90c1-497e-93c1-3530294ab860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e964d685-587b-4320-ba2b-f85691e5e00a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc7fd2ca-d721-49a5-af16-0b2aaf4d4bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed9e7f5-6d8c-48fc-8645-029a6754b663",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58bc55a-eb9a-4a22-8526-3f9346ab956d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3f309e3-a02c-4fc6-b4cb-614e1ac9e9de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f24817-d1c5-4025-aa29-31e642a4abce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cb9f0cd-c220-4ede-9171-78e07eed115f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae3250f3-a757-47dc-94af-968be289c807",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7bec6ca-1cd3-4391-bd28-cff06e168c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e351810-685d-4b10-97cf-9a1989ddb25f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54170620-f1f3-446a-83e3-7fe310b177e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "00c395af-aafc-4a7a-907f-9f256e81059f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ecce30b-f774-4222-970c-65a96c6fc9f2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5caa5290-454c-4e7f-b378-fa8ba92280b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ad84018-30a3-4a4a-85da-5047c96df999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7631fa0a-2a2d-44a9-96ed-1820fe8c8e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ead19594-7fc7-4c77-90be-f07657420ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f57ac5-bfb0-4918-b668-46c1da59dccd",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "769382ad-3cfe-42d2-b8dc-88d620716741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c1d270-7ed3-4475-b857-501eb7dd2cfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40705d9a-64fd-45e9-8c9b-dd6ce9b20b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "96f3e679-665c-4e5c-91ac-53aa4f4baedb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a5b270d-70d2-4fea-80db-06e9b8189d2e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e67430-b269-4493-a399-f65c97197d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f08bd2a8-c2bf-4f4c-ab90-b6121079b4ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0b7866-6848-436e-aa57-72f1a0c5f473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9e2ece1b-1548-432d-a8c4-8bf3be5efdd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a44e4e-2359-4b64-a7a6-898cd42725ab",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4ed704-6aba-4657-ad3e-2b9ed18cab6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c6e3eab-272c-456f-b999-0a0f779e5c6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e21a33-0252-449b-a41a-0b16df5c0266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "94cb1783-e39e-4743-bd1d-39e3b754fb9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f43125-5079-438b-b9ff-eb9b4959a001",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20da79e2-6e2b-4926-a7cf-a3f43a7b4ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09c8b598-40bd-48e0-83bd-ad709105f12f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1209b1f6-2837-456f-b243-68b363cbf0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "49c92476-edd1-4b18-a383-3a04d4809025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f7960f-5964-4902-9004-2bbf4011695e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf56d48-e390-4bbd-82fd-7162b3f4a2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16a209f9-a0e8-456c-bced-76c0a33bdc4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e639e2e6-3eed-4a17-a9d5-101fcdf1feb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "12368d18-6f81-4988-883c-d0f4fc187073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc91d75-666d-4392-94a9-1cc2458dafff",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c7bb6a-ea9e-42b5-b532-e0450f0c2769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72d3f061-9fd4-4f26-887c-41c7743a21b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba29eb5-9cbb-46cd-9962-fbfa491553da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "cedeaa36-ed2f-4041-a537-4934d3d7de71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6f3b25-ab83-450d-ae25-4b6efa34be0b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b0cbb6-ded9-48a8-bdf2-14af5cb56354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a48f6be0-c748-4319-9c79-0f341614b450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0fd515-a4fd-4845-ab96-87f0eb0a36d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e8a3119-c51c-4867-88c3-a7028787b5af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67306988-f28e-4afb-8cfb-b6d1f98d0387",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7cda5a0-8ae2-411a-85f8-c8e0c847db47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff34de0-0db7-4ffd-adb4-de909bca9c8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1dd94c7-2cfd-41cc-93bb-a2078b42186a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae7cf5af-606d-4cc0-9c18-28e9331f6754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7340d5b-dc1e-45b6-b4d8-b0e94df7b99e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8298a3-b0e1-4e43-9737-1dd88d74b2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ed18ab-20f5-41b7-b823-04c5f5429eb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df413e9-7090-47ac-90e8-46e7273edd91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81c68c28-4db3-450b-abc7-20f1293d6938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c003a906-d1a8-4bab-9922-22001e49be32",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0711b566-2f0b-4b24-adc3-26cc91407343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bac2d55-7128-41dc-9601-c98f1b8cf55b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430069a8-6152-4686-b0a0-9668702b3ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cff937c1-b137-4e36-b2fa-f85fb686c9c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff30f68c-48bd-48cc-a55f-effccbc7370c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91224642-87ff-4558-ab5c-32824d78349c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e8d488-e383-40f8-9027-02047e040866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824a80f0-98ec-4fa7-9b4f-46844ca1c6c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff939b96-2e44-4ae0-930e-7827ec43b2b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de3f627-2a89-4c31-af17-45ea91a2cae8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0764ce05-418b-4c03-ad62-f545edeba968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64fc139b-4455-4914-b1b1-c3295d4510aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d6d991-b4d5-4a64-97e4-1f4d6639a0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbedf380-10b3-4f7c-923a-57b539a8b145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3741f10-7b75-4659-b47c-261671786618",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce11827e-429e-4687-9a5e-7251a0c47452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "108d402b-8f34-426c-9e3a-f4491eb778f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe0a768-40cd-413d-aa87-09d6eb02a560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c3d7311-68f8-4a5b-bd18-d9d3c637f7f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1aa514-1492-423d-8fa6-2a6c90af41ab",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380a8f73-f2be-49e3-8904-2f9813fba319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8349ddcf-2183-4321-829d-f32d94852f27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26bc76a0-4269-4980-b0f7-75a1610aeab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98bff1a3-1d6b-4693-941d-32235b6e1cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2b7bcb-92f4-4d8f-bbcd-8a061acd5fa1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "658681fe-472c-4b01-a434-4c6e8b1ef5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37dedd0e-55bb-4584-95ed-b9b0a9098c76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63558717-4db2-44a1-8782-7896e49324f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b833fa9e-6ee4-4d39-a46b-7e37f6ca8437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3d7aa0-8ded-4b0d-8b1f-e62975b01080",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8288872d-399f-49f5-a04c-9266b2ad992b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed956f17-a21f-42e0-b1eb-1d4167f8751b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ca00af-e4c4-4dd4-a4a8-78a993068225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4306b38f-4475-4edf-a2d7-318aac3cc83a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0ee371-871c-4762-a5e9-fd578a6b5b89",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "563afd77-1e0a-4ffd-ac30-0ed7a5581e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12e6019a-fe86-49bd-ba6e-6c19f3eae41b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61bda85-4b25-4856-89ef-1ab21d5a3d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c617431-475b-4d65-b85d-cef36c058450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc6ce56-8e46-42e8-a98d-d6449a69224d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede2c119-628f-4fc1-8659-3c18284fedaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d0ade92-1b34-47e4-8c38-1ff66e51e947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe41f6f-5a47-48d4-8cc0-8b46fe754bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fe87b3d-8f16-484c-94db-cebb8185527a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f874da6f-9804-4e6f-830d-acdd42ca01ee",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c28b5894-292f-486d-802d-5f21e63875c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97b16eeb-9163-4634-be79-a6a1067ce4ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "206576c1-b406-41cd-a6d8-733251943802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d917c562-838e-41df-b06e-ce927fcb09e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf742207-e5ad-438a-8d35-48e5e60a6ff1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a5eeefb-eb38-4cb5-ae02-4205bb6063ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01853285-bf3e-4753-a486-9b152caded1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ddc1a44-7c1e-40e7-80a9-19df1bb68a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3aeb76bd-f5b1-4e96-9f81-2bf0a2e3ecd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1cbe06-0037-48e3-ad5d-0365f58b6906",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b827c99-6625-48d3-ab3e-1955b3e20dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56e38c26-c210-4495-a407-9c893cfef3bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5880f6c4-72f0-4f3f-a8bb-202030d2f6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e24a6a0-e2cb-4489-b3f1-0d6d63370396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56a905f7-d753-4f8c-974a-43efa44245e0",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d132681e-d6c8-4749-8b3f-96bc14652a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59bbf128-bb56-415f-86e4-839b0aea5b91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd8cbd8-d70a-43bb-b047-728d4ff9482d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58cb09e8-822d-475b-b040-39be2a1cddd4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "875b76fa-564a-4e5c-8f8c-ff54649177c9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1ad05e32-1f90-47c8-9ccc-c97f2a39e5c4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57fa3149-8f1c-42bf-8773-139d127b3b78",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "81c1858d-45e9-479b-80f0-94f206bf7ff9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4602497-4ce4-46b7-bd2a-1dab4f04c13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f99c46e-f692-4ee0-a5fc-e5971bfd2c65"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "afebc556-bccf-4758-b4b5-e935d9e90e07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48726966-6e63-4430-aa0c-df09cc1cf116"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "74c552ee-c3b0-4a69-92ce-a1d66b6fa703",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b37c4643-0c7b-4965-bc85-69881484bc23"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f8cee2d-2744-4089-8026-6347e64aa8d8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c7c042cc-a0af-4c6a-a405-e94afe142252"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7face0ea-a3c2-43c8-8403-9da7342aeddc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "01fc8dd8-997d-4393-b6ed-184d19f5a42e"
            }
          }
        ]
      },
      {
        "id": "ebfcdd5e-2f44-4cbc-b454-d9c64732e843",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0540b3d2-9d4a-4e10-ac43-6cfcfc5da2fa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5b9ae37b-0687-4ca7-812e-cf0f0021c1f0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "647c2cf6-0f3e-40f6-8d8b-ba6d8f02ea2d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b73ab59-0d3c-4444-ba25-b3af9733e96a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf9cc105-ba70-4ac7-8a44-605cd5a60877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b1930b-752b-4aeb-a552-266f80e5e293",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e539ecd-0206-4ddf-ba4e-8826b937ebfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b85799-2143-4352-a1e7-118a1bd8dcbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310e94df-e001-4a5d-b5e2-9b6bd722633b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "789eef56-85d8-4382-869c-6b916e7c3c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bf7464c-56bf-4fdd-9f04-529b4b174146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c4ca32-af4b-46af-81ca-d3645695101b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "985a15bf-7382-46a9-8f34-88a5f43d04c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "552b2bd3-6c7c-4ee8-a25f-f1aa929e8fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60af00e5-b9f6-4124-adbd-aceb5852f3c1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5129b71a-d6d8-4223-ac45-0b6f43b8ccb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "697df89d-89f6-4f2d-a894-991078b57753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7bf4c10-aa71-4abf-a1f6-ade6a1b329f5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f669e8-e372-4801-956e-b6e751037603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5de087c6-a91a-4ffc-9c97-9ba752af726b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d7bfeca-8b4d-41ac-b853-20bcd28748c2",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb85f93-b88b-4796-9b90-7b1f36800307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78fa2962-19b8-42dc-819e-f88471ff899f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6f27c6-7b77-4109-ba7e-e5d551e81610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48dcb259-4c13-4377-8623-4c858432cfc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e37f8e-3380-4fab-a61b-6a3c5d4d1bfb",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf20b7e-437f-4856-8333-1c80640591a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2149c53f-b9cf-427d-ba86-33780aca7ac0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea61cfc-d9b4-4126-a611-a7ecaf3cba6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "854f6c5c-8bc5-4e02-98aa-dbe1c7666b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9808dec-bd08-49b8-be7c-36251237d21e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58418365-169d-4083-a705-3e90fac2eb86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37e46e57-695a-407a-92f8-807af976b7b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cf4642-bcdf-4784-87de-2c0129d19811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e17860cc-5a94-443c-ac5c-7f7b91ec4491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1cb6c8-a2d2-4a1c-bbef-77949aa06662",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87740664-652e-44e5-a086-4a6b4d0f5646",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70cce480-d2bc-4773-8261-0b9610bcbab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db19645-7c27-4f2d-932d-2bf1c453fc6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22781c97-0470-42eb-b26e-706e4415a7fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6610a6e-30af-404e-9be7-2219e10f930a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d711f6e-5a9d-41d4-97b0-5af8832a73d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acfe8e46-decc-4d61-b75c-9f8bab08974e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec857db-69bd-43f7-b8c6-ec51180ce73a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3aa9571-c833-481a-91a2-bd121f63d37a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e123d77-8ada-4e0e-b440-8ab846784b39",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6962f1b9-0bc3-4693-a917-23e74a367a7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f545df76-b15c-441f-b714-003a687be4b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1ba265-790a-452b-bd76-255a866e1c1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04d9b149-7819-4594-afd6-dae2c36bf980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c0cc9c-913b-4ed3-a0c1-a6f8883ebd70",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e0c639d-6739-4b89-b66f-75f15f3564d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38e320d5-d768-4328-9d3a-61378017d4c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a49b1984-682b-44e4-b99d-4f001e8b086f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "927f39aa-fce1-4400-93b3-2889b1d212a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "749266ac-34c0-46be-8ec5-115d0ed13ba8",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14bc86f7-8f18-489d-b090-83777b14c505",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e9ed925-602b-467f-b532-1385e61b3397"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91bedd1f-10c3-4336-907c-06b421fee6d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92f7ec54-83cb-434d-a2ed-96b2a031b0f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3897174-1136-488c-91dd-c25c83e88b65",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adc7e59b-e551-4eeb-9679-6adac68ccb8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19f5919b-8355-458f-a3ec-7ec78bad6581"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12992ba-d432-4ab7-b566-be309476a026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6862a61-adf3-4ca4-9acb-0f8a33fd5edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c59098e-aaba-4ddd-8664-b5765a635b1a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0844f693-4f83-4981-9e5f-406cfeeab83e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f836387-11f2-4e2b-9fa0-e31b2ca36fb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2c513a-8586-40dc-a3c5-d99a291d2469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69ea582f-1d55-44c8-ba8e-a6446c2eb4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77cf2eaa-38b5-46f6-baf1-ad92f84891e4",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8e276c6-09a4-4f8b-a564-b44fda45ff71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba83d940-6459-407d-88dc-ea82c9d457b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f98c86b-84ee-43ef-9cab-9bb0c5622956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f3cce20-8b41-4814-b59d-8ef5bdc69027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eee4571-6a99-46f1-a4c0-cda6b27b5dad",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa46b29e-2e2f-4845-b37f-779053e84f13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a54ea44b-453a-4dd2-a8b2-aba4eeee3c28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41c6091-2aa4-42d3-964f-9225ea60b683",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d5f2132-5201-45a0-91d0-d34cdc9039dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f64a34-b752-401b-a1e8-4e018d994640",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8441143-8129-4b27-a7ac-2916f35df0ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d7ae8fa-d3c2-4a62-b236-a9927f199c7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8d6b58f-16be-4db0-b2d6-55d4ffecdc91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e82094a8-443e-4b0c-9839-76486582925a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b2b767e-9846-41c3-9635-3776d1bdaead",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "645152f5-b995-4ecf-86e4-a764a217c8a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b16313a8-4b8e-4887-a47d-fadba1f88f64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb3c7a83-40e1-4928-9a00-1c8f4a42f611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cea3948d-3790-4834-8be5-d3baadf6575c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af5bf94-d1fb-4209-bfa9-337c279a658e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a718d4e-c96d-4d83-9aaf-c5c62bcbae31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13182ff3-377f-4513-8189-e5eecb07e298"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56dbd9cf-06fe-4915-8db4-ee8b72f0b66a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32554095-45a6-445b-9598-4d8bbe1f67f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19464e6-5a4a-446d-93c4-29edebce375e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf3d520-953e-4715-b154-92bf14a75ea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a82e4cc-1308-4f29-800c-6d8f96b3f129"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3e7c4a-23ef-4f94-86af-19271886c772",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f20f4c89-fb72-4587-ba3a-1609ac47068e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425d9cd1-8399-487f-b24a-090323c59c21",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e119ff-ae7b-4ca4-9fc2-ac38195bf615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f52f8a7-78ae-4f66-ab53-a6713f937e03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9a9e80-06a4-40b5-8137-8fa0abdbe22f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fa654a9-b7db-47c5-b0ff-5cd7b3808984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5afae56-2d1a-4a2d-ad79-a82de20d76bf",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f9784b-1312-4fdb-a563-60dff44d4198",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cf3a7e3-8c52-4c64-93a9-624123dca562"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d56088a-0d77-484d-b098-33f2eec3e089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e65edae-feb4-46c8-9627-84a5a92c393c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3c7cd4-dcb7-468d-84af-3ff75db42296",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c416ecdf-b60c-4ce0-b5a7-24695e6c5bd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df189ef6-a228-40ad-9425-dba3f462846c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b1485b-4d09-4546-9b1b-0e5ff6aca331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d20da1c-5818-42ff-afad-282cf6edd836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f5a750-b8ce-4144-9216-a918794dd866",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1521f891-72fe-4bcf-ae06-e375b9aa60c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8140864a-effe-46b6-ad42-9f1206e1191b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe1f967-d295-4caa-aefd-b3834d9baca0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6d75ba6-4fae-47f1-980c-840869e981b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6924298f-a18c-4bdf-beab-9c3e7c5bbfd6",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e0b0577-8492-49b4-afb5-b69136163369",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bff5d9fd-f59d-4bb9-9385-96b6a2f37094"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "112e7502-7964-473f-ab95-af71e771c101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45e90a93-489a-4ea7-8334-9f0b7d7ef7f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c6d692e-a2a3-4861-911f-eac5265d69ba",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c4b455-fa6e-42b9-af7d-dc8333b3dfcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4e9ed01-5b1a-4e67-83df-8469971e07d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "568cd1f4-181c-4551-a2d1-353a3c3010f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54f63573-8fbf-49df-8c5b-ee37cbe65146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29affbcc-0cbb-47a4-a4a0-d1e73c34821a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "861aeca7-d4a8-4a11-b75c-43272bbff786",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ca0ce05-723c-41b1-8fca-e223b3122ade"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6613d883-d153-4453-9b0a-7c5fab265714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad9fc175-7adb-4e07-b08e-08425c870002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59302390-0e00-4d48-8408-f6bbba140e50",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480e76af-1f09-4575-898c-e28182848ab7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcb897ad-7d2b-43a0-b69f-dc7200325e8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff40a3e-f8b6-40b5-94d2-d7a7cf45301a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63f0b88b-f666-4e08-851b-f36120cae33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5d2f9b-33ef-4d9d-95e1-edc71b7d131d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc86599-dc07-46e4-ba68-c65b57025f72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05197697-a631-473a-bf2d-35edd7df70b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bccc6de-1e20-44ac-b05f-8c88a135110c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0db22f6-27ff-4bd1-97ec-8302371e1c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa464d7-58bf-49c0-bc1a-6f5df723279c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a490bf0-522b-4b0c-ae98-30ff4b1e6023",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56f45d97-0359-46d0-ae49-c661c1ff2e1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09f0125-0b92-4f7b-9b7f-fd802451ffb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "167058ab-d8ab-46ab-b233-b2853789320a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "073b9348-65f9-43c7-b939-eb92fd49b032",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e363d530-9fe4-4f1e-8169-0c720ce4c558",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a17646d8-2489-4e32-801f-484d4c968087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21211c52-fc08-4a90-bc47-78ab40616d94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9499358e-300a-4015-b373-1e91003efbb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef62f741-434c-4979-ba62-08a2b15aef13",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32d13bf-f55c-4712-a57c-759135d0b178",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "697b749f-cfca-4347-8c52-ac8753e6126e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6eb4c11-d252-469d-bd37-6c0ff2c97a5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "956dddce-8fbc-4f1c-aada-7516bbf69e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c474c9-4739-4eaa-8ae1-e5370afe3155",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1877e296-96c0-4aa0-9cbc-40df920f219a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de73b61f-19cf-4a47-9cba-a3adc61a038b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6024e299-64ff-4f24-af0e-912c55e62a93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f4457fb-f8a3-4c5b-89d3-96ac9e8fd28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd08905-60eb-4aa2-8a45-43c6c2a15b8c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c362e963-d54a-477a-9ce3-83ce54de4a6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99da285e-ef08-4b60-a3a6-ef9bc5d9bd5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ff15df-f517-496e-8478-318bdd81d8ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d034711-d2e8-4275-ae42-c1fe914b76fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "407945cb-635b-4311-8bd7-bd6c9f18a67c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b124ae9-83d1-46b4-a1a3-0428444c0581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7d834ef-ffde-4b99-896e-0e0ddf78035a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf9daa2-71d1-4aa5-b393-75d77314528e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf150fd3-fa42-4a2f-8bfa-123656d5bc3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d408934e-a58d-4751-b9ee-6f597d4ba025",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce2d3a9e-13ca-4d62-bfa0-d86b46c8bc29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdb709fb-174e-4861-9027-35c736b833d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00bb78ec-ea71-45b9-8c2f-2e11aac96775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "636163ed-e210-4b39-bee9-33ea3b5dd9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c070eb-cd1a-43bf-a7fd-d1f2ce59b595",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c5fd03-fa77-4010-af74-9ee93d1e7200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa665a12-5a98-48cc-99e9-99728c2bcae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5fc94d-9931-4275-bcfa-9688729c5046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed9c883d-4836-4e21-a471-5c206541f4d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c82336d-a99f-4adc-89e9-6485ef253e9c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b34acd7-c201-43c6-bfab-d3717bafec26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b911a1f6-388e-44b9-ae32-df2033b5e215"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25b8c6d-bf24-43ce-95a1-192133a07407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3d75217-62c7-44f9-86fe-b72b8a0be85a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9abc89d2-11a0-44d4-9bdf-a56992376caa",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c56edd-b509-4900-8af7-d3218cd8ff29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a07825de-bfcf-48f5-9b2a-4b58e554b34a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc92c9c-17f7-4e64-ae21-6c142a792c2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47a6d588-4b2f-4c55-ab8d-6ccfb8246dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7614276-552d-4126-bc62-5c2c9755277d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caea56aa-158c-44a3-a358-8e02457acccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5c075c6-c792-4a8e-87d9-431ecba1a5bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2c2952-67b2-457c-99d3-b969fc280764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0cb2aea-566f-4570-915d-4e9ad505a606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e690bca-d437-46ed-9335-5ebee1691cb7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8e0b29-080b-4972-8836-7ed21db13383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21513786-4427-4160-8b19-d38973324b91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c75a18c-93fa-44ef-8f5f-ce61077c4693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5395ec9-12be-4a12-beac-2a1fbdb4f84d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae1fb513-f162-4555-be55-49cd8c119975",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a1b1da3-3bc6-4cb2-a0dd-fab9b68b94eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46516732-3721-4eaa-8e56-b6f9532dc586"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4523a48e-e880-462e-bd49-7edd8cdfbbde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b823766a-ef9a-4de3-bf7b-eeb8afcd44b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33e98cb-5701-43da-9447-935bfe7913e9",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ec4b2b5-c688-49eb-94e6-9776596d8454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "308a7c28-550e-45c1-bff4-895fc21394d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b786a5e-a53b-496a-916c-901737d6f62c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f3e13fc-63f0-457d-8173-d6d14af9cd7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fd2ca15-5f7c-44d6-8873-3abea98ccd4e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea62a65-6824-46e6-b8e1-0f7e17e79923",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b065790-35e1-4476-8e57-9b8821fd0581"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f4c136-cf22-42bb-9627-562ba2113be6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5fbf5b9-8386-4981-ae28-3a6f49fa32d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b840017d-2c6b-4f78-8371-58503069e4a7",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fbf6e09-9056-487e-a304-00436478bd5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef6696a0-0f6d-4fa6-951e-8b9c6376f14f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71395c77-6023-46e2-87c6-f4c9a4c3de88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "450b68b9-6bd4-47cb-b608-39c591c40802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34ae1f8-7f12-4118-bd9c-16f4c3cf7bb1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a02b53-3a6c-46c3-8a48-0d25768a123f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05b2eada-b25b-4ed3-aee7-d3a64a270460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b2e6f0-286c-4b8a-9e94-82958d0125ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "301777ef-deae-438f-b742-3dcdc828cf5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06af7f49-6cb9-48e2-a9e9-7280c8f758a9",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1911d2ba-2386-4531-bc09-1c0369785ff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97f133ac-581c-4353-91cc-59612c58f0fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eabaca4-d3de-4cd3-88ec-9181d08300fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b92341b5-bb15-4c8d-9c17-2e8a6f0d00b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e12fbba9-b169-40a1-8764-7c5cedb6f07e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04d062d-9cc6-440c-a958-ce3dbb7d4889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5a949b7-6099-4893-97e3-1802fe462d4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1df8fcf-4dc2-4c4d-98c3-b997f106bce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "292ff932-edf5-4f28-82ea-c9acd6fdeb08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9485d13b-f501-4f9b-8dff-0e312ba42bac",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782aed22-4d4e-40b1-a6b6-5c1ff8caa942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66cb42c1-f724-4091-bd42-e222a57cc164"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bbb3454-e7d4-4a68-aed2-2d570e60f2a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d523b3ff-0607-45e5-80e2-a09c8bb555d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3baa2abd-690c-4bd7-a470-0584f261c141",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d1b376-f4cc-430d-9d66-bf3f52f6190c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "630d28a9-f579-4050-ac0b-320fc688c734"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b596ef-2a1a-40b8-bf3c-24759498ecb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e04954e-5c7c-4c9c-a83b-a01c2b036bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d8d4b6-e2a7-4545-bfca-a64bfd6a2b21",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de66d41-32be-4e18-be7d-f4908897b0c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "305de213-1c4b-425f-a98c-ed2b2b448b1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6f1283-6df3-46d7-9eef-890c39b9b3b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "177403d3-5f24-41ec-903b-8fe9f5327288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3a27d6-2f98-48b6-b6dd-f163a8ad8f47",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f28bc8-b821-4988-850c-dbf8398f6a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbd80961-7cb7-4ac1-bfbe-35b950a5ad37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0431b9-cf73-4197-8a59-560e7decf225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a747a68-f59a-48a8-85ff-dc6c7b3e1078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd9f49b-89d3-4962-b797-c6c5cbd5db87",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f882c86-f928-4724-aa10-c81972f6a10f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c83dd191-d7bc-4b64-9330-72903b330fd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e35bb8d-1c5d-47ec-8223-4911a255f708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adc337a2-9501-45f8-b478-3c7e00e1951c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad66f0e-567d-4efc-8881-37eaf8da9e8f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42e2a2e-88a5-4ae1-bc78-17c796cf6ef3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f81cbe33-016e-4a0f-969e-42e718a0f3a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "289bb4ee-8c99-44b6-97db-13472c5245f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b045e26-a786-442b-880d-27df1db49f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd4cb87-a773-4164-ad32-b7ffbe3d6099",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e133b1f5-ac8e-411d-b980-6c80c99fd0bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e30367ae-7f28-4fc4-9d89-ff83462d5f6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52afa62-3073-4b51-8c20-dd33fcea4d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c21a8afd-edd3-43f0-a5eb-b0d9df20039c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc9529c-2d96-4ce2-9568-b7a84e336539",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "634c8e4a-45bd-402e-9a3d-e7e78f37ddde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6d1d290-5789-4ab4-b486-ab726f6fcfde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e223a8f5-a82b-47af-9e7f-974e7a9b56f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f8c33db-1b63-40c9-abcc-015eb398c03e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf00f78-4409-4397-ad34-5c7fe6a9dff4",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d6e6393-c745-466b-a34f-a1594f664e30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5765c7c-751d-45bb-99fb-d96b62495089"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ff7124-a3fe-4c5a-847d-8244facb7a17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c083c69-d65c-45ea-8750-a2c978dc0a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc1fe56-df01-4a1e-a4a1-a3d21f8b5b94",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a718d706-5e42-4dc0-b8b3-c7671efcbf61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26c7fa7a-baff-46a5-83c3-5ad5e67b15d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "192480dd-a76d-44a5-ac60-8c31afc288b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5208d55-e100-45f3-9994-f4c7b0136fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5172d98b-f481-43f3-bba5-f9c7332ccc49",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5507a2-0fb7-4a74-bc6e-b5e815964012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98889287-9272-4bee-a550-0a7fc31e8ac7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bee9e61-7352-49e2-94fe-4329ebc855ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "173a10bb-4cc7-4186-a3b5-cdb1ce015e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c684033-1ae8-4e1a-b83a-f178ce2a13c0",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcecafb3-aafe-4b36-a99d-306c317f494d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2f5776b-1c80-4318-8a2e-6849512a8114"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "979d7e94-39ca-4849-8618-34a096cdbccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f01c971e-453e-4a67-b676-74377b3deb33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8215a02-fcea-43e3-b774-97bbf1f18f3b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "553f5d3a-c394-4d28-b532-0f0b4fe8cd9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5007a92-9db9-489a-83c8-047085b92403"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33d1e10-7361-4e42-940e-99915dd8b7fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e791c12-be53-4b2d-ac07-0ed4e65c26c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6286cc31-87b9-4978-b27e-818906ad82e4",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "258e4aab-9a84-4a15-b056-feabac628e01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2fbcc30-8d77-4e14-a870-65b36599db2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a90608-2392-4906-9f3a-107fb7a0eb35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c74087-2d2e-4666-8207-e5c20bf8186f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3208089d-67a2-410e-9313-5ea56aee5f22",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8958b90e-52e8-41f6-ab2c-77579244464b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "793758de-db0b-4ab8-b7bb-6888fbe7433e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d919197-bb6d-4621-8e8b-49d2bbf243a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e493eb-dbec-4fb9-a97a-8a821cb3ae64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac23d32-97bc-42a9-9d67-9d57b8564123",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236f1d4b-dc45-485e-9b11-91cd2fc55e5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9cafdc1-ed60-4116-96a6-64c819c72c0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "376e780a-3aea-4127-ae29-cf5b4fa78d42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b730f47f-f980-421b-88c8-485318b74215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323fcda1-d054-4435-8a5f-83e903b2e70b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c71d03-1ca2-4b31-9c48-fac6ea37b5c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dcbe5d2-1479-4931-baf8-7431c85c6d06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00430afc-b5a0-4396-ab0d-a4674ecd2ef3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "996b4093-0db7-4171-b61c-33f31fdcc216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e33b54-ef06-4a71-88c8-21abf8d98273",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "891ce673-94a2-4830-a237-1a4eb207e424",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1a4c020-e5ab-4159-b464-13196e418903"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac4600c-7524-47e7-8d82-e33f753dd3d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b92f16d-0f35-41ec-96c2-5ee8843f4f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b00c316-aa59-4767-b028-26921d10b63f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9c0bcc0-b9ea-455b-b497-d6b979aed37a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed533d8e-790a-4c1e-8130-c8930c68627d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "111a57d1-87c5-4b60-9943-cdbbd5902e62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "909e3ccf-da1e-4e31-9dcc-d088bb587385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaca54c4-93e6-4d99-9263-68919ffaac20",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47f83c1-f1c6-4e28-bdd5-61fefd806f2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9400dd78-9546-4a8d-83cc-c6076fc94a06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c89405-ed39-400c-b5b2-d26cb2705cdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6339e82f-7f4c-44d2-bd63-d05fd2b0c1da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d54d34-76ea-4816-a5f5-ee7ddc1eb45e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7522f6c8-b9cf-4717-beea-13333f911109",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca66f1b3-d987-4499-8f59-b254837c931c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79769063-f7dd-40e7-b07b-e9ce04dc4b46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25e8bad3-1dd1-4d0e-a84b-b709385d8bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07151730-d24a-433e-b4ca-6a0d3956bcda",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867e1f61-6cd4-452c-b21d-2072d760f7fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c186ddb-279a-4775-9e0b-04e2b7ce1b58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "522d7ec6-7a34-4fe2-b8f9-7c2c76d6945a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50e2b665-caf5-42ea-baf1-035b5f2ef309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2859221f-7bb0-4b9e-8191-c55e1992b899",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450aae70-53de-4204-83fa-0ea141877168",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af60222a-24df-4773-87d9-1ca4e2015a75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1eed302-0180-457f-8cfb-405228955ca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0693dab5-2d8a-40b3-b47e-3569fb7c05f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5696e39d-4998-4995-9eb4-e2e46e802d83",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d449042-e70c-454c-a8e5-5def339cf1c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c05a4778-8d2f-4fde-bc87-80dabd4afa65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05537863-ae38-444e-a266-4b0e89593025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbcccc8a-a315-408e-a745-fc39b2d846a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f053668-8043-41e1-8f28-3e7f30499918",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119ae0b2-2efc-4658-9c14-3d904f6ba9fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cf36b41-fa75-410f-aa29-fa86632f578b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60571602-d02c-42c6-ad80-099a06586ea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a8708d9-3af6-4653-9c6a-824232b26223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec1948c-1931-46de-9e0f-958a786827ff",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c11fb82-0342-4983-8908-53185dc52389",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "405eb552-02ad-4b3b-b3b0-00895a96bab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48de1db4-e873-433b-aab3-94ffe90a1e0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a97f185e-083e-4025-a7ab-a323628eab43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d12ee8-00b9-43b3-a78d-1e96bc26b1e4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6bc4865-61c2-4084-91bc-2c5256531414",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73b0f521-7104-4e06-8b9d-8a6ff241360d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec423857-8bcb-43d0-b310-a92563511ecd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cf45afb-0727-427b-b303-b844321644f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec9a9194-6710-4abe-98a5-870b82dde395",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f3c9df-9842-47e3-b744-5c2bd7e969a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffd04a44-51b0-46f5-ac3b-cf532df6a6db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6cbc0f1-49a6-4036-8b9b-ffbdff72db84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "786ee051-22c5-4abf-b554-35447c91fb67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dfd7504-0c1b-4717-990f-177ccd6ba1c5",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15534a51-c632-4627-aac6-290ce73e397a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "226303ae-98ef-4eac-9a02-a45cdb982ca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1742027f-9cc6-4970-8401-5db8bce82800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cef1bfe-b6dc-413b-a10a-255f99b427ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b045558c-366c-4a99-85cd-8fa5ee1ff6fb",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ebf78ba-aa04-4c4f-a325-7f3cd07148ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00fed2e0-9dd5-4ee8-8ef0-9788bcabe2e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97caca7f-c38b-4595-a7c6-58b1c3196213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "179c5951-3e66-4868-8f3f-6d0334a61eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22fde48d-487f-4250-b23b-6f51ac9f962c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41084546-e6af-4a1a-a610-6d84cf82f782",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e440158b-a1c9-4b47-bf94-70fb298459f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be7bebd-2987-41a7-8ecc-366661c924b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "992bd775-48ff-4937-b2e6-7724c5cf624c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae06ef4e-08cf-46ae-9b1c-912d197c06d2",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2615dfc4-4e5a-4b30-809e-0b44480ed21a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6c6f0bc-0b81-4c22-902f-40863657efd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88f9ef4-b017-48eb-9814-e320c67a7a52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd0300c8-56ac-4b9f-a2e5-780b48f9bd3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32ecd31-bc14-438b-b967-0868611d8336",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a7e757-fba7-4457-938d-3ccfef17c4fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39d8bede-8f54-4d3b-8c04-f6515eb93cd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d1274c-ba70-4acf-91cd-4353e58c6ff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee297f82-b96c-4e91-9adc-81b7af27a651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "373c7a98-5c60-447d-92a6-019050b964fc",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce87c43-20e3-41e2-ad9e-21a19de69138",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eacc5190-dfa0-4226-8f0d-2227b60a7a3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3afe9c25-fa34-473d-8ee6-eeb7025877c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d6356ec-aa4e-4e2b-9040-8333349583c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "204a923e-a547-47e7-aea7-5ca5ffea8dd1",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa2fd5f-b5fb-4500-a394-2ac1891cfce4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "763454c7-dcda-4664-8f96-173cc5c9d754"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e9f58d-2ca6-4030-954d-92528178d880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60f0236f-9964-484c-ad00-993cb57565e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8484a953-bb4a-444b-9bbb-fadad5a04e18",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41c37ba-435b-433e-b6b1-93180eb694f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abbf3990-756b-4ed1-a33c-ad30e21831ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2edcc5-33c3-4e0c-a119-7202ffe3a70b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c633ec38-404d-4560-a96b-2f6b7e84d221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9921777b-5349-47c0-8aa6-21746384a2ee",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d45afae8-f3d1-4008-9413-3623c9c72d9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14c4a832-0030-4c47-bc6a-a4f723ea2cb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b599e4fc-8fec-4884-b058-23efb628ca6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a76701b-76d1-47a4-a08d-0f6bcffed8b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a437949f-2bf1-48b8-92fe-23691ee22bc7",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5888dadb-4958-4ba6-9c82-30a106c151ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13ac071e-d039-4e09-a3b6-5616644ad030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34563c72-3b2d-4bf3-9bc9-60606eab64fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2983b152-3d96-4d32-92d4-4e44982fba77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b99721-141e-47b1-b2c4-25d3f651b7b1",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d107d17c-58df-4a4b-aaac-457702fce477",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7986d16-caa6-43db-bb34-756bd0326d0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d7effa3-1184-4fbe-ab0c-3e32208628f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8bb6762-0a98-4500-adec-5dbea0f54e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d980194a-d322-4143-82d5-0e2c71005a3e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5438767-9a06-44b1-a0ab-99f7533ad978",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f5a0001-2501-4b9e-87df-6cfbad0b9590"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2e45cc-17e1-4422-9dca-ed056715919e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb06a76-d937-408e-9816-55d80b113d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88d80a4-ad00-425c-a6d6-b4ec14c1aac5",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d899ed5c-555e-49ce-85b4-dcc7e233efba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e2a508b-badf-46f8-a2f9-1a738dfd4eb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a9a8c6-de85-4af6-b275-ff970e4e96ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50cb1b9d-267f-4378-bfeb-2e28b10562e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e74c4182-182c-4cb8-8556-d280d01ba6ab",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c23496bb-2850-4be6-9cfb-604c35690822",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c753b18-cfb3-4d1e-9ab3-31e7b07b08a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c8f01ab-7264-46f7-bf44-d591e4832ce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbeaa6c8-d646-4471-a32a-ed85bb74f844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304c7f3c-055d-483b-96ca-e8622f616ff7",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ecc3eec-7698-40e8-8a97-6e8aadbad8bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd3d230c-accc-4370-9cd5-5c7b814eefff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa46da39-e1da-4a28-8900-3c08e6c7ae23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7242977f-d367-499c-8019-d7111378648c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd08c3d2-eae3-4bbc-8ee8-8bf1bac55448",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec52d207-17b1-48f1-8ef5-926bbf8d2f65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db5eef36-8a8f-49e2-a568-7fe15d5fd0b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af8f5f7b-ef5b-4dd1-8b02-a28559cc2eca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e61e3f16-f72c-4aa3-8383-1bfde57fd9cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9812bf1a-6df2-4404-84ae-4cddb5d8f03c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f8e5339-b7ed-466b-97cc-fc83c3481b62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3655718-f49c-4056-87e4-eb89b4055788"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74d1c9e-0f62-4590-b92e-fabc633fd506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "640533eb-296c-4cb4-a8e1-9fd110e83a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e12a564e-1431-49c6-9b99-0f1d04ef1daf",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89ec1f6-042c-4e44-919a-8207db12c8e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b979699b-cd71-469f-978b-5e883db1e76d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee43118c-eaae-4087-9285-a653c96b3745",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1087c652-04cc-43a3-abbb-015fa966181f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab25013f-8feb-42b8-8b25-b6e22fdad16a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a6f101-9c4f-4eaa-aa29-22179cd8a7b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f6a0609-d6bd-481a-9078-ebce178d98b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a9f232-81a2-46fa-bd3e-2d4f29a85eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5342b1c6-e596-488e-8e66-b25cb078b540"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e492f65f-c557-4765-8180-8765e9e14ba6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f93f3eac-a81f-4032-a153-2b4021b07f99"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1634160-16f2-41f9-805f-93b4b93e1992",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "87864f7b-a845-4b41-b1b3-7ac99b87be2b"
                    }
                  }
                ]
              },
              {
                "id": "3c487470-0fd8-4cee-8722-7014662bc0b8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "43addf6e-0a74-4bdb-aed5-c43e605cf9de",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c675ba28-2643-4230-a4e3-8f2d89f25a84",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a456544c-591d-4221-9744-28ae592b1b25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47abb213-e2f1-450f-96a7-98b1f06fc329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32bc745d-c744-4fde-be9d-1fb3bf62a651"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe229ad4-e132-406f-990a-b6f802ad4143",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00615568-896d-477d-852d-ffdf47dbc403"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ebf39c33-1bce-43a5-8fea-85f1ed5931a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c875150-7143-4d0c-b29f-322361127715"
                    }
                  }
                ]
              },
              {
                "id": "91016eda-d3ac-41a2-86a2-d6f14e002b42",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "cc8eba24-2a47-4c77-a92f-7fa434b964b1",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2db9ea-4546-4c38-8ef1-27098e64293b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d9f9685a-74cd-41d1-8b25-de82dda0ee86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26bb9b1-80fc-43e1-a9e7-38a8f67e06e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "183b7475-2d09-450a-94c3-7fccc106dcaa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "039ea834-084e-49ce-8efd-dec93a781883",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d95638ce-9d72-4ee1-a5aa-03cf065c0c2f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8bfb7bde-cce9-41c3-8a9e-e33de5370e49",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ac0417a7-dae8-4bfe-935f-58a755cea097"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62e01e3a-0a62-44aa-96db-7990a8a25199",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76dba03c-7077-48d2-b4ca-b71d7cfc5ab0"
                    }
                  }
                ]
              },
              {
                "id": "298f24b8-49e8-49f1-9ecf-3013e409c861",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "06e35962-8e8c-45d6-b24a-7879c88bb9ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d413d5f2-e4fa-4272-a454-d3260ccb7635"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5ede885-256e-42c7-a0fe-e3a7aaaa55e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b96813f-40f3-4b26-b4fb-a9cb0104e685"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e1ed3610-64a1-4827-b752-5423ddc4247f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e6217dd4-fa40-412f-9a1d-bc2ad00c11c9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ecda509-7afd-4da6-86b6-8254c9a546ec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1f163ebe-aad5-4e53-a603-7f50e0dd4f89"
            }
          }
        ]
      },
      {
        "id": "7648df15-56ca-46d5-8dda-d4c5e09c9a38",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "95bbb0ea-e041-4fee-b2ab-ad2c18a180d3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "14ab2161-9d2c-44ab-a584-770545ccfc5e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "868fc590-615b-4727-9a10-34c2dfbbeadc",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bab535b-4ff8-4cca-9478-81d367f60d12",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cc399eba-f364-4c88-bb88-57322728689e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbda4c72-5beb-42a8-9564-486342004ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1c8ad52-f1ce-49cc-a652-cc933ad7adbb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6cb075a-b1c8-4c6a-8c98-4a1524e34220",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a955db60-04d2-4958-a565-3c999bd065b2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2b282d0-0210-408a-a1d7-518004704fa7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b866790-7c5e-4396-b554-06110eee6c03"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b29e0f37-7235-432d-a3c7-59547b027f74",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e584042c-59d2-419a-a8f9-8a0fb4f186a8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31cf50f0-0e46-4f21-bcb9-43e73d89d06e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "31f8e3de-9084-4c50-93e7-a36249ca836d"
            }
          }
        ]
      },
      {
        "id": "3154614a-e834-4168-a988-4898aa888107",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ea911d89-7833-4966-a3b1-5c4c54f2c31d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "da168c58-ee8d-4bcc-a2a8-c3229e56d55b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "271bc69d-2f7b-46cf-bfe1-57def1f87702",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d661ddf-5ed9-490e-b6fc-3d711531f36a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65f8cec2-3f44-431c-9432-dbae2600c748"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2cb418f-511d-4c51-9617-1c2c635b8aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd0e9991-55df-4006-99ac-d9884fbe1872"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63dea467-ff0b-49f2-8c5d-0410bb0fd66d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b48cf6ba-faa9-4c40-8dbd-f3d387edf989"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd675a1d-6a20-4246-8419-a4ba09886213",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "105024b1-2225-494e-9250-dffb45d08f67"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "453927a5-fc67-4025-b0b9-e69b99f1f363",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "150993d0-8285-4bca-95ad-200cd491c7aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a909c6d6-ec21-4f9d-a60e-a35818bad90c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e3223800-8be7-44fc-9c75-3334a462fee5"
            }
          }
        ]
      },
      {
        "id": "189fd252-66b1-4696-ac8a-b38ec181245b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "a8db1b92-d85b-4803-b828-f8b2ead7140a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d0f73566-1409-45f6-8ab7-6c4a2f06fb10",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f7fcb072-d01b-4f91-bd47-646ae06cca02",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29784db-03c0-457c-8beb-c32862fa819e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "185bed3e-c0c2-4a7f-a1e9-832d26f71908"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c8f676-3a6f-470a-8502-d9fd45743ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1cd0e8cb-1aa8-4ef6-ac72-93481865bc59"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0480748b-d350-40f7-aee1-b7ebdd4abf3c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "daa1744b-d2fb-41dc-a1ac-46d12de2cfce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa6d616f-8cfc-4d89-a06e-bd2923f4ff49",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0c23a92-4563-4e03-b8a5-25f36de304b1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "76afd7e6-adc5-441f-a20c-9d1f315f1fff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "32e5770b-2a70-4bbe-98a9-b7e4c4319098"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c357fd98-aba1-41d4-b484-89453e06d039",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f23ef8e1-dd46-4c3b-82a3-1b2c6bfd0472"
            }
          }
        ]
      },
      {
        "id": "d1f0f5d3-20af-44f5-bcf4-84ff7fdf32c2",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "45450418-d95e-4546-9f3a-2f31259828fd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8c3ce12f-e06f-4a1a-958e-c59bc36c375c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "cf02cd7c-d268-48de-bee8-5a70df2ab761",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3779bf72-04c5-4b9d-bb83-c552e60d9a25",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c6698edb-1377-4779-8981-9c1fd54f5433",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 479
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 593.5406504065045,
      "responseMin": 12,
      "responseMax": 1317,
      "responseSd": 155.17033773694686,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1685666548185,
      "completed": 1685666705280
    },
    "executions": [
      {
        "id": "b1d628c5-280e-46b7-b59c-747a1ae6ecb7",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "71ea5c72-3c71-4f11-85bb-78c13a358d7f",
          "httpRequestId": "9250ca51-2d38-4f60-ad60-2dde4358e4ac"
        },
        "item": {
          "id": "b1d628c5-280e-46b7-b59c-747a1ae6ecb7",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e40da5af-daea-44a5-b140-0353a5349370",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 0
        }
      },
      {
        "id": "bcadc95f-0cb7-4d4c-ac21-e69b56bc1613",
        "cursor": {
          "ref": "bb497545-cab7-48cb-844b-9e597bcb5a3f",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "45698e19-c2fc-41e4-87fd-f7c05e9dc3a0"
        },
        "item": {
          "id": "bcadc95f-0cb7-4d4c-ac21-e69b56bc1613",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "e66f5e80-8fe2-476c-91bb-91de25c666e5",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 0
        }
      },
      {
        "id": "faeaa189-536e-4803-b271-e38970182141",
        "cursor": {
          "ref": "38c8bcce-7ae2-4583-be37-447150695cdf",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a6347210-ee31-49ad-b2e1-ba3552e79b90"
        },
        "item": {
          "id": "faeaa189-536e-4803-b271-e38970182141",
          "name": "did_json"
        },
        "response": {
          "id": "ab6d3588-f194-41f6-88e7-a111033c9ba1",
          "status": "OK",
          "code": 200,
          "responseTime": 1317,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ba2a5e-3e94-48cf-bc90-87febc4157a5",
        "cursor": {
          "ref": "c487e0f2-0d45-4371-aee2-8b1e888bcf8a",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b7645def-437d-4270-a5dc-60b9aa055f4a"
        },
        "item": {
          "id": "62ba2a5e-3e94-48cf-bc90-87febc4157a5",
          "name": "did:invalid"
        },
        "response": {
          "id": "884d943e-0c53-4439-ad3a-74fef1c37bcb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 770,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "62ba2a5e-3e94-48cf-bc90-87febc4157a5",
        "cursor": {
          "ref": "c487e0f2-0d45-4371-aee2-8b1e888bcf8a",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b7645def-437d-4270-a5dc-60b9aa055f4a"
        },
        "item": {
          "id": "62ba2a5e-3e94-48cf-bc90-87febc4157a5",
          "name": "did:invalid"
        },
        "response": {
          "id": "884d943e-0c53-4439-ad3a-74fef1c37bcb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 770,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "58170f50-1477-48af-9aa5-a9ea62c15124",
        "cursor": {
          "ref": "053948e7-9c09-4577-b424-8fed4c632fee",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "59c435d0-e9ac-48e8-b9d8-9877b86db133"
        },
        "item": {
          "id": "58170f50-1477-48af-9aa5-a9ea62c15124",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1857fced-7f4f-4a5c-8fc4-b0aee062a336",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 699,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 403",
              "stack": "AssertionError: expected response to have status code 404 but got 403\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "49c534ef-fda2-41a9-8407-d6884cedfaac",
        "cursor": {
          "ref": "582b9548-9dde-4817-8fa4-6d957a817cd7",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0bcada4b-1a24-4f27-840f-a8a5cc1c0060"
        },
        "item": {
          "id": "49c534ef-fda2-41a9-8407-d6884cedfaac",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "359ad637-1d87-4903-827a-c8fa5fc8f720",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 801,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 403",
              "stack": "AssertionError: expected response to have status code 404 but got 403\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "37842819-5c06-4204-9f7a-0a2dbc116d2b",
        "cursor": {
          "ref": "4e4416ea-f166-41b2-9919-8176ddf31c29",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "58fa5cae-077e-4d9f-a7d0-ff688c62a770"
        },
        "item": {
          "id": "37842819-5c06-4204-9f7a-0a2dbc116d2b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "dfaeafad-69b6-4c4d-aed0-d1113cda7389",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14bad81-0d4f-41e5-b820-3f15f57ced1f",
        "cursor": {
          "ref": "a6eadaad-c6e9-4439-ae3c-2a3048fa5be8",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "081977da-a2c1-48eb-8e50-b8b73d5d0999"
        },
        "item": {
          "id": "c14bad81-0d4f-41e5-b820-3f15f57ced1f",
          "name": "identifiers"
        },
        "response": {
          "id": "449cb944-793c-4f24-91aa-3c9f9535717e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 702,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "2f15169c-4352-493d-bea9-dec8d1deca82",
        "cursor": {
          "ref": "9ce998c4-1930-42d8-90d0-7b3709e33aed",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "97746fb9-97dd-4be6-b5ec-880ad6b11e2a"
        },
        "item": {
          "id": "2f15169c-4352-493d-bea9-dec8d1deca82",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1cf5f4c0-6659-43fe-936a-5c7374466ffb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 727,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "9263b7a2-f1fa-4817-8db7-dca5e9f1cdaa",
        "cursor": {
          "ref": "3c673507-73d1-47e8-8239-8b484c5d271d",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bf16818f-c4c3-4f71-ad11-68d283f99bef"
        },
        "item": {
          "id": "9263b7a2-f1fa-4817-8db7-dca5e9f1cdaa",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9de072c7-eb16-4249-8e43-e5e84c456ef0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 704,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "fbec4389-77e5-448f-b794-edbe4e396913",
        "cursor": {
          "ref": "56b50d19-f158-49e0-9366-6fa0a0788df9",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b722f3a2-6e37-4158-b089-1169b2e686a9"
        },
        "item": {
          "id": "fbec4389-77e5-448f-b794-edbe4e396913",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "d084f857-e619-4911-a8ca-401c982a9d34",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 703,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "f101450c-4ed4-4152-9fbb-801e96cd8565",
        "cursor": {
          "ref": "82c55eb9-3041-4a7a-a966-a2904c461f63",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "015802b1-e24e-4a90-8568-cccafd0f91f8"
        },
        "item": {
          "id": "f101450c-4ed4-4152-9fbb-801e96cd8565",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "dc98f167-b5f2-43d4-9bc5-0049e43652e8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 750,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "2dbe048c-98f8-414a-8884-8ca95bc86f1e",
        "cursor": {
          "ref": "8ee8e14e-809a-42ef-af6a-ae512f83e3b9",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "17132df0-40c5-4c1a-b803-370df25541c1"
        },
        "item": {
          "id": "2dbe048c-98f8-414a-8884-8ca95bc86f1e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8da45b0d-ab3e-4d4a-8053-a22edaab1688",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 701,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "f5970209-442b-441a-bdb9-74e82a135a97",
        "cursor": {
          "ref": "bacb8187-53a6-47cc-88de-b9d3de8b1248",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "87aea6c9-9043-4471-8dec-2b334c15c3fa"
        },
        "item": {
          "id": "f5970209-442b-441a-bdb9-74e82a135a97",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "cb0940e6-7488-4682-9b68-4a37fae49677",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 715,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "521eea62-d626-47a9-bc62-bb1ad8c2a2f0",
        "cursor": {
          "ref": "a5f98c35-872f-45fb-a5b7-240f2e92e7a8",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3b5764e8-ee3d-43ac-bf34-220250b256f0"
        },
        "item": {
          "id": "521eea62-d626-47a9-bc62-bb1ad8c2a2f0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "95cdd551-6db0-42c6-a4ed-886d413da85c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 671,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "63164beb-0c55-487c-a68c-cfe7156f1b77",
        "cursor": {
          "ref": "c5b52834-19d7-46f5-be14-dfdc6a6e778b",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "64e2d140-a9df-4b92-9d07-82f0b384b521"
        },
        "item": {
          "id": "63164beb-0c55-487c-a68c-cfe7156f1b77",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f9f00590-f3cc-4f58-b44e-ed97e52ef1b9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 712,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "b5f4bcd0-1f00-49d9-a4e4-7518767e820d",
        "cursor": {
          "ref": "4222bd6c-668a-4b90-8a35-3e985d0d7f28",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6b7ff7e7-4f16-4b7e-919a-5050c2627d53"
        },
        "item": {
          "id": "b5f4bcd0-1f00-49d9-a4e4-7518767e820d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "27927372-2303-4c26-aac3-985a7767c874",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 680,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "65895d02-23e1-4c9d-8814-b407d66f2503",
        "cursor": {
          "ref": "6715001e-263d-4d7e-b78c-f55e74359189",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e42b9596-cc72-44fa-95a3-948df16d4f8c"
        },
        "item": {
          "id": "65895d02-23e1-4c9d-8814-b407d66f2503",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7a4072c2-aee5-419c-ae68-960258928643",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 686,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "59d56726-154d-4287-a479-91c782d6e1ad",
        "cursor": {
          "ref": "f479e5ac-c08b-44b1-a309-7d39f91bdb52",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ecc65e84-738b-4afe-a312-a21430ff3b8d"
        },
        "item": {
          "id": "59d56726-154d-4287-a479-91c782d6e1ad",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "9fb1daf6-564e-4cba-a69a-4f47f04dbc5b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 725,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "2ff21b3c-12ce-4691-aeb5-17309468810a",
        "cursor": {
          "ref": "f7784c5d-bf0a-4edf-b897-8b05995f6951",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "321fa59b-49df-4153-b551-8730bc547cde"
        },
        "item": {
          "id": "2ff21b3c-12ce-4691-aeb5-17309468810a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "3db9fec0-3032-4680-a963-bd7849f36a97",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 702,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "d7463054-8047-4c37-94cb-102f539f5c2b",
        "cursor": {
          "ref": "44b1295c-f35e-4403-8068-025177b6cd39",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "17786dca-fbcb-40c3-a9ee-a6c8f68afb62"
        },
        "item": {
          "id": "d7463054-8047-4c37-94cb-102f539f5c2b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a7fdf129-b1e2-4ef4-b307-57f2db905164",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 725,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "712b8215-b728-4e72-9f3a-8c76ea344903",
        "cursor": {
          "ref": "8c6da5c1-f980-413c-bf0a-3e7d873f8a5e",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1a99fb28-7145-4812-baac-8be7ce0696a7"
        },
        "item": {
          "id": "712b8215-b728-4e72-9f3a-8c76ea344903",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "92651e7e-afa8-4a2f-8acc-9611d761c585",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 715,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "7bc2849b-94a6-480c-9475-089880bae2b7",
        "cursor": {
          "ref": "2b4731f9-7dd4-4c5e-a8c6-e0b8029374e2",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "dc79acce-8069-437b-864e-1a5bcae1d97c"
        },
        "item": {
          "id": "7bc2849b-94a6-480c-9475-089880bae2b7",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "1df1a5d7-6b37-45f4-b8c2-6670da740007",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 678,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "57b7f34b-ca30-4633-a8af-a87623062fc4",
        "cursor": {
          "ref": "3e4258a4-5b09-4d80-a37a-b6977a19291b",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "57b83aa9-4845-4c91-987b-224010a8f885"
        },
        "item": {
          "id": "57b7f34b-ca30-4633-a8af-a87623062fc4",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1041771b-dd9a-49de-8df5-0a632ba2c19e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 713,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "b0d40650-b857-4de5-be9b-1ea57b1a55d8",
        "cursor": {
          "ref": "277d6e6e-510e-4e6f-ba8b-e5871c03aded",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1e09562a-c5ce-4505-acd9-d14f87f1d059"
        },
        "item": {
          "id": "b0d40650-b857-4de5-be9b-1ea57b1a55d8",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "6ea4aa63-0a36-47c3-a12f-76849e72164c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 707,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "64a95905-9a00-47a2-86f7-f51a79d43b1b",
        "cursor": {
          "ref": "0eb5755f-c881-41f6-b9fb-0f8ac52acd43",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "469be5fe-d49a-4d41-aca6-ad3766824539"
        },
        "item": {
          "id": "64a95905-9a00-47a2-86f7-f51a79d43b1b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "72b19d9d-0384-417e-b069-7678655cee30",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 708,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "961817d3-4278-4c24-b6d6-bbc2d27d0115",
        "cursor": {
          "ref": "b9b74afe-b7de-4249-96fc-ec696f435bc1",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8e9082f2-2a6f-4bd9-937c-0189eeeb30d9"
        },
        "item": {
          "id": "961817d3-4278-4c24-b6d6-bbc2d27d0115",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "dae546ab-eb98-4b68-94ea-c8d5b75d65b2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 709,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "06a22872-fec1-4e38-b759-c1e1c410802d",
        "cursor": {
          "ref": "44de4440-b02a-42b1-b334-8f429a1d22bf",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "657d8be9-3830-41f6-8709-aec38836691a"
        },
        "item": {
          "id": "06a22872-fec1-4e38-b759-c1e1c410802d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e88ada65-f885-4669-8f86-23055a33de2d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 711,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "51777763-d9bb-4cdf-96af-a26aa3198d50",
        "cursor": {
          "ref": "5d579944-ab94-4027-8af3-ee0b7a38ad4c",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7c00d5cc-c696-4738-8f55-98f48801f49b"
        },
        "item": {
          "id": "51777763-d9bb-4cdf-96af-a26aa3198d50",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b8fbc68b-dbfe-4c02-8b21-1f9029335600",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 708,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "2895fed3-71ea-4bc3-9879-8887c50a83c3",
        "cursor": {
          "ref": "828a39f3-b173-41cc-a4ce-38892fa7fd3e",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c1f2f1ef-cc90-484c-86df-a26b0716c6b2"
        },
        "item": {
          "id": "2895fed3-71ea-4bc3-9879-8887c50a83c3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "9ccb6fa1-d073-40c5-8db7-7c77c77f75d3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 695,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "e19f68de-de9d-40bc-a786-40343cb9e155",
        "cursor": {
          "ref": "7ffd7109-02e2-4fa5-9f7c-459a46a8aaf6",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5d0029cb-9eca-42b7-88a5-23d77bfd7b8f"
        },
        "item": {
          "id": "e19f68de-de9d-40bc-a786-40343cb9e155",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0f70d211-9ac5-4479-85fb-f76815799542",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 696,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "f68ae8b6-1487-44ef-8783-eb3a3b6a68a1",
        "cursor": {
          "ref": "f0a118bb-855a-43e5-8008-6a6e1e836423",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9fff8a22-eb11-405c-8653-0a5857157fee"
        },
        "item": {
          "id": "f68ae8b6-1487-44ef-8783-eb3a3b6a68a1",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7efe5029-c9bd-4641-9f78-4293837e40c2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 713,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "58f09fe8-bd6c-436a-84de-1b71e67e43a7",
        "cursor": {
          "ref": "693fafcf-9351-4ec2-a08d-77986fa0f507",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b25e5a5f-3191-4ff1-82c6-ddb69748ed06"
        },
        "item": {
          "id": "58f09fe8-bd6c-436a-84de-1b71e67e43a7",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "31582b7f-71c9-43aa-b537-c46d9f7eafd3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 694,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "7b66e510-68c8-4c67-a928-d479b1626aad",
        "cursor": {
          "ref": "5e4205b6-fab3-463a-b432-0bcd6442e8e3",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "36381fc7-1475-46a0-9d00-af8afd7796e5"
        },
        "item": {
          "id": "7b66e510-68c8-4c67-a928-d479b1626aad",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f849693b-1620-40a0-b711-998ecb74cb2f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 701,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "206209cf-71f3-4caf-a37c-8ddc36ee7b32",
        "cursor": {
          "ref": "751ff1ba-9ae4-4cb5-a59b-1e913dc95dfd",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "22a543c0-b221-4cf8-aa6b-9e744a50df3e"
        },
        "item": {
          "id": "206209cf-71f3-4caf-a37c-8ddc36ee7b32",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8c536d83-677d-4ce5-a23c-66e6630cdb68",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 684,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "182f5294-98e4-4fe3-ac59-5b15a4be6d65",
        "cursor": {
          "ref": "7def3142-dba5-4833-8220-503fdb9678b3",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "5a27f8cd-9376-4df7-9847-cc90f1a57092"
        },
        "item": {
          "id": "182f5294-98e4-4fe3-ac59-5b15a4be6d65",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "22ddcd3e-19d3-4b1e-8db2-73b18906ef0c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 701,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "ac71890f-3bbd-496f-b429-acfc194c9319",
        "cursor": {
          "ref": "3b4ff1c8-7e93-4034-93d2-7ed9e70cd314",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d71ffd30-e2ca-4ac6-b47e-a4289a606545"
        },
        "item": {
          "id": "ac71890f-3bbd-496f-b429-acfc194c9319",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "dc57d5cd-4246-4bd4-bdb3-caab6606a550",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 695,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "bed906d2-1c92-498d-bf16-a1c73ff3b444",
        "cursor": {
          "ref": "b09ee994-5385-43e0-bf1e-a9bf6db29571",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "49540315-cc3b-4050-ab8f-b1a123d05bfe"
        },
        "item": {
          "id": "bed906d2-1c92-498d-bf16-a1c73ff3b444",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b865208c-68e7-411d-87e8-72f2d05effd7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 694,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "1d434c45-a263-4dc7-8a57-0ea48b06bb7d",
        "cursor": {
          "ref": "ad1ae020-47ce-4959-b7e9-51bc4f9e6689",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d060d50f-886b-4fee-85f5-3873f2dcadf2"
        },
        "item": {
          "id": "1d434c45-a263-4dc7-8a57-0ea48b06bb7d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "7a66326a-8ce9-4a89-a167-cfb5fbcd0f7a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 685,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "a22e4248-2006-42d3-8f17-54a7e5bcc830",
        "cursor": {
          "ref": "687ccead-ab92-44f1-aea4-0ef8d10eaa88",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "966f5664-d56d-46df-b966-e9527a6dd770"
        },
        "item": {
          "id": "a22e4248-2006-42d3-8f17-54a7e5bcc830",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "82f5d0eb-c174-417d-8798-cd4516837b6e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 724,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "6ac13504-482e-41bb-b822-e78769f88ac9",
        "cursor": {
          "ref": "c2ec6459-9bec-4cd3-9bfe-99cd544ca051",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d91c1087-cf6b-46a1-943f-23fdece53093"
        },
        "item": {
          "id": "6ac13504-482e-41bb-b822-e78769f88ac9",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f4d3c792-5976-4f64-9663-ed1018fcd7bd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 693,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c09e3673-a7cc-48fd-982b-26b4c5bda298",
        "cursor": {
          "ref": "6be12bae-63ec-4105-b150-df3d1d05b12c",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "34a7f0d3-3665-41d3-87b0-aaf2f99ae110"
        },
        "item": {
          "id": "c09e3673-a7cc-48fd-982b-26b4c5bda298",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ff6cb901-809d-45a2-8d85-7dc2405ecbe7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 746,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "235332a2-70b4-420a-9d98-9bd37084d59d",
        "cursor": {
          "ref": "ebb5da27-8170-4956-8bc2-a9acb3818c36",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d795092e-4adf-442b-862c-2d2b6c13c483"
        },
        "item": {
          "id": "235332a2-70b4-420a-9d98-9bd37084d59d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "27deef21-54fc-404d-a068-eb495720aeeb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 670,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "132960ef-97e9-49ca-826c-39e5e001e9ea",
        "cursor": {
          "ref": "8486ca8d-72fd-4063-b0b8-c57ba4e9e440",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "21641a89-0121-4144-b591-9027158f8d13"
        },
        "item": {
          "id": "132960ef-97e9-49ca-826c-39e5e001e9ea",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "cbd43252-72e6-43e0-b7a0-b0799fca7bed",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 709,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 403",
              "stack": "AssertionError: expected response to have status code 422 but got 403\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "3a85d8fb-22a2-4347-94ae-0975912a39ce",
        "cursor": {
          "ref": "59f157c1-f29a-4789-8a80-f9dd1bfdb45b",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "69a3d0e2-df68-430b-981b-eb281cd3f43c"
        },
        "item": {
          "id": "3a85d8fb-22a2-4347-94ae-0975912a39ce",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4e51edb9-c8e4-4c6d-898b-837533bafd1a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 714,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a6148def-f3ff-4b3b-a7bc-d420205f52f8",
        "cursor": {
          "ref": "06507278-7289-4d79-b78a-0f9bd02f48c1",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "4f99752c-dfa8-4750-b481-6989991ab189"
        },
        "item": {
          "id": "a6148def-f3ff-4b3b-a7bc-d420205f52f8",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e38c9e69-b71f-41b1-b5d6-2bc8f895749f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 691,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b8249ff2-2a07-4859-be7e-d6e1b87cf1f2",
        "cursor": {
          "ref": "45057936-840d-478e-af0a-a1869449efb3",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "65547347-f697-4a87-90fe-0fb11e727439"
        },
        "item": {
          "id": "b8249ff2-2a07-4859-be7e-d6e1b87cf1f2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b2fd44ab-12c8-46fd-b81f-94faed0b1ca1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 685,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "955606e7-52e3-42ab-9da8-9b6660671e28",
        "cursor": {
          "ref": "1cd196fb-a738-4cea-9d1f-9a30e87699ca",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2d4b08df-d258-4c10-8d2d-a1f4ad322852"
        },
        "item": {
          "id": "955606e7-52e3-42ab-9da8-9b6660671e28",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3c51a6ed-dacf-43ad-a343-d216cf2c63d7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 682,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "0139e2de-1290-41d5-a3f0-fddaf905d449",
        "cursor": {
          "ref": "65f9fa9f-2f6d-4afa-8944-5668e2889312",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "cbae361c-64ce-4b4b-85a1-daee7b585907"
        },
        "item": {
          "id": "0139e2de-1290-41d5-a3f0-fddaf905d449",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "dbfd7050-764a-47c5-a2c5-6d84aba25c53",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 693,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "a8ba27d9-6f83-40ad-817e-22d43dd5ad68",
        "cursor": {
          "ref": "e77d611c-e425-49b5-90b0-c8fd34f4ade1",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6e466ad0-3993-4987-90d3-459dd1b077b0"
        },
        "item": {
          "id": "a8ba27d9-6f83-40ad-817e-22d43dd5ad68",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6b966b83-d458-4b50-a950-aa8ee60baebf",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 672,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "e05a2655-bf4a-4628-a112-2545143dbee7",
        "cursor": {
          "ref": "24d6dac0-7754-4a37-a0f4-72233ecd8a4f",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "064242a5-c5c1-4311-ae25-0f806a9e8f95"
        },
        "item": {
          "id": "e05a2655-bf4a-4628-a112-2545143dbee7",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6e0850c8-811d-4793-82ba-ea5b96c9708c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 704,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 403",
              "stack": "AssertionError: expected response to have status code 422 but got 403\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "39c6f265-0b34-4104-af9c-a346c41edd0c",
        "cursor": {
          "ref": "b25e663d-6b37-48dd-8dac-e521019f75db",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4f2dfb3a-cddb-4575-a039-515d471d9763"
        },
        "item": {
          "id": "39c6f265-0b34-4104-af9c-a346c41edd0c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c93a5a81-68aa-4bb8-bc60-ad910377940d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 684,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "6407ea08-0ca0-4598-910b-6480c88df1a1",
        "cursor": {
          "ref": "13ca3cd1-4da7-4ee7-a269-8bf553744a3d",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "208f62d4-0fcb-43fd-9963-84ee71fddc6a"
        },
        "item": {
          "id": "6407ea08-0ca0-4598-910b-6480c88df1a1",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ed187219-d10e-472f-aa39-cbc284867e0c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 717,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "fc6f6210-3891-4a2b-b9c1-997921f3f76c",
        "cursor": {
          "ref": "ac3f5743-1f95-4362-92e1-7fe42f3be053",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "bad709e7-2066-410b-8bc8-0dcd2f0c6e3f"
        },
        "item": {
          "id": "fc6f6210-3891-4a2b-b9c1-997921f3f76c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "aa417ca2-0b72-442a-a615-bdff1b23db8e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 678,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "9bc00477-4598-41e4-982b-558bd708ecbf",
        "cursor": {
          "ref": "93b11ddd-5a41-4d6d-ac2b-508b5b81c600",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "01422cdc-fce2-4ab3-816c-e1ace42ac51d"
        },
        "item": {
          "id": "9bc00477-4598-41e4-982b-558bd708ecbf",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "2cbf79f3-dcb5-453e-bc92-59031413c617",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 683,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "53a5ec67-e1b8-4152-998d-e38fea4e5b2b",
        "cursor": {
          "ref": "6ccf83c7-c5b5-48a0-b00d-8bc48e9c9369",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8bdcdbb0-32c9-41fc-906f-181b7b42cdb3"
        },
        "item": {
          "id": "53a5ec67-e1b8-4152-998d-e38fea4e5b2b",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "bfa8e372-f39c-4ec7-aa20-26233f073878",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 709,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "9bcabad0-60cc-46ad-95ee-c7949ca9d103",
        "cursor": {
          "ref": "3f2703e9-5618-47af-b2b9-29a4020805d6",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "38484d91-1ebb-4945-bd4e-e3340a2d22ae"
        },
        "item": {
          "id": "9bcabad0-60cc-46ad-95ee-c7949ca9d103",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "085d36b9-02b8-42af-93ba-f19b6203510d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 704,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "45653c1a-baba-41bd-9ad6-0b6062f339f4",
        "cursor": {
          "ref": "4ae11159-2779-4be6-b123-e27c323f5dce",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0d1d3eab-2240-430e-a47b-0bd1efaa63c0"
        },
        "item": {
          "id": "45653c1a-baba-41bd-9ad6-0b6062f339f4",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7a12d994-9373-41f2-994d-89f0d6a6eb56",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 708,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "5eb1a044-6048-40e5-b3da-0567ad28dd49",
        "cursor": {
          "ref": "b25f4a5c-2a36-4a24-adc7-fcc5f25e4384",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2aa0cdb2-308d-4ee6-a09b-ad6a7b30ec49"
        },
        "item": {
          "id": "5eb1a044-6048-40e5-b3da-0567ad28dd49",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "06ab0e57-d5d1-4523-b95c-713e5dd1e5a6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 671,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "3d616e3a-cc9e-4a40-8899-23421849be6a",
        "cursor": {
          "ref": "15a1bff0-b987-456d-805a-49e64cef70c0",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "507c1212-f5ab-4057-a54e-64c35b91c23d"
        },
        "item": {
          "id": "3d616e3a-cc9e-4a40-8899-23421849be6a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b169afc4-6b1b-442e-b0dc-c58e8dc31f7a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 715,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "94ab3e7e-92f4-40f0-b4d1-77a6e7755a6b",
        "cursor": {
          "ref": "44ed7361-c604-464d-acb9-37af1199e44a",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f45c977b-881b-441d-9d0e-cfc8bc15b87f"
        },
        "item": {
          "id": "94ab3e7e-92f4-40f0-b4d1-77a6e7755a6b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d1b8afa8-5c86-4848-83cb-32ce2aaa702c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 702,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "5f5d9d77-6211-4b52-a8f5-56323ae10ffc",
        "cursor": {
          "ref": "94f4883b-e882-498c-9e88-7e99a8e1c2d6",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "cbf7ab6d-58af-4421-94d4-e2de30594d4b"
        },
        "item": {
          "id": "5f5d9d77-6211-4b52-a8f5-56323ae10ffc",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f19ac9e0-5b8d-47aa-a07f-d3843b09a154",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 691,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "0bd65fcf-f073-4c07-b4cd-c74c34cb1576",
        "cursor": {
          "ref": "da0074b0-a66b-4741-8600-5dd504a4f7b1",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8bfd35dc-28e7-4ac7-8702-89767d904cfc"
        },
        "item": {
          "id": "0bd65fcf-f073-4c07-b4cd-c74c34cb1576",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d108c680-75ba-445d-9d25-8cb1252c259b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 687,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "e57868aa-e7ba-44d7-a03e-5c9f605152c4",
        "cursor": {
          "ref": "94ad0d2f-123f-4f0c-a52f-793126aac237",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d8fa827a-85e5-433d-bd3a-0e542bd50e69"
        },
        "item": {
          "id": "e57868aa-e7ba-44d7-a03e-5c9f605152c4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "82a0bb2a-f8f4-41f4-8798-63cf30a9b07f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 682,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "5a77776a-fe65-411b-bfd9-4c5a018d8f11",
        "cursor": {
          "ref": "94dda30c-f357-40fa-936b-9f96bc3cdaa9",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e13af58e-b14b-46c1-bcaa-bde34ace98eb"
        },
        "item": {
          "id": "5a77776a-fe65-411b-bfd9-4c5a018d8f11",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0b410eb0-9936-4143-a3f1-c863d5fbfb36",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 724,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "6779cbe7-cfa4-4d7c-83e3-52cb1ee75b92",
        "cursor": {
          "ref": "2ec3fba4-c005-488b-b615-7c9232cb87e1",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "42237e6b-c7bb-4764-aa4d-140a8156221e"
        },
        "item": {
          "id": "6779cbe7-cfa4-4d7c-83e3-52cb1ee75b92",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2c2e47fd-1c9d-4a7e-9da4-f47e1b47db0a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 701,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "34675329-24d4-4fd0-ac4b-79c8fe10ba8f",
        "cursor": {
          "ref": "47d34733-7066-4e5c-9f20-db5f1362f152",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5c217d32-24a3-47a2-a698-6b4ab700d676"
        },
        "item": {
          "id": "34675329-24d4-4fd0-ac4b-79c8fe10ba8f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0c4a7e7e-ae70-41ba-9025-5efd73be821e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 697,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "f843314c-a785-4275-a63e-5a1c07f66776",
        "cursor": {
          "ref": "6b5497e0-6a20-4b19-9aa3-9cc5a958fcca",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "4d49748b-3cc2-4af1-9571-9d533d9fc395"
        },
        "item": {
          "id": "f843314c-a785-4275-a63e-5a1c07f66776",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1d1c7c1d-c335-436b-8feb-33b956851e6f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 701,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "40ed5ee0-1b7c-4c9c-85c4-29eb2295bf4c",
        "cursor": {
          "ref": "ed0c94f4-6ba2-4d28-8f8b-8d6ff8aa267c",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f41c045f-3e84-4688-a49e-1c95ee37359c"
        },
        "item": {
          "id": "40ed5ee0-1b7c-4c9c-85c4-29eb2295bf4c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "76c3ba07-201d-4c55-820a-2709b72f84de",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 703,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "d3681b45-8eb5-4522-acc3-0df97a31e13b",
        "cursor": {
          "ref": "161ad2b7-a624-4703-bf4f-845358682427",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9f9194f0-793c-4662-b4f6-d4fad7f88f23"
        },
        "item": {
          "id": "d3681b45-8eb5-4522-acc3-0df97a31e13b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a145171f-edb3-4ea3-a098-f68fdad3efb0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 690,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "ef771ffc-1cb0-4afc-9686-08a67a50bda3",
        "cursor": {
          "ref": "27ed30c2-33a7-4dbe-82f6-f5d1fb859955",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a3ff8019-f06c-42a3-a90c-464189e9f21a"
        },
        "item": {
          "id": "ef771ffc-1cb0-4afc-9686-08a67a50bda3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ffed39d5-bda0-423a-aac1-f77f426f16cb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 693,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "f8a0f036-395d-40b7-9306-79ff9c6fdd44",
        "cursor": {
          "ref": "364d242c-ce4a-44be-b89e-baef1571ea4a",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "670c5f46-83ec-4e8f-8b2b-7e263edc04ff"
        },
        "item": {
          "id": "f8a0f036-395d-40b7-9306-79ff9c6fdd44",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4d4c196e-375b-431d-98d2-3af56d79db62",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 687,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "25767fc2-9ef4-46bb-b568-4ed0c6c4c237",
        "cursor": {
          "ref": "9e005812-2f02-4cd1-83fc-efd4c0c2f32a",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "126313a3-8b5e-4a01-a11e-e3176c43588c"
        },
        "item": {
          "id": "25767fc2-9ef4-46bb-b568-4ed0c6c4c237",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "64d904c4-7385-4c54-85c1-5b3ee13a71cc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 682,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "0bfb690f-44d1-42b9-bc4a-2d6ca067c62b",
        "cursor": {
          "ref": "d411ddb6-4687-45d8-b1a9-43ba717ac544",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "4f838299-440e-4004-a53f-633bea75a67d"
        },
        "item": {
          "id": "0bfb690f-44d1-42b9-bc4a-2d6ca067c62b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "864c4010-7ddc-4839-b8a3-710368eacaaf",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 702,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "d53e4824-f6eb-4f62-b42a-f602ec2703c3",
        "cursor": {
          "ref": "789bea7b-5d8e-4a94-b0b0-f64bec1c8db4",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b24dc4c9-6763-4d07-a048-6579b5abd120"
        },
        "item": {
          "id": "d53e4824-f6eb-4f62-b42a-f602ec2703c3",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c2fcc9b0-5716-49f6-bc78-d30c91e01c4d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 679,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "1b6c55c5-dba0-4f23-a461-35008f232751",
        "cursor": {
          "ref": "69d8105f-fafc-4e67-9e64-1897a0d5ee88",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6ec53c95-799d-4e99-b9aa-09adef94cdc0"
        },
        "item": {
          "id": "1b6c55c5-dba0-4f23-a461-35008f232751",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1247aceb-4279-449a-b21e-38e2a26b978b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 690,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "ace978cc-9a05-485e-8bf6-9e263e6017bc",
        "cursor": {
          "ref": "47486a98-5d1a-48f8-aaea-1bd71ecb704a",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f2dd977e-3c4e-4776-b124-55b32a0e80f9"
        },
        "item": {
          "id": "ace978cc-9a05-485e-8bf6-9e263e6017bc",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "412f9cbe-e5ec-4978-a642-c2c17ec6728e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 704,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "1d2522e0-f6a1-47f6-9781-bcd9d9da62cd",
        "cursor": {
          "ref": "0a622580-2051-46c2-821c-09bdabeace5f",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "c8b6e79e-a03f-4d8b-b8bd-3fb17cda217f"
        },
        "item": {
          "id": "1d2522e0-f6a1-47f6-9781-bcd9d9da62cd",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2e289ff9-e36b-4fd1-ac3b-0b63f169e153",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 682,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "f7995b2c-302b-469b-93ac-e538fb111f47",
        "cursor": {
          "ref": "66b50add-03d7-405d-862a-c3a78dfbf37c",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "beb0a821-7e6c-49b1-92c0-2a030680e0d7"
        },
        "item": {
          "id": "f7995b2c-302b-469b-93ac-e538fb111f47",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6a533ed4-1bfa-4331-a495-7871dde5ee76",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 747,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "42ab1d7f-6004-44ae-9a61-cbc556fc56f6",
        "cursor": {
          "ref": "7aa8dd47-dc7d-45d5-ac15-d24f7f74e0c8",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "812fcd56-11af-4ea6-aae1-99e570ce8e55"
        },
        "item": {
          "id": "42ab1d7f-6004-44ae-9a61-cbc556fc56f6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e4d4c18f-f33f-436f-b66a-acc5ea29a4cb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 727,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "001769be-d3c8-4f66-8080-d3f790a5c59b",
        "cursor": {
          "ref": "d457f1b3-c5c6-4aa2-a1e9-501298e4abf1",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b8cf0ffd-6ab4-4e91-9ff6-bbf41f2f26c2"
        },
        "item": {
          "id": "001769be-d3c8-4f66-8080-d3f790a5c59b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f0ad80c3-d382-4660-9aae-41a8a78f2987",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 693,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "dead56d3-a7e7-43a0-b435-b1e3c9a366ed",
        "cursor": {
          "ref": "d0fc1b0e-0221-4484-86b3-44c4ef6b4d75",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "497fc397-50ae-491a-88ec-22b8c83bdbce"
        },
        "item": {
          "id": "dead56d3-a7e7-43a0-b435-b1e3c9a366ed",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5cfcbae3-714c-4217-8c54-d9a65e927e26",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 678,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "d967c990-f168-4e41-aff5-c4b2ad0cbad6",
        "cursor": {
          "ref": "0f42f3cb-ab42-4c55-b910-92a9e0a70ed0",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "30306ae3-995b-4312-955e-e20eaf972620"
        },
        "item": {
          "id": "d967c990-f168-4e41-aff5-c4b2ad0cbad6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "2e543be8-8da5-4b77-91e1-29ccf206db38",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 707,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "eae0e3bd-9da4-4df6-9bec-df0b0c77b8e4",
        "cursor": {
          "ref": "bf2649fc-a2d5-484e-b21f-c7f65e60a7f4",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "67b8e571-1197-4f4a-b33d-c1c0407abb86"
        },
        "item": {
          "id": "eae0e3bd-9da4-4df6-9bec-df0b0c77b8e4",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d2baa5d7-534e-4638-99fa-de21f04919cf",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 687,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "e9eb27a8-6425-455d-ad3e-a9a7bb12d3c6",
        "cursor": {
          "ref": "0611ee94-7ce5-4034-b2ef-2be5cb891db7",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b0b4ce9c-ab77-46f0-bd2c-9f0518245969"
        },
        "item": {
          "id": "e9eb27a8-6425-455d-ad3e-a9a7bb12d3c6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ae779ba7-f01d-4ef3-931b-d9f33b1eda96",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 674,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "8e8b11f5-9fda-4ac1-b8d3-2077e26848bc",
        "cursor": {
          "ref": "7933ac57-a56a-4eb8-9bc0-6a2e79cb593d",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "975b48c1-6174-4606-8924-985fdb78e91e"
        },
        "item": {
          "id": "8e8b11f5-9fda-4ac1-b8d3-2077e26848bc",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3bfead2c-71e5-4238-8f01-da6ddf925f9a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 693,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "6c8792c9-b9a5-4bf6-a5d5-fd3a58dc3315",
        "cursor": {
          "ref": "60e3a71e-8a85-418c-8d1a-cc2a29b2c416",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8db7bce5-5018-480e-81b2-74f1f4283cc0"
        },
        "item": {
          "id": "6c8792c9-b9a5-4bf6-a5d5-fd3a58dc3315",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "657f1c54-8d79-4bff-aff5-544dca063864",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 687,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "84085451-771d-4847-a86a-af90fc5e97ca",
        "cursor": {
          "ref": "80cace83-aa8b-4139-a3a0-894b278b3b98",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4573f70d-4b39-4457-a4a3-d4a4927da935"
        },
        "item": {
          "id": "84085451-771d-4847-a86a-af90fc5e97ca",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "eb29e689-f705-4238-98e8-48a8f329e74e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 698,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "e41eb846-8c38-4449-9cc3-d06587a60b0e",
        "cursor": {
          "ref": "d48cf5d3-13d5-418b-8e66-f5fae263ed2a",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9ec3459e-d51a-4210-be76-ca95e43fff10"
        },
        "item": {
          "id": "e41eb846-8c38-4449-9cc3-d06587a60b0e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "33f9a0d4-55d7-4df8-9097-f85b5de98211",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 686,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "9e234c48-67f5-4dfd-84d5-31cfcc4cce5a",
        "cursor": {
          "ref": "3096682d-26c2-4c96-abe8-a494c85b4a55",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "afd0f982-4472-4f35-83de-8747aedb4856"
        },
        "item": {
          "id": "9e234c48-67f5-4dfd-84d5-31cfcc4cce5a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4f7ef99e-1b46-49a7-9e4e-36e83b03d679",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 704,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "735bd568-5d20-404f-b508-5557b4d3e39e",
        "cursor": {
          "ref": "beea3a97-dd09-478b-adc2-0688a9234351",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "bfca6ae0-4b6b-4034-b2cf-01e2d52ff855"
        },
        "item": {
          "id": "735bd568-5d20-404f-b508-5557b4d3e39e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "0cfbbe3c-255a-4132-b226-35fcabe4788e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 682,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "81448552-9f44-40ee-aae8-9af296a3347d",
        "cursor": {
          "ref": "d024c522-a7ab-4448-ab8b-63052f0c6883",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "35a21a6d-557d-4279-81ba-99f8dc39210a"
        },
        "item": {
          "id": "81448552-9f44-40ee-aae8-9af296a3347d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "061c8fa0-c1ff-4a70-a530-f1ca2fa69dc2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 695,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "075642f9-d3e0-41a6-b759-1a5ec7044bd6",
        "cursor": {
          "ref": "705f8b27-6bf5-4b47-93d2-b5dc693d8dd5",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d488fad4-3239-46ca-b88e-3fd6bbff2dbf"
        },
        "item": {
          "id": "075642f9-d3e0-41a6-b759-1a5ec7044bd6",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "deb2371d-83e0-44d0-8270-9a82d3360b05",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 697,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "f8e2df96-44e8-4bb9-8942-9e29b1565541",
        "cursor": {
          "ref": "b810bcad-d9d3-4b7e-afcd-7392697e1731",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "5d513af0-8616-4e04-8684-1826ee47255d"
        },
        "item": {
          "id": "f8e2df96-44e8-4bb9-8942-9e29b1565541",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ed21d50d-4c17-4966-9c09-feee383472a3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 697,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "85068b58-2ef3-472d-9f76-0431d4082625",
        "cursor": {
          "ref": "4f0248f2-befb-4381-abdd-baf7e85582e5",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f087a1cb-55fb-49ec-ad24-e393e7c9fcc0"
        },
        "item": {
          "id": "85068b58-2ef3-472d-9f76-0431d4082625",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "6a60e49c-1059-4e49-8130-7240eb8dbbc3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 689,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "7e296fc3-4fe7-4f6d-9c23-f9aa76d3e358",
        "cursor": {
          "ref": "b199d44f-3156-4a29-b590-f77e2ef5ab20",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8c4891c5-d1e5-4240-b0fb-c7a8238f2b65"
        },
        "item": {
          "id": "7e296fc3-4fe7-4f6d-9c23-f9aa76d3e358",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "98323273-4c03-4d0e-a088-f054ef16dcc2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 691,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "4e191580-5f29-470c-b5c5-857c658d2114",
        "cursor": {
          "ref": "3b6333b9-b496-4247-a5b1-0cb2532fdff4",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "fda29aa4-734f-4191-90a0-56bb548c0be4"
        },
        "item": {
          "id": "4e191580-5f29-470c-b5c5-857c658d2114",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c92fda8f-7cb9-40ae-b2f5-cadb68718235",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 704,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "b2c0cdce-0cbd-4f52-960e-72157fbdbb73",
        "cursor": {
          "ref": "28645fdf-00c3-4cb6-ac9d-dc3ce7e46d48",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ec0b23b1-bd88-4851-bb67-1c74cdb7d2a9"
        },
        "item": {
          "id": "b2c0cdce-0cbd-4f52-960e-72157fbdbb73",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f4f83862-64f3-4ea6-be6e-deef3acbfa73",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 690,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "b0dbac3a-06a3-4865-a0b5-76ed68100ba9",
        "cursor": {
          "ref": "5d1858fc-a2ea-4f0b-99f7-3647cd119244",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5be344c5-c050-47ba-81ae-e9d0e281ff5c"
        },
        "item": {
          "id": "b0dbac3a-06a3-4865-a0b5-76ed68100ba9",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "573ef818-c2c7-4219-881d-4c645bb690f2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 684,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "39d8d1ac-da05-4e9d-b9ec-74dca0ee7e9a",
        "cursor": {
          "ref": "4e30b1dd-ccb3-4e33-b388-71129eed3cf1",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "76d09d40-8bd6-4811-a4ca-a95e9b9ae722"
        },
        "item": {
          "id": "39d8d1ac-da05-4e9d-b9ec-74dca0ee7e9a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "9833f19a-4889-48f1-aecb-d5db9f2c6c33",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 714,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "b3d0d5ab-4fb3-4ffe-899f-bdc71f75f98d",
        "cursor": {
          "ref": "cd127dc5-dd68-452e-ae5f-b663b5d03e24",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f618d00a-0469-4d51-963c-c5e3738284f2"
        },
        "item": {
          "id": "b3d0d5ab-4fb3-4ffe-899f-bdc71f75f98d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d4583bc8-c3d1-4966-8d5f-fbb8d1c33f9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d9a34b-3357-416a-8f65-de338a8e59cf",
        "cursor": {
          "ref": "b36d91cf-cf68-4834-b61b-13f3f94ef883",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1d023f66-84e2-4842-94d8-388c06995c5b"
        },
        "item": {
          "id": "55d9a34b-3357-416a-8f65-de338a8e59cf",
          "name": "credentials_issue"
        },
        "response": {
          "id": "566c4a61-e2b9-4250-b068-4ddd69a54a83",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 692,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:102)"
            }
          }
        ]
      },
      {
        "id": "fa62ca70-f7be-4b0f-9e55-1a80e231e95f",
        "cursor": {
          "ref": "bd8cdac7-79e2-48b1-be6b-8835bdb4f0c5",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0c2c0dac-1aab-43a2-86ff-0ab2eeaff49a"
        },
        "item": {
          "id": "fa62ca70-f7be-4b0f-9e55-1a80e231e95f",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "a8d64ee8-5218-4991-a46c-0595cd4b36af",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 701,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "f2ac73aa-3b16-4996-8011-7812e888a549",
        "cursor": {
          "ref": "ff950acb-9c1a-41ed-a0ab-9cb04f14558c",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9ae9217d-84bd-49b4-8e9c-2daea6a13d03"
        },
        "item": {
          "id": "f2ac73aa-3b16-4996-8011-7812e888a549",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ea47c39d-c1e8-446a-853f-b25b29843f84",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 699,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "90e0ac98-59d3-402e-92cd-672421c9b5f8",
        "cursor": {
          "ref": "9909892d-3953-49b3-af93-6931df54e8c7",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "94ec2bcf-ea24-44e0-95f7-768b535b8444"
        },
        "item": {
          "id": "90e0ac98-59d3-402e-92cd-672421c9b5f8",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a385256d-e09f-4808-ba67-37587b276894",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 685,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "9a7970bb-cbff-4333-a36e-a18158c0bd23",
        "cursor": {
          "ref": "16100f6a-5011-4db0-8990-166e6b6fa530",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "368a780a-111b-473c-aed9-e5085a5d63f5"
        },
        "item": {
          "id": "9a7970bb-cbff-4333-a36e-a18158c0bd23",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7572fb06-c150-4875-aebf-3b5f5ed5a085",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 694,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "df82bdc4-a22e-49f1-bb53-bd06a1dc546b",
        "cursor": {
          "ref": "97184c55-f566-4209-a82b-7a2001df2814",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8441f7b6-8464-4514-a311-2cf7df5dda09"
        },
        "item": {
          "id": "df82bdc4-a22e-49f1-bb53-bd06a1dc546b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d96d910a-7a81-4ab4-a62e-3ee2960abf57",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 691,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "a29f1378-89cd-42ee-a92b-962cacbee690",
        "cursor": {
          "ref": "d4bfb5e5-7e7d-4ad7-b061-dfb9165608d3",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "79c8d16d-9b45-4adc-9168-f472cefb2980"
        },
        "item": {
          "id": "a29f1378-89cd-42ee-a92b-962cacbee690",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8ed1cb6c-f72f-4d71-ad1d-b5bc0f6fee76",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 693,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "e0e3ec50-ada2-4109-97c5-493305608f7c",
        "cursor": {
          "ref": "4d2dfb8e-e7f7-402a-ba0c-0d564eef1025",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b950fb06-3982-4046-a5f9-ea834c55ee5e"
        },
        "item": {
          "id": "e0e3ec50-ada2-4109-97c5-493305608f7c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8578fd8c-266b-4844-953b-0e3b6b485068",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 682,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "591bee41-513d-4827-94bc-6c30cea875a2",
        "cursor": {
          "ref": "bccebef0-2dfa-4d97-b297-86950b817f9b",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "73af8391-6c6b-4418-bc5d-6541e3150f5a"
        },
        "item": {
          "id": "591bee41-513d-4827-94bc-6c30cea875a2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "839c077c-1550-4382-a226-296fc1156647",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 686,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "d0d89c98-3ee2-4070-9dfd-08713b9efdd3",
        "cursor": {
          "ref": "4bf832cc-9252-4a64-9f1c-1b92cfe76060",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d0f37e3a-89e1-4921-84b4-28326324c121"
        },
        "item": {
          "id": "d0d89c98-3ee2-4070-9dfd-08713b9efdd3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3b2bd687-78af-45cd-b8a9-51932a76c53e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 710,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "037a87e9-a06b-4954-9da5-ee11625c29b7",
        "cursor": {
          "ref": "8baf3416-1cc1-4eb9-adf1-25a585e5653e",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "41ab52dd-a985-438e-a609-2829535e5a5c"
        },
        "item": {
          "id": "037a87e9-a06b-4954-9da5-ee11625c29b7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a2dd48fa-a10a-4958-bec3-b02099fb4544",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 690,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "89fca687-0caf-4c6f-b664-835b683db5df",
        "cursor": {
          "ref": "9d8650da-4e73-446b-a846-503d0cfe7277",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "721ec597-debe-4314-8de1-c88289e00add"
        },
        "item": {
          "id": "89fca687-0caf-4c6f-b664-835b683db5df",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "869747bb-f7d5-4436-9c27-3677dd5849e7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 681,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "e48e095b-2211-4085-928e-b6c1325a4f9e",
        "cursor": {
          "ref": "e6100e0e-6e0b-4f84-b1e3-9ae82c467467",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "00724ede-defb-468b-9f62-c8dd8e1421e9"
        },
        "item": {
          "id": "e48e095b-2211-4085-928e-b6c1325a4f9e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c9763733-b395-4e5c-acf2-9cad359d1d4d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 689,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "7ed9e7f5-6d8c-48fc-8645-029a6754b663",
        "cursor": {
          "ref": "868feda2-de98-4e5a-88de-d3e9838183e7",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8acaec81-2caa-42a3-a9f4-7c64362a0385"
        },
        "item": {
          "id": "7ed9e7f5-6d8c-48fc-8645-029a6754b663",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a714de44-c8c3-487e-8064-ee60743580e9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 690,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "ae3250f3-a757-47dc-94af-968be289c807",
        "cursor": {
          "ref": "35941e49-af67-4303-8a3b-723116251fd4",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e07b64fe-7585-41d3-8d43-7a518e26818a"
        },
        "item": {
          "id": "ae3250f3-a757-47dc-94af-968be289c807",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "15681102-a216-47b6-bcd8-a73627e8e177",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 714,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "1ecce30b-f774-4222-970c-65a96c6fc9f2",
        "cursor": {
          "ref": "2f20e9e0-0957-4787-b5bc-236c7e23225b",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "dec4a6a9-2320-448d-a740-8bfab2d5042b"
        },
        "item": {
          "id": "1ecce30b-f774-4222-970c-65a96c6fc9f2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1aee9d70-118f-4a91-9b21-fa3460f57237",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 684,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "44f57ac5-bfb0-4918-b668-46c1da59dccd",
        "cursor": {
          "ref": "f2ec7b35-b934-4317-82c4-e79072323da3",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6e2338e0-0437-48b9-a86a-f9b7da926759"
        },
        "item": {
          "id": "44f57ac5-bfb0-4918-b668-46c1da59dccd",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "60bec4a9-d8fc-4c6b-b956-70ef37d4aa2f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 673,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "7a5b270d-70d2-4fea-80db-06e9b8189d2e",
        "cursor": {
          "ref": "98676666-9df3-40fb-83cc-afae7a06ef2d",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "375c8af7-36a5-4d3b-b664-c1ba9c83e95e"
        },
        "item": {
          "id": "7a5b270d-70d2-4fea-80db-06e9b8189d2e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1a482183-e63d-4af6-9d5a-ab186ee97e3a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 691,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "27a44e4e-2359-4b64-a7a6-898cd42725ab",
        "cursor": {
          "ref": "e0904f4b-bac2-4457-aa31-3b45700291c5",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "7988bc10-07b5-46c0-adfe-90e53bb452b5"
        },
        "item": {
          "id": "27a44e4e-2359-4b64-a7a6-898cd42725ab",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4ac9f260-f929-42dd-a805-ad89ffb03f9a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 683,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "e1f43125-5079-438b-b9ff-eb9b4959a001",
        "cursor": {
          "ref": "f4d78b51-40ae-4875-acec-b64c13cd22f7",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d2397834-3fa6-4417-b1c6-c3d1dbe5ac0a"
        },
        "item": {
          "id": "e1f43125-5079-438b-b9ff-eb9b4959a001",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a6bc247b-2ea5-4345-ba3d-73dcfe46fac8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 708,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "29f7960f-5964-4902-9004-2bbf4011695e",
        "cursor": {
          "ref": "0758ff4f-fb0e-49b4-87ad-e7a7f49ae989",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "82dffabd-3ac4-471d-bdd3-77ada115c42c"
        },
        "item": {
          "id": "29f7960f-5964-4902-9004-2bbf4011695e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3d6df33f-264d-47d5-a60e-7fc22ad7ab84",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 739,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "9dc91d75-666d-4392-94a9-1cc2458dafff",
        "cursor": {
          "ref": "5de41127-a7c7-42e9-b4d2-e16a175cdec6",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b6f01c9e-1ecb-43cf-8d2e-8598674421d9"
        },
        "item": {
          "id": "9dc91d75-666d-4392-94a9-1cc2458dafff",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b6bc6202-0616-4d9c-82d5-f1ffd746621e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 686,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "6d6f3b25-ab83-450d-ae25-4b6efa34be0b",
        "cursor": {
          "ref": "cdb1e16c-a83e-4044-88c4-c103ed384330",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "30b42cb1-d8ca-46dd-be96-a2f36f7291e6"
        },
        "item": {
          "id": "6d6f3b25-ab83-450d-ae25-4b6efa34be0b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "afacdc86-1c80-4c2a-b30e-a8296fa65287",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 673,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "67306988-f28e-4afb-8cfb-b6d1f98d0387",
        "cursor": {
          "ref": "c8d2a396-dfce-48cc-905c-d174dee9b019",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "092dfde7-10e0-494d-a875-49ce2794df4e"
        },
        "item": {
          "id": "67306988-f28e-4afb-8cfb-b6d1f98d0387",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1d974a1a-d1c7-42cc-a800-db652b3c1df1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 704,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "e7340d5b-dc1e-45b6-b4d8-b0e94df7b99e",
        "cursor": {
          "ref": "b1e06641-8120-47e4-b707-632c83242524",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "43b2860c-c962-4803-a724-41822e530961"
        },
        "item": {
          "id": "e7340d5b-dc1e-45b6-b4d8-b0e94df7b99e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "50277c3d-6498-446e-80e7-d68548028c02",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 724,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "c003a906-d1a8-4bab-9922-22001e49be32",
        "cursor": {
          "ref": "ad8db497-2478-46e0-8a13-61b02e3c7aaa",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4b4c2019-fe7e-49ce-a946-422dec2c1c44"
        },
        "item": {
          "id": "c003a906-d1a8-4bab-9922-22001e49be32",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "84598f08-d2ad-4747-b286-835f949dd431",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 694,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "ff30f68c-48bd-48cc-a55f-effccbc7370c",
        "cursor": {
          "ref": "de1e69d3-082d-4368-bcb8-95afa6c0f0f4",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "8fcc4e40-32d2-4f0e-abba-b90cddf32eec"
        },
        "item": {
          "id": "ff30f68c-48bd-48cc-a55f-effccbc7370c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6fb82b02-e34e-41f3-aace-4164cec4c303",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 689,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "5de3f627-2a89-4c31-af17-45ea91a2cae8",
        "cursor": {
          "ref": "87222ebf-6524-4a61-8ef0-aa3b133290c3",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "eb4a0d7b-8255-442a-8fc1-f226eca5abf0"
        },
        "item": {
          "id": "5de3f627-2a89-4c31-af17-45ea91a2cae8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e7789852-863a-4e1e-84ba-45d3d50fe98a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 703,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "d3741f10-7b75-4659-b47c-261671786618",
        "cursor": {
          "ref": "8f58d52f-44e6-4164-85cf-18518191e3d1",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "47d8eae2-28a2-4da0-8a59-bb9689613468"
        },
        "item": {
          "id": "d3741f10-7b75-4659-b47c-261671786618",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6d5bdb9f-5945-4529-8d95-fd48c91ebf44",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 682,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "fc1aa514-1492-423d-8fa6-2a6c90af41ab",
        "cursor": {
          "ref": "3d1bb234-16ce-4dae-b83a-cf529d78f725",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f0e6730d-fde2-4b4f-aa1a-7e40b46a7570"
        },
        "item": {
          "id": "fc1aa514-1492-423d-8fa6-2a6c90af41ab",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7f8a5340-049f-4185-9f06-919ae3ef5c68",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 736,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "af2b7bcb-92f4-4d8f-bbcd-8a061acd5fa1",
        "cursor": {
          "ref": "59cd7b40-cebc-4aff-942f-7b79fafaa468",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "707f6570-dd52-49b2-824a-c21579732e8a"
        },
        "item": {
          "id": "af2b7bcb-92f4-4d8f-bbcd-8a061acd5fa1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0484f6f6-6866-4dbe-ae4f-a744db4cf2bc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 691,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "4c3d7aa0-8ded-4b0d-8b1f-e62975b01080",
        "cursor": {
          "ref": "e66b191e-7b3d-4c2c-b573-8a6d6d07811f",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e25bd09a-2808-4947-b5f9-14e6a3f8c965"
        },
        "item": {
          "id": "4c3d7aa0-8ded-4b0d-8b1f-e62975b01080",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7bd307c5-187a-437c-ab52-32e7ab5408bc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 692,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "1b0ee371-871c-4762-a5e9-fd578a6b5b89",
        "cursor": {
          "ref": "d80ebf30-ef24-472b-aee2-ec754bbff753",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "8dbfac7c-d6ac-4b81-a017-d65e17a2936b"
        },
        "item": {
          "id": "1b0ee371-871c-4762-a5e9-fd578a6b5b89",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "80ca09c2-2349-4727-8f29-fc45cc8f27f6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 688,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "bfc6ce56-8e46-42e8-a98d-d6449a69224d",
        "cursor": {
          "ref": "f5213c00-a521-4362-994d-871e48918bd3",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "caff3663-5f6e-493c-85ad-4a284ef42bb6"
        },
        "item": {
          "id": "bfc6ce56-8e46-42e8-a98d-d6449a69224d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "42d5d729-a5ae-46fb-a304-35ba0cf88825",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 719,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "f874da6f-9804-4e6f-830d-acdd42ca01ee",
        "cursor": {
          "ref": "a4e2de7f-d6ac-46b9-bb71-a0224da138f4",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "abebc995-69bc-46de-9c1a-216351d17783"
        },
        "item": {
          "id": "f874da6f-9804-4e6f-830d-acdd42ca01ee",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f299ff50-0e6f-4a47-ba04-71fdf9354e57",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 676,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "bf742207-e5ad-438a-8d35-48e5e60a6ff1",
        "cursor": {
          "ref": "2dee2160-041c-4380-a1b4-43a200c62f33",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "706458b9-2c16-44fe-9e54-d32e966248a9"
        },
        "item": {
          "id": "bf742207-e5ad-438a-8d35-48e5e60a6ff1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "00205787-e919-4c80-b867-dc3de929cb5e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 712,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "2b1cbe06-0037-48e3-ad5d-0365f58b6906",
        "cursor": {
          "ref": "0c2c37a5-b344-4c61-87e1-d899a6dc9701",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0f764936-9d78-4010-abb3-ae740501f80e"
        },
        "item": {
          "id": "2b1cbe06-0037-48e3-ad5d-0365f58b6906",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "54616069-25a9-4fc9-bb41-e40076d7a707",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 682,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "56a905f7-d753-4f8c-974a-43efa44245e0",
        "cursor": {
          "ref": "89f1b91a-ac27-4701-b4f4-18651cec88f7",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c399306b-a018-45cf-b892-70d23a400ae5"
        },
        "item": {
          "id": "56a905f7-d753-4f8c-974a-43efa44245e0",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "74befa29-1b35-4e2f-b340-be5c9911b5b9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 683,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "1ad05e32-1f90-47c8-9ccc-c97f2a39e5c4",
        "cursor": {
          "ref": "a0ad2bfe-63f6-4df2-bc16-6bae9d0ea1b7",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "ecbc7ad4-2e43-4af7-b553-8f149468b172"
        },
        "item": {
          "id": "1ad05e32-1f90-47c8-9ccc-c97f2a39e5c4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9de5ff39-7ad3-49af-9a46-a60d6d7da253",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "647c2cf6-0f3e-40f6-8d8b-ba6d8f02ea2d",
        "cursor": {
          "ref": "cbf1d340-f147-4bfa-823b-9ecacb04d483",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "8305acab-f094-4844-a687-e8d13c743bef"
        },
        "item": {
          "id": "647c2cf6-0f3e-40f6-8d8b-ba6d8f02ea2d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "79452e81-b7f8-4060-9858-e2da6408598b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 488,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "34b1930b-752b-4aeb-a552-266f80e5e293",
        "cursor": {
          "ref": "4f5cc896-e14e-4fd4-ad56-f3e855fa32f8",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3c577fbf-2c18-4c05-9627-907f7674b039"
        },
        "item": {
          "id": "34b1930b-752b-4aeb-a552-266f80e5e293",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "16f366cc-2379-4efd-b785-a801112c8f4b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 478,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "310e94df-e001-4a5d-b5e2-9b6bd722633b",
        "cursor": {
          "ref": "e0cf424b-2f24-46e0-a075-7a6382663461",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "46d5fb17-95bd-4ce8-940b-a9f127af5825"
        },
        "item": {
          "id": "310e94df-e001-4a5d-b5e2-9b6bd722633b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "558a99e1-5480-43c9-8af2-012ad60314c0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 501,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "34c4ca32-af4b-46af-81ca-d3645695101b",
        "cursor": {
          "ref": "7a3e6092-e9a4-4cec-a22b-c567d248f492",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "28a9d652-bccb-4ac9-a79e-b42ae3efc9bc"
        },
        "item": {
          "id": "34c4ca32-af4b-46af-81ca-d3645695101b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f4df99a4-1990-4cb5-a596-bc9bf9ca5ec8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 505,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "60af00e5-b9f6-4124-adbd-aceb5852f3c1",
        "cursor": {
          "ref": "18ab4295-7dd1-4a96-b66b-e123b33fe57d",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b6807827-f82d-44a8-a98a-e4dc16e0eb4d"
        },
        "item": {
          "id": "60af00e5-b9f6-4124-adbd-aceb5852f3c1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "796f6bb7-5674-4cd1-93d0-dfe531cb8648",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 491,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "f7bf4c10-aa71-4abf-a1f6-ade6a1b329f5",
        "cursor": {
          "ref": "6745e062-14e8-44d4-bb08-6802b0352792",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "46faedd2-9d79-496e-a2f0-b64a7cfe6286"
        },
        "item": {
          "id": "f7bf4c10-aa71-4abf-a1f6-ade6a1b329f5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "63451a96-685e-44fb-8b58-e045bd193ea6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 484,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "8d7bfeca-8b4d-41ac-b853-20bcd28748c2",
        "cursor": {
          "ref": "b1ebb5de-f1aa-4e1d-a483-fbda61e59c1e",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "bd8835db-31a7-4a4e-8831-887bef389aa5"
        },
        "item": {
          "id": "8d7bfeca-8b4d-41ac-b853-20bcd28748c2",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e6df25d1-467f-423e-9562-757c923c633a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 493,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "40e37f8e-3380-4fab-a61b-6a3c5d4d1bfb",
        "cursor": {
          "ref": "12112f53-0581-470e-9c42-671189c9e500",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6a7b2cfd-cd5c-4a65-a22a-ca8ec3371229"
        },
        "item": {
          "id": "40e37f8e-3380-4fab-a61b-6a3c5d4d1bfb",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "c65e256e-d510-4816-ac55-42b90b240242",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 477,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "d9808dec-bd08-49b8-be7c-36251237d21e",
        "cursor": {
          "ref": "5d1d6c4b-c122-4719-9167-1c0751cbdde1",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4230c097-dac5-4d2a-9ef8-4daab2e97f36"
        },
        "item": {
          "id": "d9808dec-bd08-49b8-be7c-36251237d21e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "0ce40342-c3c0-44a1-8886-5b4fb1d62eec",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 494,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "0d1cb6c8-a2d2-4a1c-bbef-77949aa06662",
        "cursor": {
          "ref": "34ab8e7a-c38a-4ff1-8a40-ba8d0c411fc7",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2bb8725b-cfc5-4ad1-9871-cafc17f42390"
        },
        "item": {
          "id": "0d1cb6c8-a2d2-4a1c-bbef-77949aa06662",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "065cbfc7-1e4b-411e-8062-62238c33703a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 503,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "d6610a6e-30af-404e-9be7-2219e10f930a",
        "cursor": {
          "ref": "8a328475-0ae1-4cce-9d3b-f7cc342f3dd7",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "1de36777-2391-4672-9763-14adda600718"
        },
        "item": {
          "id": "d6610a6e-30af-404e-9be7-2219e10f930a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2c9f53bd-2f2c-4440-a742-64a855999950",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 482,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "8e123d77-8ada-4e0e-b440-8ab846784b39",
        "cursor": {
          "ref": "5c9ba1f5-a879-4b8d-9e7b-11810536dd98",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b02504ae-fc53-47c0-b820-1432ade25e5d"
        },
        "item": {
          "id": "8e123d77-8ada-4e0e-b440-8ab846784b39",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "bd43ec1e-e679-48ec-80a7-23fc19c58076",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 499,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "62c0cc9c-913b-4ed3-a0c1-a6f8883ebd70",
        "cursor": {
          "ref": "4493c338-70df-45e5-b0d3-5722db5a8007",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "022998a4-07ff-41cb-9af0-a792897adc32"
        },
        "item": {
          "id": "62c0cc9c-913b-4ed3-a0c1-a6f8883ebd70",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2f500176-5fc3-4773-8d64-349001501a76",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 495,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "749266ac-34c0-46be-8ec5-115d0ed13ba8",
        "cursor": {
          "ref": "6a873e81-e320-4e97-abec-30a0be29c9e2",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "5dd7ac52-905b-4763-a75a-6a0154a4bce8"
        },
        "item": {
          "id": "749266ac-34c0-46be-8ec5-115d0ed13ba8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "71605089-6923-481a-8c7b-0dc7a06b853f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 489,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "d3897174-1136-488c-91dd-c25c83e88b65",
        "cursor": {
          "ref": "40574798-a70e-4218-ac3d-2ae2c4bdd620",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a225df55-fa20-4de7-be3a-9231b39b13b3"
        },
        "item": {
          "id": "d3897174-1136-488c-91dd-c25c83e88b65",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "988abf1c-cc60-4d40-a013-346cc5f245c1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 508,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "7c59098e-aaba-4ddd-8664-b5765a635b1a",
        "cursor": {
          "ref": "7a6242c1-fda6-402c-ae4b-464767ca6d4b",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4616e157-3dc6-4a29-bfca-c8db56ce0f53"
        },
        "item": {
          "id": "7c59098e-aaba-4ddd-8664-b5765a635b1a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "93a0be79-7b56-471f-abb1-b087ed1e742f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 491,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "77cf2eaa-38b5-46f6-baf1-ad92f84891e4",
        "cursor": {
          "ref": "302e6e22-a7f1-4e8a-8415-6547dd51445c",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ca376d4e-10b5-40e1-afe1-413cebc667f1"
        },
        "item": {
          "id": "77cf2eaa-38b5-46f6-baf1-ad92f84891e4",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "49f54081-7894-413f-95b8-84e0914894a5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 514,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "1eee4571-6a99-46f1-a4c0-cda6b27b5dad",
        "cursor": {
          "ref": "d5475aeb-1f2a-4a26-b5a0-24e5f53d0867",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a308dd17-00a8-42a0-b128-9ba8a8d51bb4"
        },
        "item": {
          "id": "1eee4571-6a99-46f1-a4c0-cda6b27b5dad",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6359914d-b8db-479c-a43d-915d03453045",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 473,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "64f64a34-b752-401b-a1e8-4e018d994640",
        "cursor": {
          "ref": "3e2b704f-1655-4e9d-91c5-28133a2617f8",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ff24f7a7-f3f3-4383-866c-c2b6c54c8f99"
        },
        "item": {
          "id": "64f64a34-b752-401b-a1e8-4e018d994640",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0aab5ce4-3962-4c95-a215-039fbd9bfbed",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 472,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "2b2b767e-9846-41c3-9635-3776d1bdaead",
        "cursor": {
          "ref": "a48d79d5-7917-4665-b00b-dc8d3c608591",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8132672e-8d61-4591-ab79-8eabf90c78a8"
        },
        "item": {
          "id": "2b2b767e-9846-41c3-9635-3776d1bdaead",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "dfa1ff7a-1a68-472b-9237-9d94eccffb5c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 476,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "0af5bf94-d1fb-4209-bfa9-337c279a658e",
        "cursor": {
          "ref": "33ab0132-cbd1-49a8-adb7-edb94fe99918",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a5e37237-63aa-4fa5-9f35-f7feec2fad49"
        },
        "item": {
          "id": "0af5bf94-d1fb-4209-bfa9-337c279a658e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "fd4463a1-1859-403b-9a77-4845c8976614",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 481,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "c19464e6-5a4a-446d-93c4-29edebce375e",
        "cursor": {
          "ref": "ea6f1ab2-8bff-472d-ac84-a79d20ae0191",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "12003578-fcbc-4f36-949e-9b440da82c9e"
        },
        "item": {
          "id": "c19464e6-5a4a-446d-93c4-29edebce375e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "18417bed-05d4-423f-9d90-f851792e4740",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 489,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "425d9cd1-8399-487f-b24a-090323c59c21",
        "cursor": {
          "ref": "7c336d3b-2a71-4bd0-969c-b2f01232a70a",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8791d6bc-25a0-4fc0-b180-887ca0ee662c"
        },
        "item": {
          "id": "425d9cd1-8399-487f-b24a-090323c59c21",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3e3d27af-5eda-4065-bfe0-48ce187e333b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 483,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "e5afae56-2d1a-4a2d-ad79-a82de20d76bf",
        "cursor": {
          "ref": "e4efdef2-c541-45d3-a2b8-887cd4f6ce52",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "80490812-9dc0-42f7-a5df-618cd45f3eac"
        },
        "item": {
          "id": "e5afae56-2d1a-4a2d-ad79-a82de20d76bf",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "2f16a9c9-db7a-48e7-90f1-35668634b156",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 485,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "4a3c7cd4-dcb7-468d-84af-3ff75db42296",
        "cursor": {
          "ref": "98bc757f-a683-427b-924e-b6834aacafd7",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c059cfb4-db80-4027-a15b-96b1d54ce482"
        },
        "item": {
          "id": "4a3c7cd4-dcb7-468d-84af-3ff75db42296",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "55854a64-8009-4559-bf93-b4f83d17ab4f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 492,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "00f5a750-b8ce-4144-9216-a918794dd866",
        "cursor": {
          "ref": "8c5deb52-a2ca-4ea1-9c08-aa0839c2f4c3",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "834954c5-1950-4c52-be1c-e859de91eb62"
        },
        "item": {
          "id": "00f5a750-b8ce-4144-9216-a918794dd866",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0719f2be-83e3-49b7-a264-fab8521cbb5a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 483,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "6924298f-a18c-4bdf-beab-9c3e7c5bbfd6",
        "cursor": {
          "ref": "3644171e-bef2-4cd1-9f20-1e759e36ceb3",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0b7e5033-26e8-4510-b8c4-1360e020b5bc"
        },
        "item": {
          "id": "6924298f-a18c-4bdf-beab-9c3e7c5bbfd6",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "aeafbbef-b054-4fb0-8b36-320678a6618f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 486,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "4c6d692e-a2a3-4861-911f-eac5265d69ba",
        "cursor": {
          "ref": "40420c4f-962c-4506-ada6-5acbbd636af6",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d85496d1-3a88-4b57-a4d2-ab980261ec5e"
        },
        "item": {
          "id": "4c6d692e-a2a3-4861-911f-eac5265d69ba",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "51105def-fca4-494e-876f-6c0aaa6bb51c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 501,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "29affbcc-0cbb-47a4-a4a0-d1e73c34821a",
        "cursor": {
          "ref": "a70e6a79-145a-4c80-bbec-5ba69c01f15c",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "abc703c4-a9a7-4cff-b4e2-c1445e97c382"
        },
        "item": {
          "id": "29affbcc-0cbb-47a4-a4a0-d1e73c34821a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9fa75df8-39e5-4860-9375-83ba3fb08f4e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 482,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "59302390-0e00-4d48-8408-f6bbba140e50",
        "cursor": {
          "ref": "c567f61a-9d53-4b2b-8bb4-68ee86d8a055",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e54d7ff1-2073-4209-ba32-699cf5c953b6"
        },
        "item": {
          "id": "59302390-0e00-4d48-8408-f6bbba140e50",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "15946527-6191-4251-ab03-eb137eb01da3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 485,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "6f5d2f9b-33ef-4d9d-95e1-edc71b7d131d",
        "cursor": {
          "ref": "0e584ae4-7874-4c25-8761-b937707d7c7b",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b3763d2a-790c-4cad-91ac-d732408bf735"
        },
        "item": {
          "id": "6f5d2f9b-33ef-4d9d-95e1-edc71b7d131d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "7d6108e3-7f8c-4d76-8e50-acc9e0e27cba",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 486,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "efa464d7-58bf-49c0-bc1a-6f5df723279c",
        "cursor": {
          "ref": "89382fa7-dbfc-4b83-889a-e04d74ad2e29",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "cf506e19-1d9a-4370-bde2-59e914912a93"
        },
        "item": {
          "id": "efa464d7-58bf-49c0-bc1a-6f5df723279c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9c02b640-8285-41a5-abc3-8bb9cb9c6372",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 510,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "073b9348-65f9-43c7-b939-eb92fd49b032",
        "cursor": {
          "ref": "48b7fc33-56e6-43a3-b123-809758804ca9",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c8fd32f5-31d0-4bac-8de8-ad9ca46ec816"
        },
        "item": {
          "id": "073b9348-65f9-43c7-b939-eb92fd49b032",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c077b998-00ca-4f68-87f1-7fad33698053",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 484,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "ef62f741-434c-4979-ba62-08a2b15aef13",
        "cursor": {
          "ref": "cf6a3350-07c8-498b-b3fa-b82289d600bd",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3e6ebd35-5978-48fc-b89e-2412b1e4a4ac"
        },
        "item": {
          "id": "ef62f741-434c-4979-ba62-08a2b15aef13",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d1205035-682a-49e3-9cec-1d7e9c786fb8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 480,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "f1c474c9-4739-4eaa-8ae1-e5370afe3155",
        "cursor": {
          "ref": "8e5e47b2-0ac6-4288-96d0-742a4f158dc2",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4511049b-6056-4ac7-adf8-aea345dcbc6c"
        },
        "item": {
          "id": "f1c474c9-4739-4eaa-8ae1-e5370afe3155",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "45708571-284f-4df3-8aa7-1cf5c1c4e073",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 477,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "5fd08905-60eb-4aa2-8a45-43c6c2a15b8c",
        "cursor": {
          "ref": "1564bec9-3acb-4595-b271-dc6a1bb1d4ad",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f789e24c-51d9-4c81-847a-ad34e40cc2d6"
        },
        "item": {
          "id": "5fd08905-60eb-4aa2-8a45-43c6c2a15b8c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b4053c84-43be-40c4-b3da-1a931469dbff",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 502,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "407945cb-635b-4311-8bd7-bd6c9f18a67c",
        "cursor": {
          "ref": "c69feb55-4b90-4b95-9ef5-c4191063b6c6",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f08a48a6-16b5-4edc-8105-92adc1dd85b6"
        },
        "item": {
          "id": "407945cb-635b-4311-8bd7-bd6c9f18a67c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7ffedd86-58c8-489d-b816-63a53b9569a4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 505,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "d408934e-a58d-4751-b9ee-6f597d4ba025",
        "cursor": {
          "ref": "c596be2d-0f15-4eb5-9206-452bbc612057",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "1025fe7e-5a5c-45b6-bc1b-e753ffb42ee0"
        },
        "item": {
          "id": "d408934e-a58d-4751-b9ee-6f597d4ba025",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7b969491-bf14-4055-9ec4-71f00b34f966",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 500,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "d7c070eb-cd1a-43bf-a7fd-d1f2ce59b595",
        "cursor": {
          "ref": "a222492a-83b8-4952-9d46-3bfc5a5ab544",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "90f925c7-7949-41bb-9917-e9ba44cef08d"
        },
        "item": {
          "id": "d7c070eb-cd1a-43bf-a7fd-d1f2ce59b595",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "96f33b83-79e0-49d6-a22e-9cd313be0a5e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 474,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "8c82336d-a99f-4adc-89e9-6485ef253e9c",
        "cursor": {
          "ref": "eb7739e8-c52e-4da7-97c9-5725d9816324",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "40850878-6eaa-45ae-a309-866417dd7f8e"
        },
        "item": {
          "id": "8c82336d-a99f-4adc-89e9-6485ef253e9c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "82b5e1aa-be77-4c8e-9ec8-8837f192f135",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 499,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "9abc89d2-11a0-44d4-9bdf-a56992376caa",
        "cursor": {
          "ref": "2016df65-fcf6-47ae-9ee5-f46800b0179b",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0ef66849-4628-4398-bb2c-6ea99454c921"
        },
        "item": {
          "id": "9abc89d2-11a0-44d4-9bdf-a56992376caa",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8b00f512-813e-4dbb-a10a-fe3dbfe906f5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 490,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "d7614276-552d-4126-bc62-5c2c9755277d",
        "cursor": {
          "ref": "8bc1d8e1-475f-4f90-ba9a-06004bfd03a0",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5f779c5e-d8db-4a82-b8e9-85af9bd24fa4"
        },
        "item": {
          "id": "d7614276-552d-4126-bc62-5c2c9755277d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "5866a10b-32a1-4f7b-8452-ec94aca613f4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 477,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "9e690bca-d437-46ed-9335-5ebee1691cb7",
        "cursor": {
          "ref": "7078abf1-488a-46af-a56d-ca5c1f96c545",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0a75ea83-43de-4866-ad7f-29fe3c04ae48"
        },
        "item": {
          "id": "9e690bca-d437-46ed-9335-5ebee1691cb7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f25509db-0b4d-45eb-93fd-b011d393be86",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 487,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "ae1fb513-f162-4555-be55-49cd8c119975",
        "cursor": {
          "ref": "75ee68d5-6bbc-4db4-a242-b2686fb8f75f",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "22df75f2-9849-48d7-9c2b-7dfb941a813c"
        },
        "item": {
          "id": "ae1fb513-f162-4555-be55-49cd8c119975",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a9e57fa1-6ee2-4cfc-9bf4-3ef413997a6b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 487,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "f33e98cb-5701-43da-9447-935bfe7913e9",
        "cursor": {
          "ref": "07e3f3aa-0dd5-49dc-b12b-9b1beb3d7ae7",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8ab08b25-41aa-4895-84df-8148a01405cd"
        },
        "item": {
          "id": "f33e98cb-5701-43da-9447-935bfe7913e9",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5520d00e-522b-4bc9-bc53-71983fb3b5e2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 498,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "0fd2ca15-5f7c-44d6-8873-3abea98ccd4e",
        "cursor": {
          "ref": "1e59462f-b1c1-4486-8e40-8a737a9e2d4d",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2296d8a6-7f81-486f-8472-ae6eef9e57e6"
        },
        "item": {
          "id": "0fd2ca15-5f7c-44d6-8873-3abea98ccd4e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "76f8e502-25ea-4614-9ad0-21d76d4f11e2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 474,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "b840017d-2c6b-4f78-8371-58503069e4a7",
        "cursor": {
          "ref": "663384d4-cf09-4553-8540-916cbf2b4ea8",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "81dd79ec-ee03-4157-a23d-f254d8fa6ec3"
        },
        "item": {
          "id": "b840017d-2c6b-4f78-8371-58503069e4a7",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c5896809-0689-481c-86b0-0fa4e6ba3bcd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 477,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "b34ae1f8-7f12-4118-bd9c-16f4c3cf7bb1",
        "cursor": {
          "ref": "cf7ab369-675b-40b5-aafe-fe09d97c5546",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2ba458a1-a1f9-40ac-82cc-32b4a72f083a"
        },
        "item": {
          "id": "b34ae1f8-7f12-4118-bd9c-16f4c3cf7bb1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "beb868e0-381a-4a4f-9a48-ee90aff91eb1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 480,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "06af7f49-6cb9-48e2-a9e9-7280c8f758a9",
        "cursor": {
          "ref": "3fa2d3cd-9ba2-4fab-87da-fd61551683e9",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d11e1bad-181c-4d8d-8eed-44f34b42bb6f"
        },
        "item": {
          "id": "06af7f49-6cb9-48e2-a9e9-7280c8f758a9",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "db24745c-b2b8-429e-b066-66083f29ac78",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 485,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "e12fbba9-b169-40a1-8764-7c5cedb6f07e",
        "cursor": {
          "ref": "bea825ab-4c96-4dbf-97c0-556f7f500ad6",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0e23c6c1-00d8-4b23-bc90-e3427678326a"
        },
        "item": {
          "id": "e12fbba9-b169-40a1-8764-7c5cedb6f07e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8b71dc7e-213b-4bd0-b691-f8779760a788",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 486,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "9485d13b-f501-4f9b-8dff-0e312ba42bac",
        "cursor": {
          "ref": "ff05e3d9-aadd-4093-8bde-83a13ff1e3a9",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f01d6f87-4488-4580-ab5e-41684bb62dab"
        },
        "item": {
          "id": "9485d13b-f501-4f9b-8dff-0e312ba42bac",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "264f69ea-4790-41c7-bcfc-cf417722b132",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 485,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "3baa2abd-690c-4bd7-a470-0584f261c141",
        "cursor": {
          "ref": "f55bebc3-5d1c-4d28-9541-f00df3f4cd72",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "45929f53-cd8e-40f6-ba3d-4d1dfa59040e"
        },
        "item": {
          "id": "3baa2abd-690c-4bd7-a470-0584f261c141",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ab4409d2-b503-493e-9374-be9f77639bc1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 507,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "02d8d4b6-e2a7-4545-bfca-a64bfd6a2b21",
        "cursor": {
          "ref": "5d7c553e-8fe1-4376-ad4a-507d7f1ef642",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4a90aa21-a4e4-4c07-8652-0e2c114d867b"
        },
        "item": {
          "id": "02d8d4b6-e2a7-4545-bfca-a64bfd6a2b21",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e0d6ad68-4eb6-42a9-80ee-332438aaf72c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 505,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "9a3a27d6-2f98-48b6-b6dd-f163a8ad8f47",
        "cursor": {
          "ref": "af962256-4934-4565-8866-ad65e2df76ce",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "90922710-3251-4f00-9d1b-bcb4b36f4999"
        },
        "item": {
          "id": "9a3a27d6-2f98-48b6-b6dd-f163a8ad8f47",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3c67d5e9-4909-41d6-ac23-62305c0ef68a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 496,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "0dd9f49b-89d3-4962-b797-c6c5cbd5db87",
        "cursor": {
          "ref": "e530dd22-0293-410e-9236-72236aa250a6",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2fd8fb0a-7ca4-41c6-a55e-7928c5042db5"
        },
        "item": {
          "id": "0dd9f49b-89d3-4962-b797-c6c5cbd5db87",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "df804186-ad75-44d4-b872-067c3b3566d9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 488,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "dad66f0e-567d-4efc-8881-37eaf8da9e8f",
        "cursor": {
          "ref": "e8140b02-9348-4208-bd78-b8a32cbadacf",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "910b7477-9fab-410e-a56d-ae973655096c"
        },
        "item": {
          "id": "dad66f0e-567d-4efc-8881-37eaf8da9e8f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "297e8b3b-d9a4-4e5f-86c3-9d1ff036ff5e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 512,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "bdd4cb87-a773-4164-ad32-b7ffbe3d6099",
        "cursor": {
          "ref": "3147cd6a-a0a6-457f-a1f4-209c5208b504",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "0607cd66-e458-4310-ab1d-1b8780b84e8e"
        },
        "item": {
          "id": "bdd4cb87-a773-4164-ad32-b7ffbe3d6099",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "79e1ed51-10af-488b-94aa-1809b3445695",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 491,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "0bc9529c-2d96-4ce2-9568-b7a84e336539",
        "cursor": {
          "ref": "2cc0d6b0-373e-4199-b270-ac03a700fc3a",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "92d9f4ec-2b66-47f3-ab37-768d61f8d527"
        },
        "item": {
          "id": "0bc9529c-2d96-4ce2-9568-b7a84e336539",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "51c9b711-90dc-4d59-bbff-9d79f5b6546b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 487,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "6cf00f78-4409-4397-ad34-5c7fe6a9dff4",
        "cursor": {
          "ref": "db60136e-52f5-416b-8a6c-a9ab20ae276e",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3b127440-3803-4bfe-b98b-c710d86bcc0e"
        },
        "item": {
          "id": "6cf00f78-4409-4397-ad34-5c7fe6a9dff4",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "0e909526-f118-48be-a4e4-35614f5fd4fa",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 501,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "8fc1fe56-df01-4a1e-a4a1-a3d21f8b5b94",
        "cursor": {
          "ref": "27f44065-fc33-4e99-b618-1b2a0e0f8b9a",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "85dd8759-c3d1-4c1f-8b03-e005bbaedcd3"
        },
        "item": {
          "id": "8fc1fe56-df01-4a1e-a4a1-a3d21f8b5b94",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "354ba556-c2cf-45ea-a665-20db9abeb853",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 500,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "5172d98b-f481-43f3-bba5-f9c7332ccc49",
        "cursor": {
          "ref": "8bd636a6-74e4-4335-8bfd-b7384cca3293",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "afef3290-e7f1-422d-9e04-8631a22ab6d5"
        },
        "item": {
          "id": "5172d98b-f481-43f3-bba5-f9c7332ccc49",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9d530e53-67ad-4672-8dd8-a9d967f28c13",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 522,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "4c684033-1ae8-4e1a-b83a-f178ce2a13c0",
        "cursor": {
          "ref": "0934c1ee-0253-4f6b-b753-64c57b08581d",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "c4a186f2-129c-4f17-8b4f-64f0d40634e0"
        },
        "item": {
          "id": "4c684033-1ae8-4e1a-b83a-f178ce2a13c0",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4bf07a3e-6b37-450f-9de5-07ce8535d100",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 483,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "c8215a02-fcea-43e3-b774-97bbf1f18f3b",
        "cursor": {
          "ref": "0d6e327c-2c1c-49d2-b241-0fb68d799300",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c352b337-8e57-49b6-bbc0-79a17ea0d13f"
        },
        "item": {
          "id": "c8215a02-fcea-43e3-b774-97bbf1f18f3b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1a8c57bc-2f2b-43c7-aecc-5f0d8d2656c0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 491,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "6286cc31-87b9-4978-b27e-818906ad82e4",
        "cursor": {
          "ref": "5206a272-9749-4f79-ac2d-8c3a6a545f71",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b29d9342-2c1c-4fb0-999b-86d5e44f3d43"
        },
        "item": {
          "id": "6286cc31-87b9-4978-b27e-818906ad82e4",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "142b45e8-8ffc-4089-a83b-c46d004f0a3c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 491,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "3208089d-67a2-410e-9313-5ea56aee5f22",
        "cursor": {
          "ref": "4a13c751-e599-44eb-b6b5-c6c24f128146",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7e0a44e2-8fca-4892-ae8f-d3f6c169721a"
        },
        "item": {
          "id": "3208089d-67a2-410e-9313-5ea56aee5f22",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "fc9c1d0a-459a-4f44-b873-c87269faa89c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 510,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "eac23d32-97bc-42a9-9d67-9d57b8564123",
        "cursor": {
          "ref": "2401d178-67be-472a-89c7-e703ff61b256",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a885ea38-26f1-447e-8cf1-4ba8c3de402d"
        },
        "item": {
          "id": "eac23d32-97bc-42a9-9d67-9d57b8564123",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e97d9603-dc42-4f59-bdc3-1c68a4212cce",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 510,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "323fcda1-d054-4435-8a5f-83e903b2e70b",
        "cursor": {
          "ref": "7cd2abf7-ab48-4739-8797-28387540af03",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "36c02623-612e-4160-9257-1844d48be452"
        },
        "item": {
          "id": "323fcda1-d054-4435-8a5f-83e903b2e70b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0db816dd-4fa7-40ca-ad71-b0507c9990e7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 496,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "b6e33b54-ef06-4a71-88c8-21abf8d98273",
        "cursor": {
          "ref": "287d0574-f7b0-46d8-a27c-4404b29a7280",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "350c3184-ff32-4a96-97ec-8bb020ed6ada"
        },
        "item": {
          "id": "b6e33b54-ef06-4a71-88c8-21abf8d98273",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9ecef68a-84ef-48a7-8326-ab466146a19c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 491,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "2b00c316-aa59-4767-b028-26921d10b63f",
        "cursor": {
          "ref": "10ce201e-128c-4149-85f2-a8a57a479f98",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "53db1ec9-4005-4556-bd95-d807b7e503c4"
        },
        "item": {
          "id": "2b00c316-aa59-4767-b028-26921d10b63f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2ccd4d5b-2359-44d1-9eca-d60d9174bcf2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 514,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "eaca54c4-93e6-4d99-9263-68919ffaac20",
        "cursor": {
          "ref": "79a3278e-f34c-4062-a32d-091474dbdd69",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4959b06b-1456-4342-81bd-23135e979763"
        },
        "item": {
          "id": "eaca54c4-93e6-4d99-9263-68919ffaac20",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "505d2f31-296f-4a49-8d07-2a178ccb410d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 493,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "84d54d34-76ea-4816-a5f5-ee7ddc1eb45e",
        "cursor": {
          "ref": "2299e41a-a9d2-44d1-b839-9ccc465bbaf7",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8e75e8a7-f3a4-4c4f-a151-c0dd58beda47"
        },
        "item": {
          "id": "84d54d34-76ea-4816-a5f5-ee7ddc1eb45e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "267b8c7a-6828-4f7a-af53-4a97ff6f6514",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 507,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "07151730-d24a-433e-b4ca-6a0d3956bcda",
        "cursor": {
          "ref": "e3baf37d-c48d-4bec-912a-5f8b402edf1f",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "aac1da48-6a09-4353-8ffc-b2a67cab4981"
        },
        "item": {
          "id": "07151730-d24a-433e-b4ca-6a0d3956bcda",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "4c63feea-f45c-4af3-a0b8-f23485adffad",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 483,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "2859221f-7bb0-4b9e-8191-c55e1992b899",
        "cursor": {
          "ref": "edeab04c-8e5f-4cf5-9077-ecd48de1ca06",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "14c561e9-07ef-4b66-bdb7-c9c3d970632b"
        },
        "item": {
          "id": "2859221f-7bb0-4b9e-8191-c55e1992b899",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8b2bbed3-3b07-4530-a192-375f163f5078",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 507,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "5696e39d-4998-4995-9eb4-e2e46e802d83",
        "cursor": {
          "ref": "b0081f29-9d62-40eb-a18e-d66154331371",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "4c327755-2d3b-4a92-83d5-0beb84059469"
        },
        "item": {
          "id": "5696e39d-4998-4995-9eb4-e2e46e802d83",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d04694a5-64b1-45a1-bc41-8b891bf4dacc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 494,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "9f053668-8043-41e1-8f28-3e7f30499918",
        "cursor": {
          "ref": "ebe6074e-df0c-4a7b-86e7-6e34256be9d9",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "04673ef3-ef12-4cd7-be35-6750f2f9bc5f"
        },
        "item": {
          "id": "9f053668-8043-41e1-8f28-3e7f30499918",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "aae4b50b-1443-4875-a5f1-ecfc776326b9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 480,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "8ec1948c-1931-46de-9e0f-958a786827ff",
        "cursor": {
          "ref": "3be88bfc-19bb-4c3e-8179-9175d8f24aaf",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4f8f3a02-c5f9-4782-a896-a8856d7a385b"
        },
        "item": {
          "id": "8ec1948c-1931-46de-9e0f-958a786827ff",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8486943f-5809-41c4-a424-bcc1fe25ec7e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 490,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "f9d12ee8-00b9-43b3-a78d-1e96bc26b1e4",
        "cursor": {
          "ref": "ed2ea0ec-a5b1-4844-b600-a0e49c3fcb1e",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "0edb2571-5c22-46c8-b62e-4fb4bc6c5ba7"
        },
        "item": {
          "id": "f9d12ee8-00b9-43b3-a78d-1e96bc26b1e4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "0b11fbea-b259-4961-be85-1f82f947757d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 496,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "ec9a9194-6710-4abe-98a5-870b82dde395",
        "cursor": {
          "ref": "ac28eafc-d28e-4618-bfa5-3fe07cdc0c41",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ea3e4008-e39f-486b-a777-bf0d896bcd38"
        },
        "item": {
          "id": "ec9a9194-6710-4abe-98a5-870b82dde395",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b845ac61-d7bf-48fb-9617-0d29ca532b0d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 488,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "9dfd7504-0c1b-4717-990f-177ccd6ba1c5",
        "cursor": {
          "ref": "93bfc677-43a7-4575-be4a-09536c15cf26",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "53e970de-b17b-4ed7-af1b-d8c1c5ae1a8a"
        },
        "item": {
          "id": "9dfd7504-0c1b-4717-990f-177ccd6ba1c5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "55e6612a-698c-4209-8847-bd933098d19f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 483,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "b045558c-366c-4a99-85cd-8fa5ee1ff6fb",
        "cursor": {
          "ref": "29b5151a-2d9b-4da7-b29d-0bb3d533de73",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ae0ef8ba-1a62-4ac5-93fe-9c0a45330db8"
        },
        "item": {
          "id": "b045558c-366c-4a99-85cd-8fa5ee1ff6fb",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3721a82a-ab03-44ab-9ce9-a418e78065ec",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 499,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "22fde48d-487f-4250-b23b-6f51ac9f962c",
        "cursor": {
          "ref": "a4c28250-4f39-48fd-8605-4d5f45368ed9",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4c65d8d0-60db-4c3c-8841-83b4b9d92cd4"
        },
        "item": {
          "id": "22fde48d-487f-4250-b23b-6f51ac9f962c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "5c1337ce-228d-4776-bf28-e52035305e5d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 510,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "ae06ef4e-08cf-46ae-9b1c-912d197c06d2",
        "cursor": {
          "ref": "3fff1367-d36f-4fe2-b498-6e3b8977b417",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9b030004-4072-4a26-8ca7-43d3c534847d"
        },
        "item": {
          "id": "ae06ef4e-08cf-46ae-9b1c-912d197c06d2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "94441a25-44ad-4e76-8233-1073c1b34d4f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 494,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "f32ecd31-bc14-438b-b967-0868611d8336",
        "cursor": {
          "ref": "380da4ed-371a-412c-a6d4-a77db6c0a517",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "5205a468-9680-4247-9a7b-e1a20fc906a0"
        },
        "item": {
          "id": "f32ecd31-bc14-438b-b967-0868611d8336",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ff8a494f-7841-46bc-8b52-79505a4a3ef0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 482,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "373c7a98-5c60-447d-92a6-019050b964fc",
        "cursor": {
          "ref": "f2fe3d51-2c95-491f-bdd2-60ce0665aefa",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d0621880-2f9f-41c0-9344-9a01e60ad23a"
        },
        "item": {
          "id": "373c7a98-5c60-447d-92a6-019050b964fc",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7546a6be-0725-40b1-808e-4142e945b1a0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 482,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "204a923e-a547-47e7-aea7-5ca5ffea8dd1",
        "cursor": {
          "ref": "90901ce7-8fac-48d5-a7f2-7573f16192b6",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "74a3326b-be57-47b9-8d34-0c4f849fb633"
        },
        "item": {
          "id": "204a923e-a547-47e7-aea7-5ca5ffea8dd1",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "68b30897-c0bd-43ec-8aa9-950204901e3f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 490,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "8484a953-bb4a-444b-9bbb-fadad5a04e18",
        "cursor": {
          "ref": "6af7abf8-21f0-43ca-a5b2-ced1962e69db",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "9aae00a6-90dc-4dfc-90be-340c7928fbf2"
        },
        "item": {
          "id": "8484a953-bb4a-444b-9bbb-fadad5a04e18",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4183df53-78d1-4ab3-aa45-436c2864f005",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 482,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "9921777b-5349-47c0-8aa6-21746384a2ee",
        "cursor": {
          "ref": "84e319be-32ad-48b6-9d48-2f98c2cbe7c4",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5dfdf5e9-6f53-40ea-8db1-3caaa8ba0acf"
        },
        "item": {
          "id": "9921777b-5349-47c0-8aa6-21746384a2ee",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8a01bb73-8f62-4b66-9299-12eaa4c636ca",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 559,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "a437949f-2bf1-48b8-92fe-23691ee22bc7",
        "cursor": {
          "ref": "bced84ac-5333-42ad-a20b-e9d3e2e2a12a",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "51575208-86ff-4c87-baca-9b535199397a"
        },
        "item": {
          "id": "a437949f-2bf1-48b8-92fe-23691ee22bc7",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "91e62b5b-f400-4739-8005-02361dfc1bff",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 497,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "17b99721-141e-47b1-b2c4-25d3f651b7b1",
        "cursor": {
          "ref": "ff5de185-44e7-42ed-80de-2bf9c65cb4c3",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "34b71c74-fd84-4bfe-a113-0088a21c211d"
        },
        "item": {
          "id": "17b99721-141e-47b1-b2c4-25d3f651b7b1",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7647d083-10b2-4aff-ba31-87d05eac35cb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 497,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "d980194a-d322-4143-82d5-0e2c71005a3e",
        "cursor": {
          "ref": "614d5fca-4762-48c5-a6d8-63834cc6ac14",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "fbcb3947-439e-4b85-b67e-259a2e09bf2e"
        },
        "item": {
          "id": "d980194a-d322-4143-82d5-0e2c71005a3e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "13b56cec-8e88-4f2e-bc95-af47fa39f33e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 483,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "c88d80a4-ad00-425c-a6d6-b4ec14c1aac5",
        "cursor": {
          "ref": "d22a9214-340b-4d40-ab32-008fa231997e",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "feeb01a4-b523-48d7-a31c-6e9ee4d5abbe"
        },
        "item": {
          "id": "c88d80a4-ad00-425c-a6d6-b4ec14c1aac5",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e756f09c-427c-4331-96c5-8135cfadd936",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 504,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "e74c4182-182c-4cb8-8556-d280d01ba6ab",
        "cursor": {
          "ref": "620ffdca-54d5-49ee-adeb-fe2abb48af4f",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d19273ea-5055-487b-ae44-8e7adf4754dd"
        },
        "item": {
          "id": "e74c4182-182c-4cb8-8556-d280d01ba6ab",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6027696b-efb9-45a9-b180-7320de78a9cc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 545,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "304c7f3c-055d-483b-96ca-e8622f616ff7",
        "cursor": {
          "ref": "a82bc5a4-7063-448b-bbe8-e8e4adda4391",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4846e1d1-3cde-431b-977f-6e62d9ca8955"
        },
        "item": {
          "id": "304c7f3c-055d-483b-96ca-e8622f616ff7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "72e5c04a-c79a-46e0-bec8-0daffc442213",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 503,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "fd08c3d2-eae3-4bbc-8ee8-8bf1bac55448",
        "cursor": {
          "ref": "4af9ae07-531e-4a82-a81e-4932440cecba",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "394dec31-caa2-48c8-ba69-dce95ce30dd5"
        },
        "item": {
          "id": "fd08c3d2-eae3-4bbc-8ee8-8bf1bac55448",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3359684a-c6f1-4ecf-ba53-90888e864dfc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 483,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "9812bf1a-6df2-4404-84ae-4cddb5d8f03c",
        "cursor": {
          "ref": "a79f83f7-63c5-4d2c-b492-4eed345eb236",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b4792099-15c6-486f-8584-153761d43efb"
        },
        "item": {
          "id": "9812bf1a-6df2-4404-84ae-4cddb5d8f03c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "fd0daa8b-d522-4203-9b41-eaa458de6646",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 499,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "e12a564e-1431-49c6-9b99-0f1d04ef1daf",
        "cursor": {
          "ref": "55eb7866-ef27-4a43-ba3d-107f4c667a39",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c7ba6722-7023-494f-b77a-3e3d0d17edc9"
        },
        "item": {
          "id": "e12a564e-1431-49c6-9b99-0f1d04ef1daf",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f4f030b5-19d7-4c1c-8b52-44c81ea9dcc7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 476,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "ab25013f-8feb-42b8-8b25-b6e22fdad16a",
        "cursor": {
          "ref": "307e5809-d96f-4948-8863-dbc103ab0409",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9eec9f81-8698-47fe-95d4-bcd9c7b79d41"
        },
        "item": {
          "id": "ab25013f-8feb-42b8-8b25-b6e22fdad16a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f6c424a9-3cbd-4b18-a897-5027075295df",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 503,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "43addf6e-0a74-4bdb-aed5-c43e605cf9de",
        "cursor": {
          "ref": "434cf1ac-d645-4fac-8f8a-1710cc52d67e",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "58c6e698-b349-46ad-a017-70e8e6108ceb"
        },
        "item": {
          "id": "43addf6e-0a74-4bdb-aed5-c43e605cf9de",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "5033ffeb-2250-48c2-b737-aa4732ffd4b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc8eba24-2a47-4c77-a92f-7fa434b964b1",
        "cursor": {
          "ref": "7061b973-f912-4092-9906-524daf9a784c",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4dac7bea-636c-4800-a809-215360bd7c66"
        },
        "item": {
          "id": "cc8eba24-2a47-4c77-a92f-7fa434b964b1",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "73aab359-ec91-46eb-8cbb-3af5447bd38a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 507,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:239)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:239)"
            }
          }
        ]
      },
      {
        "id": "d95638ce-9d72-4ee1-a5aa-03cf065c0c2f",
        "cursor": {
          "ref": "f6086a9c-1538-4816-9963-4f23006ddc75",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6dcb249b-d6a7-49e2-b0e7-6a22abae1874"
        },
        "item": {
          "id": "d95638ce-9d72-4ee1-a5aa-03cf065c0c2f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "1c204d9a-a52b-4390-b950-afd4e6585722",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 477,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:240)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:240)"
            }
          }
        ]
      },
      {
        "id": "298f24b8-49e8-49f1-9ecf-3013e409c861",
        "cursor": {
          "ref": "06a59df8-f612-467b-a9c0-370f4a94baa7",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "71798050-50a2-4e6f-a230-5088d5932717"
        },
        "item": {
          "id": "298f24b8-49e8-49f1-9ecf-3013e409c861",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "57a50186-caa5-494b-be4d-eb3b3e75028a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 508,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:241)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:241)"
            }
          }
        ]
      },
      {
        "id": "868fc590-615b-4727-9a10-34c2dfbbeadc",
        "cursor": {
          "ref": "b9d341e8-5669-4d8b-91e2-cf4863b3f965",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e348afb8-0fa8-48d9-93da-f3abd59f6242"
        },
        "item": {
          "id": "868fc590-615b-4727-9a10-34c2dfbbeadc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "28a83318-c1c3-40c8-846e-8019a67e555e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "868fc590-615b-4727-9a10-34c2dfbbeadc",
        "cursor": {
          "ref": "b9d341e8-5669-4d8b-91e2-cf4863b3f965",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e348afb8-0fa8-48d9-93da-f3abd59f6242"
        },
        "item": {
          "id": "868fc590-615b-4727-9a10-34c2dfbbeadc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "28a83318-c1c3-40c8-846e-8019a67e555e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "271bc69d-2f7b-46cf-bfe1-57def1f87702",
        "cursor": {
          "ref": "8c437908-ed38-4c5e-a6fe-13009a7a6f4e",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f89dd1cf-c889-4d00-abfa-bee84e5cc243"
        },
        "item": {
          "id": "271bc69d-2f7b-46cf-bfe1-57def1f87702",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "00c0f185-6538-4800-a228-36529dfa8ab3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7fcb072-d01b-4f91-bd47-646ae06cca02",
        "cursor": {
          "ref": "4831c17f-f6c1-4098-a437-c2096160ccbf",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c917c208-ee90-4529-8a3c-738628d0537c"
        },
        "item": {
          "id": "f7fcb072-d01b-4f91-bd47-646ae06cca02",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5ae7e546-6fb2-450d-96ae-2347ea2be833",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}