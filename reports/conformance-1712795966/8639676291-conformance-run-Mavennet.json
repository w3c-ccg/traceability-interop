{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "01108a69-8b18-4b1c-a163-0575cefb59c2",
        "name": "Clear Cache",
        "item": [
          {
            "id": "09ec5431-42c8-40b8-a83f-83320980e6a9",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "339e986d-7e44-41c6-9fb1-c90608d682cc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e55d74cc-1326-433a-8144-8e6a99db25e1"
                }
              }
            ]
          },
          {
            "id": "8faa55d2-7318-4828-86fd-847a7b3561d2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cdd1a2c9-deee-4684-bf3e-c8b94d349ec9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c955ea2c-7913-4a83-b939-a00890340182"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "feae5c73-da35-4a36-ae66-8fe39f4a3939",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6fa25ab1-cf06-462c-93b0-6882bb4a3a13",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1a8da1f5-99f3-4a99-9160-f1764def9cf1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "12ec3f86-9a38-46c3-b79c-4eca7ef65595",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b04bf753-7104-478f-af49-a1acfefc1505"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0f29ed65-e792-4e46-a6ac-8933cde572a9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1249d260-a420-4f59-aaf0-73176b8b2427"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "810e94a3-6eea-4dcf-bfeb-a4d449f584aa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e354530e-20f9-49da-9abd-5ad6e37ab69c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f0c9e649-2649-4fb0-946b-2ebf317aea33",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b442fb53-f06d-4f79-af00-3da2677478e8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb27766e-7c58-46ce-b10e-fa478770162a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b24c4d30-c60b-4070-8392-cacf1d2dc154"
            }
          }
        ]
      },
      {
        "id": "b24eba21-fa21-4ac4-8347-7b91d7e6ec8a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "af5c2569-0699-442e-a7e0-742258ee386a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "54aea582-2597-4e15-ba66-f2db346424de",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f7231b8a-0a9e-46c8-931b-bd12d84cbfc8",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6370e3eb-6dc6-4b5f-8e38-b76c2969fc10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "825deb1f-d1c3-48b2-ae4a-75b36fcf4954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c02b4f-91d4-4e87-baac-af477a10e368",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f56e156-af52-45bd-b1c8-f72055a9d3e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "044b4ef6-4f50-45cc-9ac9-78ddf9aba32e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f97d07e-df84-42b8-8fe7-1b082ba7675d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5673477-f455-4cbd-af07-6a06128ca8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08faf9a4-7ea3-43f7-99c9-77ca8f6b2cf3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e3b95631-be65-4e37-a519-ba427ba35399",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "50d5d0a6-957a-4e79-8589-5dc430dda856",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b454dbed-6fca-4f3f-bfb7-e39af276aace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "50407ec9-f70a-4742-b42d-725927456943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06793c34-6f2a-40e8-95f2-cb656c2f6391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d4b2053-3232-4d0c-96e9-98a2eb72ab3f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b928fddd-36d7-4037-b888-e397a6c1b5b5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "06c69d1b-0d6d-43e8-965b-3bab5547667f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f90c5806-deb7-4502-bf72-42f127768899",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "8a9a8b02-7a05-4035-9509-afc23b6e453e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0ca610af-45a8-4f20-b9fa-83f737f56bbb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "4b1c9d47-fd43-48dc-9a58-b1ef7eb73ac8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9a86cdd2-21bc-4165-a814-32af873af7b2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c0cb76d7-b82c-4fc8-a5eb-ca89ac77c961"
            }
          }
        ]
      },
      {
        "id": "77942c47-28ce-43ec-a458-46ffd17d6f94",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "62141bdf-01bb-4232-a830-8ad472577cff",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f65720d1-f293-4525-8968-deb51b5c2080",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c014b497-3c0e-4ed7-87bf-0c4840d2359c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83064e99-cdcc-44cd-b6d3-d44459c64dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "439b41cc-735c-4c1b-80a3-dc2bc89d95f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227642ab-c59e-44e7-9a2e-e483b3578bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8bb4d86d-c873-4c32-8649-7f596d8c6621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e48df9-9294-4185-83c5-719b33358b8a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09114b1-012d-4804-8770-069a90b2ddb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f25a85aa-eed8-4cfc-bebf-bacf96644821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780b3c8e-292e-4740-ac94-e284e5a8ed52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ccd7220c-3aee-4943-96ca-db1031e41c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd510ba-ed52-4a9e-aaf9-d8c109ab6fac",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c1e943-78b6-4fc2-a6f8-38675c532de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6bec37c-c1af-45ff-8a2a-c4e4d0ceafa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "646b99ad-193e-4998-9cef-449cf415a4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d75fa13-6257-4df3-920e-07913eed116e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf92d229-94ec-41c6-ae00-0961cacc56d4",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f23844c8-a7b1-47f4-b63c-ef0eca7b36c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "476b55a9-dddd-49a8-95c3-44f57e774d15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "461d3bfe-0c2e-44ec-b148-6ec72ac491dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9a65892-8c68-4cdc-afe6-44aaa1cc0117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b65b71fb-c860-4fe5-9557-16ec8a0e03ae",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d986c73-aab9-4cc3-a01a-3b9894a8cdb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a4a160-375c-46dd-9688-96915db4ed5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c021e5b-aea9-4505-9bbb-5d590de4f83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d8e2c40-488b-4ffc-a05a-aa124ff5b31a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2511b323-8fc2-4032-87bc-ed4741ab4003",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3523c38-83c3-4767-9a0b-c3b8c7ac4ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2361a044-8d8d-4ea9-9cd0-11a8c67a1153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e479e9-b749-427e-99ea-c0dab687f6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ace191f1-1f1b-46d1-925a-ec13ecd7cafd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58827979-f185-45da-94df-f49347efacd0",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7670fd76-5fe7-46d4-95da-537ad9b03152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a30c0723-eaaf-479b-8609-842140fd5dc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938e6413-9a2c-4f03-a6ba-a344704e5171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ff487f8-4a14-44a9-ad11-4ccfd43b92d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cbd42fa-ae79-4542-bcf5-114d1a6d6286",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a690904b-d654-49fa-b640-a66b9f139c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9551a483-37eb-48d8-b333-b9b4b3a194a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f53bd8-b89f-4f8e-81e7-8efd472d556c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b543b92-ce92-4e8f-9553-ec84fc431ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba259fb3-96ed-4447-89dc-4f08f8fcf17f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c6837b-0c7f-4bb3-91ff-bfd38731158b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b2e2e46-e0d9-4852-869d-ea5f47073072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce56a96-e1c7-4167-9e37-777df51a4bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f41732e9-fa5b-4abb-8795-64f545690875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29d48ae-c535-4bd7-b1eb-ccc6877cdd00",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "238a27d6-f978-414d-9928-76ce23376cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6767351d-c529-41d1-b35a-69d6c4362bd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65490cb0-d35f-4b10-ab10-f2c18d1256b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f81832f-571c-439d-93cb-43feb3a19609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae50dd0-83da-46e1-8943-96b735f88b13",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc387a4e-d9e8-4329-8fbb-89bf5051c0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6e1902f-b67f-4064-b172-9ecb59cdfb15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82de1329-3fd5-4b6a-873f-1dbdb03a3b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "beabbf08-f8e3-4045-b4c6-dd64cc9ab2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8818f9c6-270b-4a04-bea5-1d57467a6d02",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9343a3-9675-4100-9fe1-2940098cbc68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c850e21-cd87-4a9c-a7f1-beab957812e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2df51b9-6096-4cd7-9c62-a04cfc92ea19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1540901-a264-49eb-b69e-c1bef06c8dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65753ba1-3a20-45a3-bb4d-91c23a6ae75c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf24456-3d8f-4797-aaba-d0b4e76799cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b1d9e6a-fec1-498f-a91f-bff4c4b958b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeafd553-9b5f-456d-8911-545308041a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99b7eabd-b7ec-4d15-bafe-83f3e5594485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76fc5ab6-1d47-4e0d-96bc-9597b4b4d6bd",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27bd58f1-f608-4f21-9195-2b3c6111fe68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f56a16b-dec2-4475-bcb6-fd1077f147d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b282471-68a1-4d6b-b954-b4e09373487a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5cba7f1d-51be-4159-97f5-7f7c0dac46be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6276ce42-dd8d-4d79-974f-cf24a8397563",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "060684ef-5c2b-46b7-9291-7405c53e064a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2120f0a3-38a1-41f9-9146-19e23b8a131b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763320b1-825b-47f3-8534-141fd72f235c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d86728c2-28fa-4c5a-9c0f-054195370372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34ee9ec-b0e2-4780-9872-474df44c20a8",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "204314b2-9b0a-4568-881f-404162ae74ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "129df023-d5a9-4f6b-9e19-fd734cc98bdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd613296-7108-4fbd-8b86-4cd759d97442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ded150c-b0b4-4aee-9eee-ba8fbafda74a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7e9e6e-7521-4c5b-b473-b9ddadf374a9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b965d066-0069-434b-baf8-acf89aaadc57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c2d06b2-3726-40ac-ab04-02471df52e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2e7e10-515d-4d78-8f27-b3b6f318c248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "924d2537-ebdc-4eb8-a297-390676121097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f99d079-e52b-419c-aaa0-6dc713eed528",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8d9278-0805-4a99-8fd9-1ba7336517c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d95a205-159c-4db2-93e0-142777787dea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed795b9-fec6-4226-9d20-fad1764c238b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5452b2c4-2a44-48be-8b21-860e2ac82811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c2599ff-f96e-46ac-88f7-1a243e571caf",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ca9bc2-1ee3-4e1c-b715-94b4ec2268aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5130df3-00d6-4dd3-bed0-e2d2aedfe753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5275e9cd-f9d4-46d1-9540-41dcc5f25709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4aca37dc-3784-4927-a971-6df0b65927f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f07a7d-d2f0-4f72-bcc3-54ab0f22dce7",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e880904d-84ea-42cc-b588-0b6381bd5af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0df6f91d-cc2f-4276-b4fb-ca20aeefe4df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f309ea25-6708-43bd-a63f-165511acaeff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6df2eae3-b52f-47e7-bbcd-0f1ca81f8ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b8b062d-9aeb-4653-a5de-ee505f52f648",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7afb9e43-5842-45a1-9f88-f4498e812372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f33eec43-acab-45b8-a519-f2770c303146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90fb2d6-f7cf-47e1-a580-dce9ceb3a3f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2062b1b-09f1-4d8c-984a-e9b330aacd99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f9643e-b6ef-45dc-8812-704a8b446469",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce142e9-094c-41f0-8761-a69409ebbfe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e4199c9-c3b5-4228-8052-ba16fcb9ee0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca17aa90-090d-4239-aa66-762cafff336e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ec3b8d8-fd86-4356-be19-d041405cb861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0802433f-63f6-4308-99e3-34d35ba7525f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efebb4d1-bf14-449a-8b18-bb6349b781ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68743c29-4df5-41ac-819d-264f39ebec5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96d5e79-1927-461d-b83f-2413e00cf667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ce2e4a35-26d0-4d44-bd85-89f53dc67641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6a1146-57de-4dd8-b66e-478c80a50825",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5220849-b2c6-4585-9a06-666323b22145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91cf671d-a2bb-4d75-9c13-e0cd86731bd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd56ea7-65ca-48f1-82cb-1662e924a1f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6adfd90-627a-4c38-afcf-368d69aa501a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2146d8f1-5764-4fc4-98ad-bf101fa18df3",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b06431-c0ba-4e0f-95a8-8743c7dbe804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c75a893-96a9-4b7a-bd14-3a9b271a78e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76eee665-cbca-4701-b623-708f0e5278d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "30413ba0-1a8c-417b-88e3-ebdaef9954a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8b23e6-8769-4bf2-8168-e446142addc1",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3015b040-cfd8-4afc-ad31-28b51fc116a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "994e5f6c-9bd3-4238-b725-566514dd7bcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897f89c1-6eba-43fc-815f-e2aa3bc81c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "83067ea1-1cf8-46cb-b557-da4806527f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abda6c9c-b03c-4d96-b579-8277801ee488",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a384d6c-76fc-4968-ba1e-5a3fbeccde27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "286c2de2-999e-44e4-b88e-99bd5b19d13a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a81443d7-0985-44bc-8ed2-65a84ffb1ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "80a3b4bd-acfa-4dc2-8de5-d9c6ae55174a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21740e99-b65c-45b4-87bb-0b5600c800bb",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "785bcb23-a0ec-45d6-8e8f-76bfc03e9fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67840216-f179-4b08-858d-3784e88a91c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ac162c-f12d-4793-8a28-8c9a01c51f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c5eccb6-4164-49be-a967-96b7b4bf3fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "876f117c-ef40-445f-a80e-a0f37c3d786c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a15389-1e30-4ad9-8575-9a53410fc3f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72e46a6f-f430-4031-8e09-ba014867a544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1074c10f-4946-4def-bc85-4e95f37228c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "31aec31b-049a-4109-af57-4514a1e264eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa97c770-a762-4ef8-86b5-54a2cc0fc347",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8673e90-da95-4d22-b1b4-7e5f6aa0e90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f2a25c3-80c8-436f-a812-2b11ab72a2de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7bb3784-6167-4a21-b458-0bb1f4d51699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2bbf142-db72-4c67-963f-b13fe6c667fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd01642-d12e-49c6-90fe-4dc7a275eb50",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92643f26-399b-4402-8891-2c3d7f346836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "325a6118-dcaf-4e2c-8d3a-874a3bb58285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b53e9a-1b0b-4be2-903a-3f3fac19a31c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "08c63f8c-66f5-43d4-9601-a8149d9b7653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27bd67dc-ee96-4a28-bf24-9cfae3e4806b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37347d4b-ac3e-43c1-80e0-e53203be3bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9775910-c043-4204-a9d4-d4358c48bb52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f45cc0f7-ef0d-4f6a-9c54-7a132a4c556a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a1b4b41-c5a4-48a2-86e1-c63dab40e329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09dfb4d5-19e2-4b38-9f0f-aa9a52b1794d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d9cccf-c4d6-47af-806b-185d0869fb5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d26110-f025-42b8-bf05-bdbec91f6ad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96e71c0-283b-4507-b9b8-2a7fa02a6d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e66edd2e-0fb2-43de-9822-cd60f387b2a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a667447-cc41-49a1-9249-eac936f2ff18",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d445e6-fabb-480a-a9b7-38217cb0b583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a759b4e2-5506-41cd-99ca-b669cc17e52b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f966208-45f2-4c58-8585-8299e5eb4975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "058d1258-a183-40f6-90ce-132cbf9f75dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4dfe65f-70bb-4a49-a181-dd0433793fee",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf7fb27-347f-4ad1-b78d-f5546f9b29d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f4c206a-5b79-4f7f-a715-5acf2d7c4575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594a8f99-bf7f-457c-830d-ad00bb5a8157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a2025741-6706-44fb-914f-48fe1c716428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f69fef0-647f-4d67-9afb-b5c33d8f5d3d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a47a4423-f9f3-4680-92bd-e5e765d44081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e24ccbcd-1bbe-47e2-b5eb-9c56bf5e1e68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b13e7a8-9fc1-4608-8e83-9becec2dae88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "35b13f53-fb94-485a-a2c6-7974ecd2dd88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2872b895-0871-40b5-8ef4-fda9b2782115",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9fcbdde-a107-4285-b436-b2cb911e01ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3fd660e-6c2d-4ee9-a8e8-3dc8a9054414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e78a18a5-cf87-4335-9581-ce038b2e6f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ceef26ce-2d04-49c6-b375-500c87306bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91cda601-51aa-44f1-bd22-c00d64cb5746",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1729efbd-a59e-4dc0-802f-aa2049ddb163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f36c0e00-bd20-4b26-b7ab-2a5db58b3465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e33890-31d3-4c89-ae36-7971c845d19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebf890b2-c261-464a-9554-0450af6cb241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3a5534-87f3-49a3-ab55-e3fc77c8a9c1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bfd6234-75cf-48ad-80ef-e345c0ae275b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4df46e0-c2b4-4e7b-86a0-cff6c9b6a8b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb519ec-859c-4adc-8a47-b3777ae4a418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2276eefa-d8cb-42f1-9f99-5f155dd6cbea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "189123af-7c86-4c9d-96c8-25df0c00d515",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "337c1130-1ff9-4a17-b957-b9e451283c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4f28329-335f-4290-8592-f6ddcf9fa76b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f218dd7-5607-430e-afc6-928633c15ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "48646b8d-cc0d-4045-bfa2-577bd3fae7e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d171b8-4524-475f-a205-2fe3e9672b1f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9640a930-b80d-40ce-abd0-02b648d8a554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adc2c89c-2400-430c-be21-87ab05b951ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16210bc-356e-47ee-b37e-0485fa937695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9407b32-c42e-4382-bd34-59769c75ca29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4b28b0-4dde-45e2-a590-8201120145f4",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66b62d6-180c-48d2-ad93-0fb2b960c99b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "735d01ca-b670-4554-bae7-7149ca084d55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef71fcb-7a6f-4fb3-8a64-f9a5067cdd48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8beec2ac-ab4c-46f7-a921-de44d6ad0dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93de5037-ea85-420c-b3c9-f6d62bfa8c00",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd65225-cc84-40b8-bc21-8459dffa8a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b585ec36-7627-4223-8fbd-96b8efe2360e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d3675a-b37d-496e-a076-b384b8e30a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "22887bab-fc24-4236-8f87-113865553652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3d435a-9dda-4e05-99af-494b1c4d8d5a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f065bca6-237f-40c6-ab7e-32a40f420b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ca0844c-9aec-4d77-a947-fa90812c0543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef2ad8db-95d2-44cd-9e36-446b0c63f073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "70d6d134-6a36-4d79-857d-d8964cdd18fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dede528-cf1a-4ec2-a974-9558d841c427",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4bb282-7f3a-4f2e-9dd3-5a5eda68996c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdc4fcc5-1876-4c21-923b-b4afae1a08a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ec36c7-4e26-4038-afe7-0063e9753f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bfa9940-4301-4ae3-9534-3d859d4919e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f06bc1-bcbe-4b58-a923-411545ffbef1",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdbfad05-b356-4ecb-bfe7-85ecd6689139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c86564a-54d6-4782-b215-5fd3a483ed6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf211e7-5f1a-45af-b0ae-e8429c154da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "66abe45a-eb50-48a7-b730-16f05c5991bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a65d0580-f361-4536-8e05-39ff17e24684",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebea7f27-c8d0-43ef-801f-b3e6bd4d7159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14f28650-7fca-46d0-b820-8028621c1b62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4695ab1-d0c3-4ba8-990a-f9d147c76c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "19308d61-2ff5-4268-8fbd-5404961627ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82812d7a-f0f4-45f2-8868-1dbf7a3700a7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da717bf-71ff-4d56-ae50-7ec9bf680384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0af44105-86b0-4421-b517-ab145cac675c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb27e6c4-b6e7-4a73-be3e-4965cfc90916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "50cb04c6-ead5-4e15-877e-1f9e96210df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49947cb9-a618-4fa3-a3d7-c65cd61c0778",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c34340f-2dd8-4748-a370-76bd883f96e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9081b27e-c4f0-46e2-ae8f-d2affa843728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92cdb1dd-810b-40d5-be5f-1becc9dac537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a239a45d-7260-4f2f-b343-f09bfc99fa0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbff5aa8-4f3d-4253-860d-d5d9b1b1caf6",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8f0e41-203b-4521-a4f7-c2bb58452297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b717244c-ffd3-4767-a316-6bf789673d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3d27f6-786e-4217-9317-d53cba21fa37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "471a64f3-e6b2-459b-8366-52c2fb67f904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5174cea7-3f87-46e4-b772-a333392fabe0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f546016-6ebf-4b66-abe7-5a8249947d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9954ef6-bcd2-41ff-8038-ff18f70e5222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0245bb-79d0-4ed3-93cb-48035ad81943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "66c2e3a7-4594-4018-ab72-f9a58a7ada1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e65204-20f3-4674-bbf2-15324529709f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "799d1593-55af-4156-a9d2-2f6692343f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba9810e-bebb-4b91-9e33-4db11e1191af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a4be64-19ec-48e3-9f0a-f64d5a89a966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a0115d9-27e3-4400-91de-a5e1e1049ef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e09f6c-9082-42ba-a823-8928dfcb0aa2",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf94196-3557-4b33-8454-e793c7859f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f58c4bee-b22e-45c7-b06c-7717dd732889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9b52d4-4c57-4ee7-8953-fc7b0195de58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6799d446-05ee-4e83-8603-c8acb0f3a8dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edfe93c2-ab1e-4de8-93a7-5827c9880da3",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33fd232-eeb7-44b0-b9e0-9b28d753c444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a86a7be5-ed9b-4e0d-bbfc-7582d6b1ff8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6737bbc-b999-4c74-9365-426ea72eb47e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3056068e-1c07-4b2e-82ac-5522efef7063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee40106-36fc-4bf9-b1da-d18e88b9b0aa",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce54880c-e348-4e81-b5a4-cab7da52f8f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92fd509a-4d65-4795-88a9-b64bbb038f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d19f71-4abf-4e00-a602-2eb92f611abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38dd5278-02d9-4e37-ab04-21903ae0a64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8899ebce-3719-44b6-826a-caca2717bb1d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d90c4d-4785-4138-9269-2c2b86ba6557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56d43956-528e-4365-9361-940b4d0c7fe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a94b0856-b997-4cfa-b830-b9b3160db6d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4d3a6ba6-4109-4efc-afa7-511e831533a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe998a6f-cd20-4a0c-a863-b38b057f1c24",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c8d79f3-f91c-40a0-bd3b-ef792e4b11bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08e769fd-34b8-47c8-a9f3-852db9d1cc68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf6e638-0bdb-4ffe-b0d8-368e112e4914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d11dcc5-3c64-4dce-8d46-d3db93467ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1dab5a-a02d-4d6e-a13a-db1ba01ebd41",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9fbfe5-95d3-4f35-a439-78c5849f1bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d16c0577-2745-4a1d-bb60-1164eb0cc151"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "660560ba-05e6-469a-8614-2b85ebbfedae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ac5b043-6dc5-432f-afe3-cf9aa9ea1beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27ad4c53-a18a-47ba-a929-c8793a3f7b26",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b062328-7f01-4ea4-b238-92e4fdb6b63d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "513cdc8f-8c1b-4c6b-b996-0a26cd35812a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b96d6d-0b63-42d2-832d-46f9c187c83f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "430156c4-61d8-4dde-b519-33311f18661f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db9985a-318c-422e-83d0-aec302bfb601",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b943bc52-787f-4415-b84e-773e6bfe2241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "688975df-da3e-4237-990d-9b14de43aed2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee6a977-4dcc-40ad-8916-d3c8f282cd2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5243698d-794c-49b3-9f90-4e90dd8b0d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a646c198-4f46-4acc-8849-581bd33a6b40",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50ef6a3-861b-4f51-b000-23608ebecd71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7015eee5-37f0-4c23-89ad-c6eeb2ea546b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8403a50-f9d9-45e2-ad99-e49a8dfd9767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d32201b-85b1-4c78-a193-273af71170aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3075f0d4-4979-4da6-bc3f-3c32d15e8a78",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63407bf6-4b8d-464f-beb1-a729d7789b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19ba4257-ce9c-4f5d-98d8-dcce5f6bb006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed9496f-af55-4b37-9316-c0957dbe776c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d31e648f-f641-41a1-8df0-a75b373c7456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ffcb36f-9963-45b4-bc8f-731261eeca8d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "626f6864-5879-40b7-bbfb-23482ca40bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8d2a4e5-c773-451d-933f-5640055b799b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597110af-1987-4c16-b244-64223e0f80a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "74238d62-e19a-4faa-a163-e0fd0a0abc58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf0165f-d751-448a-9789-8c85cc6cc36a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f0f1c33-f07d-49d7-af01-4c3a9e395b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "512de380-1295-45a5-9549-3a81344c7eb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d12cc8-df1a-4b07-9611-69e0a71ae2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7705ebf5-1658-4846-8832-ef2d517332de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f333348-cec9-49cc-8631-44011619fce5",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8d61ed-10c7-4af8-b75a-9172c66eebcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f33d375-8f9b-4940-a3f2-2bb2dd4ee407"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c3b477c-a13d-4dec-8a63-1af453b63660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "170e4d6f-e50b-4491-aa38-1bb8f5f87698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0888d9f-eb3b-4feb-b9d9-f1c9009e2da6",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3f1be3-7fef-4371-affe-5eae530e170f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf9fef03-f853-448f-8fdb-cbaa1b9df8f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ba43e2-9d54-4f4e-9bd8-d0ac099b33e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae36608b-5ed8-47b4-870a-839ea67b94b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e3626b-474e-4d70-8a56-2e90dc6dae3c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d66a2d1-3402-4dfe-810a-8efaefd6b9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d8b5b57-162c-407e-9ccb-811c7cf07ddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad90d1f-fa3f-43db-a686-4ba061473eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "167c9c89-f62a-404e-b0ef-f878359b0607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e10a092-79b1-40eb-876d-de289a577784",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ec36ff7-1920-4679-92a8-d3934a5e8bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bc5510b-3ad2-41ee-a735-9dbfaeb80dd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29d1116-a50c-4996-a654-864228c8724c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb2aab20-56a3-4bb1-8442-a86d4fe46e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c49e396-1bf1-4987-ab01-348aab2c067a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a5955ba-3b1b-4d89-9c89-8f7e017d74de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a9d8aa2-938a-4905-bb42-6f247792f11c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6288109f-e33b-468f-a404-dd4da6b6419b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "547dd1fd-88dc-42b5-b49a-64cc2ed45d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba60ed3-a14f-4295-ab2a-889e8037219f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "208a2902-188d-4bea-a237-e726fd05f0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "402ae77c-9ca7-416d-8964-c891579be9a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc3e4dc-7a5e-478e-93de-ff3f631e8579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "55081d60-1132-4a5c-8bfa-bbd81834fb69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c672e66d-4e41-4efc-82d4-d0a3aa728158",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f3cf8b-b6c9-4f0a-a578-65ccd21553c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b41c0fc1-a05d-4bde-9d02-6639a0282ee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b1ea9a-af63-4d68-8f3f-52ff2b255834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b925af99-efee-49b3-8a66-a83a7ab1f867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7885f198-5e99-4ed2-8728-7760e87e567d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "831c1d01-d2f2-47dd-8d0c-090a250c1c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae7f4406-2bbc-46c3-8dcc-222e5ab40ffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "016f4fdb-bbb6-4eb0-910e-e205827398e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b448513-9d00-492c-89aa-2e1d3bad49df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44bfe43a-c660-42fd-87e0-f1bf93332de9",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a06ebb-86d0-4fdc-9431-5d27afca34bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7868c734-08c8-4870-bbbc-c85dcc96555e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fba2e9b-b6b5-4c81-95ef-af31b06a2eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "154744b4-e3af-458b-9c18-a5224f58aa54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57078c10-8129-40e8-bf30-95570b72eefd",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da5f6abb-2669-4124-a4f4-3cd4ef50136d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b596a66-0568-444f-82cd-d0ce618751b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63cdd52-4790-4da4-aadf-acb5a9e9886a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3e83aebc-bd7d-4a88-827c-ead00acea8f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b1db687-d135-40a0-abf3-06036559a2fa",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05330449-494a-462c-9e57-52978b209783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87c8301f-7e1b-499d-a0dc-da534bb662ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39518388-8005-4be4-b37f-0d1d4f46f607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f7f5908-f4a7-405c-89c1-37e4358ab150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5053f1a-eca7-411e-9fdd-8fedfcc98730",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d028191-cacc-4114-9c75-b09324034eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d77ce07-9e71-42bb-8326-7cb309ae4593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee85458e-455f-4545-b061-903ec336d100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "db55554e-e48d-4e2b-9703-6ff37abdd60d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33017af6-4120-4015-8988-565e0e375683",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31bb523f-ac9a-4a3c-b50b-aebd58f8edd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46f96bce-9a12-4f71-b9fa-d9a179b3cb40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3520cf5-ed22-4ced-ab1e-87c0c9ac4cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8b6842b-2cd4-4716-a448-2a85e27dcf11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51840451-0642-49fa-b917-29d1119bce4a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c4e2fa-f1ae-412a-a918-234dcd702b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5836e1a0-e707-47f3-b90a-a6614c5c4c6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28685f18-221a-44e7-b183-d4825d89a5f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fe8c867-2503-4976-a5f4-18a7c9bef59c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83faf74e-79d1-4319-9641-315a29705eb9",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bafc3324-d482-47bb-8236-ce87b19da209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e493792-d06c-40ad-bf64-e059b2d961ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcbd4a84-86f1-4517-ad3d-b18f52e4a07a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aebac038-940f-4869-bb70-a7b24ba2b3c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b11458-1cd7-42a7-8d1f-963427893a21",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4c38ff-d705-42ae-9641-01030175c66b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a51cfe3d-4155-4ca4-bb98-3a73cfaaaa84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e30b31-61b1-4f28-bb8b-9f78d0e17145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3b0c9bf5-4c26-4510-bc2e-841c924c9a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345523e0-3e10-4ef5-816a-4cd916b46371",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c6450a-a776-432c-9474-d9f6ff90f2a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35959e8b-59e6-46b9-9096-886cef335563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a10574-15cf-4da6-895b-b871529872c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3ee51cb-dd54-4dbd-a2ed-4e0844892cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56422e11-7835-4198-925c-c9c82b742c72",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7a1d43-8552-4068-b165-b29fc5f47209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "455e5003-d4a3-4f6d-a8b6-c035c4ece98c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14db20b3-e645-4b67-8d91-faf09398356f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bd275df-2560-4178-90e5-46474e83f69f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5696cb-e9df-483f-8c1f-4cf8af97790b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63050cf1-232d-47d7-8e03-db722055c001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "215101b2-a671-4c0c-b425-c3697c928d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997481e5-bd47-490e-b693-7dfc12681a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e8a495d-e609-442b-875d-fdc4149ff2cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc9a5b92-b639-48a2-a0a7-c3c5fe1d1b54",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf56da0-0d0b-4d49-8115-2ff5bd2e8291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d0ff6cf-3fe5-469e-9952-f50ca5892e08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ef5941-c580-4264-aa12-f687f5410cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9031783-bc63-41d3-8ea8-ff4f6d3cece4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df6c14d6-e90c-469d-8577-a78c539a1377",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99390a8-2cc6-4d36-8ecd-eb96ea5d2dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d71fbdf3-0adf-4225-ab76-f0d2d18578ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbda0a5-09b3-466a-ab34-5cbcf0641013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3abdb43f-0add-4433-bba3-4019c25a8ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832d42a1-4942-49b1-a743-66f13cedbc28",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2536823-7bb2-4f52-8cc8-94fed2831a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2565c8b4-4a38-42bb-9426-c3a744ff5e8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b16eb34-c63d-47d4-84a7-d6646905f50f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f49795de-4b92-424f-a513-43b6360b7848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e58cc4c-8ee2-408c-aede-8032b5212591",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8de0ffc-9182-4a03-90f7-fbfab2bfc137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db280b8c-7638-42a5-8a2e-126002d8faa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc308657-d7cd-4e7c-80b6-3a3dce3ef817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a24e5ae-ffe2-42f3-80d4-4eef2188c1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b278a4e-a6ac-4632-ba1b-c40ffce50952",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4611ad-121a-40d2-a84d-b9563f5ee8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "122599c8-d5b7-4aef-8775-757cda4c1d15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1592f73-cda3-40f0-9fb5-1849d5a3fe80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9530f61d-fc5d-42e2-ab90-f07a63788bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca1bed82-c605-4593-afd2-345ced5d0d77",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3843a84-7312-461e-a8bd-c66d51e8768b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d47218d4-8f33-42cd-b0ad-5787edc36fdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e4b3a3-f425-4b73-af72-5d959232a573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "89305baa-6d0d-427d-805e-39038b514b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51bdf760-7a23-4365-a233-73513ab7d9e5",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3f65e9-c2f9-4f7d-9e46-28760d511148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "560f5213-d207-4749-ac93-76b8ec371025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "064f7492-6b87-4195-8697-4bdfc4c21147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e60ad106-6f61-4d3d-86ec-1e93d5f48d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3318ca0-75ab-4658-9038-9e43ee984bac",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3373ddd8-8849-4d4b-9a93-f10d517e6830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7989a78-1c61-4028-bb68-f82ea61dd820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "308f617e-44ff-4763-9aff-267e7f405ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e46ee26-5da4-475b-adeb-540222aed775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e3d642-1b5c-4aae-8df2-4c7825cdb8a7",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f1e78b7-566b-4583-b32d-c6e8e93e73fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f8ad4f8c-6e2f-4040-8626-1e071efb59bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc78fec-fe94-454f-95b5-cac4e0a4fbca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "99cb9b83-10a1-48cd-99d7-581344a905c2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5f16682b-9460-4708-8e8b-b6975f93d89c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3df76ffb-aebe-4e9f-8054-e48fd5b43905",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f511a370-a3b2-4b84-a432-77a8f154bb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "357b1303-bb41-4be6-98b0-1e9e10fb3d04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f04a179-7020-4fa4-8823-9454ab1ae3e6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18fe8b59-4fef-41b5-8348-84062f673322"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "caddc05d-883a-4b7c-adf2-14dc8779d5c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bbf6a93d-830c-4a31-9be2-f6210d2120fa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0932e66f-9839-48b6-92e8-c46e57cc2ad4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7eb6f48-26a3-46c7-960a-f4229f31b6cd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d4ddef86-5435-4b60-94a7-066e75389d5c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "85318ba0-cd2c-41c1-9921-44a8dc11fcd9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bc789e56-a365-46f8-ad18-cdeac99a1ec1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1d2ebc33-24aa-4190-88d8-ac9dfebd27e0"
                }
              }
            ]
          },
          {
            "id": "c7f65ccc-1da3-40a9-823c-c908acdc15f4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c3238c97-7cca-4b78-9c75-c7a3c815fc42",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "c7d66509-15f7-4618-b891-475724c8b9f2",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a28758-2ff0-44dc-80a7-d0f12aa8f326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d41a82ed-ccb3-44ff-8a52-b2446d964a5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6496618-eeee-4d7a-8ce9-2f44958bca99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7f0fd02-46c7-48cd-9359-2f8f81f0e52a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5d23c197-8dcb-483f-8428-f900c39d2cf2",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ec616c8-436f-4a4b-b875-fa2b6cd61909",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c49a58ad-9a2f-4510-aba3-54f9a5d58434"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e25c4c01-ae58-4491-89d5-99e108eb2171",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "586da545-8e43-4a5b-9b8c-cab08f82b6b1"
                    }
                  }
                ]
              },
              {
                "id": "c14509e9-982c-4a6d-896f-78db6eda9634",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1170b3e-e505-4437-a167-3ac2f65e84d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d342b031-c54d-4bb8-b17b-8a8008893a7e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "487d2ae9-2a46-42f0-ae7e-5854ed536416",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3cf5f42f-a577-4181-8c67-904d0c929213"
                    }
                  }
                ]
              },
              {
                "id": "93051574-674f-4472-ade4-dce6a2f0a4a2",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d490168-4d57-42a7-88ce-5e5861cf539e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "361a8c85-ef5d-4959-9256-f18f81154ac2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9503fb24-599d-4089-8a9d-a7a7291a0bc8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "069ebaf9-11b9-442f-8941-1165217b9e37"
                    }
                  }
                ]
              },
              {
                "id": "46b87b46-baff-4fde-978f-4cdc0fd79c09",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44d20dce-598f-45f1-b201-2e7a112d5905",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f7391833-ec06-409b-8f95-60e0fc0b07dc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c245cd0d-8c7c-4516-9733-6dd1881afea7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0b8ac7d7-8ddc-4fc4-88fd-08571b4d8fd7"
                    }
                  }
                ]
              },
              {
                "id": "6a26fec9-f0f7-4f80-9c03-afa43a31e5e8",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9207fd5c-aa0f-4b14-a876-590b1bc9aaa9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da1b565b-984c-47ef-b515-e18a570c01db"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd6e638e-ffe1-4e42-ad73-ee026ebe273c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "69ab1b65-4033-407a-9111-ee0202017b20"
                    }
                  }
                ]
              },
              {
                "id": "5abd5209-dad9-4431-a779-6a16f2d6421f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00c0d0d3-7a73-4ff6-80ee-110476c4b4f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0cf68956-6c9f-4e3c-858e-d7902238a57e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95955ff0-d210-45a2-866e-2ae672a1bcd8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5235e2af-c3cc-45df-9c27-df19ccd7157b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2d5b7565-2ed9-450a-aec8-239f92296d10",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "08649fb9-ce91-4b54-85af-d24fd32c74a6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "64b8a43c-0a55-4ad2-9cd9-4b4564b3acf1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b1f92997-dd10-4916-b91b-54ca1fc15327"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "535d423f-e2c5-4309-b336-37734a018a8b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "47a4fa87-ada1-4fe4-903a-38580f60680d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e43efd23-d387-49e5-ba2a-49ed3e27055c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f7ad711e-53ae-477a-a905-70527d0ebb42"
            }
          }
        ]
      },
      {
        "id": "61a5879b-e830-4014-bf7e-a25238674622",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7e455a64-f0de-4242-9588-d78a5fd3946e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ccff6fcb-26f1-4044-a09f-6a28d274f129",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2a422fe2-ae82-45b1-9a42-ee0d067e2d25",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8caf26-cad0-41c4-830b-8c44769c1aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7b52bac-76f6-4024-af36-9a6f65820732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2efff60a-6b2c-4ebd-aba5-e6b3903d60af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "09ff3593-087c-4a33-8db8-0a3504363c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b9cf3de-40b5-4f40-a7f4-4a8f7daa495b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8295288-f4e9-4a89-9c4c-12a934d86886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e0894f6-bc86-4efa-8b3d-78c197a5669e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ffcd2e3-103e-4077-87eb-36b7c1bfcabc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a559a93-5cc7-4376-8660-317a924c27a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef197931-d210-4f55-9e6b-ff3eec459e7f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7991cda3-e1e3-4637-b690-f10c26341d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a5621cd-7407-4399-aff3-39898751c3ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5522d995-13d6-41f5-a072-d91ff97ecb03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "21b689ee-a169-49ad-bbc0-406aa022e3a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e92abf7-f0ee-4433-98b7-e3760e57effb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "468f36ee-f783-440c-b951-2546968f00ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c655d36-e66e-426e-adb8-16c2c744646a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce29e2a4-dbeb-4298-aad2-84a2a4002e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "81f3d08b-9564-4c25-b9ce-f90af7340a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2cf9c9-64bd-4513-a2fb-9e630924730d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0e4950a-f557-4f3a-a80a-d1d6e2dab450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa9d1e72-1f27-4297-b53b-d39f7d18cc34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e396ca-89eb-4f70-b442-fcce77d91630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9041999-0d98-4c62-8ff1-65294ff54891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d4e57f-c81f-4163-8588-4e43f3774bab",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d38302-2bed-44cd-8558-f7f9fcdf3764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bce9cbd-b98d-44c9-a77b-c721de22b8a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b0ebbbd-7843-4f20-becf-32aacd85aa0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "99999519-f4a1-4943-81e0-716d018e3ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb2d570-89cd-4b59-b085-400d14978082",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb7ea69-48e9-40de-b701-dacbd92cbb48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50e227ed-c854-4947-92e8-e1a6bf7e6cd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50e290f-ff20-426d-81b4-df3767498cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "078b0a10-2b04-4857-8839-5a12f605c8c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc0f5048-1f20-49f8-8d47-c4b7f2e08c2a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64884ac2-d3ad-4772-823c-5daf63cf24e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e805a73d-8338-448f-9fbc-12b36d53d8f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e695cda5-ce63-4869-89be-ffeef3e790db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aba30a63-a27c-4b80-8845-874d983a4da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81386638-dbd5-46d8-9fd6-5ef3f885a10c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14fdcf7-dd58-4f8f-9156-8f771984b563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4695c2c2-1a2c-4096-b7d6-5cec7fc6aecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07724e0-bf95-4a57-ba5c-d6856ffaa49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f5e562b-a60e-48c9-a88a-a8c347067516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51bd8e5-5c11-44a2-a30d-ea0aaf939d26",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7200e963-dce8-4a7b-a9b5-361295a0fe4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55a8d36d-f1d8-4678-a7c6-2070a300e71d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4583679d-ba99-431d-b60f-f0f385fe768c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "19fefa5d-c031-48a7-9051-b0982ccd70d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c764c077-9a87-4cfc-9474-2475a37f96e7",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f1e5a2-4405-4525-b453-4ccdee8827d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30fd4e9b-bee5-409a-8f74-744e64d4cc11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a69d800-e65b-47df-9ff4-d9b79b5f72f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5d5e8ed7-856e-4c98-aa1e-5902318d2836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc209f4f-0042-4b84-bfa3-8cbb19e07542",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d9ffae-fc6e-44ab-84fc-e801eabf6bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69c62c62-739d-41d7-8c66-bcc55f7bafe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17784594-665f-4477-8d37-c5ff1d7906a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0214f07c-4409-4154-b4b6-8964df7e7cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e23559-9b19-410a-a120-f05a78e7556b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b20dc7-0b41-42e1-b4ec-6f3338bdf817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e31b4947-54a1-4cd8-8166-ffcdb964fb14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d689233-239c-4fc4-b6bc-2e75769beb70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e89246d1-bf44-4eb4-b6de-9a6ea451d1b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5e7be5-fbcc-43a2-baa7-02e6af1d4e29",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea81329-2d8d-468b-93f4-08355f3d4381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b25f091-4165-4e43-9f31-0da0c5a8360f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0192f36b-6a3c-4f2a-9a4a-753de2714139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fb89657-ccef-4487-8dc6-5f269e0730c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315349cb-8ccd-4579-bf0e-7d1ba88fbcdd",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e74354-dfa0-4c20-9e4c-305ee1f135ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e7a0385-fd04-402a-b669-52e03cb2b477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234a9751-b1bf-4071-99a3-484666ec7ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "219ed442-295f-4707-a529-481c3e0ba9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faac573a-fb39-4ad4-938a-21449b660a89",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81d9280-738c-422d-88fa-e70a7a3c9c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f91bdd5b-6a8a-4a42-a40b-9c36807739cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44e3143-6e59-4c30-a13b-d4c27365b196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4579afc-e5d8-4b94-8083-bbfb32642a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c8bc7f-240e-439d-aa6e-53dd2324a1ac",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69097ae-16d6-43f1-a463-a4c6a81fbb4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeaebfc0-bf90-4989-b5ed-7a8393cd718d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "699ddf8c-a670-4ca1-8e56-44809a492ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c00a54d0-644a-4192-84b7-9f7ea30b349f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7033b393-d160-4a41-9f58-37dbf9291e1d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6031030d-2165-4ef2-939d-adfc49e8b30e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5323f2d4-c289-42da-b880-d9357a384165"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58ac303-da5e-4d7e-adf0-b23f1e3b5eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecf65019-8460-4673-9528-8ee7213f43b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185d02ab-1011-4ec7-81a8-b1174e7344ca",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba114f23-0228-40f4-8dc8-a39a0c5bcd13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e06e0f84-50fa-499a-8773-c3df09ddfd98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2bb8184-2c11-4801-b8c4-fd00230ce26d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6051f793-cc18-48a9-9034-df95d5598b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3f9fc8f-db60-45be-8a9f-d76169feea92",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38cee006-d671-4efe-99b2-117827829de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acb2386c-25b5-4e07-9399-06f740334fcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c0421e-3df6-4f6d-a0de-d9c29e47326b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c79c88ac-3603-444a-843c-7f485ad3ad50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a91bf4c-bee6-4b28-a97b-50af91b8ef6c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8a6e17-f7de-45c6-8fe0-5577e0c851bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "290b078a-2685-4d6e-8dd9-7f1d99113ae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f50f8e-2384-4749-adcd-2c90d69824f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fd1dd50-9131-4201-a304-a2b137ca9b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae29badd-309a-49d5-ae66-57ec3f114cf3",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c7fe8b-7e8c-4c18-9d2d-6d35bdd3c9ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0caa3514-d1c6-42e7-83de-a0f1148e2908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7defaf53-8fec-40b6-a9a6-cd2022eb56d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c4ff508-1146-4613-97f5-4bf0df62684f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f2017f-f3c7-4d75-885b-e6c135fd1929",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fcb5d79-7dc3-4f7e-8b33-3adb5e79049a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b706a730-8c27-484c-88ef-f907eb10084e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd2f004-3f14-4d4d-8f33-d9d7fdbc9a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b0bf2f4-fe62-4ff4-86f3-37f236cee24a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c08e2a7-02d7-4c12-8536-f999b20a233e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7a0850-8f43-4534-a174-3c72ffc870b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5ff8356-2ab5-41df-b3b2-273032d26025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2697963d-5380-465c-95a1-ec5ad0fd8d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "825851ef-1c2b-4925-bb22-dc3b3d7b051d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0649f6-289e-4e59-beb8-67229ddec9cd",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec95bf0-34a8-4fc2-90e6-f2c2fbf33aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "618c80f5-3b07-4d6a-b094-9a9ede6f0f54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cedcc8e-c39d-491c-8eba-61c919bc3929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d3737c6-b494-40e4-b1f8-c465051cc31f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84442130-61cd-42f4-ad13-b8223117a4d7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d175108-3db2-4830-b285-ee6ff0198d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ebe30d1-881f-4158-adac-52bb101cb8a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1637af5b-e28c-4155-8fc3-a1f73c0ff17b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29c30193-80e9-4672-81a5-4b375b988f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147bb328-e791-4111-bc44-c6575059f661",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfad6031-afa6-454d-a194-fae56e7fa348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc37d97f-b1f6-4c94-83fc-5846348a8856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f401f3-0702-4666-a6f6-25a88ac76459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a72ca8c-32a2-47da-ba7b-ee9fe1ff0f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b7d221-dfaa-4bd8-b2c0-c0cd4c6886cb",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c86523b-aacc-4fb8-9e58-1d589d5e6f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f6c6579-b3bb-4f63-be62-419b8650841d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4609ba-a3e1-400b-ad47-46e52bbb87cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e78b950a-a8d7-465c-9eaf-6f5e63b05b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35968d20-318e-4adc-a58e-6fa82b03a226",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f248e505-7e56-4f6d-ac90-4fdd9344e25f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26b64fa3-ebb1-4cd6-af99-bad5ecb0de98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8f85a0-eb97-4dd3-b6a5-ba3d61e3483a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b557d96a-ba41-481e-8f94-520b9f34fce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef7c1dca-acd1-4432-a099-5cbcdb8f4906",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd634a0-4a39-4677-b700-a1ddccd0a631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f689d9c-5271-44f1-b8ed-9cc87e8f6029"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf97248-814a-4d6a-8de1-f68df7bad9f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfd12399-0707-404b-8701-c6be108648ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abcd3f60-4ca1-4c59-8dd7-96a60fccfc1b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8377fc61-9a62-4da5-94ef-9c2d7eb0b368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf098d1-c03c-4884-832c-16df79a60432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c6031e-c426-4edb-ad37-8da96f9cfd1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa995223-4738-4d62-b4e0-d3ddfacfa2e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08d1f7e-699b-462c-b441-cea64d458880",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ead64a8-d752-4d9f-8755-9818db7b479f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3335909-9931-4018-a4eb-afcc8b259707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d3a64a0-aa8b-4ad9-9690-ae31e15318c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf10756f-3700-46fe-8bd9-d94ca014d577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849c4abf-ea78-4bfe-92ec-97e8fb273754",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd1cab6-cb99-4057-ae30-9a371b998b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daa8c4fb-8834-4b61-a513-17faaa30388a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1258ce-6fd5-4d00-804d-d81b79a79fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7b759d3-e6ac-4c80-874c-62b90e88de4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07a8f67-eb4e-4269-89c1-98f818285fb2",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da6ac5f-7703-40d8-9ab6-90113376acba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a45c57bd-937d-484c-ae10-95d84d8eb546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf76b30f-4e57-4f5e-9446-58db38e5e46f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c52f41a-f7dc-45e7-80b9-88fb3ee05bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd197cc1-c5fc-4c02-af31-eed2813f7a59",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7546e168-2fe7-4b7e-a689-dfa6dd16d017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecaa2514-ffa5-4b86-84c1-2230249b8e09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd669d8-6f17-47ab-8c3a-5814b4b087b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dc13876-c92d-41b3-bb82-3ab59b88c7ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e284f2d-a618-442f-86b1-4cb8202f23c3",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a1508b-8e07-49ed-a28d-668f0a17f656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f4c31d8-41d2-4233-921e-9e903c9ff2b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2e6017-22bd-4da8-81e1-27c054f7c847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b0ce0f6-6dfc-45a9-912c-ed4429eff7eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ead648b3-432b-4a5b-b819-941846302d73",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e12ebd1-00b7-4521-a487-a8e9e2f5a2ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea6f644-50f4-45ee-9572-25c3dcbd35c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136a1108-9e01-4ecf-936e-d0231f1bc40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de7560fd-ca2c-4e2b-a1a4-dc960b17daa7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d54dada0-35e8-4aea-84b6-12d8d4d90af9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "93bdd1b3-f200-4774-a5e9-0f3f4cf5303e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3e39bb-0ca2-42eb-9c3f-9c189b46ad81",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "021366e0-e827-407d-a965-1d5aee5f0808"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4143a3-6af3-4804-845a-5db57872b8a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "974fd2ad-fc13-4012-a3fe-a15430fbc39a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3fc9b9a-3b2f-4755-a034-c8bc7b106f7f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eaca97ba-31fc-4fa3-b617-ba6e295e0366"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "743d5e51-8314-44c2-aca3-15df6b023ebd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ed6db14-8765-4201-8b36-26062aa25845"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fa5c9999-dd80-4f84-b3ca-44460a5b78c8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c09ff69c-b02d-4521-97b4-b6b54531675b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "340d68e7-adf4-4d49-ba62-4f84da668b7f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7061f331-d1c5-48f0-b692-99010504d2fd"
            }
          }
        ]
      },
      {
        "id": "2fa30abf-2033-4d1c-9ad4-2a25b291513d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "87093424-4f46-4072-8f72-50ec1589f4ab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4e1b1717-3e39-4c5f-8b01-9e6671bb1a3b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dbc30b68-7802-427e-82b5-7571f69581ac",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b7468ed-2c41-4302-9bbd-522eddc46c36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78212deb-f74a-4f48-a2ab-9020af50b8cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914ecd34-568c-4609-a1bd-e82151f70453",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6a903d-2d59-487f-b6bd-1ca245387172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5db04070-50ec-415f-92fa-27c510ec231a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91861b9-81f5-4159-838a-0e9ba9f0ea38",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912efae9-d078-4fa4-913d-2d7645f07c7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "744ea687-37bb-4f7a-982d-2a1c24fc9814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57f5b25-7dc7-4192-a4cb-c3bf33ce22f0",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f94483-5952-41b7-bf7f-68d6e870a539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "368bd72b-458d-4c5a-928e-9c8aa4cffa96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e81dfb65-bdea-4fb9-a4bf-536293eff0e3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28fa561f-61bb-436c-9319-adef2ba6c83a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb039080-a976-4ead-a6e3-9627f8243a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad7c632-5390-419a-b9f9-687d2a3c526e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76663272-9ad7-4a5f-9828-7c4a84abb23c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84643729-534e-4ac4-886e-3a607962b034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308661af-4a7f-4c24-8756-89a746809b6a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c35921-9e18-490d-9b01-c35f14d43ba7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f759158-de8e-45e9-9103-c6c989d2f672"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b484c86b-939c-48d1-8976-28c869215138",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "676678ec-f420-4e06-b8ac-dd1a07178d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1725f40c-a7ba-46ba-b13e-d2fae2d43061",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c95d88d-9296-466a-b6f8-4a27d038875a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82cf41da-bb47-426e-a4c4-ff87b05df537"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a835b6-224b-424e-9548-cf431f8c4410",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebed3656-dea5-43af-a374-340833d6d1d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0282b0bc-6fe6-42b0-8109-c85e2a7d784c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944bb736-f1c8-46d2-b1df-c0ffe7a64370",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83107c63-9b71-4108-8701-32a283a16720"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d614f1-a449-462e-baea-de886f4680b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16b729fa-3f25-423c-8e2c-bebf0031baaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0295610-28cf-4284-b132-bf15d7ec1a15",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c6386a-2de6-4531-9ade-a266f8ae5900",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95f34f3b-187c-47e4-9739-2218eeac3b97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a8de46f-2096-41a6-86fe-777ee9ef987a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92d6fee9-ec53-4657-9542-2e7645fe4ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4ce984-9fb8-4d04-a7df-148069414f44",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356b58d3-9d78-405e-a940-c19ced8d1d09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05095f37-dbc1-4dfd-8600-af38e08865b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc12a95-d792-48a5-a049-2143be87905d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2da19900-9e32-4fdf-b1fa-88d209607bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb70998a-4904-43e7-9838-02742e36eb9d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b94f8f0-2ffd-4770-9935-6bd16f38bd45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8fdadb2-5a1c-4e82-8cc1-3ef925b993e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a079aeb1-1c22-445e-bb89-ba9cf56ea2fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6402dc65-e881-4044-ab7e-daf321bc0d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db548668-ff86-4609-abc1-cc08dc12342a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3d9d39-c746-4836-86b8-885ec47c9f9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a425c1ff-88ea-464f-ba3b-3ab17188bcee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e28704-81e1-49b0-8400-7054abe91bb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb5a0193-c48a-4144-a40e-40cc8b4568db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e8cb2b-818b-4cd7-9f12-fa056f946e90",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d81fab20-b612-4943-ad30-e5584c3165a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2c60480-614f-411f-bcb1-b557bd79c833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "617a1108-0d0e-4964-a002-a6fece943ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c0fd7ad-1c67-4f84-9284-73329eeaeb9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d793314d-c6fe-4652-bd9f-944972703997",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1128130d-004e-4fe9-be4c-2890521ed437",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27250385-2742-4e06-be3b-772434ed342e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d79d1c7-3cbf-4823-95fd-13c583c7c18e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65c315da-a832-4661-bb54-4457e75a153d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a30a6c-6fab-410f-b298-e295d63a750a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30bac240-cfef-4f88-8164-4f49e3002fc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd2a2d69-071f-448c-986a-a8a493c3c0bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8003b5f0-3f66-4e7a-8323-ea4429cd53ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f7517d-5985-4430-8827-700b3f5044e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dbccb5e-c1ad-41d1-9c3e-da8b88a1a085",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c3af89-386b-4053-b49f-fec54a218a72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45018172-160b-470d-9ffa-0d932f4aa2e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d6d4ce-d9d0-429c-a78f-72f1ac559186",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4f2f6b9-639d-4ba2-aadc-fd4498ffed5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad427ab9-6526-4014-8ec1-8634a5a8034b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1c9712-e2d1-4554-bd89-a81e8c89e93e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a905f7eb-aea5-4250-8378-975389b8f9d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "defcbaec-4489-4c3d-871d-96f059613f4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e4f26e2-7d0f-4b4e-9e35-9005cbe64405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9368063c-187f-4c9f-a88f-dcb860d1e831",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e504a601-849d-4c50-be4b-43bf52543d18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22a4cc49-e149-4ddf-a2e9-808f021de946"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1690c6-b60f-4086-b875-4fb303ad5ac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dc26a41-e29c-4de6-88a4-eec07cdd11da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "476dbd1b-57b6-4369-8140-c0fdc9a74849",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebcc40b-936d-4d40-8bf2-b0806fab89a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49d9155f-adbe-4dfd-b441-9d67baed370b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0867c218-48b8-427a-ac70-5197ae4fe6ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0683581-186b-4f45-a5c7-bec21526df18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f609a2a-014f-43d3-a219-a521e8243766",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63cbb97a-a70c-4718-8d0f-8e59b2730d02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4f8b19b-f148-4706-a385-9711b90203d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99f4e7d-6807-4527-b0b7-0d11875bf589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5c8d760-807a-4f25-9108-899cbdec1b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd65b6b-8cb0-4fcd-aa20-5e59f0d25af7",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7fff705-9bc8-4ef7-821d-e85c57f87a8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62ba1c11-b823-4fe3-baf9-90df1df2afb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83dfc181-69df-4c24-a768-07c5d8d2cb5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc789fd1-6601-4fef-a586-be8fccf0c306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a7ec299-08b1-4c0a-99c7-b095c303d1f9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56422ce8-69e4-413e-9569-0fd3e6335c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2727951-6c85-4fc0-9356-e9637648fb8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06171ba9-0e8a-4f90-b7da-a80ff9148aae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bb678dd-c46d-4318-a6a4-9bb06d7823e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f55e12ef-81f3-47e4-ac5a-efc4c773c79d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd3091b-6ac5-4028-9064-f37fbfb5da2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25faad64-2b0b-44c1-841c-53675c6937bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "852a3c53-395b-4215-a305-5ebb9b9c72af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5763ef4-72a5-46fc-bba0-77b6ba7846ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e289a76-a3b2-444c-a6ac-ebef5905187f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c401cbdf-4b2a-4347-ac1d-13515d823364",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d41bcc9-d590-49df-8d1b-3d63c3729842"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa0ac95-8f9c-4bfa-9961-cdfd7a41f876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ea53c35-a725-41a1-8331-61e9bc1d02f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef3080b-fb4d-4bbf-b7ac-1911bea07b0f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d92659db-edf4-4595-bbec-64031ade95ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0e10479-6967-417c-84ea-b190c2b90d9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b0ae7a5-4545-4303-b072-a39ee3f0ac6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f01d305-48c6-44c6-bda7-07ca445015da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ee6e15-eb2b-4141-81db-522e69e99dd7",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f15d1fd-a176-41dc-83e8-c596ef4fdc46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8e42959-390d-499b-b9a4-3de8ca7be9ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b38ef3b-0828-4d06-8faf-8180c3df4cfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a1ce51e-4c5a-4921-a3ea-fea4592275de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41e59e29-788e-4688-b0ca-38af1b8c80dc",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989879b2-baf6-4361-a95d-8a5103885fde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95f3ceb0-c750-46b5-b137-b9ae4b42993a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9acee4-b0f7-4f7e-8a32-34939471be0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a4afc1-0f00-4d49-bbf6-9c20dd3ec74e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9181249c-a45e-44b5-90e3-49004bc74641",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94b80027-dc0a-4fa3-b1d5-0e527ca0a756",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b562a255-eb95-4c31-8371-4e7f2b5f362e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c9c8e2-4af9-4176-bc02-08c1a21d8626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e92440a-c7ac-4b16-b1b3-1a73aae1f3e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9004a4d-caa1-43b3-afbd-1f5cc85fc8d7",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb42325-bea9-417c-8df9-9b7829110399",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee6a192f-b104-4809-8591-2921c3f0ee4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4545de7f-eb76-4517-a975-e54293ef4437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d9d9995-fb80-432d-b782-1fb699fee199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08461f4-9fa0-4a61-b2e4-4bf16e7695e0",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a884a94-5f0f-434c-810d-99115772a748",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e22a37b7-81f9-4c44-8f37-7635c741a012"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50bc7323-eda6-469e-b363-127b9f5aabe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf86561a-cf63-45c5-aa2e-8905611b3a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da91297e-240d-4ea0-a668-37b9076ac5f8",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d32c29d-a955-4862-ad94-39e51ad43643",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23ab470c-cbc9-42de-b00e-813bd21e1efa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3d66cc-cdd9-45d1-8c5b-1a72698bf2c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12660252-c079-4c7d-8c64-d20c6fe6bc3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593355f8-1a84-43f6-9bd9-b345a4e9e144",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "618c7335-e968-439e-85d6-29e0f57d6640",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c969c4b2-efd9-4c74-a870-ad962b44359a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3325c642-939b-4ece-b0ea-6380320d353b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02de226b-501d-4e77-ada3-3cd3f58ac0ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee84645-3fd2-4bc3-a1f2-ccde743beb52",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "576170ff-b17c-44da-8f58-765494711179",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af53ba90-5126-44e8-ae6f-80eb8c88d7de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "964019fd-b828-4bac-af04-fea30632459f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09c5cf99-fa0f-4a9a-bfee-cd9008c4630f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dce02934-4724-44a8-8b36-88fd9e87515e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d3fb5d5-674c-4f42-8bc2-a0e4f3e2c56e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dc71866-80d7-4dc1-9eda-0fdac6ffc38d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce598f35-a360-4d0a-8308-a12bb1c23c71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a136ddf6-e5cc-4875-b413-d9dad6ea8d3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73103cb5-9fd8-41a0-8fa4-5aba5709405b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc8746b-2b63-4699-b561-959fb26fec43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aed5c28a-a77b-4109-a834-5449c6eea725"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "955e9ee8-884f-4169-b29a-cf6a05f8453f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d606446-dda0-4b49-950a-e02e31407f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdfca008-a8de-4419-ae33-243294733795",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1086684a-d26e-488c-9edf-68bbff90326e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "061a19c8-213a-4aae-be4c-575507acbe13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1b01a9-3b08-404b-bcd9-b5d50a114019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5bdca5d-74f1-4b4a-bc55-2bbebbd35f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb369a1a-1ad9-4d47-bdf9-2d4b3c9aa4be",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8438b5a-0e73-4574-96be-a70c4eca3386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a9d477-55c4-4df0-9b27-869b56e22986"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9151d23-df37-48ef-8177-a1eb3e287f9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e0f595a-5578-42f3-9d2d-678d98e43208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "298522e3-e956-4d4b-b890-b1aa17d78cfd",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26293e33-b967-4485-8d56-8f905f604837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c18a8827-6cf0-46d6-8957-9caf4e96d2a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c937c6-b880-4a5c-b49c-33376f6c6d18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b009494f-1fe8-4933-934a-f1a0d07eeccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb57c4f4-37fd-416e-859f-52f366554256",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ffc02f6-e7c3-422a-9fff-6112f5bed9e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b1f0f1a-ea7c-49a8-b0aa-6a4a9061c782"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc36ebc3-6d3c-4f97-9487-5fe63b91a190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94cd282c-60e9-4731-8ecf-9409ef9b74a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa8fce4-3693-4fac-b373-38276a0d2fac",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b061ce5d-bea7-473a-a4ed-d9c84b755ce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bb397bc-353e-49b4-90fc-997706705402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f921460d-3193-4d3b-897f-2a5f199b7178",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7b96c4c-6d57-4175-b888-cf7ddb9d0b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a21e2a-5c2a-4ab6-9d76-6bd05101c9aa",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa2063a-c60f-4325-bf04-00a88101f642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b52433f-0beb-4a6e-a57e-8ecb99d7878d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c5e4d8-09ac-40df-a69b-08b6aea46b6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "338dafa7-e357-45b6-946a-ba591694c499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5011d4a1-3d82-4495-87e1-49405ae0a720",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77478b5d-0294-4e24-b9d6-1d0ca3415a27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db5e320-6df6-4317-bdae-45c2c4f3b994"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea7f530-ab80-40f8-a0c0-9b67c2eec7f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76edcd44-4e48-4e66-a955-aceddc7af177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a6137aa-83ff-4b1c-a24d-6c13f083fdb8",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7f403a-1233-45b4-aa0e-01a2bc172d74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49b7ef24-1c59-4942-ba11-4289cd19ca70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd5bb267-60c7-4612-aa36-69b264e3f76c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db1d0868-935e-4176-a209-7a316ab938c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf3bcfc2-4f94-45a4-879b-ac574ceec7a3",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e341d4-6753-45d6-85dd-89c3acda00f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac7a050a-b225-4045-8db4-1bda69054671"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76bd87fa-63f9-4204-9c92-b7482b91da8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d515b62-42a9-49fb-ae24-97083c70fbbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a729662-4cce-4ec5-b25b-9a172e4ebde2",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635b6f02-139f-4969-9006-ef5be53613da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d18e4e6e-979d-45f0-ae3e-65c549480d5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbbc7d69-466b-4676-b54f-c67333031169",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc5c8968-66c2-4447-89ce-262e0c541816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dcba444-17ad-4d32-8744-48e4b7d2fe31",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9fcdb94-85fe-49b7-84a2-10dc408dc8ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce2ab7dc-1f2a-4000-9a2e-fa583a91b75c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "180b97d6-c895-4a0b-a3e6-6f9484b5ae6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ff9f92c-ce25-413d-8a19-aedbc8b7d073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f4c31c-fe86-456a-9f0d-9ba13184de1f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9f70c5-eb9c-463e-9086-beed4edb9904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f10a838-bb15-49d0-94e2-3df367beae6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "566d69b1-6a1f-481f-a3ca-5dc8350df92f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8fbceaa-4eae-49b0-8e3e-5c35986d4118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54cf637d-be47-4da2-9584-7eff108fef78",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b7a5c20-a1ea-485d-9071-03ea274bf121",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9309005a-f157-4298-b1a9-9d227744294a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1fc8098-217f-4800-93d0-6afe7c367b79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17a491de-a245-4489-82c0-42c83c71efb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443dfa82-c890-4d70-aa13-8b711bf5b2c1",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ac1919-f9c6-412c-9f66-7929c5d15a0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea4f0779-c613-4c55-9361-01ee53517861"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6234b80-f801-4c32-b10a-01363172f413",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5737a82e-82af-4210-9f51-5f0d1697719b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11d8dca-a9b9-4b17-b141-e57df214f5ea",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae7fe71d-04a8-4bd9-85af-1f94917bb0dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5609328-4f96-40f7-a3a9-cfa9307dd74f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15c59451-a8ad-4927-8b33-6b7c4361c5dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04d996c6-bb94-44fa-8686-5017dc02faff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff9861ab-cb1c-4815-b6c5-7ffa741bfef8",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b33a3f3-a19c-417e-83b6-b9a3d50a2e42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d350e1b1-0e95-46ee-bace-ff232deaf567"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a67007c-6411-4cd4-9b55-33462a9ace37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b800c841-14fb-477a-a01e-a0426db63c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43210cd4-f77e-41d7-8d25-ab5db53689b1",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce1a781-0983-4d47-ab99-57b248457f0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1502abd2-7611-449a-9d42-5bb1ed42f5c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78c05a9-1d06-4ab8-9841-164cfd4a9971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "475110c9-094d-4589-959f-dd338ca94d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09bb5a3b-4c36-4d75-855e-fe050f8905f5",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e908c3-3cb4-4f5f-a5ff-a5a672234cf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50fc6e5a-4b9e-4923-a7ee-76d13ac4ea7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9793ac7-546b-44c1-b4fd-37ff6dd3940f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f80cd5a3-53ee-4f23-8f0c-f8cde8dc72aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff13e97-f51c-4a3c-8c33-570a2a1f0fec",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580827f3-3384-40bc-9d30-812b2f30a67b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2623afa4-1f1d-4182-8934-86719f497344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb54f52-e15c-4f82-a28c-88155ea34080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "659ac0eb-bac7-4086-b28e-b5ad5376686e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88c2d66-d872-45e2-93c1-0e7559d4af2a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86fb0f59-0761-4c6c-8949-48c07f8e4f15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "065b9b9d-163e-4ad0-8e23-5f5b344ee6ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f3b6cd-495c-4122-ba19-ac3e0b31d2a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "588b2e52-abf5-4b60-b22b-d422633c28bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de673fb-5431-4f43-83b9-1939b6cd04f8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4683dae2-547c-4b6c-956f-31ad3569baa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc55eae1-0293-457d-89c1-88318ca52d0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad3cd28-df40-4337-a937-28076d3452ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a4d76d3-e8c9-46f2-8ddc-e09fec3d694f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "880fbea5-fb1c-4a56-bc13-3237a86d4466",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259a5a4b-4f92-4f48-bf2b-cf282f10c8a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80932f42-59f0-4ea0-b3db-aa07870885f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a14496-3678-4b83-9df7-0e3744bbad5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e2b3704-8e16-4f4b-96b0-b344b736411d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f3f8da6-591b-4af8-ab7f-69e2e8f988ea",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73083682-d34f-450f-ad42-52efe39ba891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddee38fc-c353-4bb6-aacf-00ac298470ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b45d7e73-88ec-4341-b9b6-f5f70895045d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "049820d9-8c06-4747-8d64-120eec28535d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47080511-a641-4c7a-b0ba-a6e3f16ff9eb",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14282bef-2838-4c0e-a658-428771af9c2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e7b355d-82b8-4b80-b4cb-adb78421ceb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d11dd2e8-8234-4536-92f8-7eeec2908143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b47092ce-6f08-44d0-a7d4-04781918fabb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b40f36-61f0-4c19-9cb1-ec2a39e88b83",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b523df3-1775-4a29-b810-74fa5f02d7aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c63d07c-8049-48de-a7c7-87d974efcf8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1afd1d1-81e9-45ee-bd95-846331bc747d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e60af8f-0036-4d0b-a556-eb58bb462448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a649de-1824-45ad-9e75-3f456d92b6d9",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b94521-6f92-48ac-b15f-9f80be04f628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce748f71-332a-46f5-8aa7-f4fa01381877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "442552f0-7bb3-49f6-8aec-f9cb01802bdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b0cab2b-4131-473b-a9ad-effba016570f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "523d2157-015a-4386-9735-569495b0c2a8",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1aee3d5-8c07-46bf-96dd-4c3b173d11cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bf9f9e5-5a5d-4b32-87e7-204dda2a2ed5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d6f6bd-8455-4e60-a75f-0b644915e623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c22cc3a8-d4c4-4682-bd91-1c28c2efe149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb7dfbf-0c7e-4802-9e79-578e7ce42e92",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28494401-f998-40bf-ba77-8ef088b8ef9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af87d92b-9541-41cb-9d13-561d304efd21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12e5d43-1198-4949-9679-63dda1863598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30d7456-1d12-4d95-9e3b-565bce5456a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c254ed2-5ad4-47fa-9d81-9fdc458d562f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1705cf9-aaff-47ef-a437-cb8f96ba0c37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10ee0dba-02f9-4d35-88b7-fcf4b03d67a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "babaf9d7-2887-42a3-947b-48a87725b7bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8caaf095-1d1f-4bcd-9ab3-42a2ff6b33b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e983daa-143f-40be-9a18-6bfc72bf63e5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31cb036c-8460-4ffe-bc52-a0ca150eb432",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b82f5ce-2742-42ca-970a-9a2180c6052d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac6eda8-2fe3-4613-beea-6b793fdaaf48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62a74e1c-506f-43b7-a843-1f2f5a5138d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b699aba-d261-432d-b61f-25ea4512cd91",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ead9e68a-2b8a-44da-9e2d-ed5004d9ef28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd16cd01-40e2-45d7-9b0f-08535d54224e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2617af4e-81e6-4d3e-b336-0147538870bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c40029c3-52b6-4908-ad7f-b6f142bb86e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f54dc8-d6cc-46cb-8702-81a4d1d2305f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d036a80-01ca-472d-92da-bef88a3b9bd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b012ac8-3589-40cd-a76a-e6bacba36f94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ad5b35-0f73-40fe-a7a8-336a7d19e929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62dd4b9c-736f-4645-a926-844c46456567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5391c1e5-3374-453a-a107-70439a5610d8",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e93f0c-e1f1-48f0-9af5-074888f70992",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ab614f9-0699-4934-b5a4-51f862677149"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7fefb51-1d8b-4ff8-8c24-ed9a1ad03621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1938d6d-8b13-41eb-873d-2d5e25a3910e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b303bca-f7ac-4076-8879-c475d175159d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6651b859-f3fa-4ad8-ba74-25e8f4da6c17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fe3df06-bd59-40c3-8021-36c0c61be3fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da9db92-c8ce-4f0d-907d-0d2cdbfbcaa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dcdfd5a-b16c-4550-b363-ff365a6ff79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec3b4df-8d8e-4271-a66e-c4712df39a08",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1bc3612-b5c0-43bb-80a7-1d8d2e3487cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf380bcc-431e-4f94-abfb-83f3b713637d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e285a8b-75b6-4168-a891-365687662a1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcdb4722-a527-408d-9140-a0f5abf800e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99545a70-60d0-42af-a164-6e168c3a902e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c819aa22-a1b0-477d-85dd-971b7b45fa20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b58ce29b-f15b-4422-bffd-d6cf7c6b4c47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6686e601-ef94-46d9-bdc1-13dfbdeb55ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd58b950-8ca6-483b-8cc7-31168b664748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec227181-1afd-4cea-955c-7019d3887eb1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9567943a-fb54-45fc-9a47-dffc98bb6bc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01183be5-eb00-4fba-9ded-7aed88a50909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb7d689-cff3-4197-860a-5f51990065d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06344d70-57cf-4490-823c-8af4c9a62bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810fcca5-e0ac-4e7d-887c-78541fab71a1",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a29c74-5008-488c-b3ba-a2d038270b45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35782b23-ad10-408f-9a51-d6c2d595ac59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4329cca-711b-4fb6-ae8c-2674e4ad4008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dca92c37-2e60-4a97-9226-4b6f80a88bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24c19c2-02d9-427d-bf2f-ddc9c9188444",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c3df4d7-e699-4bb0-bccf-8d3ec9ae17de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7b5cb20-9c83-491a-85be-1c8179391c6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f993e82f-2e13-4934-9125-e7591170e550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcc2676e-2618-4d68-9027-de513ae0c94e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce48f7e3-0c09-4ceb-8766-4a0fabc96ec0",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6a16dd-b2fe-49ae-99a3-10c1e0d1648f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04840c8a-c084-44a9-a019-bf49ded2c76d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a0d2ba5-7cc1-4405-9d64-9780803d04c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0304062-005e-4409-92eb-5d809e0bf307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6461412d-3372-48ef-87aa-71c250998d6a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8455f8a-0a58-4cf3-a9fe-d18ac7840b19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ec7b04c-5bef-4e75-a1a1-2ff99c339774"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2b847e-2cd1-4586-9b6a-94148fb5a539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d085872-8e7f-4d55-84e4-f3ecde020290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aea35da-5470-4613-b2e7-89deba2b5312",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d7f81e-f690-400a-a957-8911fe044c01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35df7f96-04dc-4343-a0e4-d9fc23c0f51c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8e5c86-a0a8-407e-a600-2fec6d4e7c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a05875e0-6dc6-4a0f-9347-df7d9d8668ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78749000-c7ff-4bae-9bc8-833b96ddb2a6",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b545266b-3d94-467d-8eb3-b59743365576",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "480fc1c3-9ddb-4a21-84cc-bdc3d666a419"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dcd6ce1-92da-4daa-88ed-10dc3c179772",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af99e8cb-3c65-4f5f-b173-f05478113002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea9dc28-1e34-4fca-98d0-35454f65f2c4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51819c66-60d9-4c05-9bc5-cfeb9fa952b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88864ac7-fb47-474b-8c38-760244ce68b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bdc03b5-c867-45cd-991d-e5e053640b45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0306c266-83b8-4e81-98e8-d470cc5d907e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecba05b8-f1cf-4511-836f-1161ed332369",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf9067c-af6d-44c4-a1d4-41db2bde0fce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "107524b8-1194-4006-bb38-eb5c48b900fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10aba7ba-125e-4f20-b192-98d3be336567",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b24570fe-513a-443d-bc67-66938a3de371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2fcc60-96c9-47b8-8db8-eb3fb7eabb38",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb206ac-bc8f-437e-8288-147a9562e786",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "880337ed-b6dd-4624-9afd-923892a459e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6312e3c9-f835-48c7-8117-c34d1c0840c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e3f6579-c003-4dfc-a1a0-851fa0ec40db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf8fa20-ca18-47ca-a2b9-51b196a961e2",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca024c4-15c8-40d5-abd5-5aac502fcef9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2be67d73-b362-4715-a5c9-7f9dad49f0a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "debee2b7-69af-495f-9108-93d234b8f0f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52db5513-6441-41d7-89a8-afdf813b48bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df2d3e9-e1df-44bc-8b32-eeb1044d4bd4",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cacdd95-c86f-4462-82fe-93212d5c9449",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ce9cd0f-2399-4428-b9c9-2980aa8bed05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc1fe36-d00e-4d61-ada1-dcae64e0cf1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebe98b1a-6d8d-4bd6-8a45-8bdbeb7846fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db92dfd4-0599-4d15-b17d-f6020e40e073",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50559ea4-9a2f-4097-bf80-28ac402f2af9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b7b1647-70a6-49d0-899d-1a7ed46255e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6916f11-51f7-4fd8-8295-e0f01b4f50b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5270922-a393-452c-b397-36f501165edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb90541a-7363-468c-834c-55e61bc6004e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d462a41f-13f7-4353-b575-1d22307eec96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea3cc08b-8961-486d-8e52-cc6f5bbcc3b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f13617f6-62f5-49b6-bc32-839afee8728c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2d72ed1-28d7-487f-9886-9341724c0618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0057833-2177-44d3-8f40-8c97eefe4642",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019c9af6-fe1b-4ebd-a81e-fb74e7b1cdbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "007e8a6f-e61f-4ad5-b8c5-caeaeab0c521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3574c3ce-a559-4d65-9715-74f2379ac8b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c86abd2-3a33-48f1-969e-e35df21e36a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ebf7124-b2c3-40b7-942b-a775cc716d91",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78e95e7-9418-4137-8a1a-f84e234868c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50962cc2-3a9a-4e31-a7fa-a8ed4891fde6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af8cc3c-b0cd-49b3-adeb-4d94e1e202cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dc9bd83-fee7-4583-b108-589be6836f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "821a3e65-b619-4e6d-8c35-d7a3c08c0f64",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ad9a55-d5fe-4cd5-8998-ff63e05bb1d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c82bff6-c6c1-4192-8ad3-4a93a859cd5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe76c28-e86a-4bad-a4db-0cc47def19a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c939e13-4fc3-4c9c-aafc-54b29cc47bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05023ce4-9f61-4abf-a258-951bad3a3b94",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44791a7-672d-4e6a-b9e8-dc9b21b1ed41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10325a5d-0b96-4655-8cc3-d007c14408a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2308f21-1054-41e9-b32f-d9d51909a23d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b0abed7-2285-4614-9ac6-da068a0f9f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61623190-eb4f-4b9c-901a-f029a5522be5",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b985961-4104-4054-a744-824464996a6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cee2678-c495-4032-8588-26555a2c7f16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e1a4cea-5c1b-4826-8efc-1bc09db1bde6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e210895-17fc-4848-beca-e8feaa99a274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c980401-95f1-4a87-84c4-817ef1378e93",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e7adee-827e-4b93-b512-4cebdef7b2b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fda7f46d-00cc-492a-bb7d-267578e5d8c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01add5ee-7ac9-4abf-a584-5cda0054b6e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b8fb49-bb4f-42ee-b4ff-56648fe5a02d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7adccec3-b616-4377-9f54-5bf1ffc7152e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfcd4fdb-92aa-46bd-beea-808bccf3eaa2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98c804f6-040f-413b-ac34-91d2ce9cb403"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6044e8ae-69c3-43dc-a0a8-f2bcc9d14986",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "831d3c68-ae7c-444b-b5aa-0379668aa746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2c90a0-b1fa-4115-9e57-f1ca0811f526",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c3b135-096d-449c-997b-7b6206fefde0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba659ea2-7427-44f0-8ec4-6afb17863ec4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f917be-b208-4426-ac0a-1649b1c8c3ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3550afd5-eaff-4995-a399-d99013980772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0cf9b6d-1f08-4475-8b06-8a23cf8b8c97",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6434918a-5843-4656-a22e-d176e366ef90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d7d9742-b071-402e-a0de-256b45ff5cb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30077ccb-1b5c-4f25-8b42-9277d1c1f454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb702910-642f-4c6c-a4c0-36262cdcea0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89b74cb-b39d-493d-ba51-4a5616980696",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3898273-9334-43e9-b283-b412ef55f986",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a0ef03d-e929-4e1b-9f49-406f19ba82ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "773a0ef5-fa66-4dd5-9fec-343b89b768d8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b77e27ac-3bcb-4d86-99a7-c0975eb2a63c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640c6d16-309c-4bb6-92f0-2e6a23cb30f1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3caafd5b-d018-44a1-9bd3-36d3591e0648",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1de49c4c-d146-4962-9283-8b384b86c37d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c2ed45-00a8-4d6b-8d6e-4f1e902f4c0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c95b8e-758d-43c7-a057-624c81020727"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33ec50ab-d9a6-44da-8291-1777e559af1c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11fe9c89-ae29-4cb1-bd31-689383206209"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff5d1c88-8ef7-491b-be1a-439b2d8e45cd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a9626d64-35ff-4aef-b8c6-3b17f3b97c5e"
                    }
                  }
                ]
              },
              {
                "id": "80ecfd9d-d245-4e8a-972b-b34096cdd6dd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2c5b679c-b278-469f-9882-79195ba4f823",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b253d8d3-e63f-4e5f-8892-29001cb853e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "517f84b3-b291-4025-bf40-3b70c9b5fa9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b0f7eb-6694-4920-9d69-dfbcfcdda36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fd52e99-4d22-40af-be76-471517c7a99e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cbf6a2e8-7373-4756-8f53-2338bcbd2438",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "901ecdc8-24c2-40d5-9b32-9e7021f0f757"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8592d6c-5ce0-45d0-bfae-980496fe0588",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "405975bf-dac7-42b7-ba0d-c576b320e9c8"
                    }
                  }
                ]
              },
              {
                "id": "475acf57-f5ed-43f5-8f59-0ac80bd78c05",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f7997cc6-f517-4a6b-bf26-ae96fa587c93",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45b6779-e118-488c-a6f3-d5b2568b1058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "599e6b22-2994-4f5a-9f3d-1ae812143587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8af1512-d4df-4260-af91-52a3ebefc204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8adea36-1420-44c8-84e0-0286fc93dda8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "612e7938-63dc-4456-a496-ac48c9b21e80",
            "name": "Positive Testing",
            "item": [
              {
                "id": "667b5841-33f0-482a-becc-44ca2be146be",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae187bb7-c038-4f55-adb3-cf76fa948f9d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "40454f1a-1e00-42fa-98d3-8991bbdfbf9c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d1c8e1c4-5979-497f-bf53-bcd2a756d781",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f6532398-edb5-46fd-834f-90e8b10a86ba"
                    }
                  }
                ]
              },
              {
                "id": "d54a29b2-b4d6-455e-baf8-67e79a582a8a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "abf0d788-f3f1-4424-a73e-55c28bb0f7a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8d4f300d-8ccd-4f8e-aa0b-32274991ac11"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d41127e6-17ee-4b04-8b38-68cf65d47377",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c57312c4-4265-4108-923e-886aff85e9dc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8b2b408c-c2bf-4f8d-b838-de0a243d12a7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "eb7d1ddb-031d-4737-9379-6f987ff7aa2f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d40d5944-ebef-4e1a-bfcb-b608a6e4586e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5763bac8-c02a-495a-919c-6dc9455f751f"
            }
          }
        ]
      },
      {
        "id": "9f04f163-83a7-4daf-83bd-efbb9f759114",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d871ab0e-35d8-4974-b2ad-1d82e26dc270",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f9e11225-df49-4f3a-87e3-5f432f59b879",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9d330fb8-7bad-4a0f-a74f-070fe2196229",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6bb8ea-2690-48a0-bfe5-a3bdde7b49d5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4612cc00-8958-409e-9b61-186f8456ba45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "017c42be-d09d-4fa5-acac-44be057e22b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8a44f01-4272-48dd-9194-802269c5c936"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d1402dc4-3cfe-4268-954b-e012290adb80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79e306c1-deb9-40f9-ba4d-efd51654e6d5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec9f22b3-c3aa-453c-a861-8893f485cfc4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e23eee6-eb73-4d03-8ea5-c8c5617a3d87"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a5256162-5f90-4132-9093-50cd2ef99691",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "740bce7e-dfe9-43c8-94ca-16809ff939f1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76402cc6-fa08-4c3e-be4e-1eb387b26c99",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c71ce76b-53ba-4364-8085-2fe05e150604"
            }
          }
        ]
      },
      {
        "id": "b8c454c5-58bd-4402-ae7c-be1e37893950",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7ac9de91-8c6f-4093-9222-7862833703d6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fab121f8-0d9f-43ba-bf38-935e86b8ebf4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a036a57d-feae-4910-979f-37b7c75a8f7c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e6ad58-2090-4f02-9784-6dcd3976badb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65e5784b-0b34-4473-bc67-abd31b035107"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abacabca-56ca-4cbe-8f19-35f8df5ffaa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91450062-822e-49cd-8021-64423a5e4b97"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "289f5f98-b84b-4194-9726-13297eae0ff1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d73f2caa-0f10-4a26-8c25-97137c1eae7c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a17c06c-3fbb-442f-b6fd-22c381395e1a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92f31632-5f0f-4d4d-ba14-0c84fb538f2d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "75d4d744-7c78-49aa-8d84-2412d3f428ce",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "47d4fcb8-3e70-41d1-944d-34649f5f0d80"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "075077d1-9fea-4f55-ab65-c06d106742e4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e92e7c28-b54e-4a57-99b4-9295a07dd521"
            }
          }
        ]
      },
      {
        "id": "418f1835-eb82-4ad5-8cc6-8e2fbb058661",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "267d3843-fa5d-4004-9a0f-2d982f54b749",
            "name": "Negative Testing",
            "item": [
              {
                "id": "10daed86-0ebe-4245-b745-752c69048452",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "238a5d8d-e5e4-4941-ac39-29cc7308ce9e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d60ba63f-1686-422d-bf3e-2fb45051ef9e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "492385e8-c90f-4a87-a38b-8ddab14e6187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b95724c2-1dde-4888-b518-f7abc6f6fbf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2fbb5c9f-9508-4ef3-a7c6-7e29fc876a05"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c144ceb6-be6c-4dff-9df1-388204dfd8dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03e3877d-5161-4ff1-ba6e-1cd112f26677"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "176d6b1e-a589-4e53-b31c-b13c3b8a787b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0c13eebe-ec77-474c-a4b2-bfb9beeaabb8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b306173-3677-4f5a-8ef9-cbc65648860f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5d9e4478-0604-403d-84c1-3126b5111aaf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c52dca7d-36b3-4341-aae9-2d9287c8bdb2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "39bae817-00f2-461f-bbd4-0027e6e41981"
            }
          }
        ]
      },
      {
        "id": "6e42b27f-78a9-4be5-a5ec-f81b292ea17b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62c2cb7b-ee97-4f35-b669-563f72d49013",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "409788ea-a810-4b9f-8756-e22a6a682ea3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "76591067-9ae3-4a73-b1b3-b8fc69b271eb",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "82f3f64c-8a38-466b-aa87-aa7bebc1f54e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "910e1450-0fc4-4e15-b105-e8a5cc801f4e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 79.3809523809524,
      "responseMin": 5,
      "responseMax": 646,
      "responseSd": 92.08263689828063,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1712795741535,
      "completed": 1712795769909
    },
    "executions": [
      {
        "id": "09ec5431-42c8-40b8-a83f-83320980e6a9",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "47e9d275-adc3-400e-8805-3b67ecedc009",
          "httpRequestId": "044a7535-de16-43ec-b309-3c59e015f24a"
        },
        "item": {
          "id": "09ec5431-42c8-40b8-a83f-83320980e6a9",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "3e0c542c-5726-4c02-bd65-ae37d31fa491",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 0
        }
      },
      {
        "id": "8faa55d2-7318-4828-86fd-847a7b3561d2",
        "cursor": {
          "ref": "64a9cec7-1c0a-4778-855d-5cb887aa0bd6",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "05347872-60c8-4851-8d23-9c39aae654f4"
        },
        "item": {
          "id": "8faa55d2-7318-4828-86fd-847a7b3561d2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "2dffb6cb-f8ca-44b6-8346-72d72418878b",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "1a8da1f5-99f3-4a99-9160-f1764def9cf1",
        "cursor": {
          "ref": "68bbd3ec-91d2-48bc-83c1-2a7489be0829",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "605241ee-f006-4e1d-9ba9-dfba14e4068d"
        },
        "item": {
          "id": "1a8da1f5-99f3-4a99-9160-f1764def9cf1",
          "name": "did_json"
        },
        "response": {
          "id": "6a4da41f-63f4-41a3-90c5-ffd5f3b6d09c",
          "status": "OK",
          "code": 200,
          "responseTime": 360,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7231b8a-0a9e-46c8-931b-bd12d84cbfc8",
        "cursor": {
          "ref": "f8865e4b-e2ef-40eb-b935-3ea773adfe13",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5e625193-97d6-48f0-9cde-b868ddc8d180"
        },
        "item": {
          "id": "f7231b8a-0a9e-46c8-931b-bd12d84cbfc8",
          "name": "did:invalid"
        },
        "response": {
          "id": "c65e5a2a-f35a-4bd8-841a-fcdb07fb2382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7231b8a-0a9e-46c8-931b-bd12d84cbfc8",
        "cursor": {
          "ref": "f8865e4b-e2ef-40eb-b935-3ea773adfe13",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5e625193-97d6-48f0-9cde-b868ddc8d180"
        },
        "item": {
          "id": "f7231b8a-0a9e-46c8-931b-bd12d84cbfc8",
          "name": "did:invalid"
        },
        "response": {
          "id": "c65e5a2a-f35a-4bd8-841a-fcdb07fb2382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c02b4f-91d4-4e87-baac-af477a10e368",
        "cursor": {
          "ref": "e95f4b13-131d-478c-9d70-6663aa4fec3e",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f51ca295-f5ea-475a-96a5-34c3f2045465"
        },
        "item": {
          "id": "03c02b4f-91d4-4e87-baac-af477a10e368",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "88b2d399-db39-4b98-bfb6-178a0e0cfb67",
          "status": "Not Found",
          "code": 404,
          "responseTime": 162,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f97d07e-df84-42b8-8fe7-1b082ba7675d",
        "cursor": {
          "ref": "5d9cbaa4-9963-4349-be3f-b1a07d4fdf5f",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bbc5f5f6-1549-4215-8e70-e53b93979628"
        },
        "item": {
          "id": "5f97d07e-df84-42b8-8fe7-1b082ba7675d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9e640c33-8dac-45ab-891b-4db639cb07cd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 44,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d5d0a6-957a-4e79-8589-5dc430dda856",
        "cursor": {
          "ref": "b0918dfe-ebe2-4b0d-a0c8-73756078beca",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c9bcdb73-5c0d-403b-93c8-881d5a4eddec"
        },
        "item": {
          "id": "50d5d0a6-957a-4e79-8589-5dc430dda856",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b34cdb59-ec10-4e8b-88ed-4344315330ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c69d1b-0d6d-43e8-965b-3bab5547667f",
        "cursor": {
          "ref": "aa07f749-fcb8-4d54-9ff6-7e997f5f8075",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c5086a7b-ed31-4a4f-9ba7-0a24b95dce8f"
        },
        "item": {
          "id": "06c69d1b-0d6d-43e8-965b-3bab5547667f",
          "name": "identifiers"
        },
        "response": {
          "id": "a1e2d678-6e04-4196-86a3-b3e3bffe9a5b",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c014b497-3c0e-4ed7-87bf-0c4840d2359c",
        "cursor": {
          "ref": "247c727d-369d-46a9-8662-d0041add86f0",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "28991bdb-bb4e-4b26-b7b9-59a694b139e5"
        },
        "item": {
          "id": "c014b497-3c0e-4ed7-87bf-0c4840d2359c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fea09f9c-d9e0-449c-9b66-0e8e22b0747f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e48df9-9294-4185-83c5-719b33358b8a",
        "cursor": {
          "ref": "2f02f9cc-6026-49a2-ac84-eb8694210c0b",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c57b9885-e7e6-44fe-9d4e-ed900c45b988"
        },
        "item": {
          "id": "47e48df9-9294-4185-83c5-719b33358b8a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7e43e137-a8ff-4e09-a1f8-e9c9f3cb0fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd510ba-ed52-4a9e-aaf9-d8c109ab6fac",
        "cursor": {
          "ref": "e6fe334e-ec3e-4300-a141-d1eb010f4508",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e53718f2-86cc-4c1b-8838-972bd065b7b3"
        },
        "item": {
          "id": "bbd510ba-ed52-4a9e-aaf9-d8c109ab6fac",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "eef79e4b-dc07-4f45-bf99-5c4cecb598d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf92d229-94ec-41c6-ae00-0961cacc56d4",
        "cursor": {
          "ref": "0e3a07c7-c308-4170-8c6c-63f70a32d180",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "14d582a9-0271-46ab-95da-a1497628fecf"
        },
        "item": {
          "id": "cf92d229-94ec-41c6-ae00-0961cacc56d4",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "80ee7e4c-280e-45f5-b325-7b0fe55c7365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b65b71fb-c860-4fe5-9557-16ec8a0e03ae",
        "cursor": {
          "ref": "81fd4299-bb5a-4bde-b074-a65e7bbeaa09",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2784e44a-243e-4078-8165-74a2e1e92a0c"
        },
        "item": {
          "id": "b65b71fb-c860-4fe5-9557-16ec8a0e03ae",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "83fc840b-562d-4938-8058-f49adddbc4ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2511b323-8fc2-4032-87bc-ed4741ab4003",
        "cursor": {
          "ref": "b1d2d80f-f3e5-4939-bc00-43bbe7a30205",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6bf85daf-65ac-4ace-98d1-dabb7e465ae5"
        },
        "item": {
          "id": "2511b323-8fc2-4032-87bc-ed4741ab4003",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c2e8617d-f17e-4d18-ba3f-139dda00064a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58827979-f185-45da-94df-f49347efacd0",
        "cursor": {
          "ref": "af65aa32-9171-4232-ad39-f96bcb87e7e4",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "573981ea-2d17-4423-89c2-d163cbb3641b"
        },
        "item": {
          "id": "58827979-f185-45da-94df-f49347efacd0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "eeed1e56-96ab-471d-904d-6a7655c2eae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cbd42fa-ae79-4542-bcf5-114d1a6d6286",
        "cursor": {
          "ref": "b20319d2-6c1a-405d-a814-c471f3deee4b",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7525f175-fd06-4596-bf58-454f85204e3f"
        },
        "item": {
          "id": "2cbd42fa-ae79-4542-bcf5-114d1a6d6286",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "225856dd-5681-4b9f-990b-de6c2a1ea3af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba259fb3-96ed-4447-89dc-4f08f8fcf17f",
        "cursor": {
          "ref": "d11c407e-465e-4946-9115-d93e0d8df917",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d33a64df-5343-4737-b29f-2e48b8a8d415"
        },
        "item": {
          "id": "ba259fb3-96ed-4447-89dc-4f08f8fcf17f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "7782e345-2acc-45e3-aa96-da295bad1ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b29d48ae-c535-4bd7-b1eb-ccc6877cdd00",
        "cursor": {
          "ref": "ff4d1444-fcb0-403f-8be4-d5356116b495",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b498522a-a3ab-4d68-adf4-80cd86add960"
        },
        "item": {
          "id": "b29d48ae-c535-4bd7-b1eb-ccc6877cdd00",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "fb247f81-2675-42e8-856e-4448d4082421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae50dd0-83da-46e1-8943-96b735f88b13",
        "cursor": {
          "ref": "bc3b7844-7fe4-4616-a686-f32feecdcde2",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2b723705-4d2f-4bb4-8ea3-726def28aa98"
        },
        "item": {
          "id": "5ae50dd0-83da-46e1-8943-96b735f88b13",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "748f8df7-7f26-4da1-93be-aede7f0dfc9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8818f9c6-270b-4a04-bea5-1d57467a6d02",
        "cursor": {
          "ref": "abc1dae7-e600-4ddc-9128-ed9cdbb15bf7",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "40cc712f-7440-41b8-b211-eb7430179c88"
        },
        "item": {
          "id": "8818f9c6-270b-4a04-bea5-1d57467a6d02",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "888a8820-c963-4c37-a6e7-113e1f13a4c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65753ba1-3a20-45a3-bb4d-91c23a6ae75c",
        "cursor": {
          "ref": "62bcc4f4-d3c3-4464-a10e-6d9b6f1915a6",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8301ab4c-4eb1-42b8-a57d-0dab1eb374cd"
        },
        "item": {
          "id": "65753ba1-3a20-45a3-bb4d-91c23a6ae75c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "56a0881a-f93e-4ec5-996a-4f2347af46c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76fc5ab6-1d47-4e0d-96bc-9597b4b4d6bd",
        "cursor": {
          "ref": "ec5db4c5-fde4-4eb3-8c16-bb4b8c3cecd2",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c3b6d33c-db6c-4a70-be3a-4d443aca4eda"
        },
        "item": {
          "id": "76fc5ab6-1d47-4e0d-96bc-9597b4b4d6bd",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4c84695b-fa09-4d02-8855-2650901030c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6276ce42-dd8d-4d79-974f-cf24a8397563",
        "cursor": {
          "ref": "12f382ae-84d0-4d76-bcb2-3bbbd0f0b177",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a228dcdb-2b9f-49fa-81b2-57fb29c4997f"
        },
        "item": {
          "id": "6276ce42-dd8d-4d79-974f-cf24a8397563",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e83ebe1c-9488-48b1-a7cf-dc7564293f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34ee9ec-b0e2-4780-9872-474df44c20a8",
        "cursor": {
          "ref": "65dfb5f1-ef80-48a1-8674-31a7096a02e7",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "cefa4db8-3014-4e4e-8d3a-a8984f2bbaf6"
        },
        "item": {
          "id": "e34ee9ec-b0e2-4780-9872-474df44c20a8",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "55a406c2-fa4d-465c-9c93-9c1608b7d113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7e9e6e-7521-4c5b-b473-b9ddadf374a9",
        "cursor": {
          "ref": "694f2cae-c915-4449-80ce-8354867d66bd",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a4036c98-21e0-4fd4-bd9e-07b22810cc53"
        },
        "item": {
          "id": "ab7e9e6e-7521-4c5b-b473-b9ddadf374a9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9ebe02aa-4b10-43d3-aa8d-5c71b59bd1b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f99d079-e52b-419c-aaa0-6dc713eed528",
        "cursor": {
          "ref": "cc8865a8-9344-4b14-b5dd-4416d8fd67da",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b7c82a22-1607-4805-82d0-552dd2f2131a"
        },
        "item": {
          "id": "6f99d079-e52b-419c-aaa0-6dc713eed528",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "426d878c-53fa-4abb-bfd9-2e15ca2a70e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c2599ff-f96e-46ac-88f7-1a243e571caf",
        "cursor": {
          "ref": "6cea6afe-ff3b-489e-8bf1-cdbe53a0526b",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "788802e6-853c-4e9b-8d1a-b022296805f5"
        },
        "item": {
          "id": "8c2599ff-f96e-46ac-88f7-1a243e571caf",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a109bba8-cb4f-474e-8142-f7590fb8cf87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f07a7d-d2f0-4f72-bcc3-54ab0f22dce7",
        "cursor": {
          "ref": "34ba03a1-57ad-4bc4-af6e-ff4d681f1792",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c8efe4cc-5c9e-4b92-be26-6b7f1be29a34"
        },
        "item": {
          "id": "35f07a7d-d2f0-4f72-bcc3-54ab0f22dce7",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a078e48b-29bf-4a86-b820-e79ec958a9fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b8b062d-9aeb-4653-a5de-ee505f52f648",
        "cursor": {
          "ref": "36a1bf10-ccab-4f95-8391-7ef758e44b27",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5d424038-3fac-4404-afc9-3516174039e1"
        },
        "item": {
          "id": "0b8b062d-9aeb-4653-a5de-ee505f52f648",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "83689099-b73e-48ca-8c56-261d11e55244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55f9643e-b6ef-45dc-8812-704a8b446469",
        "cursor": {
          "ref": "40a03a9b-5e85-4476-a275-5b018d45d9af",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3ce9064e-f4b2-43ef-94e9-982169af79a1"
        },
        "item": {
          "id": "55f9643e-b6ef-45dc-8812-704a8b446469",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "28d3cf45-819b-4456-b312-2fe143e15178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0802433f-63f6-4308-99e3-34d35ba7525f",
        "cursor": {
          "ref": "fc107450-8408-4387-b091-b7ebf2544166",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "82e816c1-05c9-40c1-8185-3363dc5feeb8"
        },
        "item": {
          "id": "0802433f-63f6-4308-99e3-34d35ba7525f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "04c0ae7a-14b8-496e-a38a-19c54efc9b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c6a1146-57de-4dd8-b66e-478c80a50825",
        "cursor": {
          "ref": "fee2b01d-081a-441e-942a-2fa74408c65a",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0a113ef4-2df9-400c-aa7d-3b4ff6ffafe6"
        },
        "item": {
          "id": "3c6a1146-57de-4dd8-b66e-478c80a50825",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "cc9c6522-8d45-4570-9c1a-9f251c62f699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2146d8f1-5764-4fc4-98ad-bf101fa18df3",
        "cursor": {
          "ref": "0caf0572-63d6-479a-b097-8f09ce0ed7a5",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "bead752e-9a4f-4819-b1eb-2e91f66fba86"
        },
        "item": {
          "id": "2146d8f1-5764-4fc4-98ad-bf101fa18df3",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6ac95081-ab6d-4738-9142-2545667b1a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da8b23e6-8769-4bf2-8168-e446142addc1",
        "cursor": {
          "ref": "5b3cddb1-8a3d-43b9-a9e1-af7e6a87f68d",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2dfb162e-63be-4796-a482-caed9b6ea04e"
        },
        "item": {
          "id": "da8b23e6-8769-4bf2-8168-e446142addc1",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5df08149-5641-4b3c-983b-5edfb4f9015e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abda6c9c-b03c-4d96-b579-8277801ee488",
        "cursor": {
          "ref": "486ab1f2-da7a-44f1-8bf6-9e1531a4f325",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3f01f304-82c3-4d47-9a00-0d4abdaf3975"
        },
        "item": {
          "id": "abda6c9c-b03c-4d96-b579-8277801ee488",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "08b6aa3f-54b7-4319-a2f9-f2239a0320ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21740e99-b65c-45b4-87bb-0b5600c800bb",
        "cursor": {
          "ref": "79bd3b1a-d7b8-4be3-b52f-387a3141adf9",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "11b6fe45-7b16-4818-8b71-698f113ffb67"
        },
        "item": {
          "id": "21740e99-b65c-45b4-87bb-0b5600c800bb",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "71e97336-b326-4714-b3dd-7f1a939b59e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "876f117c-ef40-445f-a80e-a0f37c3d786c",
        "cursor": {
          "ref": "a641eee7-f885-4575-bafc-dab111ecf135",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ab5e862e-bbd2-43d9-a6a9-7212614fbeae"
        },
        "item": {
          "id": "876f117c-ef40-445f-a80e-a0f37c3d786c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3e5cb15f-784d-4e2f-b4cd-ce665ef5b292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa97c770-a762-4ef8-86b5-54a2cc0fc347",
        "cursor": {
          "ref": "54ca5b52-159c-4701-bd74-dd64aa9193c4",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3131e59d-3689-4e51-be1e-ff15a12758ff"
        },
        "item": {
          "id": "fa97c770-a762-4ef8-86b5-54a2cc0fc347",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a1147bd2-8b66-44f8-8f05-208ed98959e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd01642-d12e-49c6-90fe-4dc7a275eb50",
        "cursor": {
          "ref": "0addf1e6-fb78-47ca-b737-a751d0806050",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "dd67293a-5471-4930-8d1b-cfd3c08e20d5"
        },
        "item": {
          "id": "4bd01642-d12e-49c6-90fe-4dc7a275eb50",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "bcbb4e06-2d0f-459e-832c-f9291cf817fb",
          "status": "Created",
          "code": 201,
          "responseTime": 646,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "27bd67dc-ee96-4a28-bf24-9cfae3e4806b",
        "cursor": {
          "ref": "546677ba-fef2-4a08-9252-6ce870b8fbc6",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "51bae7ba-68f5-4caa-acba-eab0fe55954c"
        },
        "item": {
          "id": "27bd67dc-ee96-4a28-bf24-9cfae3e4806b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "58e1432f-e296-4293-9ec9-1ea197635e5a",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "09dfb4d5-19e2-4b38-9f0f-aa9a52b1794d",
        "cursor": {
          "ref": "7c23c80d-5717-45fb-bafe-f2a1956a1a54",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5b2a4c65-8041-4c99-b0df-692969797767"
        },
        "item": {
          "id": "09dfb4d5-19e2-4b38-9f0f-aa9a52b1794d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ceea9fa9-c1fd-45f0-b3d9-fe481d9f7f19",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "0a667447-cc41-49a1-9249-eac936f2ff18",
        "cursor": {
          "ref": "f3de5c65-2165-44eb-b1d8-ef4747ac1aea",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "beab32bc-960b-47a2-be6e-513deb70afad"
        },
        "item": {
          "id": "0a667447-cc41-49a1-9249-eac936f2ff18",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "10a4072e-9973-4822-aa3f-4610498dd009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4dfe65f-70bb-4a49-a181-dd0433793fee",
        "cursor": {
          "ref": "21ee75f8-83a3-4b89-8ac1-550e8b9ff8dd",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8e73f284-37d3-49dd-b8cb-52ee9c83dcef"
        },
        "item": {
          "id": "b4dfe65f-70bb-4a49-a181-dd0433793fee",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "46704203-826e-4045-a4b4-9d57d2459eb8",
          "status": "Created",
          "code": 201,
          "responseTime": 383,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2f69fef0-647f-4d67-9afb-b5c33d8f5d3d",
        "cursor": {
          "ref": "878a6113-a695-47b6-a118-7781a3daffe3",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "70486862-ae04-445b-a0b6-a1a441019192"
        },
        "item": {
          "id": "2f69fef0-647f-4d67-9afb-b5c33d8f5d3d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e4328f65-9a1b-4df4-8b30-43e2ac3dfba2",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2872b895-0871-40b5-8ef4-fda9b2782115",
        "cursor": {
          "ref": "fa61886a-e179-48f2-a011-d73bc9df7b8b",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "627870ba-3fa3-47a4-9780-b393199c67e0"
        },
        "item": {
          "id": "2872b895-0871-40b5-8ef4-fda9b2782115",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6c5da260-ab12-40d4-bacf-86bfb92f5a52",
          "status": "Created",
          "code": 201,
          "responseTime": 363,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "91cda601-51aa-44f1-bd22-c00d64cb5746",
        "cursor": {
          "ref": "642f4b27-8294-465d-95c0-4cb3a1691f22",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "edf8be91-5903-4bb0-bb80-3332e561426e"
        },
        "item": {
          "id": "91cda601-51aa-44f1-bd22-c00d64cb5746",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "60a53c28-9f6e-4745-a335-3a05f6ea0c9a",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "8e3a5534-87f3-49a3-ab55-e3fc77c8a9c1",
        "cursor": {
          "ref": "840dff6d-2f4c-4aed-bd22-91f9205581b4",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b177fe29-d308-4083-ba35-cd2b5da69b81"
        },
        "item": {
          "id": "8e3a5534-87f3-49a3-ab55-e3fc77c8a9c1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "edaab1c0-1770-4ab9-acc9-d31b40d88ff0",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "189123af-7c86-4c9d-96c8-25df0c00d515",
        "cursor": {
          "ref": "c444b4be-0f39-4a1f-8096-d7da8f3ce77d",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3662a09d-eee2-4bef-9ce8-ecec9dca34fc"
        },
        "item": {
          "id": "189123af-7c86-4c9d-96c8-25df0c00d515",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "98ba5098-c618-4fee-9f75-2041ca03a9ec",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a6d171b8-4524-475f-a205-2fe3e9672b1f",
        "cursor": {
          "ref": "71b03a5b-30b6-44a3-9917-5913942a7435",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "bd6d45f2-db86-49fa-bd7b-d6a7d0c600dd"
        },
        "item": {
          "id": "a6d171b8-4524-475f-a205-2fe3e9672b1f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "28d391f6-dc2a-4512-b150-523717bb33d4",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "2d4b28b0-4dde-45e2-a590-8201120145f4",
        "cursor": {
          "ref": "3680464c-c0e6-45c8-b249-809187851f3b",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9a835b6a-5800-4e17-ae4f-bc7bd5eff9b9"
        },
        "item": {
          "id": "2d4b28b0-4dde-45e2-a590-8201120145f4",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "f1bd4e27-f33c-4040-9ebf-33692f723ad4",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "93de5037-ea85-420c-b3c9-f6d62bfa8c00",
        "cursor": {
          "ref": "8e9250f4-3da4-48b6-a1f2-0ac31b2a0d90",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "71189919-7f38-4baa-af3d-7c5b691240ab"
        },
        "item": {
          "id": "93de5037-ea85-420c-b3c9-f6d62bfa8c00",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "213b37f3-2b9c-4ad3-8155-c4e6405bf659",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "bd3d435a-9dda-4e05-99af-494b1c4d8d5a",
        "cursor": {
          "ref": "4586b014-bb77-4759-89ab-f7a8ffa49f71",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4fd6b646-f10e-4b06-8c7d-16bc1afc2218"
        },
        "item": {
          "id": "bd3d435a-9dda-4e05-99af-494b1c4d8d5a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "84d26bc2-883c-499b-8b61-8eb11b3e49bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dede528-cf1a-4ec2-a974-9558d841c427",
        "cursor": {
          "ref": "007eb449-30d9-4fbc-8dc6-773598a4abcf",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c41a679c-839e-4a15-8f90-03294b0f5a5f"
        },
        "item": {
          "id": "3dede528-cf1a-4ec2-a974-9558d841c427",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "35bf2bd2-8070-4d19-a785-44782fbece52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f06bc1-bcbe-4b58-a923-411545ffbef1",
        "cursor": {
          "ref": "a37c5a43-db9a-4623-9dc1-7c490f41758d",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "49ed3037-1aa9-458e-89b8-ca5a01a3fa01"
        },
        "item": {
          "id": "90f06bc1-bcbe-4b58-a923-411545ffbef1",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d8581dc3-57ac-4738-a1a5-bf8b3371b878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a65d0580-f361-4536-8e05-39ff17e24684",
        "cursor": {
          "ref": "93ad05bc-d6a7-4bdd-b09a-ce4763919b50",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "87d1ab4d-3c92-4a3b-b6c0-9997eef335a6"
        },
        "item": {
          "id": "a65d0580-f361-4536-8e05-39ff17e24684",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "7820db64-44cb-4473-a391-2798d60da440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82812d7a-f0f4-45f2-8868-1dbf7a3700a7",
        "cursor": {
          "ref": "daf34e41-1d2c-4530-a302-dae91c177902",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "bbccf9a7-631c-4f5b-ad58-303a17523871"
        },
        "item": {
          "id": "82812d7a-f0f4-45f2-8868-1dbf7a3700a7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d34593fd-e09a-47c6-ad97-1cea8b7886db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49947cb9-a618-4fa3-a3d7-c65cd61c0778",
        "cursor": {
          "ref": "dfaf5667-db1d-4d1c-8155-1b1c80084c82",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d287a0ae-a188-4b58-bf27-1af3b67e193b"
        },
        "item": {
          "id": "49947cb9-a618-4fa3-a3d7-c65cd61c0778",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a2a58d5f-4fe8-4ca2-98de-c855a1220e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbff5aa8-4f3d-4253-860d-d5d9b1b1caf6",
        "cursor": {
          "ref": "e7660e8d-121c-4918-abf2-4bc47426e0a5",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "542948e8-612d-42d4-abc5-a1a7026dd34b"
        },
        "item": {
          "id": "dbff5aa8-4f3d-4253-860d-d5d9b1b1caf6",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d9f28d6d-d0f2-4bde-9b7e-aeadfb0ddbdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5174cea7-3f87-46e4-b772-a333392fabe0",
        "cursor": {
          "ref": "64f47369-f151-44e6-ba54-a739138a7d35",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "5197b9ce-30ff-4f83-a458-f615500ca93d"
        },
        "item": {
          "id": "5174cea7-3f87-46e4-b772-a333392fabe0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "890dd4a6-4868-4bdb-b414-85cc9e59f055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e65204-20f3-4674-bbf2-15324529709f",
        "cursor": {
          "ref": "f5f70c1b-d1da-486f-befc-6f8059c04297",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "31d05ae7-0bdd-433e-bf8a-4b62913b0d03"
        },
        "item": {
          "id": "e8e65204-20f3-4674-bbf2-15324529709f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8efe0cf2-8b74-4b4b-a6c5-cec4e29d8e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e09f6c-9082-42ba-a823-8928dfcb0aa2",
        "cursor": {
          "ref": "99c43722-34d8-4a4d-93ce-86d301011a3c",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "eadd5517-d7cd-437e-a3fc-460b78b600e0"
        },
        "item": {
          "id": "82e09f6c-9082-42ba-a823-8928dfcb0aa2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "400dd978-fdb6-4048-9e7d-b888c3c1dba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edfe93c2-ab1e-4de8-93a7-5827c9880da3",
        "cursor": {
          "ref": "76aca46f-ae8f-40ec-b7a1-592f475abe80",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "079c180f-084a-4a1c-ac20-592b4981ebe4"
        },
        "item": {
          "id": "edfe93c2-ab1e-4de8-93a7-5827c9880da3",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a4f2453e-f4b3-4dc9-aca8-b8607fde8747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee40106-36fc-4bf9-b1da-d18e88b9b0aa",
        "cursor": {
          "ref": "477e31c1-bf76-41de-9684-223fbbf635a5",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "7686261b-3615-41b5-ac50-a15ff1ec8485"
        },
        "item": {
          "id": "aee40106-36fc-4bf9-b1da-d18e88b9b0aa",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a211d807-2c82-4072-922f-9321e996623b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8899ebce-3719-44b6-826a-caca2717bb1d",
        "cursor": {
          "ref": "107cb8df-4a20-4a4d-b10e-7910edfe9d52",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a9e47fe0-51f5-4514-9be5-01fb70f44884"
        },
        "item": {
          "id": "8899ebce-3719-44b6-826a-caca2717bb1d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7c1af5a4-e034-401f-97c9-80fac6064e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe998a6f-cd20-4a0c-a863-b38b057f1c24",
        "cursor": {
          "ref": "07355dd3-c11e-492f-a752-ac0b7b26675c",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "967a07ff-10d4-4857-96d7-0f87eea4729e"
        },
        "item": {
          "id": "fe998a6f-cd20-4a0c-a863-b38b057f1c24",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "48d9599f-6c08-469d-9048-86bfc1c108c9",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "ba1dab5a-a02d-4d6e-a13a-db1ba01ebd41",
        "cursor": {
          "ref": "190e25cc-98c9-462e-81a2-4eb00b90c586",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "046b5535-c48a-4da6-9163-f46200b716e4"
        },
        "item": {
          "id": "ba1dab5a-a02d-4d6e-a13a-db1ba01ebd41",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3019adfa-edba-4bef-acfc-79b73973724d",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "27ad4c53-a18a-47ba-a929-c8793a3f7b26",
        "cursor": {
          "ref": "10e15cb0-0fdd-4955-9a76-4097098f85b4",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "23da83c0-38c2-4c35-8d9a-de32b28d495a"
        },
        "item": {
          "id": "27ad4c53-a18a-47ba-a929-c8793a3f7b26",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a7172937-27d9-4f42-a528-970971f30036",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "3db9985a-318c-422e-83d0-aec302bfb601",
        "cursor": {
          "ref": "bcca29f2-4def-462b-b231-0144b000f842",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b6155bc5-deb7-4a8d-83cc-e8d90afbfd82"
        },
        "item": {
          "id": "3db9985a-318c-422e-83d0-aec302bfb601",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8a14114c-7822-4ff1-babe-d0446cd8ebc4",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "a646c198-4f46-4acc-8849-581bd33a6b40",
        "cursor": {
          "ref": "23fe2b68-451d-451a-8499-1faa0771ba94",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "42408819-a1a7-42c0-ba7e-5e5f30ad97f9"
        },
        "item": {
          "id": "a646c198-4f46-4acc-8849-581bd33a6b40",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "df454091-2d43-404c-b782-9d44534edda7",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "3075f0d4-4979-4da6-bc3f-3c32d15e8a78",
        "cursor": {
          "ref": "b34547a9-1df4-4e8d-9d9b-7a39793bf488",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "14c28cc6-dfda-4cc5-ab34-d6b4b33d2943"
        },
        "item": {
          "id": "3075f0d4-4979-4da6-bc3f-3c32d15e8a78",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2e6dd316-3349-4694-8fa2-b36024a096ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ffcb36f-9963-45b4-bc8f-731261eeca8d",
        "cursor": {
          "ref": "2ad297bc-af19-42f3-a209-e95dd4cb3fa7",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f7143d1a-de3b-4494-a06c-281433df4721"
        },
        "item": {
          "id": "6ffcb36f-9963-45b4-bc8f-731261eeca8d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4676e858-d7c1-4706-baad-c4e23456b34a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf0165f-d751-448a-9789-8c85cc6cc36a",
        "cursor": {
          "ref": "a3f0b59f-8850-40cd-a5e3-88c8e9468cab",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5db96bd3-52ea-4962-846d-034e6414637e"
        },
        "item": {
          "id": "ccf0165f-d751-448a-9789-8c85cc6cc36a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "239f2ced-88a1-4292-b220-695985b7bc21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f333348-cec9-49cc-8631-44011619fce5",
        "cursor": {
          "ref": "4a7782e2-d2d2-47b4-a783-e7280169d1c1",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d605ccc1-ec18-4f95-976c-fbcd88c15d07"
        },
        "item": {
          "id": "1f333348-cec9-49cc-8631-44011619fce5",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "0015c067-a889-4787-a7e1-32f6780f952b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0888d9f-eb3b-4feb-b9d9-f1c9009e2da6",
        "cursor": {
          "ref": "68ad865e-71f7-4ed9-a86d-98d044ec3958",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "dabc7e63-df4a-4045-bf96-c17d303ad5b4"
        },
        "item": {
          "id": "d0888d9f-eb3b-4feb-b9d9-f1c9009e2da6",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0ca194dc-fa22-4f2e-97ce-35053cac71f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6e3626b-474e-4d70-8a56-2e90dc6dae3c",
        "cursor": {
          "ref": "8d250c5d-5aad-41a9-9ffe-89ce2df41f6d",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b16056ee-fe7f-4537-a3cd-8ca24a28b786"
        },
        "item": {
          "id": "f6e3626b-474e-4d70-8a56-2e90dc6dae3c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a31a97f4-16f1-4438-9ac7-31beb9e00ffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e10a092-79b1-40eb-876d-de289a577784",
        "cursor": {
          "ref": "5c993dcb-90db-4ad7-b4e8-4868ce8d3d9a",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3657f9a9-3066-43e8-b02d-d04a6b6f55d3"
        },
        "item": {
          "id": "0e10a092-79b1-40eb-876d-de289a577784",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "267ac3aa-ed05-4ae7-ade6-f24c3a10c876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c49e396-1bf1-4987-ab01-348aab2c067a",
        "cursor": {
          "ref": "1e7d81b3-8f25-4289-8752-4588fc73f2de",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "743d3860-3a62-4b12-8b57-a96751228e57"
        },
        "item": {
          "id": "6c49e396-1bf1-4987-ab01-348aab2c067a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "2c4d1e26-1c08-409e-9c73-daf4cc356a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba60ed3-a14f-4295-ab2a-889e8037219f",
        "cursor": {
          "ref": "457e4c80-561f-4637-9a5e-c281271a9a8d",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6e7fe554-28f0-41ab-8aec-c5b39b18e36a"
        },
        "item": {
          "id": "bba60ed3-a14f-4295-ab2a-889e8037219f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2f1b028b-806d-46aa-a387-3a3764d79ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c672e66d-4e41-4efc-82d4-d0a3aa728158",
        "cursor": {
          "ref": "81175db0-90a9-4d07-8255-1c5820b52e34",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "1edea8c1-8af6-4aff-8b57-2847fcd54037"
        },
        "item": {
          "id": "c672e66d-4e41-4efc-82d4-d0a3aa728158",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "be21ebb8-d6a3-4312-916c-aad155fc833e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7885f198-5e99-4ed2-8728-7760e87e567d",
        "cursor": {
          "ref": "1bf10772-0f56-414a-95fe-a8caf50f1aff",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "0b9acbbf-cb4f-48d8-8810-5896afb0536c"
        },
        "item": {
          "id": "7885f198-5e99-4ed2-8728-7760e87e567d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "88901513-4411-4b16-8c58-f6e39c71984e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44bfe43a-c660-42fd-87e0-f1bf93332de9",
        "cursor": {
          "ref": "add2bf86-f3f5-4e05-bc9b-fe2d7226bb7b",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d88c5343-246e-4c95-94b7-042cef2e6e18"
        },
        "item": {
          "id": "44bfe43a-c660-42fd-87e0-f1bf93332de9",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "2de7b71e-8fea-4516-a196-9a28af6f6344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57078c10-8129-40e8-bf30-95570b72eefd",
        "cursor": {
          "ref": "18c00f38-d073-475b-bd81-16682340c66a",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c6b20472-92b1-410d-8fb6-b5b3204962ce"
        },
        "item": {
          "id": "57078c10-8129-40e8-bf30-95570b72eefd",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8052d386-3b6e-420f-86b7-0408a3470ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b1db687-d135-40a0-abf3-06036559a2fa",
        "cursor": {
          "ref": "4a051d30-b0d6-42f5-bdf6-b2695b9c5bff",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0e8c0085-976e-4543-bb2d-8f9eff30debf"
        },
        "item": {
          "id": "4b1db687-d135-40a0-abf3-06036559a2fa",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d2ba3766-d853-4c9c-8a25-c476ce17db19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5053f1a-eca7-411e-9fdd-8fedfcc98730",
        "cursor": {
          "ref": "ed76794c-9ca9-425f-8c95-566aec84d7a7",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "908aa174-2b3c-4c83-8898-e2297b14aede"
        },
        "item": {
          "id": "f5053f1a-eca7-411e-9fdd-8fedfcc98730",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "18f61598-d518-4d71-9438-ffa651458109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33017af6-4120-4015-8988-565e0e375683",
        "cursor": {
          "ref": "1507c3c7-0e68-4f96-b791-691bf1099b66",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "8e1d2f31-b9c5-485b-b9e6-c438184fcf3d"
        },
        "item": {
          "id": "33017af6-4120-4015-8988-565e0e375683",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ee0ae5ef-bc14-40c6-b38d-cff310118364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51840451-0642-49fa-b917-29d1119bce4a",
        "cursor": {
          "ref": "23945231-1c7c-4739-ab63-abc9530bbb31",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d19d37d5-2c1d-4d97-ab45-9d5a0e7942b8"
        },
        "item": {
          "id": "51840451-0642-49fa-b917-29d1119bce4a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "525f34d6-67c2-4661-b66c-cd5346e75b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83faf74e-79d1-4319-9641-315a29705eb9",
        "cursor": {
          "ref": "105f23f4-241e-4fdc-9ca5-dbda9cae27f6",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7af78878-3671-4689-a243-afa39a5e48dd"
        },
        "item": {
          "id": "83faf74e-79d1-4319-9641-315a29705eb9",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0d045b93-de03-4b91-a819-9f13633a649b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03b11458-1cd7-42a7-8d1f-963427893a21",
        "cursor": {
          "ref": "0588e004-24dd-4cab-9b24-15f18bdeae05",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5aa1e1e5-6ab8-4ad7-9487-120dca8c7d56"
        },
        "item": {
          "id": "03b11458-1cd7-42a7-8d1f-963427893a21",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "814b6f03-7a85-41d4-9d36-3533267b6921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "345523e0-3e10-4ef5-816a-4cd916b46371",
        "cursor": {
          "ref": "1ef6edf5-7c53-4820-969e-453fd0c3a248",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "26acfa50-6760-4950-955e-e81700175616"
        },
        "item": {
          "id": "345523e0-3e10-4ef5-816a-4cd916b46371",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5d0a21f2-f724-4181-9ca5-13ff66ead5a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56422e11-7835-4198-925c-c9c82b742c72",
        "cursor": {
          "ref": "b0f64548-2381-438d-8f97-72657c9e28ce",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "37e200f0-a3a0-438e-bebc-892ab63d2211"
        },
        "item": {
          "id": "56422e11-7835-4198-925c-c9c82b742c72",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6cd4d8df-a6dc-48e0-8921-19db7a01dec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f5696cb-e9df-483f-8c1f-4cf8af97790b",
        "cursor": {
          "ref": "d465897f-a2d9-448c-9bd6-5c167bec6836",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "780f1a70-35df-489c-a88a-cfcc3eaf12ce"
        },
        "item": {
          "id": "8f5696cb-e9df-483f-8c1f-4cf8af97790b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "4b1bf1bb-8d3a-484f-abb9-a31379ce2dfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9a5b92-b639-48a2-a0a7-c3c5fe1d1b54",
        "cursor": {
          "ref": "6b14eb5c-71c6-42fe-852b-0d11b67a6ec1",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "169f68de-eaa4-48f7-902a-4871df7d8408"
        },
        "item": {
          "id": "fc9a5b92-b639-48a2-a0a7-c3c5fe1d1b54",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9e4574d9-eec4-409d-a173-f497d41e12bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df6c14d6-e90c-469d-8577-a78c539a1377",
        "cursor": {
          "ref": "0b547adc-fe83-4981-bd04-2eb3f6cb4cc1",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a133b4ea-7832-400e-bf9e-2b9ebaaa08f6"
        },
        "item": {
          "id": "df6c14d6-e90c-469d-8577-a78c539a1377",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8158cdac-5c6f-4756-9a00-cd6fde4b4c8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832d42a1-4942-49b1-a743-66f13cedbc28",
        "cursor": {
          "ref": "671f47e9-f21b-4866-b70d-1b9542f42788",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "04455486-9fab-4d47-b8d3-2e88a7e4b65c"
        },
        "item": {
          "id": "832d42a1-4942-49b1-a743-66f13cedbc28",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "1d20ee3b-267a-4d18-9d18-8cb5f038882c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e58cc4c-8ee2-408c-aede-8032b5212591",
        "cursor": {
          "ref": "0ba1306f-3aae-46e4-9e61-ceb923eef0d7",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "5620d10d-ac09-4d79-a993-1f2c09fd63f0"
        },
        "item": {
          "id": "8e58cc4c-8ee2-408c-aede-8032b5212591",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "4be35826-545b-44d0-a9fe-2a3a1fa74580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b278a4e-a6ac-4632-ba1b-c40ffce50952",
        "cursor": {
          "ref": "b9ae95ca-5b71-44fd-a566-f25b85a5d30d",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "26aa4a1c-5260-4129-b506-0dddfbd3cf4f"
        },
        "item": {
          "id": "2b278a4e-a6ac-4632-ba1b-c40ffce50952",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "218a3d21-71f7-457a-90c0-352a9d3eed99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca1bed82-c605-4593-afd2-345ced5d0d77",
        "cursor": {
          "ref": "88db6f39-8c81-427f-aea2-70758eaebc98",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "69a0f0c5-14d7-439c-9139-8cbd83dc76ff"
        },
        "item": {
          "id": "ca1bed82-c605-4593-afd2-345ced5d0d77",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0df35a14-5119-4217-b734-a0e67b8632e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51bdf760-7a23-4365-a233-73513ab7d9e5",
        "cursor": {
          "ref": "cd5f40df-266f-47e9-b5de-81c58c3cccc4",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "eff89577-6966-4bc5-b73e-d3637ab8dd68"
        },
        "item": {
          "id": "51bdf760-7a23-4365-a233-73513ab7d9e5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b97d0f5a-2cc5-49c6-aead-0dc0cc573b1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3318ca0-75ab-4658-9038-9e43ee984bac",
        "cursor": {
          "ref": "3073afa1-052f-4302-9536-c0bcbb47c510",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a7d6b91d-e088-4721-9445-61f17653dccc"
        },
        "item": {
          "id": "c3318ca0-75ab-4658-9038-9e43ee984bac",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "16f59475-97d0-42d6-bd9f-38303451d70d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e3d642-1b5c-4aae-8df2-4c7825cdb8a7",
        "cursor": {
          "ref": "b03e84d6-ddeb-444d-b7d7-17045e744b77",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "654687e4-b8d1-49c1-9d84-b9d451a100fd"
        },
        "item": {
          "id": "69e3d642-1b5c-4aae-8df2-4c7825cdb8a7",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c86b2ebd-8fab-40fc-8533-6bc71123cc49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df76ffb-aebe-4e9f-8054-e48fd5b43905",
        "cursor": {
          "ref": "1da1f347-d131-4912-9f4c-b433ce5575c2",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2dfd3aae-1842-49fc-afbd-f8482abf1b9b"
        },
        "item": {
          "id": "3df76ffb-aebe-4e9f-8054-e48fd5b43905",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b05a28ba-b03e-404d-886f-318c1b888171",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d66509-15f7-4618-b891-475724c8b9f2",
        "cursor": {
          "ref": "c706b939-1aac-4f01-8a6a-17cf71e317cc",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1435e695-fb8a-4b51-93a3-14bba38e74ef"
        },
        "item": {
          "id": "c7d66509-15f7-4618-b891-475724c8b9f2",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "4a94b823-e06e-4932-b781-dd36763e63ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "5d23c197-8dcb-483f-8428-f900c39d2cf2",
        "cursor": {
          "ref": "670ec0a4-d227-45aa-97c5-e7241414b819",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6e542c44-d6b6-4582-9abb-d7f7d6e65044"
        },
        "item": {
          "id": "5d23c197-8dcb-483f-8428-f900c39d2cf2",
          "name": "credentials_issue"
        },
        "response": {
          "id": "03e3dba5-479e-4c8a-8313-662a5d246f77",
          "status": "Created",
          "code": 201,
          "responseTime": 503,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14509e9-982c-4a6d-896f-78db6eda9634",
        "cursor": {
          "ref": "35097106-0395-434b-aa52-ad19517a2692",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d44a1fa1-3ece-4cf4-8c30-26d43294bea2"
        },
        "item": {
          "id": "c14509e9-982c-4a6d-896f-78db6eda9634",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8b8acc3e-4ff3-48e5-aedf-19e946aa3f90",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "93051574-674f-4472-ade4-dce6a2f0a4a2",
        "cursor": {
          "ref": "c06b01ed-0789-48cc-9c69-b211df048a7a",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d2c62319-6b09-41b0-8ed6-ec7672c311a0"
        },
        "item": {
          "id": "93051574-674f-4472-ade4-dce6a2f0a4a2",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "7af950e2-7d97-481c-8caf-3e5736991718",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b87b46-baff-4fde-978f-4cdc0fd79c09",
        "cursor": {
          "ref": "39b55173-d671-4e57-bdc7-775b9d2b2fb7",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4ee69fae-8308-4339-b885-b0909719842b"
        },
        "item": {
          "id": "46b87b46-baff-4fde-978f-4cdc0fd79c09",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b8177ddc-562f-4ac3-b319-2d71afe90a04",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a26fec9-f0f7-4f80-9c03-afa43a31e5e8",
        "cursor": {
          "ref": "118af7ba-eeda-4a2e-bfab-f585ec47eccb",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c89073f9-96f3-4a4b-9928-2a741337f4bb"
        },
        "item": {
          "id": "6a26fec9-f0f7-4f80-9c03-afa43a31e5e8",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6c812e01-9476-4b47-8350-06098cae7c8a",
          "status": "Created",
          "code": 201,
          "responseTime": 352,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-11T00:35:57.521Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-11T00:35:57.521Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "5abd5209-dad9-4431-a779-6a16f2d6421f",
        "cursor": {
          "ref": "f675db64-ac7c-4828-9fde-69acae186632",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a0c16033-f0b5-422e-9675-f04a3781c9d2"
        },
        "item": {
          "id": "5abd5209-dad9-4431-a779-6a16f2d6421f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "010c808d-7030-4abf-8a7c-731ce5645527",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a422fe2-ae82-45b1-9a42-ee0d067e2d25",
        "cursor": {
          "ref": "04a67c04-d2d9-4a89-9bf2-92d5cc851d2a",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b0180320-8743-44aa-b2d8-bfa356ce3044"
        },
        "item": {
          "id": "2a422fe2-ae82-45b1-9a42-ee0d067e2d25",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4083ec04-c340-4fed-855f-96020553a4d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b9cf3de-40b5-4f40-a7f4-4a8f7daa495b",
        "cursor": {
          "ref": "b61f5bc2-1cad-4454-816c-e022a0e4dc24",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "dfc7895e-5366-40a7-9173-04b54e4f8425"
        },
        "item": {
          "id": "7b9cf3de-40b5-4f40-a7f4-4a8f7daa495b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "afea4b64-ba1c-4c2e-886c-31d6836fba17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef197931-d210-4f55-9e6b-ff3eec459e7f",
        "cursor": {
          "ref": "8f81658a-6801-47ca-a6cc-3f8e0d4ea99f",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e5f4e8ce-0b45-4607-9752-256c66a5ec42"
        },
        "item": {
          "id": "ef197931-d210-4f55-9e6b-ff3eec459e7f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4eed0eb0-c755-4ac1-bfd4-80818ce54b6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e92abf7-f0ee-4433-98b7-e3760e57effb",
        "cursor": {
          "ref": "3298e069-f01f-4039-9126-f5f1ea9da0dd",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ca00b7e0-0da5-4308-8396-0d1d3c98f9ed"
        },
        "item": {
          "id": "5e92abf7-f0ee-4433-98b7-e3760e57effb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ff17d264-4696-4776-8194-d466a66e7ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2cf9c9-64bd-4513-a2fb-9e630924730d",
        "cursor": {
          "ref": "9156e802-f8a1-4bab-876a-bf31817753b2",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9d283ec2-5a0f-49a3-a789-b08a3aa8505c"
        },
        "item": {
          "id": "ca2cf9c9-64bd-4513-a2fb-9e630924730d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8a53de5c-d8dd-48ae-a67b-9f3be9c71808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d4e57f-c81f-4163-8588-4e43f3774bab",
        "cursor": {
          "ref": "0991e4c6-3898-4757-a36f-731732f0988a",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e895f15d-23a7-4103-b24c-47752ab19668"
        },
        "item": {
          "id": "12d4e57f-c81f-4163-8588-4e43f3774bab",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d3c54891-c946-416d-82e8-2920d7569b56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb2d570-89cd-4b59-b085-400d14978082",
        "cursor": {
          "ref": "61d63e35-88ef-4aa7-8cc6-56f8b58e69ae",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "755fa447-1b58-4373-800b-a437d8b1944d"
        },
        "item": {
          "id": "9cb2d570-89cd-4b59-b085-400d14978082",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "582d065c-ab78-4929-8ec2-256135bf01d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0f5048-1f20-49f8-8d47-c4b7f2e08c2a",
        "cursor": {
          "ref": "17197a02-9257-4d14-b95d-2eae051e3b8a",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "39e2625e-e716-4fcd-a548-8b78198d190b"
        },
        "item": {
          "id": "fc0f5048-1f20-49f8-8d47-c4b7f2e08c2a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "269d9aa6-2b59-4272-8f99-dc3b23cd76a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81386638-dbd5-46d8-9fd6-5ef3f885a10c",
        "cursor": {
          "ref": "6279e9ca-bc26-40d8-9473-76f35eae858c",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "5dbed5aa-facf-48b9-b496-3ddf422f089c"
        },
        "item": {
          "id": "81386638-dbd5-46d8-9fd6-5ef3f885a10c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "01a861c5-12e3-47b1-9d12-f13f7107b6f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51bd8e5-5c11-44a2-a30d-ea0aaf939d26",
        "cursor": {
          "ref": "3a34a79d-88c1-4004-8e7f-2fef5b2072e8",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ee217fca-1011-4e72-a356-fb1b661aa08c"
        },
        "item": {
          "id": "e51bd8e5-5c11-44a2-a30d-ea0aaf939d26",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "45394256-bef6-474e-90ee-c5238ca3dc29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c764c077-9a87-4cfc-9474-2475a37f96e7",
        "cursor": {
          "ref": "eb55e27b-11ee-4118-b983-099881a8f81d",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "517556b7-063e-47f6-a902-20a68efc8c71"
        },
        "item": {
          "id": "c764c077-9a87-4cfc-9474-2475a37f96e7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "02980f2a-c554-4217-8619-87fef006948a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc209f4f-0042-4b84-bfa3-8cbb19e07542",
        "cursor": {
          "ref": "1748872a-246a-4567-ae9f-7d7c885d0e1a",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f0a74a44-476a-489e-9005-373a89f90f0f"
        },
        "item": {
          "id": "dc209f4f-0042-4b84-bfa3-8cbb19e07542",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e0940b81-9f8b-495e-99b4-5a7e7e081f67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e23559-9b19-410a-a120-f05a78e7556b",
        "cursor": {
          "ref": "a0a56ef6-e9b2-4f9b-a667-f93fb4c0b57f",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1ddee1b5-a37b-4251-bf02-5174d7d322d9"
        },
        "item": {
          "id": "25e23559-9b19-410a-a120-f05a78e7556b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "bb47f7ab-0da1-4679-9086-e94ddceea5a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f5e7be5-fbcc-43a2-baa7-02e6af1d4e29",
        "cursor": {
          "ref": "0068a1ea-3bee-46a1-b6df-ed5e04ba79fd",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "82a7201b-f933-4e05-99d7-70be6718efe3"
        },
        "item": {
          "id": "3f5e7be5-fbcc-43a2-baa7-02e6af1d4e29",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d2da59c2-f1a5-4114-b9e8-bff730b732b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "315349cb-8ccd-4579-bf0e-7d1ba88fbcdd",
        "cursor": {
          "ref": "ee3b1791-3b40-4b85-91e8-6bc0fd283802",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f6d85fe4-eb35-46e7-901c-34babcb98310"
        },
        "item": {
          "id": "315349cb-8ccd-4579-bf0e-7d1ba88fbcdd",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ab686e13-66a6-4278-b1b0-ce77e122a34b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faac573a-fb39-4ad4-938a-21449b660a89",
        "cursor": {
          "ref": "f4a5ea91-6bee-4d34-a30a-38a5ddeff0f5",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "648f90f0-ad21-487d-9133-7f4531e4e8cf"
        },
        "item": {
          "id": "faac573a-fb39-4ad4-938a-21449b660a89",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e555038b-b106-4659-a472-501866a44861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c8bc7f-240e-439d-aa6e-53dd2324a1ac",
        "cursor": {
          "ref": "7027694a-b296-4906-a630-537788359cb8",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9cf81931-a669-42b3-94a8-77f308566738"
        },
        "item": {
          "id": "b3c8bc7f-240e-439d-aa6e-53dd2324a1ac",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e71b2657-39f5-44ca-8e1e-d53710a28df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7033b393-d160-4a41-9f58-37dbf9291e1d",
        "cursor": {
          "ref": "b05f2d0e-ad64-47cf-a00b-5848b188c4ec",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "12de9412-5a8f-4e7c-a9f9-f4bf53518162"
        },
        "item": {
          "id": "7033b393-d160-4a41-9f58-37dbf9291e1d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e2b08a44-f67f-4ca0-973c-731c22d6b60a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185d02ab-1011-4ec7-81a8-b1174e7344ca",
        "cursor": {
          "ref": "c8a2272d-086e-4888-b169-19c492561542",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "45a01ad9-5573-4d61-a5e6-9c5cb1049e42"
        },
        "item": {
          "id": "185d02ab-1011-4ec7-81a8-b1174e7344ca",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7664de0a-0462-442e-8bf1-9c7441bb4b84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3f9fc8f-db60-45be-8a9f-d76169feea92",
        "cursor": {
          "ref": "d6dea8d2-dc06-443e-a977-31e2d3651a56",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "41754129-c500-48b0-b5f9-85e3bb2b326d"
        },
        "item": {
          "id": "d3f9fc8f-db60-45be-8a9f-d76169feea92",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4eb1cf5e-4ac6-4f46-8cf9-5c127ac2b178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a91bf4c-bee6-4b28-a97b-50af91b8ef6c",
        "cursor": {
          "ref": "bbff3207-428f-4fe0-b98d-9b66c9b229c5",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1fb7e4ae-5b12-467a-a5e2-09caa2548fc6"
        },
        "item": {
          "id": "1a91bf4c-bee6-4b28-a97b-50af91b8ef6c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bd821a35-0a00-4820-8de7-105e89deaaef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae29badd-309a-49d5-ae66-57ec3f114cf3",
        "cursor": {
          "ref": "ce3b661e-8886-411c-b5b1-e9c9f3f4c9ac",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "812761a6-2658-4a03-b71c-c0bddc3ca583"
        },
        "item": {
          "id": "ae29badd-309a-49d5-ae66-57ec3f114cf3",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9aadf8b0-34a6-44a8-a039-d3fab86d7e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f2017f-f3c7-4d75-885b-e6c135fd1929",
        "cursor": {
          "ref": "ed2d2e25-42ff-4868-92c8-cfaeae4ee514",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "00af717f-82b4-438c-8e23-7ec0cc52fc69"
        },
        "item": {
          "id": "d4f2017f-f3c7-4d75-885b-e6c135fd1929",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b518da4c-1cad-4aac-b625-bba5bdb8d586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c08e2a7-02d7-4c12-8536-f999b20a233e",
        "cursor": {
          "ref": "0d76671a-c6da-4446-8db8-033903668243",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "bbdcecb3-5f5a-4401-8a32-0af21e36c796"
        },
        "item": {
          "id": "2c08e2a7-02d7-4c12-8536-f999b20a233e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6d0a663e-c893-4e6b-bfd4-3270803adf47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0649f6-289e-4e59-beb8-67229ddec9cd",
        "cursor": {
          "ref": "412dae16-d06e-48cb-bdf2-3264e48dcb53",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "73bbca81-11db-46ee-8f67-5d47cae52d6a"
        },
        "item": {
          "id": "7d0649f6-289e-4e59-beb8-67229ddec9cd",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d496f9cf-c169-4d23-a17e-47ec81c26b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84442130-61cd-42f4-ad13-b8223117a4d7",
        "cursor": {
          "ref": "7261d743-b76f-4263-abec-061b6cd3eadf",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "46cd5321-5059-4e48-94b2-e6b165b5a679"
        },
        "item": {
          "id": "84442130-61cd-42f4-ad13-b8223117a4d7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e4d3ff88-9c05-4e79-898a-c4072aa67cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "147bb328-e791-4111-bc44-c6575059f661",
        "cursor": {
          "ref": "c16f5c5c-06c6-4c2f-9a70-910c1b8a61d5",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7364be90-9009-430b-831e-22e2d8b8d727"
        },
        "item": {
          "id": "147bb328-e791-4111-bc44-c6575059f661",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "79ef552c-2db4-4dba-8907-3d639674b26a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b7d221-dfaa-4bd8-b2c0-c0cd4c6886cb",
        "cursor": {
          "ref": "0de24584-43df-4705-bc13-1e7a0dcec2c7",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9fc856d9-09cf-414b-935b-f0e953ad3432"
        },
        "item": {
          "id": "c8b7d221-dfaa-4bd8-b2c0-c0cd4c6886cb",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f8608077-7d20-49d2-be00-4ebb5b6d948f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35968d20-318e-4adc-a58e-6fa82b03a226",
        "cursor": {
          "ref": "434ea4f9-7b39-45d4-8761-2d54d0fb0039",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "4e00ea29-2e78-4694-bc18-38e4e91dd301"
        },
        "item": {
          "id": "35968d20-318e-4adc-a58e-6fa82b03a226",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1f792ae3-abeb-41ce-bf39-081019e63eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef7c1dca-acd1-4432-a099-5cbcdb8f4906",
        "cursor": {
          "ref": "ee01f1ef-01f6-4208-b0e0-70ef976919af",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "65610db7-0836-4adc-a4c7-b6b72bee4ed1"
        },
        "item": {
          "id": "ef7c1dca-acd1-4432-a099-5cbcdb8f4906",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a12f791d-5180-4e51-b233-cb8afce5333d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abcd3f60-4ca1-4c59-8dd7-96a60fccfc1b",
        "cursor": {
          "ref": "a0356a6f-4b2b-42aa-8d16-66828173d7b0",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "761be4cc-1169-49b7-90a4-3ad65a42b553"
        },
        "item": {
          "id": "abcd3f60-4ca1-4c59-8dd7-96a60fccfc1b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4c8f9d66-0e20-47c8-a36e-e4327697655b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e08d1f7e-699b-462c-b441-cea64d458880",
        "cursor": {
          "ref": "2f780ed5-f0b1-4ae9-88ea-c5ada90742f8",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "16db1518-56cd-43ba-a8ea-faf5c43ccd76"
        },
        "item": {
          "id": "e08d1f7e-699b-462c-b441-cea64d458880",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "8d812aed-d3f2-4cc8-8e1e-508d14ecf6e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849c4abf-ea78-4bfe-92ec-97e8fb273754",
        "cursor": {
          "ref": "799a1807-9054-4313-8faf-1671a77a3761",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "7409d75c-2046-4983-a97d-0b7a61b28de7"
        },
        "item": {
          "id": "849c4abf-ea78-4bfe-92ec-97e8fb273754",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "fb192083-818f-49ba-83cc-27e0883aaed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c07a8f67-eb4e-4269-89c1-98f818285fb2",
        "cursor": {
          "ref": "8808affb-0f51-4885-a82a-8e8eb00801a0",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "000ee033-41ed-412a-b756-41f3ca24de6c"
        },
        "item": {
          "id": "c07a8f67-eb4e-4269-89c1-98f818285fb2",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "88cd1fc7-00ac-4104-b507-d56be291e2b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd197cc1-c5fc-4c02-af31-eed2813f7a59",
        "cursor": {
          "ref": "d4973f2f-ded1-4acb-90d9-6089d0cfac4f",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "36051135-28b7-42de-ad63-cf137c39a43b"
        },
        "item": {
          "id": "cd197cc1-c5fc-4c02-af31-eed2813f7a59",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "75b680ed-ec50-409b-8820-9c3fec771758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e284f2d-a618-442f-86b1-4cb8202f23c3",
        "cursor": {
          "ref": "c1d72c34-f932-4324-a431-efd497338591",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3e37a0ac-00bf-47f4-ad20-6cdfd9aa58c1"
        },
        "item": {
          "id": "2e284f2d-a618-442f-86b1-4cb8202f23c3",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "0b503529-a604-4939-8b8a-93fc483aead9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ead648b3-432b-4a5b-b819-941846302d73",
        "cursor": {
          "ref": "319d36ce-fbcd-4087-a0e9-36e6595bc656",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c56b6c4f-35fb-4816-99c9-468ee4847497"
        },
        "item": {
          "id": "ead648b3-432b-4a5b-b819-941846302d73",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "aa9596e1-c292-4e68-9059-610ebed5ab39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93bdd1b3-f200-4774-a5e9-0f3f4cf5303e",
        "cursor": {
          "ref": "31fad74a-5fc8-406d-ae83-f7d34b4196b6",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3bf2fc69-5367-4e34-a1f4-ec6d9a343d24"
        },
        "item": {
          "id": "93bdd1b3-f200-4774-a5e9-0f3f4cf5303e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8a92d34a-27b9-48a0-b25c-de9843c116c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc30b68-7802-427e-82b5-7571f69581ac",
        "cursor": {
          "ref": "35b009f4-1397-48b9-a6ca-93ca7546d818",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "50dfac58-874e-4540-b5dd-f1fdcbb5855c"
        },
        "item": {
          "id": "dbc30b68-7802-427e-82b5-7571f69581ac",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ac5c4adf-f55c-4f5a-b9c9-87ff85861c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "914ecd34-568c-4609-a1bd-e82151f70453",
        "cursor": {
          "ref": "0d5f1c05-f3a9-40f5-a08e-fcccbee33952",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f0864258-a4fd-4a99-880c-1c6779fa1744"
        },
        "item": {
          "id": "914ecd34-568c-4609-a1bd-e82151f70453",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5e981236-238e-4d29-ba81-15cd32440e66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91861b9-81f5-4159-838a-0e9ba9f0ea38",
        "cursor": {
          "ref": "54a7f30f-a9df-4e2a-9cd5-fd6a0505e375",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "35fff297-ff5b-4829-b8c0-a652a89104a1"
        },
        "item": {
          "id": "b91861b9-81f5-4159-838a-0e9ba9f0ea38",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "65e298c0-d90d-4ade-ba69-79f74e29d05d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57f5b25-7dc7-4192-a4cb-c3bf33ce22f0",
        "cursor": {
          "ref": "d3a44a98-a16f-4604-b4f6-a964ef7a7d25",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f87711c5-8d88-45a5-a157-d351036258d2"
        },
        "item": {
          "id": "a57f5b25-7dc7-4192-a4cb-c3bf33ce22f0",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "74dbbd5c-bd79-49a5-829c-509aca447986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e81dfb65-bdea-4fb9-a4bf-536293eff0e3",
        "cursor": {
          "ref": "9d430338-4815-4160-91c3-ff37b2a3347e",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "1b7c7ff4-17a5-4b37-99cd-5878e059ea65"
        },
        "item": {
          "id": "e81dfb65-bdea-4fb9-a4bf-536293eff0e3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5efa11a2-1b89-4c3a-9e30-bc9cba43b7e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad7c632-5390-419a-b9f9-687d2a3c526e",
        "cursor": {
          "ref": "f839d0ff-7789-4574-b358-66e282e5f143",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b0a3a8f1-cd2f-4526-8a17-ecc4a8353614"
        },
        "item": {
          "id": "5ad7c632-5390-419a-b9f9-687d2a3c526e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "71a81cc0-fb46-4ee4-8682-715b82272a48",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "308661af-4a7f-4c24-8756-89a746809b6a",
        "cursor": {
          "ref": "f6eac81e-5ad6-434a-908b-82156abd3dec",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d4dd281d-8031-4197-8c8a-1a73938cc60e"
        },
        "item": {
          "id": "308661af-4a7f-4c24-8756-89a746809b6a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7196e56e-9d75-4973-96cd-01c76edfd40d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1725f40c-a7ba-46ba-b13e-d2fae2d43061",
        "cursor": {
          "ref": "c7a464d9-67e3-4c2f-8870-e1700b25cc2f",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "287bbd53-a782-4dee-a0db-1cef79ba303e"
        },
        "item": {
          "id": "1725f40c-a7ba-46ba-b13e-d2fae2d43061",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "bcecf3e4-6b98-4ae2-ab72-635beff4d09b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0282b0bc-6fe6-42b0-8109-c85e2a7d784c",
        "cursor": {
          "ref": "da72d5cc-b36d-45f1-8e1f-86a5b94184dd",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "bc8fdac5-76f8-44e3-93a5-4f087a4427fd"
        },
        "item": {
          "id": "0282b0bc-6fe6-42b0-8109-c85e2a7d784c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "514a03b7-d68d-466f-b2d7-a1863490cd96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0295610-28cf-4284-b132-bf15d7ec1a15",
        "cursor": {
          "ref": "09880c8f-1108-4a3f-b49e-7bdacb15478d",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c6249cb7-23b1-4913-90ac-fd003fd414c7"
        },
        "item": {
          "id": "a0295610-28cf-4284-b132-bf15d7ec1a15",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "172b8071-be4f-49f2-955d-cd29c034f30f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f4ce984-9fb8-4d04-a7df-148069414f44",
        "cursor": {
          "ref": "1664cba8-3cb7-4dfa-8063-c7939235dcc4",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "636d48d2-567b-4654-9d3c-30b81d1b329b"
        },
        "item": {
          "id": "0f4ce984-9fb8-4d04-a7df-148069414f44",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "775bb170-df0c-47ee-b191-c1323824c070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb70998a-4904-43e7-9838-02742e36eb9d",
        "cursor": {
          "ref": "513cf2f8-b6f2-4d0d-8f0e-3fa2a3c86a72",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "713a554d-ea21-44a5-829f-d55067fd8965"
        },
        "item": {
          "id": "cb70998a-4904-43e7-9838-02742e36eb9d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6ee7104c-f86b-4a77-9018-671545304b92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db548668-ff86-4609-abc1-cc08dc12342a",
        "cursor": {
          "ref": "f7c24ad6-74ac-4040-b875-801139139ea5",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "253d27d2-fb99-40cb-aa4f-62c55bc98bdc"
        },
        "item": {
          "id": "db548668-ff86-4609-abc1-cc08dc12342a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "28185f92-a73e-4556-bb2f-54ebc644360d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e8cb2b-818b-4cd7-9f12-fa056f946e90",
        "cursor": {
          "ref": "0aeaf00f-deb2-4415-b10d-24dcab9f69a1",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8e2b3187-6fdf-4727-a1eb-fe92fee733af"
        },
        "item": {
          "id": "58e8cb2b-818b-4cd7-9f12-fa056f946e90",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "64704cc9-cd4b-406c-bb1d-c6dade02072c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d793314d-c6fe-4652-bd9f-944972703997",
        "cursor": {
          "ref": "ab484c8a-c2d4-4e63-bc2d-e1d94dffb11a",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a559f606-865b-4902-8ece-1f3c5eebb60f"
        },
        "item": {
          "id": "d793314d-c6fe-4652-bd9f-944972703997",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4f6bb615-c115-4ab0-bb3a-cfb9bd7c7a92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7a30a6c-6fab-410f-b298-e295d63a750a",
        "cursor": {
          "ref": "6d0945d4-285f-4b8f-985d-c7e68452dc16",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "2c612fd3-b4a4-4e91-9544-18cd6222d9fc"
        },
        "item": {
          "id": "b7a30a6c-6fab-410f-b298-e295d63a750a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f899d4df-1e38-4651-8706-65de36dc6f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dbccb5e-c1ad-41d1-9c3e-da8b88a1a085",
        "cursor": {
          "ref": "93671cfa-f7d6-4972-abc2-06a0d9777359",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "78a5d8e9-1807-47c9-926c-011e530f6a04"
        },
        "item": {
          "id": "4dbccb5e-c1ad-41d1-9c3e-da8b88a1a085",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8cd26721-7f61-4246-8bcd-36bffbd0f4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad427ab9-6526-4014-8ec1-8634a5a8034b",
        "cursor": {
          "ref": "808ac2ec-9746-4071-b5e5-182c44fdf0f9",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c1969cae-d1a2-414f-aed7-5f02958afaab"
        },
        "item": {
          "id": "ad427ab9-6526-4014-8ec1-8634a5a8034b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "34b57497-fda2-43a3-9f2c-b6841659465a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9368063c-187f-4c9f-a88f-dcb860d1e831",
        "cursor": {
          "ref": "ae6588c2-c38d-4b0a-af1f-4644d55e70e0",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9a7df0cb-6d29-4876-a61a-3806707f7cc7"
        },
        "item": {
          "id": "9368063c-187f-4c9f-a88f-dcb860d1e831",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "4cf50900-e9a4-4e6d-80f4-0147581e365c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "476dbd1b-57b6-4369-8140-c0fdc9a74849",
        "cursor": {
          "ref": "0c0cea69-f4b1-4531-b797-fcfa552a35d7",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f0061626-1e49-4408-a338-eb2546cb0431"
        },
        "item": {
          "id": "476dbd1b-57b6-4369-8140-c0fdc9a74849",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "cfeca9b4-09c6-4772-86cf-a393f3a10b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f609a2a-014f-43d3-a219-a521e8243766",
        "cursor": {
          "ref": "49b824d3-cfbc-4c89-8fad-5da7df7c162d",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6940504c-4de6-4d32-b6d8-04827b1db3ec"
        },
        "item": {
          "id": "7f609a2a-014f-43d3-a219-a521e8243766",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "2ea70c63-8030-47e3-889f-b8f7b3cc1fd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd65b6b-8cb0-4fcd-aa20-5e59f0d25af7",
        "cursor": {
          "ref": "8c6807c1-9b3d-46d0-af24-a599256edfbc",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0b480e76-9a78-455c-8335-63455de93012"
        },
        "item": {
          "id": "4fd65b6b-8cb0-4fcd-aa20-5e59f0d25af7",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b955931e-075b-4174-b2d6-f2f6f6a6764c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a7ec299-08b1-4c0a-99c7-b095c303d1f9",
        "cursor": {
          "ref": "80474a37-b9ad-4ac2-b1c0-5e1be39bb4c7",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e5ce8df9-3bf1-465b-9cfb-fb84f009f9e1"
        },
        "item": {
          "id": "4a7ec299-08b1-4c0a-99c7-b095c303d1f9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "7d1fefd0-9b84-4634-94aa-c0fbe67aa952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f55e12ef-81f3-47e4-ac5a-efc4c773c79d",
        "cursor": {
          "ref": "c4378c0e-c647-442f-94d1-3c9e86311c93",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e0898bf1-fb52-46dd-b047-5d5f8e803e74"
        },
        "item": {
          "id": "f55e12ef-81f3-47e4-ac5a-efc4c773c79d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "2500d2ef-f4be-4709-a87d-54299afa6281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e289a76-a3b2-444c-a6ac-ebef5905187f",
        "cursor": {
          "ref": "3bc6ffb3-2560-45bd-be38-f010147ebdb6",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1527a5c3-a7d5-4c49-b5db-5dc767fb0576"
        },
        "item": {
          "id": "6e289a76-a3b2-444c-a6ac-ebef5905187f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ef486dcf-0ac5-4ff4-ad34-3009c078af67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef3080b-fb4d-4bbf-b7ac-1911bea07b0f",
        "cursor": {
          "ref": "2cae2f56-5f0d-4e30-9552-4278c5b94e90",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "44af075d-7e52-44aa-af0c-cdddea22fc12"
        },
        "item": {
          "id": "8ef3080b-fb4d-4bbf-b7ac-1911bea07b0f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "410f4af0-3454-4923-b36d-5b0e4e9b3cb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ee6e15-eb2b-4141-81db-522e69e99dd7",
        "cursor": {
          "ref": "e413d9ed-149a-458a-982e-9435ddebae52",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0f9c7ead-0146-425b-87a8-e7430f3d9da3"
        },
        "item": {
          "id": "53ee6e15-eb2b-4141-81db-522e69e99dd7",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4a9b91b0-18dd-48ca-af97-da6b3504f4c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41e59e29-788e-4688-b0ca-38af1b8c80dc",
        "cursor": {
          "ref": "db52d065-3886-41f5-b20e-c3b3f5aca948",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "937cd4ee-17f7-4321-96a0-30b933f5cd20"
        },
        "item": {
          "id": "41e59e29-788e-4688-b0ca-38af1b8c80dc",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ec618aba-c22a-4ca7-a44c-991051f75f7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9181249c-a45e-44b5-90e3-49004bc74641",
        "cursor": {
          "ref": "cc312ea3-3f79-4ddd-931d-e78e4a1c1e7c",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "823879cc-8682-4092-9289-2e3c929a828f"
        },
        "item": {
          "id": "9181249c-a45e-44b5-90e3-49004bc74641",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "36931e1f-e43f-4c2a-a8c7-0fd01602fa20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9004a4d-caa1-43b3-afbd-1f5cc85fc8d7",
        "cursor": {
          "ref": "233d9f62-da83-4f2e-9afd-8b39ede6cd99",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "92e177ee-3b23-4b65-bd19-ea899da66599"
        },
        "item": {
          "id": "e9004a4d-caa1-43b3-afbd-1f5cc85fc8d7",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "107fb804-5411-4d84-9047-5b0c6216436e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08461f4-9fa0-4a61-b2e4-4bf16e7695e0",
        "cursor": {
          "ref": "e3b7898f-1eaf-4840-b273-1e1533046a8e",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b5b766d3-10e9-4140-9450-0fbddfa62545"
        },
        "item": {
          "id": "f08461f4-9fa0-4a61-b2e4-4bf16e7695e0",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2c361bec-05bf-4322-b4e8-73d0e60328af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da91297e-240d-4ea0-a668-37b9076ac5f8",
        "cursor": {
          "ref": "082984aa-67ee-41be-bd69-81ddec7b6c2e",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "99f5b69a-0d77-4e3e-b765-e6769ef24d05"
        },
        "item": {
          "id": "da91297e-240d-4ea0-a668-37b9076ac5f8",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "27d9fcd1-8b4c-44e0-b70d-5a3fabcc12d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593355f8-1a84-43f6-9bd9-b345a4e9e144",
        "cursor": {
          "ref": "b9b90873-90e1-4d52-8c35-f66369da30c3",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "94d989c5-d9ea-45cd-a4c2-dcfa12a5ae69"
        },
        "item": {
          "id": "593355f8-1a84-43f6-9bd9-b345a4e9e144",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "051444da-ac09-427d-b45f-99a271f89124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee84645-3fd2-4bc3-a1f2-ccde743beb52",
        "cursor": {
          "ref": "47bfd240-968a-47c9-acc1-a15d22c7f301",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d3186389-0f60-4986-908d-81616b613a7d"
        },
        "item": {
          "id": "5ee84645-3fd2-4bc3-a1f2-ccde743beb52",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f00d25ed-9fd1-4081-a13b-8b32ab7dd982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dce02934-4724-44a8-8b36-88fd9e87515e",
        "cursor": {
          "ref": "b5c35092-1b5c-41fd-a92d-c1ad90aaf203",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b042d037-e4ba-4395-810e-b09557694975"
        },
        "item": {
          "id": "dce02934-4724-44a8-8b36-88fd9e87515e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "fce0cac2-9631-4adf-b895-50b1b891a1af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73103cb5-9fd8-41a0-8fa4-5aba5709405b",
        "cursor": {
          "ref": "4212b9fe-00f4-44c4-afa8-b5d6b223cb5b",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a37f05b1-6edf-4ff9-8fbd-cf1ecfec933d"
        },
        "item": {
          "id": "73103cb5-9fd8-41a0-8fa4-5aba5709405b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "649358ff-4b16-4f21-b1cd-0cdc7a93514a",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "bdfca008-a8de-4419-ae33-243294733795",
        "cursor": {
          "ref": "55e1b55f-8a9f-439f-a6ec-2236d4c1b17c",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b4070473-d93a-4454-9c34-f479489010f8"
        },
        "item": {
          "id": "bdfca008-a8de-4419-ae33-243294733795",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "92ce0354-4b41-4195-aa7b-4269634e782b",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "bb369a1a-1ad9-4d47-bdf9-2d4b3c9aa4be",
        "cursor": {
          "ref": "22a6b28d-6892-40c0-97da-fc48e5888e07",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "3a5f7bbe-2457-460b-bd9a-193b43402d7b"
        },
        "item": {
          "id": "bb369a1a-1ad9-4d47-bdf9-2d4b3c9aa4be",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8bd0dd84-00d1-4e42-9492-0803522c2d5c",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "298522e3-e956-4d4b-b890-b1aa17d78cfd",
        "cursor": {
          "ref": "a7b5a635-a31b-4ac0-abd5-dbcfa2d200df",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "fe4dc7a0-1357-4fda-93b7-5df077ba6d73"
        },
        "item": {
          "id": "298522e3-e956-4d4b-b890-b1aa17d78cfd",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f1638b17-4bdf-4154-b1ad-ef7fe7288842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb57c4f4-37fd-416e-859f-52f366554256",
        "cursor": {
          "ref": "ebc7d167-3c8e-4d81-b509-df30b53779c6",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3f3a44d3-b752-4bfc-a999-82a1e14b0ede"
        },
        "item": {
          "id": "cb57c4f4-37fd-416e-859f-52f366554256",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1572340c-a54a-4519-adf3-4260577e7b74",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "4aa8fce4-3693-4fac-b373-38276a0d2fac",
        "cursor": {
          "ref": "6ec4fc87-ed48-4d38-94b7-245e0beea3bc",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "726ffd74-4a46-4b5c-9a26-d85d554773b5"
        },
        "item": {
          "id": "4aa8fce4-3693-4fac-b373-38276a0d2fac",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "75297f9d-46a9-411b-a43c-50271ddf42a0",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "73a21e2a-5c2a-4ab6-9d76-6bd05101c9aa",
        "cursor": {
          "ref": "eac30eff-97ee-4c3f-bd9e-71d68cbeae07",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d4398676-b862-41b4-9dfb-004efbda097f"
        },
        "item": {
          "id": "73a21e2a-5c2a-4ab6-9d76-6bd05101c9aa",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9bf2fcde-0fe1-4e9f-bdf9-233b34e45113",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "5011d4a1-3d82-4495-87e1-49405ae0a720",
        "cursor": {
          "ref": "a174d0ee-436d-41a5-a213-a5e52babd947",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "bca01564-8b52-4c20-8930-11689ddc89f3"
        },
        "item": {
          "id": "5011d4a1-3d82-4495-87e1-49405ae0a720",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "fb719ba7-0c0c-4493-92e2-9c595ccdf719",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "7a6137aa-83ff-4b1c-a24d-6c13f083fdb8",
        "cursor": {
          "ref": "5a8a90d3-f873-4321-8eca-7f9105a16e4c",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0891d899-3ab3-4b48-b06d-eb6a002d9817"
        },
        "item": {
          "id": "7a6137aa-83ff-4b1c-a24d-6c13f083fdb8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "19ac603f-4ab4-4d29-b1b2-bae052ce7817",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "cf3bcfc2-4f94-45a4-879b-ac574ceec7a3",
        "cursor": {
          "ref": "cdd9093c-cc8f-4f18-9dd0-5a03a4d307e5",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "186213b3-0e77-4cf5-b232-e851055f7b38"
        },
        "item": {
          "id": "cf3bcfc2-4f94-45a4-879b-ac574ceec7a3",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "07f436f6-033f-4a5f-b666-d295d61ed3ae",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "1a729662-4cce-4ec5-b25b-9a172e4ebde2",
        "cursor": {
          "ref": "f836bfcc-27ef-4680-a057-3843999a225f",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "25d10ff2-e49c-40cc-aeee-fcde30e11146"
        },
        "item": {
          "id": "1a729662-4cce-4ec5-b25b-9a172e4ebde2",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c4db61c7-1593-4563-837f-8c20dc7cc860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dcba444-17ad-4d32-8744-48e4b7d2fe31",
        "cursor": {
          "ref": "d9e608ec-8e38-45cc-82ba-8a2243366526",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "3b0f1d45-c9b4-4aa5-a9e5-8815b361c0b2"
        },
        "item": {
          "id": "1dcba444-17ad-4d32-8744-48e4b7d2fe31",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c43958c8-0504-4698-92e5-df6c07fcbb00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f4c31c-fe86-456a-9f0d-9ba13184de1f",
        "cursor": {
          "ref": "f4fa28ea-6a84-4122-a136-5f9f0ffadba5",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5b09564f-0a1b-4503-9931-989d8cdf405a"
        },
        "item": {
          "id": "b4f4c31c-fe86-456a-9f0d-9ba13184de1f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "64a6cd78-4422-458b-bf06-af7e98ebf9eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54cf637d-be47-4da2-9584-7eff108fef78",
        "cursor": {
          "ref": "a41d3c56-24a8-4ef1-95f0-b06fb3da57ba",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e059ffd8-5355-4610-b18b-bdd2e7e586eb"
        },
        "item": {
          "id": "54cf637d-be47-4da2-9584-7eff108fef78",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8bacb74a-7b90-4128-8d85-bad8012b957d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "443dfa82-c890-4d70-aa13-8b711bf5b2c1",
        "cursor": {
          "ref": "021f0874-5bd8-4837-9b92-ddcc1ffa7570",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d770302d-8b89-4fb1-be46-9d905a36b97d"
        },
        "item": {
          "id": "443dfa82-c890-4d70-aa13-8b711bf5b2c1",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a14ded48-610f-468d-a1e1-11caaf661bfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b11d8dca-a9b9-4b17-b141-e57df214f5ea",
        "cursor": {
          "ref": "ac3ba22c-2116-4868-96eb-776d1e1aba52",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "5e9fbdc9-323a-40e6-9c4d-1196e5e944fb"
        },
        "item": {
          "id": "b11d8dca-a9b9-4b17-b141-e57df214f5ea",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "9f9d9714-2bd2-42d9-928f-7599e7cccfb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff9861ab-cb1c-4815-b6c5-7ffa741bfef8",
        "cursor": {
          "ref": "617228a2-ac94-48ea-81e3-8ffb9a13502f",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "2dc32440-20f7-465f-bd01-9030458723f4"
        },
        "item": {
          "id": "ff9861ab-cb1c-4815-b6c5-7ffa741bfef8",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f4c96980-c485-43e2-92e2-556d6de94225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43210cd4-f77e-41d7-8d25-ab5db53689b1",
        "cursor": {
          "ref": "8bc6ce58-075d-486b-a020-59e94166cd84",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d6da4139-99cc-47c0-be7c-f0f50f5edf0c"
        },
        "item": {
          "id": "43210cd4-f77e-41d7-8d25-ab5db53689b1",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "34f90e55-d236-44e8-af54-be0ea7b6ec8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09bb5a3b-4c36-4d75-855e-fe050f8905f5",
        "cursor": {
          "ref": "5626760b-5f8f-4ce0-8d4b-072c92109f1a",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "6a9e7193-741b-41e0-8cf6-f739f8e6e8f6"
        },
        "item": {
          "id": "09bb5a3b-4c36-4d75-855e-fe050f8905f5",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e84799a2-f9c2-4d52-bcfd-5f55c209832b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff13e97-f51c-4a3c-8c33-570a2a1f0fec",
        "cursor": {
          "ref": "2fb8ee19-bd2c-42d1-894c-175373a93586",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a0f8a5be-75be-4435-90ac-f1aab31fa65a"
        },
        "item": {
          "id": "9ff13e97-f51c-4a3c-8c33-570a2a1f0fec",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "95425ca8-7a11-4422-9c3a-3c06ce8bcfca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88c2d66-d872-45e2-93c1-0e7559d4af2a",
        "cursor": {
          "ref": "d86a59d1-f67c-4216-906d-0058b28376c4",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9c9ad4c9-c6c1-4e22-a94e-6f05f8caa90c"
        },
        "item": {
          "id": "e88c2d66-d872-45e2-93c1-0e7559d4af2a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a7308b4a-83cf-4676-a357-089a86c052f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de673fb-5431-4f43-83b9-1939b6cd04f8",
        "cursor": {
          "ref": "2c073941-5a8e-4a6d-b168-4e7f103ca7ed",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e14019cd-72a1-4ef1-8eab-ab9a19145ea5"
        },
        "item": {
          "id": "6de673fb-5431-4f43-83b9-1939b6cd04f8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "516dad78-0ef1-488b-a708-1aae16f6e21b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "880fbea5-fb1c-4a56-bc13-3237a86d4466",
        "cursor": {
          "ref": "1ef89dfa-13ae-413e-97b5-cd603527ac0c",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "96b0bd93-570a-443e-9506-3dff2596d2af"
        },
        "item": {
          "id": "880fbea5-fb1c-4a56-bc13-3237a86d4466",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "15b7c383-e616-441c-b434-ca99d7f9ecf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f3f8da6-591b-4af8-ab7f-69e2e8f988ea",
        "cursor": {
          "ref": "83edf205-0958-44d5-868d-9eacfe725828",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1f361004-436c-428b-bba0-bee8c553fe8f"
        },
        "item": {
          "id": "7f3f8da6-591b-4af8-ab7f-69e2e8f988ea",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6d589150-36a8-4f80-8f49-799334248cc2",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "47080511-a641-4c7a-b0ba-a6e3f16ff9eb",
        "cursor": {
          "ref": "156d7a90-ce79-4f1e-853d-2d162a27994e",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "aff4c894-0ce0-48d6-ae08-2bc46f51ac4e"
        },
        "item": {
          "id": "47080511-a641-4c7a-b0ba-a6e3f16ff9eb",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a2f65bc0-13d4-46ba-a637-cb5cb39130fe",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "57b40f36-61f0-4c19-9cb1-ec2a39e88b83",
        "cursor": {
          "ref": "b132460a-27e9-41ce-a963-8a574f207da7",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "73e06434-96d8-4723-855d-d6753f7284ba"
        },
        "item": {
          "id": "57b40f36-61f0-4c19-9cb1-ec2a39e88b83",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8719a946-e9e5-463f-bded-948a21dccd6c",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "66a649de-1824-45ad-9e75-3f456d92b6d9",
        "cursor": {
          "ref": "8c9d1408-b568-4e44-b94f-2c62dc491e96",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "bc7cf135-3bfd-4dee-84d5-2f71a0500cd0"
        },
        "item": {
          "id": "66a649de-1824-45ad-9e75-3f456d92b6d9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8afe67f8-5950-40ae-9070-c37a54beeef0",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "523d2157-015a-4386-9735-569495b0c2a8",
        "cursor": {
          "ref": "530d41f0-905f-450f-a6e9-9febbad162da",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0cb3ffdb-258c-4215-a75c-80149a8a3c71"
        },
        "item": {
          "id": "523d2157-015a-4386-9735-569495b0c2a8",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6ad9d1f1-9f89-4d91-ac8f-6314305bff47",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "1eb7dfbf-0c7e-4802-9e79-578e7ce42e92",
        "cursor": {
          "ref": "7808cd5b-03ec-4bf2-a58a-4152d520633b",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6507f416-38b0-4553-ae9e-025f371a9d37"
        },
        "item": {
          "id": "1eb7dfbf-0c7e-4802-9e79-578e7ce42e92",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9e4460d8-933b-4efb-ae83-c2bc971169df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c254ed2-5ad4-47fa-9d81-9fdc458d562f",
        "cursor": {
          "ref": "5425aa4b-1c29-47c3-95d4-376401820970",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "bd0460c7-c841-4834-81f3-7797364dd602"
        },
        "item": {
          "id": "0c254ed2-5ad4-47fa-9d81-9fdc458d562f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "7ec54f65-9da1-4ae0-9487-adf2f7df0dd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e983daa-143f-40be-9a18-6bfc72bf63e5",
        "cursor": {
          "ref": "b532e8ad-4347-4bfb-b82d-9f6cd77c7b84",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ad10de02-5ef8-47c6-8c57-19be8dfe75a9"
        },
        "item": {
          "id": "4e983daa-143f-40be-9a18-6bfc72bf63e5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e756e7ec-bd4a-41f4-bd54-9e346f59182d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b699aba-d261-432d-b61f-25ea4512cd91",
        "cursor": {
          "ref": "0fb3def5-da1c-41ce-87dd-b8cf34a2e4e4",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "cd631a38-7222-45e2-bf53-7fe1f26d00d6"
        },
        "item": {
          "id": "5b699aba-d261-432d-b61f-25ea4512cd91",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6254b87f-3dc5-45c4-8b6e-01d0487baf07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f54dc8-d6cc-46cb-8702-81a4d1d2305f",
        "cursor": {
          "ref": "63f681dd-b2f9-47dc-9ed5-031b579f003a",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "fadf506e-37a7-4eaf-a2b4-5c4ad5374d0e"
        },
        "item": {
          "id": "16f54dc8-d6cc-46cb-8702-81a4d1d2305f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "088ba7dc-326a-4df2-bc2e-3f2771aac0fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5391c1e5-3374-453a-a107-70439a5610d8",
        "cursor": {
          "ref": "4fd4a6ba-db07-4b36-971f-3e973a28b800",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "18571103-615d-4e78-be3d-a0818246fc06"
        },
        "item": {
          "id": "5391c1e5-3374-453a-a107-70439a5610d8",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b6124e27-45b1-47ec-8c51-cdb66019c707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b303bca-f7ac-4076-8879-c475d175159d",
        "cursor": {
          "ref": "0c778e47-7a36-4a70-b3af-fd7590ecc847",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "3085e915-2426-4e2a-83e0-3db0efcc3b78"
        },
        "item": {
          "id": "6b303bca-f7ac-4076-8879-c475d175159d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "28de88ed-79ad-4fce-a657-2b5218171dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec3b4df-8d8e-4271-a66e-c4712df39a08",
        "cursor": {
          "ref": "b60e90d8-0df8-439b-8441-3f32882b7c64",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "0a525358-0ee3-4b9d-bc37-1cd72bf78b34"
        },
        "item": {
          "id": "4ec3b4df-8d8e-4271-a66e-c4712df39a08",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ce336620-4fc7-489f-97f9-860c437981eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99545a70-60d0-42af-a164-6e168c3a902e",
        "cursor": {
          "ref": "9b18023b-efdd-4d29-864d-d06df648c11f",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "39a379fb-c703-48d9-96c3-d3b6e79f6a3d"
        },
        "item": {
          "id": "99545a70-60d0-42af-a164-6e168c3a902e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7ac6275a-d160-4df1-945f-99f0f4053bfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec227181-1afd-4cea-955c-7019d3887eb1",
        "cursor": {
          "ref": "7530c855-eafd-44b7-8237-f10f4f9ac449",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "237d01b1-d16e-40d8-b239-9885bb057b05"
        },
        "item": {
          "id": "ec227181-1afd-4cea-955c-7019d3887eb1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4cf1c8ac-2811-4b8e-8010-d5b6f86a90dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "810fcca5-e0ac-4e7d-887c-78541fab71a1",
        "cursor": {
          "ref": "a8471dfc-4407-4d18-a58c-2abbc042f1f1",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "70779403-c4b9-411f-b6c6-aa6b3c7cb2bf"
        },
        "item": {
          "id": "810fcca5-e0ac-4e7d-887c-78541fab71a1",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5f3aea06-8d04-48d7-b092-806d4a230e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24c19c2-02d9-427d-bf2f-ddc9c9188444",
        "cursor": {
          "ref": "a265ce84-b563-485a-815e-f18d1dc38fb2",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "10ec7d3b-db00-469a-871c-5fec63ba3e28"
        },
        "item": {
          "id": "d24c19c2-02d9-427d-bf2f-ddc9c9188444",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "976543b1-d2c9-4efb-ab34-74ae3b9a415b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce48f7e3-0c09-4ceb-8766-4a0fabc96ec0",
        "cursor": {
          "ref": "d14595bc-b4e6-4079-9e19-92f08f6e1e29",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b2c5aa5d-7d1b-47dd-a1d0-d7b8ce86654e"
        },
        "item": {
          "id": "ce48f7e3-0c09-4ceb-8766-4a0fabc96ec0",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "43d81fce-0710-4367-b7fe-e6b85c6d3a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6461412d-3372-48ef-87aa-71c250998d6a",
        "cursor": {
          "ref": "8a65c8cb-95c0-40c7-8cce-4cbc098d4592",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c489bcfc-ab31-4253-bcdb-52e0e3302666"
        },
        "item": {
          "id": "6461412d-3372-48ef-87aa-71c250998d6a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "af2a8e8d-162e-43ed-88ac-2da4c9a2d1a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aea35da-5470-4613-b2e7-89deba2b5312",
        "cursor": {
          "ref": "f80ae1d0-efa4-4a9f-a27f-4a9b0d1330b2",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a2d81e03-c156-4e18-a1bd-c651de10e06f"
        },
        "item": {
          "id": "9aea35da-5470-4613-b2e7-89deba2b5312",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1ee8991a-b2c6-4873-beb9-b2d1b4306a8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78749000-c7ff-4bae-9bc8-833b96ddb2a6",
        "cursor": {
          "ref": "44acda50-97ca-47a4-9205-8bb7528c5a0f",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "4defd05b-de51-4afd-9a1d-9685351a938e"
        },
        "item": {
          "id": "78749000-c7ff-4bae-9bc8-833b96ddb2a6",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5b61eca9-46a7-4059-a0ab-dff2cdbb2ab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea9dc28-1e34-4fca-98d0-35454f65f2c4",
        "cursor": {
          "ref": "a53c4606-ba3b-43c7-af47-ede26b2cfbf1",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "283e550c-aa62-46f5-bfe9-cd30aa843516"
        },
        "item": {
          "id": "2ea9dc28-1e34-4fca-98d0-35454f65f2c4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "765a649d-0318-41ec-a9cb-93f27ec459b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecba05b8-f1cf-4511-836f-1161ed332369",
        "cursor": {
          "ref": "5db07a8f-52b2-42db-986e-89bd5e3afeb0",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "409b0871-06b6-4170-b4b6-1ae6d2aae322"
        },
        "item": {
          "id": "ecba05b8-f1cf-4511-836f-1161ed332369",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "21894802-f91c-4bd3-abbe-69d3a3c31992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc2fcc60-96c9-47b8-8db8-eb3fb7eabb38",
        "cursor": {
          "ref": "ec2c02d1-6557-486f-8351-f0666edfb39f",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "38f7a98c-1f79-4f41-a124-57657f275b00"
        },
        "item": {
          "id": "cc2fcc60-96c9-47b8-8db8-eb3fb7eabb38",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f5a07029-4236-4f4d-afad-5de8c6d66c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf8fa20-ca18-47ca-a2b9-51b196a961e2",
        "cursor": {
          "ref": "1a2595b0-63c6-4062-8991-d0c1a27fa9c0",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f735b1b9-f2f6-4e93-aab5-df5b8a58291e"
        },
        "item": {
          "id": "bdf8fa20-ca18-47ca-a2b9-51b196a961e2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a8a965a6-88f4-4afd-9b67-35e1cdf1fe8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df2d3e9-e1df-44bc-8b32-eeb1044d4bd4",
        "cursor": {
          "ref": "0db7b82f-2877-4c1d-9106-013b391cbd59",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "56b6d0e4-0595-47d4-8995-84656ebc62f5"
        },
        "item": {
          "id": "3df2d3e9-e1df-44bc-8b32-eeb1044d4bd4",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "de555e28-2a9b-43e7-874f-4f03b5903288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db92dfd4-0599-4d15-b17d-f6020e40e073",
        "cursor": {
          "ref": "05b0b517-8336-4997-9c16-093083e2c631",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0bf00bf9-2ff8-41c5-9a5a-ffb109bc8224"
        },
        "item": {
          "id": "db92dfd4-0599-4d15-b17d-f6020e40e073",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "47e7575a-3b86-4606-93d4-2bdf4aed1041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb90541a-7363-468c-834c-55e61bc6004e",
        "cursor": {
          "ref": "4ab77357-c7d4-4d38-868d-6aea8e23d408",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a332ede6-9efb-4b6f-a00f-d7801490b9d2"
        },
        "item": {
          "id": "fb90541a-7363-468c-834c-55e61bc6004e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "562fc457-e114-4b91-b939-36af6fede889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0057833-2177-44d3-8f40-8c97eefe4642",
        "cursor": {
          "ref": "16790ef3-47ff-4c18-a3db-c822b7debaa6",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "05e6df36-7ce0-4a43-8c29-0f6a10637b55"
        },
        "item": {
          "id": "c0057833-2177-44d3-8f40-8c97eefe4642",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7276cfba-57e0-41c0-b36b-b72d9fe3430a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ebf7124-b2c3-40b7-942b-a775cc716d91",
        "cursor": {
          "ref": "6e04984e-8ac4-4268-9cb5-7fd9d812e0f2",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "66fe330e-d103-4d7c-925b-dc03cb04f17d"
        },
        "item": {
          "id": "2ebf7124-b2c3-40b7-942b-a775cc716d91",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3f80accb-e208-4013-a72e-1e9132940c25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "821a3e65-b619-4e6d-8c35-d7a3c08c0f64",
        "cursor": {
          "ref": "6cec437c-7556-4e2c-86c3-4655b66a737b",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "31d5a5d1-3e46-4d98-82b8-ba3b55764fbf"
        },
        "item": {
          "id": "821a3e65-b619-4e6d-8c35-d7a3c08c0f64",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "41e15104-8527-4889-9fe2-98d8ace093b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05023ce4-9f61-4abf-a258-951bad3a3b94",
        "cursor": {
          "ref": "9e1591cd-4abb-45b9-aa4f-80284ba0771b",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5bc3f95f-29df-49fe-bb91-fea1bdb7726f"
        },
        "item": {
          "id": "05023ce4-9f61-4abf-a258-951bad3a3b94",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c69413aa-cd36-4b45-b8d1-8656ce34744c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61623190-eb4f-4b9c-901a-f029a5522be5",
        "cursor": {
          "ref": "4b8149ec-b1f4-40cf-a4bc-2d9d07213ca2",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "53dc7307-83e3-4f4e-953b-a5d4e8638ec8"
        },
        "item": {
          "id": "61623190-eb4f-4b9c-901a-f029a5522be5",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5efe1492-82bb-4183-812e-0f4ba6969f23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c980401-95f1-4a87-84c4-817ef1378e93",
        "cursor": {
          "ref": "1c22cde5-aaca-4aca-bb89-f978dc2b3b3b",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "591a0beb-9ec8-427c-8c90-23b3e81e68c0"
        },
        "item": {
          "id": "9c980401-95f1-4a87-84c4-817ef1378e93",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d8a87817-8827-4f2b-9475-be4391aeeeae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7adccec3-b616-4377-9f54-5bf1ffc7152e",
        "cursor": {
          "ref": "26cb837e-dfb6-4ade-b566-987cf7618606",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3914e1fa-dff6-4fc6-94cc-20487fd8ddba"
        },
        "item": {
          "id": "7adccec3-b616-4377-9f54-5bf1ffc7152e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e1f63e9f-a9ea-4380-a7d4-177f017983df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd2c90a0-b1fa-4115-9e57-f1ca0811f526",
        "cursor": {
          "ref": "2f294aec-7bc7-4ea1-a8d0-ce51303f1c33",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7a4beebe-85fd-4b67-a5e5-1e9294705a72"
        },
        "item": {
          "id": "cd2c90a0-b1fa-4115-9e57-f1ca0811f526",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7aba1452-6731-4f6a-823e-487ddb9ac90c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0cf9b6d-1f08-4475-8b06-8a23cf8b8c97",
        "cursor": {
          "ref": "cd51915a-7cef-4130-a7f8-e77aae8b964b",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3654de47-d7a0-46b9-ab38-9b3a6e980676"
        },
        "item": {
          "id": "e0cf9b6d-1f08-4475-8b06-8a23cf8b8c97",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "90f046c8-0250-40b9-950e-772a295b5046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89b74cb-b39d-493d-ba51-4a5616980696",
        "cursor": {
          "ref": "3d7719f0-14cb-40a6-9ae3-2ad32c20e4a3",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "82856a8d-1fa2-4831-aaf8-6e610ee991f7"
        },
        "item": {
          "id": "b89b74cb-b39d-493d-ba51-4a5616980696",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "30fb1365-51fc-47fc-9529-99a812b6549f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "640c6d16-309c-4bb6-92f0-2e6a23cb30f1",
        "cursor": {
          "ref": "468f7788-1fae-46b3-854b-f7dcdd3660bb",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "39e8ce84-b93b-42eb-9054-6b558deab458"
        },
        "item": {
          "id": "640c6d16-309c-4bb6-92f0-2e6a23cb30f1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b8496f32-3163-464f-953c-10957b2207dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5b679c-b278-469f-9882-79195ba4f823",
        "cursor": {
          "ref": "206e8744-89df-4f9d-af48-b79e63d29f5b",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "66a6eac2-8a31-49fb-9ead-3502a9e1c160"
        },
        "item": {
          "id": "2c5b679c-b278-469f-9882-79195ba4f823",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "930fbdcf-0b77-4c03-a314-9c8404fadd56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7997cc6-f517-4a6b-bf26-ae96fa587c93",
        "cursor": {
          "ref": "315c8534-943e-4141-8934-4ae5c920dc44",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a088dcd6-9e31-4a15-b640-dba5fbe300c1"
        },
        "item": {
          "id": "f7997cc6-f517-4a6b-bf26-ae96fa587c93",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "c26ef139-a979-4531-a6ee-956481989772",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "667b5841-33f0-482a-becc-44ca2be146be",
        "cursor": {
          "ref": "57be1459-f9fd-4c3b-a030-a6238e1dcbaa",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "667d1219-0ff9-44a3-9c84-6f87b0212787"
        },
        "item": {
          "id": "667b5841-33f0-482a-becc-44ca2be146be",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c1ea6b1f-ce64-4721-b1d1-559386ac7c58",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d54a29b2-b4d6-455e-baf8-67e79a582a8a",
        "cursor": {
          "ref": "eac25f22-487b-482b-b1b9-b06982727dae",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b70b15f8-6539-4ca7-b11b-61cb7b7a1575"
        },
        "item": {
          "id": "d54a29b2-b4d6-455e-baf8-67e79a582a8a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d766b064-fb56-459d-9844-9ba64092c805",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d330fb8-7bad-4a0f-a74f-070fe2196229",
        "cursor": {
          "ref": "bd3d8673-3911-4ca2-9eed-57e0b4880b55",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "82535a67-3c81-444e-a3ab-57740b200c68"
        },
        "item": {
          "id": "9d330fb8-7bad-4a0f-a74f-070fe2196229",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "aca23280-6cac-477a-a783-43366c20a892",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d330fb8-7bad-4a0f-a74f-070fe2196229",
        "cursor": {
          "ref": "bd3d8673-3911-4ca2-9eed-57e0b4880b55",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "82535a67-3c81-444e-a3ab-57740b200c68"
        },
        "item": {
          "id": "9d330fb8-7bad-4a0f-a74f-070fe2196229",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "aca23280-6cac-477a-a783-43366c20a892",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a036a57d-feae-4910-979f-37b7c75a8f7c",
        "cursor": {
          "ref": "14447866-2b79-4e26-8470-66f01f34bee8",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "abed9b8b-36c0-4b8c-aae0-2f12551d5784"
        },
        "item": {
          "id": "a036a57d-feae-4910-979f-37b7c75a8f7c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "948e34cc-c453-4f74-a3c0-80f9ce9fe679",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "238a5d8d-e5e4-4941-ac39-29cc7308ce9e",
        "cursor": {
          "ref": "abe092c8-4872-4e2e-a54f-0c8b58f5516c",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "53a9540d-3748-4c8b-af28-dc2cebc755e6"
        },
        "item": {
          "id": "238a5d8d-e5e4-4941-ac39-29cc7308ce9e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ebf0e9c9-5064-42f1-b8ff-2792d1ca2efd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}