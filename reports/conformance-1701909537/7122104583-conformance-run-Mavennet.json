{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "753b386f-4c3f-4337-86c5-f86e1ed106dd",
        "name": "Clear Cache",
        "item": [
          {
            "id": "646ad5ff-6ff1-4b9b-ad1e-e4b6921b9687",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dd67c578-f004-41d0-9f51-583cc129a463",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "957f35f9-9d02-4cc4-a23d-98437a274c17"
                }
              }
            ]
          },
          {
            "id": "c2086cdc-bf31-489f-a183-1a157af234ab",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b6f55537-93f8-4ba0-9dc4-28cb31ef3fd1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "da269e91-1193-4bc8-a453-93878e20d6ae"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "14a1c416-76e8-4027-9b06-9b1df0da5891",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3d77e6a6-e2bf-47c9-b5a9-95edef35b701",
            "name": "Positive Testing",
            "item": [
              {
                "id": "adfcbdf9-1566-441f-b66c-6111d55b11a5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a12b023-a114-40c8-bca2-a6b5367c669e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97a4eb96-a1e6-4e46-a292-b27f30db3237"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8cc2fe49-6935-45f8-b268-191d178a5a0b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9535bbd0-1ea4-4786-96f5-b11d43813679"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "88c53c7e-4dd2-406d-a816-4ce2d4d4fe13",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bb7b42e8-e988-403e-b620-9295d570f88f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5d8db4ce-ab65-48d6-9b8f-3fba47223b44",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "728f1065-ac66-49d9-94d9-892389699a71"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "37ec63f8-eacf-460a-93b9-6fbceb54b355",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8955fb81-a5a8-4cf5-81e4-5cdad8f111c5"
            }
          }
        ]
      },
      {
        "id": "4497eb36-7e82-4802-96db-e788dbcc567c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7393c15e-f297-4cbb-83e0-70524d6f6e49",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4149063b-54a6-4926-ac74-af8ab12d53a6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "60520751-8273-4ab6-8a61-12b3dbf82b9b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5896c1f9-80e8-4f2b-b611-c11dfef1d08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d056321a-7812-4731-a25f-0713f07b6708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bae3064-db2c-4b60-b171-cdb99eb151d2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e72c11f9-95d2-40c8-8cbe-45ef2b93fc87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0fe3cc24-466e-4a1d-a0fe-f6479f9a7bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6337d534-24de-4d94-9d7a-e037a63a33f9",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e03dde9f-b9d5-4d94-974c-7b18160e9929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d40dc78-fe65-4066-b1ac-c95c9d989a3f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "90f19340-1a4c-40ba-a8a5-8c9014216b11",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f98bf324-f314-41f4-8f24-e4ffe5fcff48",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98e44fb-1eca-4360-af87-922780b15a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9ad4c40-7e2c-4a06-8200-44aa1006b807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee6d474-edf3-4e27-bf01-8d9a74d8e56e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4cb6152-ea2a-42d8-ad59-a73dedb06fb9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "87b79966-818a-47ab-b8ac-8ef0cf0320a9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9ef47e9e-1fb5-45ba-b5c7-8caba4397968",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aafae8df-4db4-4197-a42f-9e74b4830ed3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "39b06522-ed4b-4e56-b747-66b65f99e1af"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9754f437-8933-40c5-b28e-dad9bf01dfd4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "ced71ea9-4079-4627-af5a-26e8e6078717"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "285920f3-6a91-460c-9510-697a852da57e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3891e37c-259e-4adf-9ef4-61069a955363"
            }
          }
        ]
      },
      {
        "id": "b6191754-1813-4e95-b731-8a409d48e870",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b1c4234f-903e-46c4-ba8e-7635f3591f78",
            "name": "Negative Testing",
            "item": [
              {
                "id": "88059363-3e9d-448e-ba9b-fc835b53fe9b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8bafad74-55bb-42e9-8013-1bffe071d67b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3d30a9-3be4-4d30-998f-ba6731ac698c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d54800e7-15ef-42e1-a323-7d6e65146d61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "091a1ff7-60fe-40e9-aae3-7a0ee2663d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "464e5999-f09f-4825-99c9-1c67986e40f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9194d02a-b026-4455-9c15-65df5a296cf1",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc6f148-cc8d-4884-91c8-dd187dc31ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82524ec0-e0af-4623-b672-c48fd261c504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56bff9e0-01a8-4548-8145-7b13a3435141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6916e624-1c2c-4585-9403-ad5e52bf5875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d2d108-f74b-4886-b85d-3325d22c3632",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce7e1b1-896a-40c1-bdb5-02a7b4db6b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7744d6c9-00e5-4edd-b8b2-b9b8fca4a2ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49543c3-3eae-4f5f-b9d3-0b50a7ef0ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0680636d-3c44-47a7-9d48-2efda0769e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de8fb45f-6ca2-4725-82ec-8545dee00604",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "108a0117-3d95-4b3a-b934-2e134d61505a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6b6ac16-2241-45d9-bd05-e21b385bcf23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9800d66-5a8e-4293-82b5-35933f8ad33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97b5ff1e-3e5b-43c7-8ed0-0d0d75247372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4e1a656-f95c-4174-95b3-fd99201073fb",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5883b8-912d-4fe7-b1f3-049b322ed436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "360ff677-bed2-4ee0-98c1-33c7647cbb22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29cff7f0-f2b6-47a4-b76d-05d0c52bdfaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a1d68a3-efa0-479e-a906-e3dc361cceb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11204936-435f-4ad2-8d25-14f87b763f44",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c43921ef-ec61-4a8c-a54f-ab7720069ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b7000f7-7978-49b8-a78c-426a7d33bf0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "305d9168-bdfb-4367-bcd8-6b62de999740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "683d9829-200a-4f46-992a-0a8f14386bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "606664eb-bd41-4509-a510-35eb0062e0b4",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7920bf-2617-4edc-824f-3c6ff43d7dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9363ad4-3518-4eee-a16b-5870c466c054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad91fc1-f087-4b25-9786-214824dfc5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d0900e7-6269-48ca-83bf-c50a926d80a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63a8cfd-9f5f-4f86-be7f-33540019b610",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51d0d46-ecbf-465f-b446-79e43fabe4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2ff0053-85e8-4589-a9b3-b3e147259f26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4537111a-7f5d-4a87-8c42-8013cf3de184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b16aeb1-f508-4869-b970-45bc1223c98f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e463e8e2-f065-4919-b51b-3a54aae22b8e",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96aeea9-86ad-4adc-bb54-f5df0618203c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed984173-6642-4d57-8aa2-e8729cc06bc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb5b828-ef84-4af4-bb2f-ac64dd6aee20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7081b3a4-9dcc-4c51-b504-438e52c759a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6adc82b-92bf-4c70-a768-dcb09e702727",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "911cb7d2-a1ed-427a-84af-494e111fddcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a1523de-dfec-4b64-9b80-37cd9784c22a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014fe814-74bf-42cb-9569-33f950fa3c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99bc0f18-8815-4bb5-8342-4910510c9136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca8bcf9-38e5-4fec-b52e-22fa93bf643f",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af13525-7569-4745-8bd3-28dc774842dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "badfcdb6-6f2b-4dec-80d2-a3c0d6c6caa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7bb389e-69f9-465a-a2ee-f09bfb77400b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c537de55-d158-4c16-a6d3-1f7ab26fe1d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d94a6370-3136-404a-9257-62587c1d4876",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db796d0-ffc6-4c59-90bb-2affa1409b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a4d696d-6d67-461d-916b-90cd6fc21c6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae8a85ba-01e1-4ff3-879e-853d5db97712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0307937-26da-4c3a-aec8-302362ffad70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe69a4a-a6c8-4e8d-91ec-69e46ec0eeb6",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66fda37c-b4d6-4c19-9830-3237a308b573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f06161f-f98c-46e6-be8b-90cfeec082a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10c5d693-186a-42ee-8b6c-227e41473937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b710f2a-c722-4278-96d4-9e1bafd68014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d9794a-46fa-403f-aadc-99fd01eb12b0",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "653fc6f8-3090-4553-b8cc-2db155ba69fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "382aab7b-e349-43e7-89b2-d6320395d169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f1dfcf-c507-436d-9bab-2d95a53f82df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4dc591cd-04e2-42e2-9ede-582eb3366803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "656ab9eb-209a-4a27-9f1e-77f20833667e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c36e2e-3b5d-4dbd-bf04-93815b10b8c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd575e71-2e99-4768-8e14-acd00e9916e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "053fb706-e298-497a-a573-ac1c3aacf35d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10d558ff-83de-4cff-81af-63896aa7ae32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a4df9e9-5c93-4b45-95b0-27e5993ea140",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae20d00-0cc7-476b-b363-016206cbec9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d219b8-4480-41ac-a1e8-322100656d14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd3c4c8-3ddc-48c7-9c22-bcf7ceff76c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02dcea3b-b18a-47a6-b45a-04baaa8128cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0e4cb5-eae0-4bef-ac66-028126db693d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "635a83fb-18c3-449b-b99b-80734d5d4044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c11a749-b80a-41a8-bb85-fc7eb9c2b550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b42b624f-9a12-4ea3-b55c-0f85a7051a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "230c7ded-5fb8-4cea-8ee1-6086e058a316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab94ddf-2027-433a-9191-1e4aad1af9e6",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbabe384-a79d-446e-b075-e8492a6dff22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1df3e85a-9949-42c9-8364-f4b53c8e600b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a168bf6c-c0c4-4bcd-8f96-335933e9c067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0df8a5ce-094f-41a8-b80c-a85ce06aeedd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279a3941-c0f3-46c0-a76d-f42e900fc548",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57afd930-3ca7-467e-82d4-7dd76c493410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f32123fb-579f-4d21-8a03-d1645d5d9490"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d5ad3a9-4b09-4692-83de-393c7e564704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "303d64fc-eb3b-49c7-a2eb-6ff4145eab7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d01ee059-7444-49df-a995-75a2eeb81ef6",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b1251a-793a-410f-814c-c5921b469064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6dd557e-60bf-4fbe-853e-0fee2f1a591c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8d48db-a27d-44d6-9046-72236c2f3818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2753d5e3-d983-4fb2-b2ba-015bb4eded3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84998c51-ce51-4c36-848d-64bdea6a051c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f1f1d2-3522-47f0-b68f-86105439a8ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07a0ba6e-c373-4b6a-9d23-0a0a6300ac78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769d68f4-cfa2-4104-90ce-5e559f1b3154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "258e6946-ce72-4f7b-8bcd-ef4f07ee40a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f53d506-9267-4bf3-907b-056049f991eb",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af55839-cde4-41e3-9a26-89eddf058a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f92ba801-7f75-4d26-8d2b-46ed3966329e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21a7050-2e7f-4b29-a907-d7023ab4e62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c69da5b-d6b5-4a85-9192-7f2129d68aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "088818bb-c11a-43ad-9fb7-4241e11cfd6c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95013be9-920c-49d0-903d-cd61f478f1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eac1437a-69bd-48ee-9ca8-640f5021937a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c210ff-dece-4cff-8da9-fb0cde0b5ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d341b4f8-c61c-4371-998e-c162be55fec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556447ee-e136-4168-8aff-92683325b019",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda7a623-f2e1-490f-8a76-47a1ae2ee67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b843b84c-0e7b-4cb5-adb5-c7ee84e98656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4299ac0e-e301-4e51-8902-1174a35e78b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "33fcf363-49fa-4a80-8ed2-ea7d778364bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914eb780-93ad-49a9-bf3c-c90ed7797617",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a3e68d-e992-4e63-ab2c-0473e22a909a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d954df4-6eca-4017-80c1-eee5efd43358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bffbaa77-f50d-4ea8-b386-4601db7b9a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8670c2ee-5ea9-48e4-a270-8052d7016b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "668bdd1d-d0a9-4d9a-b93a-97520e438d79",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "486908bc-c007-4b9a-b53d-80d07994e496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1924aacb-47d5-41d3-928a-f1ffd084a892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb831e5-a8c9-46bb-a051-f96af8bdd494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4db70cc5-e7ac-474f-a4e7-5479afd645e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e97cd57-57de-4097-a802-641d3d8d2a24",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d345133-d0a1-421a-b618-03f3ae937a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8b4d8e4-b9aa-451c-829f-93e5beb8b127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8258934-4aea-48b6-b9d9-2d99aa84c0a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb01e055-f626-4cc0-b5ab-4ce95b55dbda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f01f33-d6b1-44b5-989c-ffae63df7a3f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53b0a06-1628-446d-88ec-5504bf764eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2664bb76-e4ef-4fb2-baaa-deced76899bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a603777-56d0-43c4-a608-be19498e9b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc302dc2-649f-45f5-b7be-e5ba71229d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5324ce72-1c50-4dd9-9cde-f0a5bc1698bf",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a919e4-e2c2-48f5-986e-45a130ca322a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d28cd659-7d46-449e-9d87-6502076ae4b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c4879e-5ff6-46c5-a5e3-c7561e1b8ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0aeed08f-26ba-4f44-bc08-93bcfc4d0d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25c9f5e-1940-4c87-975b-9ce524503887",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89b7b44-ba79-4442-bafe-fe72c39f8c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7debc0fe-1979-4dcc-8758-1f240ef60eb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b24b56cf-0129-432f-80bf-562d1992ae59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3484f96e-be01-479a-872d-a2b600e70715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110760e5-d7af-4003-bf26-e3ef2dfddab5",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f81b0d-7147-4bd2-bab0-04cb0bd6f608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eb684c6-b37d-4671-a598-dfb0d0739663"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e5de4d-b450-46ef-ac78-2f35f31c4033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "57e61424-d05f-45cf-9103-2c6bcf67e148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61abd700-d19f-4fe6-a1be-3fe9f58fa6ed",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86b9be8-694d-4fa9-93ed-0a391094f9bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ebdbbf5-dac5-4560-8f46-9b727c7fbd3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9752ec55-7966-4bf6-8776-e1a69a40afa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ec7b7f0-1766-4237-a2f8-4daff084bb78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6633d992-511a-4595-a98d-7b0b0970a643",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c86b3e-e04f-4d25-9bf5-0157d9ab630d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51117335-4164-46b4-9448-225c6e281d16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a6a948c-3906-47f1-a2c4-79c38a9ea43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d882b9d-b750-4c75-b8e4-a0a5406a1b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d7a274-2b4b-4cb8-9e74-44aa22527b6f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd7b8325-838b-41a9-a09e-5e53404f07ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "295775ed-b120-415e-903c-fc80223d3666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd621ef-2339-48cf-bbcc-3514843edb66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2aa67ba-05d4-4b0d-9cad-c3b50bf91170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c178cf59-e9ba-48ca-bd76-d677dffe7d76",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8dc3a57-4c7b-4264-833d-ae0d7f0c4d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2eb8f73-9546-4fdb-8447-dfb76374d36d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5077164c-a201-4797-a303-0afa9d2544f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a1efa9a1-5756-49b4-b97a-d7a8aea22104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17ee779d-ec55-4df0-b7f9-a11cb103e0e0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62277e12-8873-4b36-99da-d29244571da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ee2008b-57a7-4bb1-a31a-0efe5f82ccea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45854695-a780-47d3-8400-4424ee80e045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "927751f5-f79f-4069-be39-80c3e6ae0ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c88cd59-cb7a-4d8e-89c9-d2c3f2b290c1",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e92560eb-0eb8-448e-99d6-0515a7dea338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd9ce8c7-91fe-4838-9b8d-75b4f8460605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddadcc09-a7ab-4f9c-a837-85a59497b31b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "50927c05-5b66-46de-b31f-94506fc1cd81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73087149-2428-41db-a100-a62c02c72166",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44076605-5929-4e81-b087-75da41f3c52b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33f7abed-7a5c-49f3-bb8d-e8098ea1e84c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a50be0-9568-4764-9a4d-e9124bb9f49d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "daf6b244-6e2e-4189-9c5f-28484432870a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b9fc90-c5b5-418b-b763-1c1990f60ac3",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f36b4e-7d86-423e-a169-94055f6cb9ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2497aa3c-615b-4d2d-bcb6-ba6c201aefba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "057d094e-9d0c-4dbb-8fcd-db6ece836953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "519f6f46-b617-46eb-bbf8-a4551f3c1480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56891153-a6ad-4353-b09f-d67bdedea902",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64ea2ea-405f-40ec-88ac-d060efdd8f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a241fa9-60bb-4d3a-ad04-3e32323be721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b91a6a7b-4b60-42be-9e0b-cf9f7779d013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "78eab1ab-9ffd-4229-8249-38e58e23b313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40936627-0463-49ee-9a8f-f218a95021d0",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "049e2ac2-345b-44df-ab02-3d56a7d4e807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "621dd92d-2ca3-4c7a-b66e-3f58a1ab54d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b428de9c-5c5a-49ea-9fae-c4cccfabd06f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "69d27cd7-ef6d-4dee-b384-4416635aff89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0c1960-082f-455f-ba32-0b0d8902cdd3",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e339a6fa-41aa-4153-a533-f721a38aa58a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d558a6c4-7bf3-4b16-8c60-16532e5510fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da54844a-aa4e-4da0-8ee5-54f39b9eb35d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5a9d31ee-4f74-4dd1-9e46-32fb58aad068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f996f375-ee8f-4bdc-9e11-870328114f8b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9fbb42-6145-428e-a78c-f45c22ca20e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f272424a-d159-4329-acb8-78e2632a15a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be34866-0244-411a-b2a8-898cd9bf6dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "79055aaf-9935-418f-839b-a21dfcc0c338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c81878a-62c3-4373-88ad-1a78b33141d9",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c85189b-9a8b-494d-8005-b84cff3bea0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f72f744-f75c-452a-91d8-bebd36c4fe93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a68f16da-3298-46e5-a8a6-adaf22c0fee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a70e0d21-c4da-458b-9a9e-a31c24605da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d854119d-0374-46b2-9c1d-687a246e93be",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d1fb9c2-7ed3-4141-a840-866960db2fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e469876-64e2-4a2d-be39-687497c6bc5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb624326-6468-4c3f-bef0-887283f5f869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9e1f54f-422a-4159-a41e-3be8b85c2780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00f7403-4c35-4740-ac26-db643ff42290",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a3df52-7f80-4893-b50a-f520e551fdbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f71da9e6-9c09-4080-a629-de79f0fc2aeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be6f4a5-b1ff-410b-909b-a677c15fa7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd23c047-7c0e-4688-bd6d-74e75ea5eda8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb7565a-db9a-4865-99cd-c5b9122ceb62",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea73542e-0a7b-4f3e-bc70-cca5e2c44719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a709c7e-4544-48df-970d-1100e58b4d18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ef3cc5-faf9-4272-afb6-710dba7c3640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0457319-3e00-46de-a509-8ba9278e8470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87816547-05ee-4b28-a054-129e39e10503",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfef8c7-803f-4dc6-86bc-662d67796460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c53f8536-426e-4337-8b42-845346826cfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f50f355-0560-4be7-86d6-ea61d766618a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3af7d0f9-b1d3-4e27-a7d6-c8441db5ae7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f159201-a938-4a71-9e1c-e5b25000a670",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "717f6138-076f-4171-a25d-50efaf97fa43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "709b54f5-96f4-469f-993c-2197b25f90d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d182063d-1f8b-4c1f-ae65-2a3d6559aa18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8db49f25-b4c1-49c5-aacb-4380a4d16c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac3879e-ff16-4a7f-913f-e7ec7be4eeab",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b3ab588-11b8-4f2c-bc4b-210c59669eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7544e685-ee55-461d-bf30-695704466543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af94663-48ff-4191-ad54-32a4f625bda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b8021cf1-51af-4bc1-aec9-889101dc5401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec0c045-c1ab-41d2-8051-c8668466f04f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec59b30-ccb7-466b-89ad-e8522d8fb0ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44420e6f-da22-4cbe-9a33-8181a75339cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061a5457-7f9d-42ce-b159-8b138b47ddb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "18c9af99-88bb-459d-842b-309cd6eaf986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "412a60c3-6f4a-4b5d-974d-03cfa0f7eac3",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "534bb9a5-542e-4346-8ec3-0a018d511aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef615f2b-10bd-4ee1-b8ab-c5fd454dc345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2abbd20-e262-4ed9-9801-4421b8d9dbcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "781f614f-5472-4c10-afbd-bbf5ce041b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e1fb695-d7a2-4a6d-9e57-0bbfebfe1138",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "011ac77b-a9b4-4adb-abe9-4290ab65d33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3cf1533-195a-48e3-9641-ce23cf5f377b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ea7eab-ae8d-4bbd-aeea-746195533d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "12649264-2c38-4f9d-b667-7dd12210a3f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceeb625f-539a-4192-bf21-52c7817ed281",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02598480-40cc-4368-8935-09a2fa0f58cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33b6176e-438c-4776-8e99-cda81093a86c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eebaf3aa-9cb7-447b-9a91-e373237402d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "99516172-177d-4634-8043-627933bcd1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e37066ab-dd8f-4180-b7cc-5bbacb7d1d65",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f27d6be-9ecc-429d-a0dc-e5fd0340eccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "549adf9b-7ce0-42d6-9725-8fc645761e7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15d47803-0013-4d85-9207-70490dcfaeaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1f04d2f-cca0-488f-a649-eeee0c9bb103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7266dbac-ee01-4bcb-8b73-74e26e9af117",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9031a82c-26eb-4ff4-8074-48499ec415b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01239a35-1096-4e70-a68d-eb062dd21f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd343a08-5074-409e-9830-94586a4e7f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "9976a2ea-452b-45bf-9120-b4627d471586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c2da87-470d-4ec6-bd71-34dbc7c40f94",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7d773d-f495-4892-b49d-bf494e9e165f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8091b26-2ae1-42ff-b17b-4b6b13b06d7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f87e15-98c5-4eb4-9792-1b197dec9c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa4c1420-bc43-4918-9c0c-1c42e96afc1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2854cc40-1644-4826-9812-7746aa747335",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8202ff35-53ce-45ea-90f4-2872a7554248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95de5630-769c-4264-a200-219a22c5334f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bcc0091-c343-404e-b354-32690dc8a8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a5ba7c5-b0fb-4d66-afa0-840450947885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2fd4c7-c808-4576-a74e-a535e9de4238",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "816bec57-255d-44b9-b375-40b45e0e2682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88b2b827-7db3-45b9-a017-22bcb56895f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a2caca6-e30f-4f20-ad22-16548cea3278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ff86b07-b22a-4897-8663-a2f1d1c91b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d7bc40-dbc8-4ae3-9ee1-42bcb6a9a284",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a42da91-b501-4d47-81cf-e65c7aec4b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05764b58-359f-45d4-9418-609243914f41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f87fcf04-981a-44a2-871a-333af53aa55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "48011088-0100-458a-b47b-e6876174ff49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a712841c-28e1-48a4-8856-286e9d12a8f8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc2ad18-df26-461b-ba53-ec9459d7bfe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71e2e2d8-1ef5-4dec-ad4e-90a41e88fa81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782e3aa4-6a71-49e1-a4fb-15a86ca1924a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ac6379e-eda3-4031-9710-2d5484cd072a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a0f0429-7447-4fb4-b3cf-c338872025e9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66f3c33-8163-4515-97cd-4416a841cfef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02ee2167-473d-441f-89c6-2a54274739ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70ff976c-e8e2-4968-a555-e75dd826e089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "597c11ed-82a3-4293-b9cd-bf26c2c061d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba0046e-4053-4dd5-bb9b-133cea78ffed",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14bf4779-88f6-4f40-b4b6-32d1a37b5345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69b3e0fa-2124-4ca8-94c0-cf15dc0c3f3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "602a6343-4e7d-4482-8c8c-facff88e7bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cf67304-ebfd-4ab8-8ced-778beab2b500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b759b5-76e2-4d7e-adf6-ed570c369d81",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "255b3a80-837d-480f-8fd9-6240ca948c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2fb8fc9-402c-4b9b-b371-3becde311c06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98fc9e62-6ca1-4397-a694-fabea71e0864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "05254c40-a4c6-46dc-b288-d87b43051c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e825692-610c-4216-b146-d3851d93fe16",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58414d5c-a80f-48e1-bb66-369350113c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb77d5d2-e5fd-439b-9f7a-e9d8a341cea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c394f0ff-c52b-4bff-9c43-1824a66e3f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5517b67a-4c41-436c-954c-bc0fb50fca74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c72b8d9d-be0e-4ffb-b6da-30cea57d8cb7",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2c6c02-3865-4fa9-bf91-93155af09385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "271546f1-df59-4d48-a166-9e44b8894a83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "132e7137-fbc9-4888-b485-ca6560161499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "409d3156-d5a6-4c0e-a3b0-771b0c85a9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34072e7-fc67-49b7-8c42-2f0879a6b7ea",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa8f94c-d260-437d-a3a7-3a8925d39a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f22c26d4-220e-4794-aa10-3c5a5a2e0e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ad9549-a29c-4e96-be0e-620679fdd94e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e75718e6-5e89-4a62-bdcf-21e6df9d523d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe8afc0-57d2-4111-a450-32bb02464b9b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1516df59-17ca-498d-be91-c14f77d3c09d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf8c6876-bf68-4d51-9eef-fee8924b0fa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1639f53-acd3-4ead-bb87-c24c8b179196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f8cd156-5fe8-4117-b5bd-3b7ad24794d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386bd048-b531-44bc-9d1d-43164463d165",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29310fb0-b652-4dde-bc73-907bd562bb7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "494f671d-c728-45c3-80b3-de75d07aa450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e7eaa7-5351-4c45-9f06-7e252cb1fda6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b36414a1-f685-4606-a572-4ece24d22034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12878c4f-da9d-441f-b85c-9cb8b03e8ea9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41e5fa0-a4b6-415d-a71a-cd81016c270f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a90c487-ba3f-4eb2-ae94-56b6382656a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e42b19-8050-4b92-a80c-5a6b7e3905fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc477fc9-446b-4113-84cd-20367fcfa3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41570d97-6b31-4653-8118-d50a3f5d4145",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "789f6348-518c-4e70-944e-97a1501840be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe7fabb6-9a3e-4825-9e35-c372f03b6b67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15f634ee-4895-4c5d-8f80-a21b63ae6d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7713882-03d2-4a1f-a870-688c12951f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa79491a-fbfa-4977-b026-e2df3e46e1b4",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edde29c4-f93c-4889-b45f-6fbaa4b2551d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "093ca9eb-a039-49e7-9eca-2704d2fd5f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4950334d-6f0b-4e52-8002-52f147eefb89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f13320d-c459-4c9c-88b7-6487f1324349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2acea466-1e38-4f0e-9df7-b4a154a05c8f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "128d5d29-40bd-4127-831e-33700e6c83e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "246af7ef-1f72-4db8-b35a-6ae2a3cbf7ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eca74630-0252-4729-8c3b-a0266ec6bde4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d31aa806-1cb7-4c69-99ee-1ad618b6dc17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f9e0567-4bd1-4900-8ec3-68bb2a9422b1",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5cc862-cc14-4e4b-8664-cc9cbd5115a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd2e748d-1c76-467f-a848-230e4b5afa2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803e713d-1ec7-4a25-94cd-131d19e3ca2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "971c7722-925b-4a1c-88a2-cc5ec6b550de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e34dae8-d2c4-4c06-ab48-9fbd16a96b44",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c794575-dad4-4b1f-b00c-9b3ea16e4862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dfe23ad-90e8-4c20-81f5-f43404e769b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d811b2-5144-4b64-abcd-8a0f9dc27768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "87d556d7-eed9-4964-8284-65ddaf442fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "675c4568-27a5-4e33-b103-6a58199dc008",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ea75b6d-b31d-4460-a448-3d84b8ea1c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3efd8993-3008-414c-8f40-72d358bf54f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6560b6c9-763a-444a-b0fb-fb457378221d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cad559b-336b-4e07-90d9-825f74d35f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776541bc-0b3f-4a17-9618-4ed882b964ef",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3bb208-7032-4fe1-bb9a-eb9b9010ec37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8c3c81a-50b6-4ded-96e8-0ecf25fa1558"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f058c6a7-94b2-43a1-965c-e0e863d19a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0beba88-ebce-4072-939a-f5edd4c3c618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb2c2a6-9526-4c54-97a2-c9a32a47dbc5",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3efbdc-04e6-4d49-90cc-1268973ff5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eb93852-1703-4992-ab9e-02dcf2ba84ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf0bf4a-c857-4951-8272-c599e48a02ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "60f5abcb-d066-411a-a40f-0710e00eaa6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dfb280b-da3a-4d4f-b8a3-ea20b6f2cd1f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d80d98e-9c3c-419f-977a-91e10ee39245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c368e796-5490-4d51-b852-ea029a391d5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f044d6b-73f8-4afd-8d69-399e7c102b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "975970ae-82e4-4f99-86b9-0ae5e0992402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715b8262-8b77-42f6-a0e8-bcadf80df998",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50935078-efd5-4832-b6d3-f2ebc552cc8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f6c6613-a817-4cfc-82f8-bd3a0a25b34c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e043ac-1dc7-4676-864f-478a8eb53dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d02b74cb-43fc-4f79-a433-a7a4e28cbb6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41365c25-dc1f-4c15-917e-07ea6c410b70",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee37b29-9bbb-42fe-b022-9ef043ff3507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f99ee254-1a18-48b7-9ba0-aae0537201b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d31d3b-dfbb-4d63-bbed-6708f6d79703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcc70e2c-3882-439e-bf94-01fcb46d8d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5263612f-f1ec-4ed7-b917-4a4cecdc81c4",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc0327f-9db1-4b31-a927-ece2ebfa55cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82ef9580-3a25-4b2e-965f-f59c7ba40e75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e9e0c0-732d-4bfa-a0b7-39cb39956fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea97a966-fba0-42cf-ba6e-0d1dffbfa631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6221a59-b8a6-4752-977c-e49c51594675",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd92d08f-7882-420e-b28f-679096eaf859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b530ffe3-3a61-4ae8-bf89-ee53ba609370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa1a7a06-6143-4396-9da5-c9f46530b444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4669ed2a-2892-4c71-821f-600380bd4280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cdb8449-498d-468b-95a6-8834c62d84d0",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70da934e-6a35-44e6-96d7-e16507b4522a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62f9e7a0-afe1-4bca-adfc-d3144b5d2fef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a30d17c-85e5-4a80-81ef-747d58410180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "95f91ba1-a3fe-42da-8c21-ccaec43ae5c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "838811c2-2c11-47f4-aea3-14a6ccf46bd0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3516fdc-fae6-4e30-a3f4-fb693c92dec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19ad3e85-d3b7-4a6a-a7ab-d59a6daa6c50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c5e4fc9-7af0-4d97-ae52-e77318c2836e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bd453ead-178c-4cb0-a1b3-630b1d5aeb97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3294a2-0728-4e00-8d6e-9d097a89f730",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c72b77d-2694-479c-a740-93d9afce5363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c241025e-03ea-4614-bb05-87a61f5fb2e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1225226-c267-4e1c-a7f0-d5f9f166ec71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "464a184e-03e3-4395-8167-4824c59c3e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e4ff9d1-1f03-4fc5-b3c0-a2bafc349fef",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5160d5fa-4275-4ffc-9f80-900ff473bc15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e54c09ca-b314-4ebd-97d7-836f10368abe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e03a963f-ffbe-4089-97ff-ae80493724ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c27313a0-241a-4910-83f7-f53adff107bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6175ac5-9bfc-4e70-9130-5a671f7fa7fc",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e228003a-70a1-47b5-bb83-2ef3a14e649b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9518de1c-3b0b-4dab-ad05-36fd48ac4530"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b521111-46dc-44fa-898f-4a1ca34cd342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "caf812f3-ad12-4c42-b891-ff49dd54e354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8bf6c63-4ba7-401f-aa0e-2079c888460c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b25bfb-6ab8-4450-925a-f1f2a06a7738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e96caa-a8c7-4a4c-a2db-833b68405c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd56108f-32d5-416c-b027-161bec3a7600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "81a7404a-cf1c-4f63-8d74-c8048f41497b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48e4d05-9311-404b-8eff-016a382a55b3",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4664887-265b-4949-b22b-959c31062a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "128585b3-6061-4f56-ba8a-5120da0c1f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003fde16-3694-4cec-9758-6a8d0c040607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d981005-26b3-42f3-b4a6-bcd733ed70cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed01749-884d-4d88-97fd-8f2dcab1bc8c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d190d7e2-844d-4060-9c4c-5d581126c24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f42942ed-13b9-4e61-af7b-a4cf17d3fcb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c629e83-994e-4a33-a68b-96f79ee66544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e71f350-316d-496f-87e4-096f6163bc32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1b0afe-0ddd-47e4-863c-6bd86f032ea5",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13d0ed9-0c76-436d-a9ca-0182195c0f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c0a529a6-0b1f-4991-9a11-26179cbed04c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde90557-4341-40a1-9007-ac347eb8134a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "60fb8b9f-0ae7-42e1-ae84-5fada469ac96"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "75c84868-70be-4889-a390-834394bd856b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "480cd8d2-cad4-4c57-9959-b7f36cd1e844",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "176bf909-87aa-404c-ae1e-e0c4dbb2af9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8311950e-8756-4fd7-be81-8a7a944959ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f1d307-8e2b-4b44-ad71-240a1ac60ed4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e2f3028-6672-4ba4-b237-bb208a1133ef"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3afc3f32-8912-4450-a58d-ccce68e661d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2643cd90-c50e-4d50-86c4-a5efc77fe365"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "05aec85f-90f7-4157-8e53-22cc8fb91342",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d20026f-99b2-40b0-9f7b-e13ea15ccab7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "73430f96-181a-4150-87b4-2639ff4ff4f5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5b09a657-eb01-4acf-a717-dc7c3682b5d6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ee3f7ddc-dd26-45ef-b8b7-2908b488e16c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a6b7b551-b297-4a1a-b0da-50349f452b57"
                }
              }
            ]
          },
          {
            "id": "aa9b1b72-d01c-425f-ab33-7273efd097b7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3effe4ed-4856-4211-9118-211bbf62232a",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "ed67d686-04e4-4a89-baad-c86a9e4590bb",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b112ca-ea9c-4b51-837d-8780bf6a0198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f0f53720-ec9a-4d61-a9e2-0ae873a6d417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a28969-5af8-4c15-8242-1b3369320038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f6f1c1b-89c5-4834-bbb0-8c85df6cccba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5c807834-22f2-4e2a-9276-9b5ce8b32bd3",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7da68d75-da2f-477e-b97d-ae071f879c84",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "93ce3bfa-b378-44b1-8553-e249dda66ca4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7279f6d5-56a2-46ff-bed6-187f259f17f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "80c624f1-9952-41cb-a1a4-b2a44c0c102e"
                    }
                  }
                ]
              },
              {
                "id": "6fe30ee7-63f0-4511-850d-f29712acf161",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a8ad4c3-0a8a-497c-b41e-352fd1f35f4c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a07743fe-988f-4505-86fb-cac35a4fedce"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86f360a4-4b52-4975-be9c-bd982db5eb0c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b99cf418-dfcd-4319-a865-713681b25f6a"
                    }
                  }
                ]
              },
              {
                "id": "4879eac7-616d-46c8-92e3-15456653bff7",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "627db650-e3f3-4285-a430-de4ed48e5f01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b9d29000-9d11-4b31-9b95-79fdef99a016"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3336a4d-0eaf-46bf-8cf9-2fe585ef951c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4dbedf3a-b362-43d7-ad2e-182858b43ba7"
                    }
                  }
                ]
              },
              {
                "id": "09d20673-17c6-4eb4-94ac-4d1a3e4ec9ff",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "60733e21-2943-433a-b8c9-b89e1def2685",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "db4a9243-3b2b-40ce-8384-35b597fc7beb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63612186-47f6-4e7f-86ce-a045fa7f9579",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "345b6abf-709d-4ea9-82e8-07ff408a2f0c"
                    }
                  }
                ]
              },
              {
                "id": "4c693a9e-ec02-47a2-a63f-8a1153377eee",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "31fffca5-b8ba-4b33-a5a4-113e55723e39",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "830b7c3d-d6b6-481e-8079-2ee1d8867bd2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30a9f133-dcd6-4760-82fe-74cd0937cb8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "41c27b9d-ec75-4c2a-9883-ee95e5cf4d09"
                    }
                  }
                ]
              },
              {
                "id": "7e6f2bb0-0ad3-441b-8732-0780985ce912",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d994cc50-c030-4857-b0a9-c9e347bf5e05",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a0ad4272-b585-4005-ba3a-376f1febd8aa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39471251-9718-4780-80ca-b2d6c7257672",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0b8d4b74-3f3f-4708-b6ac-e96b7bb4a815"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a66dca89-58f6-4b21-93d1-af2bb940bddc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9f2bc753-e0ef-4958-bdd3-2464ae226a1c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a36c01c6-9bd6-4c17-b26c-3f859704e6e3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a0db5760-1525-416c-bd94-a5b65459a087"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cfeedba9-80ff-4688-8f05-588782897bab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ae471cda-d837-4caf-9e90-caa619eb60db"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "51d7e908-4067-4255-a5a7-1a37f90d04d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2cab3b3f-5f8b-4931-b9d5-42379bc7fec8"
            }
          }
        ]
      },
      {
        "id": "a74eec29-d9ef-46d9-87e2-0c4637ef986b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "49dd4e42-15a0-43cc-a80b-3c26c23f40d3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ca81cf77-e206-4f3c-857e-3d9ab34892e1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c4fad47b-a2e7-41a3-8d7d-76ebd2a4c707",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "869be426-e746-4e07-af23-e36ad0dcb84b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2008ab05-6a48-4b86-afa8-f5718156a225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8549be3-2a8f-4a1a-9e65-5b4c0c88ba72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bd808e7-7404-4969-9789-46a79e7193d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea513dde-2fb4-4def-986e-846024c51128",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df87606-8c84-4cbe-9eb1-7362a7005b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0a91d8b-9e2d-4697-8b63-fca8770bd751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a517401-2476-4d65-acaf-6e89895e90db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d3ab90d-b2c5-4f9b-a4f1-5acfbe4fefbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "886ff704-a981-4a5b-a8d1-dca898238bc9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09da14c2-b253-4572-8010-9ddec009455f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d19a874-085f-42f3-93f3-83bd2eaa9605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d55cd7c7-af54-4d47-bf71-d4bc5041a77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83589005-baff-46b5-bb5d-6b02dbb3b2b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ad275e-46b4-4e59-8dba-330f549bba54",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a6ae69f-c0c4-4995-8b4c-4683d8e48440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c788804-4d82-4d2b-b775-dc1ccc3397c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e7c406b-8652-46ed-8b30-6878e59ebac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "07ab03b2-f0c1-492e-ac3d-81445ff9c301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c4c25e-c67a-4b9c-a872-ff46ad173b37",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90c8035-5255-4b08-9be2-dc61986f26b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2519c519-1219-4ffe-ad07-3a6ededd2e40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f5d260-1ce0-4a12-a3ef-7ed438bcd5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "56856a9d-2654-4aa7-bfea-6685167c2500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09a0a5fd-3886-470d-950b-a1ff7817e8d0",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "111dacbe-78a1-4a0f-a353-0329f1fa8a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f8cf2fc-64e8-422e-bb59-fd7894045394"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc1ce63-47b7-434c-9bed-5c652bdf114f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ce0a9d0-eb31-4100-874f-6381d3bbdcbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "347785bd-1879-45f6-9a12-bf3a4cad6a6b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e93271-aca7-4905-bcfe-3749614ffc5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ecff6c6-bc58-4de1-b3a2-ea986e9c59b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd025f74-c65c-4e15-a4f8-9eeab0a5632b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "531565c4-39d0-4687-af23-7abb1936ae92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b9b556e-2335-4179-a33a-8170243de035",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ccfd95d-915a-4c6a-bd5a-d3f218fedb78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "276c6fb8-1f24-4b92-aa94-eb27504ea90d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c2a4a0-ffcc-41f3-9592-5ff8477b0ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3249882a-7bc3-40bb-b5aa-8397739beda0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e82cc5b0-3cb9-40f1-8ca1-58573bc986f3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9bcb535-9d18-40c1-8b95-e7f72c5ca3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9727060-aa4a-42d7-afeb-7ce68eafcbf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce64be30-6766-41bf-9878-1ab52a7a8ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "87534660-52ec-4da5-b3af-95d19618c191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d3af4c8-95bf-4497-941f-8915a871a4fb",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a6ee3c-7bc5-4fc2-98e0-79aeedb8db9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3058eb-594c-47af-9412-ec80c6a65ea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b4781b-1a48-47cd-b27b-35759e0c8c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc34b1c6-aa1a-4901-b738-50e896a468e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7cf0d02-0258-4f48-a7c6-64bb731cd3b1",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f21aac-685c-40c8-aed3-93e075d2af9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf9aa5c5-6642-4706-8ee1-6271f4f4c460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6c5c0d3-00f0-4e95-84ba-68a0828fdec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "19733b41-85d3-4cd1-a4b3-53514dad9f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b866ca5-8ed6-469e-ba12-efced6ed34e5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66eb6917-03e9-4f0a-abae-d2c371072a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b863ad8f-7f1d-4ada-91d5-1118cb8931a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daaa5896-8d7b-4339-8082-3c6d1bc9152a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "75a7f745-93ba-49f2-8f67-33cbeafdcc1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e734741-960c-4bfe-a5be-74d2ce868ac0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fe5a103-3a34-4aba-bfcb-9d4a5da10be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef40e159-5727-47b5-a224-fef436dcbf1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a41592-f75e-444c-8183-16f2e52637c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9cc2707-5784-4854-9967-edc600ff52c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ca459b-0e25-49d3-a1b4-204922630737",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce3ce4b-0c69-4a7e-b630-88f3ec9c6c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e823f6b7-2575-41f4-9ef8-4aadbce6d63b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2825c3c8-4b3c-4c1c-bd17-99865d5bc359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddabbfd1-f97d-4e08-9641-c79bb795a1d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120371d4-9a83-4624-b4c8-b288c973f604",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c3aa21-0075-4ec3-a442-68f2c8f7cf53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c05bc53-42bc-4c8c-9d68-f880c2590285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07cd2833-30df-4e5b-9802-59649be361d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1669903-8d06-44a5-8946-ada229bc0f22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2543970c-e5be-469f-9025-0e8ca5af52ea",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "503f07e6-f6a2-499c-9382-0535a6492d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85843282-554c-4259-914b-5cb1ec123ed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a65003-4efa-4cd1-8d66-15b3716e51dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ba3ecff-1c01-4d31-a535-27c53693e14c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f0e5c7e-e747-4230-8124-d5e052e00dfd",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a862143-eeab-4cdc-a219-037ef5d42ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fa4e029-97bc-4edc-9247-2aa676838cfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1720f57f-167d-4669-a06c-71975a4282c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c13cf60c-d63e-4663-9824-d45c38a5dd0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ebc39b-abda-48a2-9eb0-5f20623c4e36",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53429c0-6088-470a-9d3e-fa6b2474d11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eda9899-ad42-4302-8511-3dfd1e02a63f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab79e41f-f9aa-4c6d-98d3-98a1f18b60ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d3652e2-bc7d-46c1-a162-8407bfe35894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a26f7ee-8a72-4188-8b29-cb9b03ee9130",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c3aed1-61e9-428d-b912-56ac721db19e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d17508f4-7905-4602-b95c-d7c4e7e59459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788c712b-3d15-4711-be55-95f1a5691e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0968162f-0bb6-40cf-aa43-8cac785ce9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e3b24ad-89a1-4899-b8af-9a3e7e18f0ad",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dcb2b5e-1149-41f7-8d7f-1290907993e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96b7e951-9346-493f-950f-98ca280bb7af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62503e26-b1c0-4f1e-9dda-6ccbbd2e8c8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b02941c-5ffb-4501-a570-c37e1f8efa48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d4b52a7-30e7-486b-a503-4e4f4063fad2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82fbbaba-1023-454e-aad8-061b70a2fee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62bbea9b-3836-4582-8434-eb3088111a34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff05a99b-16ba-4af8-935b-33d53451e9fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db4f5a0d-2e4c-430b-9016-ddd0b04964e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e514a37-9153-4d72-b1d7-b57d6a89b51e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e21e3094-51a4-42f8-b6ea-4380ca4390e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6814aea6-d54c-4b16-8b92-3497bf4eac84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdcbeddd-f2a1-4eea-b88d-0abacb082ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "110d93fd-45bd-4e1c-a98c-4a38a07dd56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2300dd8-4b46-4043-bea1-c1906c71ffe6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "125be079-d600-4ab1-8055-54924482316a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a16f82ea-c8f4-40b9-973d-d13e791d78ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b68b1de-80f0-4cae-97a8-db2f4000b6e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76f2177a-0fe9-49a6-a9f9-571fd0e6cd20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8444c8be-e518-4627-84a1-0ecab9d8b2c1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba29395-9af1-43f1-9026-a2ec9fefed9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a91e1a-3c83-44b2-b780-b171513f1aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdbd6203-a67a-431f-9f18-7fb7c36a0529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59e32eab-1ff8-4c84-be4a-d05edf99a881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d593f03-3235-444e-9937-a227362aba74",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "094d0fbb-d1c1-4678-8711-e8283b90e6eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ee92b86-de1e-4403-a90f-054681030c4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff5df9e-0858-4dbe-9785-b5f533772449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df58cc2f-7893-439d-9026-302f8e752a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c12032e0-8ee9-4830-8db5-c97018bd4ac9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e2aa2b-a585-4fc9-936c-9a4d9abf95aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09d1937c-a6d8-4b11-b8e6-fcde24d59187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c58ec15-81e0-42cc-966a-b577923af4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d6992e3-9d69-496d-a88b-928baa79cc60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba769645-686f-46cc-a543-4fb1307d2678",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f87c8a-157f-443b-aca9-661d32f633d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b3b3371-4aa9-4b5d-8b98-cc6bb65232e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c5038a8-82ef-4922-8707-8be60a54a47e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c292883-4fa6-4c08-a18f-0d4d2cc47ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dff4a74-b299-486e-bf34-07efdd12b508",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c959773-056b-48c9-bbe0-5ba649768675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cd01200-777e-4eea-b388-f59d27452a88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f324564-583a-48b2-990d-22b8b6e8babe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bb4ba8a-a69f-410c-a43f-e36ec040bd49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02691912-6b2c-40a1-928c-f38f660cdbc5",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f1adff-f97a-4166-9ab9-3406b6dbe33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9590b0a3-2960-4d17-99ba-1f8bbfdabca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d4939b-064c-426b-881b-6cee56cdaaf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70046efc-ed81-4208-8b12-27a352bedffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c4024c7-e2ff-4ad0-83b6-d2759174fb09",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b75de99b-0189-40a1-95a1-5242ca7acd5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c55289-f434-4d10-b1c2-7b234e0319b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc62608-c6e9-4ea0-b9e2-6c376d7e763a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e37bf99-be52-46de-b6d8-289baeb52915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74422dd5-d2b1-4c1d-b296-d1e0251cec44",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e56a4c5a-7842-4803-8cfc-6e2872be459c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11b819f6-c95c-488c-9b6c-615e014da3c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbdc1f2c-08d7-4e28-8f3c-6b78619cdae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1460fa00-a7b0-4963-a5b5-f1e2745192d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1480acd-f573-44b3-9503-996795fa949c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d62a26b0-b8c2-47ef-b362-2a6e4b5a18f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "088c0d4a-b722-4cdd-94cf-799da93d9f9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49502918-2657-4da2-b877-ed070b1f8197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f30c48f-5d82-48d9-9e3e-a768f058ec54"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2e615f3d-605a-4f7b-85ce-ea830f922968",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5dfe5861-7dd7-4cf1-8bf9-a2791dd274be",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f3d378-6205-4b6b-bb8b-4a414a29db69",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "aa2c9c3b-f47b-4877-80bf-6803669d7be8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4bdc082-24a5-42fa-aa41-01d0de7f1b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c47b69e5-673b-4c75-a36b-c0c8e8d6dc86"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "353cfee0-8da8-490c-a0c4-cdad56bd4312",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "82bc0620-71ff-453a-845e-99970b3ff9b2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6694fed-95b3-41f9-b8f9-80333add02e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "259b91a9-64c3-4cd6-9550-41da554c89b5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1619d86b-8b2b-4d15-a151-de9df3157540",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3c2c3097-4470-4042-97f7-9931b234ac06"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "46a39a58-55d8-4038-b29b-7d7aee2eaf6c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f53126ab-29c9-4817-be9b-c9083b1391a8"
            }
          }
        ]
      },
      {
        "id": "0d371434-0af7-4957-9a40-91a1de9cdccc",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "e4c0d128-bc54-4484-8e5e-cf829a2f60a9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "37c8dd77-ee0b-477c-846d-61c51b1e1b28",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8cbfbda9-14f5-4306-8fee-dcf714070b73",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef2ee50-1421-45ee-b31b-f5abb852a741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b26caa6f-dd88-4f75-8044-cae767c21ddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3ab1b6-24e1-4098-af6c-433cf38f2e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "31c01eb2-2212-4452-b93f-f8a1bce094f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1fc6bd-78f6-40b6-93a4-f73c946b2444",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed55034f-2358-4e1d-b44b-c41063112521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "740c54b0-c3f6-4415-8b7f-44a97f13c01d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c104062-bf15-432d-9281-494de1f951be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "acf3956d-311e-45fa-93c3-431f1009291e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b40204-f3c3-4300-8e68-cbaf02d7dea6",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b03c56-e267-4897-abfe-788fed2a82f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62af2597-0fc7-448d-a1cf-f1f7089b6235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc35731-75ce-4a83-b47b-e1b633aaf3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "079f5f61-0057-41a9-8fb0-609fd4c2f4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11a06ec-325c-45b0-9230-b8a0cf3afcc3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c0563a3-abf4-4775-b82d-72eaf1b2ae58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a01e5a56-fff9-43cf-965b-f45da4cac2cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696e6fd2-23aa-4ff1-aa9c-6412167374f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "090581c0-74d3-4386-965b-250f81aa1df6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdee656f-69f3-4514-9cfa-9b34c66e14ec",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "898d2820-fe64-43db-81b5-24cc012f1235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9597139f-9b25-4b85-88dd-8e3c7d9c6ac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e6f21f-a881-4d98-bfcf-07ed9e155ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92dea08d-7798-4a25-a38a-24d414f064f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b077a768-85e7-4c2b-8de3-58932cebc73e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb2244d-c77c-4b63-aa92-1b2cc745c497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "786f5045-65eb-4f90-825b-7e33e4e324dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee81d4c-bfc0-4e20-96b7-ed5dce167b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "df057223-e681-4307-bcd5-feeabfbe7b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fffa8684-e562-4463-a7b0-e4021cc49257",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25312412-e55e-465f-8237-f426e4e29cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb15e549-e581-4735-a925-a7e28ff6a038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b069246-7a84-4c90-a931-daaf77183bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6353cf54-9a21-481f-a5d8-a31ae5bfcc93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365fb2a6-1290-4b1e-a03f-a138d61b4966",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b533b7b-ad49-46f5-a4f8-63ebfac0f8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca82d781-253d-44e4-82a0-3724a4efcb04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6c9c5a-9e66-4123-8a2f-85ed6c28e1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6f7ac84-c68e-4688-b649-061a0804d596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462957ec-d2d6-4dfb-bf51-4e78bb960cb2",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0939f3da-15eb-42fd-b2f6-9de08e89d239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caa75c77-11ca-4d87-ba6d-90b3566b1c91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "157f0ee8-be33-4da8-a252-833dfc0a9e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a011635d-5d33-4799-b046-8bfbc954e713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e42648e-f0b6-485d-97de-7a993457b6cb",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "621fd767-8ae2-4cf1-87ff-fe2f3f4fbc44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5efd26fc-5050-45f0-9975-338cf057a243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4b6b32-091b-4f79-9767-a15a67c1f61d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3b4b6ef-0974-4234-8f30-aa97aaec384f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52dd134a-ef5a-4a4e-b954-e0ffbbb61a59",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18f2275-3408-416c-b1c9-6542770a688b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cac0bdc6-56b9-47a5-aa9e-260f74bffc15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b62d62-cf71-4e26-9949-f63da2612cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3ebcff8e-887b-4e1b-b195-a9e9b574d5d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7255170-85e5-425c-a0fe-3f76629c4526",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab096003-1c8b-4738-9731-cee313780de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42cadfe3-c254-4f5d-a8fa-2af9e8b40218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53673d8-cf16-487f-9f33-fc375acf7d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1d8d5d87-c9d1-4a7f-9bc5-97a443f5496c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d72b15-c477-4aee-9ef3-ebc36dfb15ae",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ba61ce-97e2-4c07-b122-39ff167472c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4367d57a-2baf-41b5-8f74-38a6338099eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa2d54f-dc72-4aa4-86a9-4fa1097adf42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c146bbd-52e9-400d-9d14-f23768949252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81bb86e-271a-47b4-a794-17630d2b60da",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c51bb5-df27-4065-b8cf-13b339ce3755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6868922f-a962-4cd9-b4c0-f59207f7d052"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b04bb2c-ab18-4f53-b700-4dea26ea18be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b835f3cc-aacd-4a13-86b1-fd148af0ef83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96364485-4541-4206-bde0-4f4199e9a497",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83774d03-eab4-4b3e-a570-dce5ca1f71b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "150b6847-da1e-4093-8917-45b9fc40d7db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ed88de-8df8-48aa-bf0f-6c7dc95b4fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "46b1582b-45e5-4da4-8816-27cddff110d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3920652f-3f3f-42e1-9dd2-391024c00a8f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3088c416-a7ff-4831-ac0d-6cce0c17a9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5660168-99e0-4ebe-84a2-89703c325d04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8236f1b-2ba9-4427-ae19-e1e07c03edea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "73d68dc9-d4f2-4d46-abba-32cb42aacbc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7eba64a-6b9d-4e89-9f53-a42237f3851e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcbd0993-daf1-4330-b2f7-cd9598b0705f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a7d3bed-57d1-4817-9c2e-fe0c87023ed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d57d9a9-1f0c-4ee2-88cd-b4f79fe2392d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d853acdd-c01b-4950-9895-51436eadcf37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e626fc2-a5df-4ff2-981b-43938db8c364",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7a49cb-f8f4-4ecc-ae41-6239e534ede7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff87c7c5-aeeb-4fad-ae6b-8abafaae8ce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408d7484-3e3b-45b4-8225-f347ff0ccb52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c270fa49-0635-44f3-a66c-25af30462745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d36f4c81-c70c-43e3-9805-93d086a7584e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "608ea071-ce81-4e1f-98bb-759805be0f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e2308a4-a074-460d-a232-893ce041e40d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c6849b-1068-4b53-8c5c-15d24669fe08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2fd81a6-1ea6-4e89-9115-17b4d7eadab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54447090-1815-439c-a86f-8e1b9066feb6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc2f422-7a5b-4de6-a311-b0737ca7d869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ec64ec3-bdd3-4401-8e08-3047f297a69b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905fc723-595e-4ad8-8610-6450bd301b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8c6bebe-28bf-4b80-a089-0bf205f0c5d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9debd5-9f89-47e6-a927-8e9703559aff",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a34dd9-de85-42be-ba6f-1da3d9c19e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd6bf0d6-1b40-4eb4-bb42-92b5967c31f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d64d68-ff91-4889-95f9-c15f57097401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b2339ca-93af-417d-9287-91013fd9ca8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8654ba9-1f71-46fe-867e-9d343b5a597e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb43d66-f671-445e-8b32-347780ac7428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e14de40-11e4-46f2-bb0d-edad27fa4206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c810bfe8-288c-4a61-8917-50984fb0e12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f240ea9-bcb5-4b5a-b2a4-66cf9cb6425c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49219023-ec81-4193-9e0d-2e3d273a85a8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c21ce5a-8650-4d42-a6b1-a85937cef924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a74e33-67b6-49c3-b496-fa66ae9ff05e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "022b59ca-eb4a-498b-8f9c-68de16888e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2108c0e8-a036-4720-8dfa-f084233fc4c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8670f822-f3a5-47ce-bfb1-eab2377180b8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0c464a-ee4e-495f-884d-445a43b99ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd1dc042-9f3b-43ba-8876-fffa5bf9402c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab82e41-68f8-45f7-87ae-6946956e11ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8f88e86-0527-49c4-81c1-32fa8ef6817f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbcdbb4d-f135-4cc9-9c92-2ea3e8245533",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a2cce8-6d0a-43dc-b43b-ec5f363c8fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d504098-2acd-4b89-92a3-fec6a9982cd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2598d07-a1ce-4d73-b5ac-d5c34d505262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1c92bfe-0929-4cd3-9a54-4c7a008306c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3599329-9c8a-49f5-84ca-86a17ce57411",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e9d2b2-451e-432e-b0c1-68887844b1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c756ea07-c007-4a92-aba7-d982c5471d75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4455f66-887f-45e2-8cc8-d0df8721eb68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01bb87ba-efa1-4f84-92f7-996ad490b3d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f88983-7ec3-4f47-b456-ddd249736e43",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e333b190-1b05-4833-ba82-6d750010b694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b1e3be8-8239-48e7-9e44-c9c15b7ec047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da3d21a4-00cc-4b32-bcf8-bdf8ff60464b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1b085d1-973e-491c-bb7d-4d88bea0c5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52234296-e6d3-48a2-94ce-3ce11510cba2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e76da59-2516-44a3-9f02-d334642895c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2acfa9b-7e0c-4b9c-90cd-5a13e28879bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4264755e-0634-4711-8840-77b08f41260c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "133c610b-364f-4aa7-81b8-c59e6bca5adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c22de2-65c0-4b1a-b66a-b887a9f5775c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66dd0d4-1d14-457b-b28c-ba705e13db39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c6fd1ec-c1d9-403f-8bbd-ec2eec9f79e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42f7325-e3de-4842-a260-8fcc901abfde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "809b7c5e-1e93-46c3-8487-813b0c1d1a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f579e881-139a-44df-be5d-630649bac3b8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b558185b-47da-42dc-bf1d-747570bef946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d904a8ca-2114-466c-b0e9-898784ec2d7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b875d0-2d7b-46e5-8859-0e722b21e732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e5fba17-394b-4f34-97ee-ef8ae71c2070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "517ce09a-e8a0-40eb-be00-be5d96b39963",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec1a24a-583b-48da-8ce0-ad8b40599c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16e3d39b-c5de-4cb4-a0d0-e81be2079d54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c21d1039-6429-472b-822e-9a880673b047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dd6d64e-75b7-493c-8a08-799390fa4114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a2ddae-3711-44a8-ade2-3f7259d2a74f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db938778-1972-42c8-b466-76eb5e10377b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "831c32fa-2691-4b28-840c-ef9096c3c378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901a91fe-3991-41c4-84b7-7a28d6afb784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e101afe1-2870-4663-b86c-775a05735841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a061b8fb-1897-48a3-9e91-886a8b602757",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd1a3d3-9a95-4f5a-9035-19ccc09f7636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba9a94a6-6d1e-4fcc-b269-93c0259bdc8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0443658b-02da-4326-9161-467a1553fde9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21bf2e2f-7158-4fe8-aa10-a010c3af1fd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29186598-a768-4563-8f29-eaa49af1d41a",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3046796-59d7-482a-9052-4bf99823adff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca69f40c-f13f-423a-8172-ec56b9a48a58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a622b9db-2142-4c29-a12d-1ddf74cb3597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55226e16-de03-4a05-a943-7bd6bb5afd60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f036c2-fcc1-4856-99aa-d230e9844e5f",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e23699b8-4bd4-46c7-beb2-f6284a4e60a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16483c0d-d279-403d-b27d-e58f202375b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4346af-924e-49bb-805c-ea4aa60c1a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0db7171d-fb18-4f9d-bfd4-cc78c1b22e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44bf12b8-43b2-48bc-8b2a-ff93811bf0bd",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "233e74c4-c19e-49ea-b587-af47bf18d657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5831b8b-d7c8-4b81-b066-a4b6242dba66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "decdf7df-68cc-4990-86a7-96cb6d1a07a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9da06db-e160-488c-aaa9-ee15e039a513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0b3cdad-5ee3-42c4-bb9e-074b4b92bf38",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97dbbbd2-3b94-4192-8df9-e5a937a1b69c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ac4505-00de-42bc-a55d-09f7263c095b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67c2251-91ad-43c6-961b-1f325fc3e5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bf5be1c-ebcb-4386-a0a6-a432337b7671"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0854e7e0-cbb4-4c7c-8ef8-e22ea2a940db",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e117a01e-7edc-49cc-8e81-5d5e68556f6f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1d8f28-2a44-4cae-b991-a25733d7929f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fd3ebfd5-122c-4588-ba90-010b85f54a17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51213a5d-aa88-485d-bc7e-bd8bf87ecaf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7cdca402-1219-47ef-a6c8-10ca033ddf73"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6429d67-5a35-4553-8221-5084258e8368",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe72bc04-9047-4a87-ab15-a87f30265744"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "52e36399-446d-4551-a9d1-39a31a73ddaf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "480e4633-1586-4363-abe9-a2fe7697b04c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c1e20439-aa83-4b3c-8d2f-5e41dcf6f35d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "91393787-2ea7-4d47-94c1-0f61a490d3a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ef55b599-803f-4083-8974-4c54f21dc3c0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "38fd0c3d-1b1b-4a5f-9c42-279d539b056d"
            }
          }
        ]
      },
      {
        "id": "89db95c1-edca-44d2-b4db-967ee8869074",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4e15b317-8709-4579-8d36-71c60809b4f4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f12cd781-efe2-409d-8f69-5d2dce5f75f2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4cd69d0c-b296-4643-ac83-0da2fe3fade3",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e861e5e4-3f6f-4498-a0b1-fca7f73545d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d51b65b9-9903-4435-baff-2b08c6172e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5490255-5e44-4597-9d9d-d2b626b3275b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc799f12-504c-4b68-8c74-4aad5707c22a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5d6a900-075c-4c54-af7d-d10793a07c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aff58a8-b9e9-4dca-ba09-8476713830f0",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c284dbb0-44ec-4aab-a83b-8eb63134fdc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a5e1642-26d0-4164-ab08-da04c99fa6ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c2018e9-c2a1-4758-95ef-4ec6a0f2f4a8",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e8d4f31-9eb7-433c-bf70-1d8d3eb075e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf81eb81-1d57-4c92-9c4e-82c22e8d3dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8672744d-20b6-4b36-93ab-6beb86337541",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe640c2c-15fc-4fb1-b443-a27714e244a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be286ee4-7822-4d93-8ac2-342b3008f9b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e31e61-59f8-45e9-be5a-d6c9859b8267",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8dd6118-bd35-44fc-a54a-a0f43a8f988d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6c1f8b1-0c77-4019-b742-c99fd82a67aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64685f75-9fec-4f99-9944-b0308b0d07a0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5196f1da-9143-4fa0-a8a6-b7fe7e7d1b3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a6ff333-76c1-4e74-8a98-a099c46a7c61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b87e41-d176-4e6e-a917-b78b8d450592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cabcd59a-45cd-41e3-bbaa-c515369cbae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822365d7-c265-4b67-b8a7-3123e7700728",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dafa7959-c98f-472e-a6b8-e1693eb05b57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f707da8-26d6-499b-9862-2602bddf9eaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b816673-254a-48cd-b462-dcc7ce6b2156",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a406b3c5-76a3-46a0-84a3-2c0eefdf340d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a778cb5-e4a2-42f8-9805-579bf75bdd8f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2c5f69-b15d-4722-af2e-bdeb646b9274",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9495b3ab-1b1a-445d-b21b-51d48c1b0a2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f82da8a-c6e7-41b9-a308-e77d6a435c47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b5e4f07-2da3-4874-888b-5eed414cd1e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79e808c-9b71-4ab8-8995-14a862515105",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13bde55-e148-46ce-82d4-44872e769c30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "488fea05-ddb1-406a-ab2e-71798de3ba1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf27f5db-9737-4b8b-9798-68e595dfc0b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e1baa2c-2c04-495f-93b6-7c8f97059cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1b5a5e-e671-4cd5-8f9e-a3456b361553",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88b3980-9359-4caf-aa3d-de8def77242a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1a2e2f3-a5c6-482e-aca9-77fd9831af49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ba5ce9-861a-4fc4-9714-3c15c3b9fb42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afe2239c-3cd2-4755-88aa-649ece741e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a1e83c-5ea6-451c-a121-e9956c31725e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a19395ce-2359-41bf-a07f-9de438c6a3e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39678bc0-89b2-4973-b3d6-638886f862cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a187ccd-f2e0-483a-b170-9c28463bc0bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86bf3563-55d0-46ab-8f8d-10aa2cd7eb4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb102dac-7fd8-4b1a-823e-bdf71acc621d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec9b62ea-f264-476f-b504-bed401b4b2b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8949ffeb-17f8-4841-8215-96ad3cc5702c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e649161-2afc-4a46-b47b-0bc9d087bc08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a79512d-d9d1-410b-852f-1e2799a9bee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "268ef140-cdb4-4801-92a3-a1555fa0b516",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c7317c-e82a-4752-afc4-a7059e09acff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "116b4db0-e2eb-4140-ad70-1ad64cc56c3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02acbfca-72eb-4219-8d59-ff911e87a4a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e87335e9-b727-4272-ac98-f5341bed6376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45dbd38b-886d-49a5-96f8-f97b1fa2cb9e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566a50e6-674f-4efb-b724-f12483c0aad8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f95ae2af-93f6-495d-aac4-41e48c636f9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "614ca696-d1c8-41ef-a3e4-a973b2032847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0cfec05-75c1-47ef-a323-7badf0c64223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea853ae-4a7b-4f52-adb6-424575f68a3b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d948a3f-0917-41c1-9867-7d3e53e01ec7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b4dd435-14cc-423a-b0cb-d3ee514f6077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1111c6a6-dfcf-45b1-84cf-823fd55a071a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "287083aa-c766-4f29-b0bb-8e76315ff483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c22f211-003c-4a78-b2fe-580b2a279ae0",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d17aeae-db9c-41e2-bc5b-d3c693ebbd7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a508bdd1-53b7-43a3-b568-168e50c61478"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee1573e6-b98b-4ab7-a3f1-19f2c59e9514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8abf50b4-cbca-4b44-9deb-409404f410f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c660118b-7c41-4cc9-99d4-f39b73be180c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80303590-0e6f-4056-a8fb-e7f6a3436bea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d4abbfe-4947-4f17-be58-4010090abd19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83497ea-2e7d-4cc8-bb90-abb20384a8cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675f4f5b-97f8-422f-9b9a-307246ee21a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a197d78a-c8fe-4859-aec1-873bc7b8e914",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "860cb9e4-3da5-4fe8-b076-00251409a538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69b9b9fb-d4f7-4c07-8b79-1c191aa3ada2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f129cf5-0a61-45f8-85f8-b9a651f557bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60d567ba-2197-454d-b24d-dd91614075da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59934ac-8e61-4364-985c-be4891edb66f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08df0690-a0c5-4021-a081-fb00b9c55ec4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fd7f423-4446-40aa-818e-2016c386f3f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d753e543-ecc7-40e8-934b-559de642e670",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97e45fca-027f-4cac-98c9-a78409e14186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df8028a-d04f-424b-a851-b960f6607dac",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0663fb4-eb10-47e9-bd00-7570dffb0235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00acdaf1-8019-41ef-8970-03f5e9b11b2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0215ec4d-d14e-44b6-934a-b59204ab4f9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f47baa1-a9ff-4bab-a802-f2bc05c72fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3623d2d-5363-43b9-a0f1-f9b6909bc0f3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b85e6fdf-cd77-4023-86eb-5ebdbd56ec64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db7c146b-7f1c-4ad1-9437-1ba84ba072ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d43f1d8-adb0-4ba4-94d6-9edffabc3770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aec597a-6ee0-458e-8b9f-e10acf0675db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc29115-3a0d-47c4-8048-e3ac4aaf7638",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51befa08-9486-4d9d-8c57-dfcd8bdc47d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76dd7b35-bdb0-4062-bde9-d663a0fe9040"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9327ab-2714-4d1d-9590-7c1ff16dc513",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92ef37dd-bea0-43c5-922b-7b5cd02a2a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afcbaf86-8fb8-41b5-b5bf-bdaa3d955be3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0f8c0b-956f-4a55-b180-5f037735f957",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8d8bf5c-ff84-4cd2-96c2-cdbce6cea508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4686b84-3b28-44ad-becc-a3a4398d029a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75d6bce1-c949-43b2-a5d2-81091431f839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3374f6c0-3d34-4c30-9338-42b05593adce",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f14cf5a-9a27-4b35-bb94-9013a34cdc96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9f4062a-cbb0-43e2-9192-6a35e2f0b50d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e90e91-a1eb-4427-86bc-2e097edbb01e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5d1fef3-078c-4e65-afae-5ac40c5ee52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa10638-44d2-46d6-b64e-0d348b6773c4",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f052696-5980-4c1e-bdf1-4d3837b925b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9f91039-402e-4ec3-a659-06052efbcde5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e12a69c-23ce-4902-885e-8ba03f7cfce1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ff1ffd-247e-4dd9-adf9-9aac38949877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d4ee8a-5736-47c1-be76-b30ed7663217",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6fd577c-de6f-4771-81e0-230fe5691956",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bb3c87a-74b4-4b80-8b1f-9f58851349ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f66231-4e9d-4267-96d7-651cf3d657a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6da7440e-a00c-4db5-a798-13f5ed864dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad80e145-3ed2-4de0-9c25-8ff3f3016eba",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6ee043-fe0d-4e0a-8ac0-93f61cbeef8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60b78a04-5567-43e4-99cf-8b71335835d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01543ab2-3b53-43fb-8497-37dca1254cb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07c75773-3cd5-4ded-a1cd-35e8f3dcc64a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c3389c2-2fff-4f7c-ab5b-e0a8f9d4dbc6",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546db575-c3ec-4404-ba64-b25835493471",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "169f1d6a-8459-4138-96a6-ef10646e0dd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa5d8a3-159d-4e58-9b9d-060debbee155",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fee74d72-29bf-496e-89aa-4d1f167bd53d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6994f8-800c-4ab8-bb43-1c9d9f438957",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e0551d-f729-4393-bc6d-7176482abbe6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8372ddc-27d3-498b-ace4-5c0dd0cbab42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c746e649-5604-4b9e-9bf8-9739f4ace28a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c17ec7ee-f468-41e8-baef-b314ec0ef113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37978e3d-07ae-46d4-822f-f88cb02d64ab",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03aca3ea-6544-4195-aaf1-d0b554086689",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7e02692-d1e1-4393-90b9-9bf74174412b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "611c1a1b-cdbc-43f8-bf6f-4f2739fa593d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b151cbb-befd-4065-ba6e-5fa24d2ef2ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51605750-2320-4d47-9826-fc7d6a68648b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919fdd93-94d1-4379-9fbe-0cb6527a4114",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "632b1052-c3e8-436c-a83c-c24102a33251"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb1708e-3a13-41d4-bcbe-f1d71c9d2ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bda2e518-5acf-4f70-9e92-13a6b011057d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2571f849-dac4-40bc-a35d-cddf6535ea3e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c40c4611-09c3-4d2d-8077-960d6196d015",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6f2459d-ff45-4c23-a94b-d23c2aa9fd23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f13afeb-2464-49c0-8782-c9e2822e9b27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a42971a-3786-4706-84fd-d4e125c2b4c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b4a5e28-bc08-461e-a381-f6f0a480e21a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95df0be-f0c7-43d9-a6bd-5e4866fee122",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba35935e-d666-4f9a-b189-7c18652c7988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b273feae-9f9e-4be9-9077-35ae33a79cb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69c13d03-9f3d-4a5b-ba90-dadc799badc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de37f263-a85f-4787-a6b9-80edb47aafb3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d93139-c47a-438e-b9d3-340366da9d49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5077cac6-aaf9-4db4-902a-067d99bfc16f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab4868a-dd4b-46e0-9686-64d08ca54a5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44c5c4b7-e6cc-4da4-a1ff-ed6c2fa6e704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8dd438c-feb5-4de8-a465-d9776c35d04b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5310093-cde9-4dfb-8a7d-58d06fcabc67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63615e1d-4a09-4d23-96ff-a0115690be8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "998c5208-8311-47d3-bf17-92334ec23f16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2b4a593-4694-45f2-8f21-9fcb2e20a689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e7e795-20b0-4cfe-b50d-410a60e55c91",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db6fef0-c226-4151-9cac-20a66146600e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "598d3917-4f57-4896-b75c-04ed8850e9ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a89463-c060-4284-82f9-36f641af03d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2557a2b5-3100-49bc-a532-c558000de857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8256a757-9562-41bb-bb8a-a24f4c93a39d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe13de0-80ed-46bc-911a-3af04e3371a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16d4f58c-0fff-4f7d-9bb3-d090b5de6418"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b057fb56-5ca9-4673-b06b-7e44b0bce7d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91d78168-ceb4-4a15-b349-bef4df08876c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff64133-1612-4435-8fb8-0ad86793d72d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452f668f-02c4-40ea-a6b0-fa23eb2ecee9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb16a638-de7b-438b-8859-bdae7eeb8fb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14773d15-9d78-4790-90d3-40a5a92a44cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54090444-ec35-4e23-bf9b-590370dae961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f407d8c-21da-4254-9900-dcace2eb8858",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6538a379-c048-4b3d-aa40-da364e7abc8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "575a8959-28c7-43df-b9ad-f4100b2da8dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "607f1224-4519-4fef-bd21-a3af88c2e6ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9774123b-917d-46d3-9511-8cccb3aa7219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973d5033-68e0-4990-bf0e-38260098ffa0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdfd8358-47dc-408d-bdfc-d75b18a8909b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04f57f70-6a08-40cf-9757-2987fd988a74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b899d406-11b1-4678-a1bc-4b717d30fe82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2b3d827-6186-4787-9c19-83787936ae25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd19671e-4ab9-43c0-bf97-d5c24f6267ce",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "190b0a9b-74f2-4003-b135-35a7d7354df4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a90c1a15-1a9a-4983-a416-e6fd10a2e544"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf1bd64-0771-438c-9d20-0731f793f8ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "140b3397-51c6-459b-99b6-0b391e798f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50c750e9-4254-48e6-9e1f-08531afe7279",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aca67bd-7068-4821-b027-0557dedb4045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdb08a05-5a10-4166-81f0-88e148d6ff8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cffa9fc9-724e-4c13-8be4-693231c2838c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c65bc20f-be5c-4c99-b2ab-31bf690350b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9305243f-5986-419a-b628-2b96f6a33016",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e974559c-c1d6-4c8d-bfd8-cc286c9bc8a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b8c7b61-d60d-4fe9-b3d8-10a74b20a27e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b247d11e-ad33-454a-8a17-0c26e4d44767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72793719-6c91-46cb-a693-c3bda2ac320d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24fd50d5-d798-4803-a792-f3843a444e98",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8c622c-0c82-4643-8196-643f86ca2b65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f8e2614-9baa-42a5-a36e-62531800d838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "effade17-7b61-4e4a-a37d-43515c449c60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aeef8fa-f7df-46e4-833c-f44d46b5151f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac7afec-f10e-4814-a5bb-4af3ce7785ad",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77268194-d872-4d53-b8a6-78b15c4afcc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79369178-c474-442d-8b6c-38e51f144518"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92782aed-e892-4cbb-974e-98a1d42b5363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3481991f-36a7-4214-b464-a263aa3e32e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91514e0-2ae1-47dd-8f2e-5f46efaa0297",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b912b27-c482-4694-a412-54f0c4ddf9d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d151680f-081e-47ea-acd2-cb84a72748b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55112b2e-d21b-4ff0-a77d-c7255b0ed973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd89a834-67c7-4445-81f5-7b3a5653d44e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e94910-c475-4426-b122-4369c0ba8c5d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a0c646-c427-4b31-a981-cbd00435663c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fbd403e-938b-4374-a1d4-71d9f990cbb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19696de-062e-4f4f-aeae-12a469f2c2b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e37f4aa-6928-4ddb-8d5d-83748337d131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640eb263-ad19-4077-b8ab-b4ae02effdcd",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b7d688b-8c28-4889-8355-ee413d990ca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35d556c7-458e-4182-8994-d2d4ab13da26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9f6958-ea7a-46dd-93b0-052071de8983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e815d11b-9fa6-4517-a70c-a47b201e8edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e1b3dd-201a-49cf-ac4a-2920eb9f448c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c071bf-c9e9-4ec7-968c-cacfc6a082ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb9a6e29-c51a-4b88-a08a-8db47da8d000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9112d00b-9a22-41c9-a510-b383279a7ed4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67a57e57-d3a7-410e-a66c-65d025afbcdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a257d8e-065a-46ff-aaf7-b73f50112424",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fee5af0-94a3-45b7-879c-b786ad4353f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c942191-c5f7-452f-adc0-6fcd768aadb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f960ab-d686-4350-833b-3d3f163e800b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78dfb233-e920-4b24-955e-d6c6ee20d95b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e9c583-c28c-4c66-8ce8-a1131a6ba099",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8762dac6-88aa-4745-8f67-bb06ae6c8bc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c2d041a-eac9-4516-91ba-3912a224f750"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8680416-ca30-4f21-b33f-3a1ea010743c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b52e274c-ba09-4621-870c-35ec097588f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f04e8ae6-76eb-4a19-aeba-c94392381a3b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f8b78d-7216-4995-b216-42dc48e7a683",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "237b088d-4a25-4e76-b442-f3bfff882e9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22b8e459-1418-4caf-bf3b-31a4820f8e42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6522165-ac7c-4492-909e-67eb01c3aed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06aaeebc-0a3b-4683-97e9-57c0682590d6",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d811156e-0949-42f4-9dc6-453a523adb53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0397a435-84c2-4f6d-91db-ebdbec48a752"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20804bdb-84a3-477c-bddd-4ebe7bedaf21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48bbc0b5-5b1d-498c-bdc9-2dba3cb93a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23cd25e9-8ad8-4346-b0a3-e8b6966238e8",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315c867d-4f66-4de9-b893-8621507504c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79c2fa68-4b5b-4dee-947d-98e77e02cd50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e176e991-857f-4bfa-8f8e-64b166715a97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e38826c-a86b-4171-9c14-dcb6990be26f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a2cba5-29e4-4d45-abc4-7ec8b961c682",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "513a2665-0001-4f47-88e9-27a8596c5919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cc42607-fc3a-45dc-9ebe-7617fb243f09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "549a4598-2115-4628-a94e-c888cfef8fa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99dd07e7-3afe-46fc-9428-8d6832511118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19846fe1-936d-45e4-a7b1-e1363eac920b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d43f21-435e-4143-bf62-ca7ace02e386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d934ad96-3f9e-4f62-813e-bf6200b99145"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb443037-2305-475d-bc84-7804f3436232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "420dfd9f-8b3e-4e33-a9a4-6b23749a9506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9535a842-43d6-4dd5-958f-e01829065b95",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a3504e3-2988-486f-9d81-74d140316f96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "724368e3-89ab-4117-994c-0f7f90ea0fa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a292c6-0c98-4418-be36-80739174dfc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4c13973-aadf-49f8-99be-b5feeed37d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe616748-0668-43ec-bd49-9ff79a691ea5",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b37d7dc2-07ae-4eb9-a987-183b4f05800b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b276be6-5cab-4b2e-99a0-3cdad8edc72f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f27524-b34d-4594-b8b1-14c539dbf045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86ae6fd2-d28d-4053-af1f-c26d3c7778c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5278c3aa-8ddf-4541-a41f-1f0d77c03072",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d8b288-2406-445d-8347-e31fdf86daa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49c34275-27e6-477b-80f7-e8d1ae156cdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b96e681-27c2-4085-a003-a667febfa764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13539ee6-7175-4ec1-b21e-50d335fa5b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa5cb176-040b-444f-8b1e-69c31a3f6ecf",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12874f7-25bd-4b10-9b02-a474d18e9ca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "585b8680-2502-4541-907f-d42ceaa7275e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "963a20ab-808e-452b-96af-4a6596beff7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f0be821-f8e1-428c-a5cd-ac19c08bebc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c98cb32-90b2-4df0-bd4d-94df84aa0c97",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12804b60-fdfa-40a5-b8bf-479d6a6c4a25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "381526dc-58bb-40dc-ad5a-9c7b1f9a02aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7b182f-812f-4f21-8975-a0a17da5a7d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c980568a-1395-4822-be2f-244a657524d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5622e35e-f1ba-411a-91fc-d73fa788ebe7",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5815c420-a103-4823-8d20-6228595d83da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56b3ba1e-f824-44b6-a40f-f0ac1bd0cb73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76a671e3-54e0-43c3-acb8-b330e3b3f703",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bbfa38b-78d1-4675-ab43-5b29cfd00676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db0bc11-cb55-4301-93c8-63fd8263a973",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d78d261-fb10-47cc-ad77-016ad52895b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c699bb72-313c-4a8b-8ba3-6d14609af851"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d5d447-91e3-4af5-b504-52a143676fb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5358ce8-285e-4afb-afdd-7273e6e2ebc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d3daa6-9c6f-45ed-a013-9a555d1698df",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c33ad9a3-8ecd-49ad-91a8-44823c348d52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf86dbb0-37bc-490c-bf6f-63316581baf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d8b980-ef67-4796-8c08-7b414b6f2006",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44772fc6-aee9-4d61-a6d9-e75fbd52df1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ceb2bda-3333-4b78-8406-1acffcd74a37",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f985f62-bfd0-4ac4-872a-51b56c5194d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65c60e17-c249-4cc4-aa98-8474c7313bdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae5d8c4-298f-40d7-abc8-8bb128c4ef30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98272550-8669-4494-b3a7-a521874a1365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e89f73-e485-46ed-bd99-5b9179d20c7c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34002737-3e0f-4b96-8948-071d6a89d695",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ce605ed-039a-4b0b-87d6-321bd2f89df8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8039ebe4-ba15-4c26-9921-1adb68580830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb2481a3-e449-450e-abb8-1e3d5a57a732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650ac8de-00e0-4265-815b-0d9e928c552e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a262775-f414-4eab-8aba-ee53e5ddabf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a813371-8bb1-4d96-ab65-61f1dfbfb425"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c805ee-e70a-4121-974f-581d87aae22c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f21d8f6-b1b5-4f7d-ac30-de7e05940906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650a1b1a-52f2-4bde-a1c1-27473953745e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "662509fc-8ac1-43c4-8db7-ee1106f912f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae930836-ba26-4b6c-9c92-f747bff9aa9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a85a8f-ab05-43e0-8b59-f743f251ad36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aec05582-7084-4c37-8194-597096db9d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e19fa4-7f21-49d7-a05a-3b95c4fcf383",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3095a31e-a3cc-4332-9b9e-cdc7c426a161",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4c17815-a50d-429f-8009-9c91933dd5a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53857926-75c8-46f0-aa61-88378d788bd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a15eaba-bc05-4f1f-a783-10bd1152171e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ba6007-4738-4ea9-88a4-f6fc701a8138",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa98e58-f064-4d3f-b028-f78876a49577",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dc62d5b-858b-4f77-9085-e3fd0a22bfc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1e196f-efe8-4c22-be54-141ae55e2165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc64c800-5197-4d59-88b5-80363aaf656d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05efc600-5b48-47ba-862c-d373291b3d51",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350db2ad-1628-4765-83b4-57afb66efb3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca2d6bd5-b128-4dd8-9d7a-c9b04be62353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c63694c-db17-496d-8700-26e1d3fea0b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06bacfda-f383-4c10-81a5-0e80ee7da6af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef89871-3524-443d-8af3-b5bb09729595",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5873911-38c5-434e-bc65-9881c97c61e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c37cd635-c29c-4437-b8ca-1bce12cb7787"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b959fc1f-7afb-408b-9d0b-5fc2299415e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58b77ecc-fd8f-472a-9a6f-545ede1a54c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c9c5fe-94c3-49be-8749-090e98f876e9",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e87059-cfdd-4bad-b15d-f3c218296145",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec2da291-56b2-42aa-8aa0-e06da53b7f6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a76cc85-f8c9-46d6-b71d-2fb93a2f606e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfc7a479-23c3-49f5-9b9d-970ab5d8e857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd58fcc8-e74c-463a-95aa-f6e28100f0f6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "917861ed-07ee-48fa-bb54-ff4c11c7eca8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59135bbc-4255-4147-8b0a-839106f9c3c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ce492c-8518-4b3b-856f-49c1f3e6ee68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1ae2725-e1a7-4af5-bd10-a6787377a703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2f6b64-93f3-4bd7-aff5-c2135b2180a5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64dbd355-7775-41e3-aec4-b894da7c31f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c26fbd5b-e381-4d0f-8f1d-4e6770537075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee80cee-0be2-4d4a-bdf9-756599d9156c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27125605-8c21-4f09-8abe-7109617e942f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78acd789-e9eb-4cf7-9fbc-9f6d39afdb6d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e14004-3fb8-4432-be11-258d74d6c275",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf74d141-ee04-4b18-ace5-cd90f66184b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9115ac4-747b-4858-82be-a1d7f3a6464e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7724db6-3e32-41c3-9e6e-d8df333f14a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf701ec0-62f2-4ec8-9c96-0bca290c3693",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca0e9e67-71c2-4061-8743-ac54801f9521",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f813b638-7994-408c-9b9a-6e669d38553e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a928202-d695-449f-ae62-debbf45324f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4eac706-39f5-47c9-af9b-cd2ce373c9ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c11f88-9759-4a82-a956-a9f3b9d23db0",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0baa8f-cf32-4951-9f15-7af25a23ddfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9470ea61-34e8-4e50-a6e3-273c470ca1fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f889dff-2fc1-4aae-9193-c0c750be9ed1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5d2aab3-9916-4dc4-a7f9-1dbb17a19bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00ae6d4-2891-4358-8d81-b254f62bf8b6",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f995cf-8e76-447c-baa0-03a8c0e67ffb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdbbbaf8-3f11-4b45-92c5-f3e41efd686c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f060a4-a4c5-420d-beba-adfa2b82e1fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18225d9a-a1bf-4cc5-80a6-c665d8bdffaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137e3d7e-db2e-4cb4-8480-b8bb23691ca4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc52b2fa-ce5a-4311-9740-514ba982f681",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46ffc9a4-f85c-4390-8f76-91a7f6a15f59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6300643-ffe8-4295-b47a-d50036a80a9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cef9677-f6b3-4c68-8340-4e0589cd8f22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "764c95cc-31e4-49ee-9e81-3dd01acb8a8b",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f86a9863-1dda-4936-90dc-8cbad755b875",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a149e158-eba3-4eb0-8968-a71d5517fea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3689b371-23c9-4769-b0d7-90016d783ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a30e011d-c966-4590-8bc3-9a7cfc0d7d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b335463-db46-447d-bc5d-06987a009372",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532ee9dc-bf30-48f9-ab71-4d21cdc810af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69009f41-1a77-4de0-89c7-81554240eca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb814b2-49e2-4a82-83aa-c23fe330a673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5275acbd-f10f-46d1-9f53-65135b707632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec3d711f-f96f-4c4f-970c-39f2f72d6cb7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17671341-c5ab-4dcd-9470-9f6b0cd54a17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d736d5f1-d898-49fb-a6eb-5337a672963b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1740e1-4906-4639-970b-4b4223772ecf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c52fb7ee-4907-4057-b126-3cb491eec65e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fccf212-82ff-43f4-a5a5-2ffbaaa2a7dc",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd6e6096-03be-465c-b6dc-5cdada97f25d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ea270ef-899a-455d-b01b-85eb7a5c1cc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6904097-a9e4-4524-b885-515625ee5937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6ca5cdb-70fb-43e4-a729-805b34397d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0e847a-1d0d-406e-b672-f754cbaeafc9",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05ce173-aa7d-438c-b957-8e84ab4a0c7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d222e60-19f5-4e6a-b4fa-22b1acac7c0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "075fd995-aeee-40bb-9120-7b2ae993de9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72587869-14ec-430b-a681-75e6ea29b9af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6faa4679-b447-43f7-81aa-8da04d85440a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ecca45-fc57-4fb5-9ed9-b828297cadba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1ecd9db-1d42-4f14-80ec-2d63916b7d62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c901dc-e62b-44bf-bd53-9d5020c0c88a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "551c7a66-cab6-4a7f-8137-b17466a6b189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a330b4-b018-4f99-9736-2245ca48134c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012f3821-25eb-4020-b78d-e571881a342e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26c51996-df7f-4af6-b295-ca3666d77fda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56df177e-ab87-4056-98ab-10f891312a50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c81dd6f-eca5-4553-9cfb-791a671d3498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "631301a4-6b05-40ae-9d7a-52e4c9eda436",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f1db89-dd83-4441-a58a-2356c6ad234b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a06995df-091e-4fb9-aa36-abc1c7a681e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cffc3575-9525-4941-a3e6-76e1fed7b6f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56d2a4c1-5f10-40b2-ad45-710fb64249ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce2cb716-535d-4827-b1e1-d53ce116c6d2",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15fc26d3-5cbf-46e1-8e2a-8bb2c28a215c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f920d57-e477-42b8-881e-5b24e770dff9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85a4929-34b2-4c51-825b-6adb95d05a27",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd08c82b-29cb-4403-bdf6-013b7dfdcbcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62165e6-52d6-40ac-b927-a574d1ee65de",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb339658-716d-4738-9cdf-d43432af3592",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68951186-417b-4fc7-9064-6d7adc5f2480"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3383dadb-d4a7-4bf6-a8cd-c3af6978983d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f568888-84ee-4069-a779-fd92aa34f9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "563c66d3-48a5-40e5-9789-2b45953e8066",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5dc9e79-2474-4e17-b3d1-996da1eef4a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74accea4-ab8a-42b3-80b6-bdd533ce20c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88cc99cd-1f1e-4988-86da-6c75db8b0210",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17312de1-a183-4401-891b-7c5fcdbb89ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34383042-f62a-4b4a-a9d8-7c45134af8e3",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af9a2c1f-653c-4409-9a9f-bef87c0a26df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44e17629-61ae-4ad5-9d19-8e26f61d3363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca16606c-3d54-468e-88af-44065df18f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6daae505-2048-4739-aaa9-0a3187fd489e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c458ab-cdfa-4b75-951f-47178c1b1014",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ba92ad-f4c2-4e8a-83c6-47956b32844d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2a3bc65-afb5-4e94-b97b-c338a27979bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3516948e-e957-41d8-b1b6-06e93d464c59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45258a16-5c22-4dc0-817f-54bbb87a3aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d386b6f8-7f46-4959-bb23-b8d0d3082ed3",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9730dd5-6dff-4463-9b2e-e9d47b1551d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51549b12-5b36-454f-9a86-4009efaaa1c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7b7678-34d0-4ce6-b255-421ce1a585ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fdb586a-c6b7-479c-9b3f-7809bd154d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543f843f-de5b-4c11-b8d8-4386d86746c1",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032214f4-44db-4efa-941c-55a9aec1c8d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b74d249-5df6-4a16-b2ec-d4d5d67ca0f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6576db-24db-4dcc-8a62-5ce051fe46e5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e15959f5-9efc-48bd-b1ec-4958596a160a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4527a48-fb39-4f27-8743-fc1130644a56",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c536e075-3a87-4a9c-9ef9-64b7a77b41e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c0eb312-5bb5-401c-89dd-a2b2cdde7868"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87b0274c-1ce9-4d81-a169-cb001f1dd938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74681dfa-a93e-4e88-945e-e2bfeec3d0e2"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b9f7cb4-be6c-488d-b079-151369dcc227",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5395dd8-e997-49a9-8e69-2778ad4eded7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3587d99-01e4-47cf-af95-e766bd67b10c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b857f375-7d09-4f1a-ac5c-7341b7555321"
                    }
                  }
                ]
              },
              {
                "id": "92be256c-172c-4dc4-9fde-dc3cbb28583d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bcb0ea9c-ddd7-487e-8e84-faf84c1ccbe8",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c097ed-6ad9-4ba2-9b20-bfe5b754d6be",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "62846729-ad00-4e2f-9d88-c63e2a396695"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d612dc-b8f7-494c-89f6-784f5647b32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ba8476c-18b6-438d-bc57-476cce574708"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b72cf67-9846-41b5-b64e-8c85e2a2b97e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b4d0a60-d425-4f60-98e7-06b532755933"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "02f192f0-ef32-4484-a289-2124f0eb166e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbacc0f5-e874-4c54-8e8d-a9b3fd9291d1"
                    }
                  }
                ]
              },
              {
                "id": "7818d0e7-2254-4482-b038-e763a41d7a32",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "bb92b677-d1f9-4f68-b02d-ffdd89d9b76b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c31d65b-5970-49da-9f3d-1ade924dcdc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9537933c-3ee6-4a24-9402-a0b1ca51218a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "004ad303-c5f8-4c3c-bb53-f41e05421e08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af4a1d67-e464-4eec-80e5-99a6a79a09ee"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9482234a-02d7-4367-9977-e0821bcde3b5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "335e985f-d2db-486b-90c5-c75f43e56b17",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e8b09b5-ae1d-4317-b6db-8c2e966bb3ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "84807ed3-b4ce-47a7-a19e-1d8d10cf4705"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f3a9cec-d226-47f1-b87e-9438884b2490",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d91379d-37c2-4c5c-b393-e2b2ccee754c"
                    }
                  }
                ]
              },
              {
                "id": "e5fc0962-d860-4d3a-ba93-cdd1217b8ded",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a3fcc8c-91ad-4f39-9565-aa3650de64be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "21968d03-fe4a-4255-a214-f258e4603bda"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f219f9b2-456f-42fd-a465-9ebb3a3bf524",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8650cb3e-d573-4c71-9c10-cdde4c5e7d48"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2215bea8-ab39-4ff9-8748-166fad714c52",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e5421f03-19e1-4f49-8e98-217088734a20"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0004e908-47fa-4f70-9cf4-c690efdc8cbe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "29eed87f-eda0-4bd4-aa85-a4711c5d48f8"
            }
          }
        ]
      },
      {
        "id": "4af3f1ab-8252-4abf-981b-041c8c206613",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f4cbf1d9-f966-4eb3-98b3-6743aed98812",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fc320525-bff8-4eb3-a662-83c0f64d216d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fce40f2e-86ec-4346-a4d3-10d88e51acf4",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d5d8d36-af92-47d2-8161-d56f6f7ef2d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ecf317e9-1f3e-4f07-a0f8-7091ac226702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "519d4b1f-e8a1-4e0e-be7b-65652467f72a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ceff6523-9471-410a-923d-0a60c78d1b37"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70869ea7-a668-418e-8932-5587e67f0588",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "902e0524-1b4d-48ab-ba1c-4fedb5c02098"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1158b276-848a-4ad8-95a8-977368279ea7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7fd21de3-9bce-4f40-9185-6e5267449422"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6e863a00-e854-41ed-9f77-00ee8ccedfd6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b81ab567-285f-43a1-995b-9a4aff71df4e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "680044b2-a568-4a76-b533-8961a74a6a50",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "04415c99-a153-4ecc-a429-6bbb4dfd3b05"
            }
          }
        ]
      },
      {
        "id": "72584b65-cfa5-4ffc-9512-a6e2b862a510",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "19d32b74-3e41-4343-82bb-1f3e2772cc12",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4c9250f2-b53c-45ae-a731-1442559cf72f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f444b66b-e0b8-48b7-8b0d-4806c4886879",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39467ae7-a6a5-4f2b-856a-b4021db519e9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56003182-658e-447a-a9b0-56305ec5951c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9007943-dc5f-4693-ba74-586444e1a598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2384f5a1-cc13-4653-ba75-fa15ce362927"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "999b412b-7469-468a-826b-8179797c35a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "36037016-2005-4ae7-9f42-3502fe784307"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c389478-91a8-49ea-89e7-155c4bf9e208",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0b77543-f36c-4387-b791-3a008ac1657e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a3d43309-be67-4766-8df2-6f5b2854ad6b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bef678a6-34d6-43a4-871e-4a8befde7ff3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c9b5904-e325-4522-bc3d-7ee6d71973a4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ae2cfece-0e4e-40d5-aa48-e4be148d3fc5"
            }
          }
        ]
      },
      {
        "id": "ea0ed0c0-df9a-44d2-8cd8-867270535075",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "fa8a7df8-450e-4778-9b21-a6fa2b11fbf9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "721fd0db-45aa-48f8-8bf6-8c62ce3bf6b0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4cd60670-23fd-4557-bdd6-1e3153982186",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b79e48-4605-43eb-87ed-fd9f4b13cee6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78d5b121-b35f-4053-956a-91bb94732317"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d0cce4-c28f-49d2-b3e8-51afa32f8d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1de8e1d9-70ee-4849-a14a-7b8ecc380ed3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a62ea27-02ea-4146-853d-7510e09a1cf7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63253a56-ba57-4b73-afa7-65d43b8902b6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "29550ae6-efdf-4970-9aca-b57ad81bc4fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6418720f-2e84-4e2e-a23a-0c9b30930ef0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ddce48a-bda0-414a-abe7-f762a78a5525",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4db26575-be1a-40a6-970c-f93ae2eeb82e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "583249a2-9bad-4a68-8e2c-824292fdacbe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5ce83c11-0b32-4383-acdd-7504c85b7dda"
            }
          }
        ]
      },
      {
        "id": "41f9cbbe-0a13-405c-aa0f-8c74387bc41f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3ae6394d-520c-4269-90e4-41519b1d651d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "740182c6-eafb-4464-a108-6c799be80101",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "164779ac-c5ec-47ba-991e-4676cee8804b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "59dc9c06-e842-475b-a583-94cd9bdc380d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4bdf8961-6e10-4e46-88a4-5eeaba26cfcc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 112.85263157894737,
      "responseMin": 5,
      "responseMax": 592,
      "responseSd": 68.01836208549932,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1701909345855,
      "completed": 1701909387338
    },
    "executions": [
      {
        "id": "646ad5ff-6ff1-4b9b-ad1e-e4b6921b9687",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9cefeccb-8e93-4e20-944e-9149f3307b5b",
          "httpRequestId": "cffb7c39-b024-4c77-a536-4f622f68287b"
        },
        "item": {
          "id": "646ad5ff-6ff1-4b9b-ad1e-e4b6921b9687",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "94d88ee7-f814-4291-9b80-f3eccc4f90c7",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 0
        }
      },
      {
        "id": "c2086cdc-bf31-489f-a183-1a157af234ab",
        "cursor": {
          "ref": "88ead0c7-1f7b-4852-95cd-3d59168ecba7",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c2a0a652-104d-456d-8ec0-eeae5ab2bc5a"
        },
        "item": {
          "id": "c2086cdc-bf31-489f-a183-1a157af234ab",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f44f88c9-2b95-44ce-b37d-eb06c497945a",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "adfcbdf9-1566-441f-b66c-6111d55b11a5",
        "cursor": {
          "ref": "77ddffdc-c221-44d7-85a3-7174495b8f9b",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d0c35707-03d2-4860-8b5f-1386a7991626"
        },
        "item": {
          "id": "adfcbdf9-1566-441f-b66c-6111d55b11a5",
          "name": "did_json"
        },
        "response": {
          "id": "72752b6a-526c-43fd-aeb6-8ccd7b3318b8",
          "status": "OK",
          "code": 200,
          "responseTime": 357,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60520751-8273-4ab6-8a61-12b3dbf82b9b",
        "cursor": {
          "ref": "88752e18-b312-4ad7-b40f-885751e420f0",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e0818a5f-1cae-4e76-805e-af19f3507ebb"
        },
        "item": {
          "id": "60520751-8273-4ab6-8a61-12b3dbf82b9b",
          "name": "did:invalid"
        },
        "response": {
          "id": "d6e8c94b-ec48-4452-9e57-1efb9560da2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60520751-8273-4ab6-8a61-12b3dbf82b9b",
        "cursor": {
          "ref": "88752e18-b312-4ad7-b40f-885751e420f0",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e0818a5f-1cae-4e76-805e-af19f3507ebb"
        },
        "item": {
          "id": "60520751-8273-4ab6-8a61-12b3dbf82b9b",
          "name": "did:invalid"
        },
        "response": {
          "id": "d6e8c94b-ec48-4452-9e57-1efb9560da2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bae3064-db2c-4b60-b171-cdb99eb151d2",
        "cursor": {
          "ref": "778137f6-8e93-4c2a-8c66-f4fc293d80e3",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "395ae7f4-7792-4dff-9b1c-9baead5fd8cb"
        },
        "item": {
          "id": "1bae3064-db2c-4b60-b171-cdb99eb151d2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5dbba757-864a-4582-9b65-d5de2ee4e3ad",
          "status": "Not Found",
          "code": 404,
          "responseTime": 147,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6337d534-24de-4d94-9d7a-e037a63a33f9",
        "cursor": {
          "ref": "609d4eb9-a73b-4c79-9fad-a2dba03b9d3f",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ff480181-5fc4-4455-9fd6-6fa07dbf09cc"
        },
        "item": {
          "id": "6337d534-24de-4d94-9d7a-e037a63a33f9",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ca0b80fd-ba77-4589-a95d-8af6ba82ba15",
          "status": "Not Found",
          "code": 404,
          "responseTime": 95,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f98bf324-f314-41f4-8f24-e4ffe5fcff48",
        "cursor": {
          "ref": "40f30cca-802a-46eb-9680-39dd91eb6890",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d96333cf-f605-4bb5-858b-2a995db93593"
        },
        "item": {
          "id": "f98bf324-f314-41f4-8f24-e4ffe5fcff48",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "2ee386de-3b8d-4a6c-84da-0602baae1f95",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef47e9e-1fb5-45ba-b5c7-8caba4397968",
        "cursor": {
          "ref": "a17e7290-8410-40dc-968a-ec234648daeb",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4749f229-9ea0-4e16-85c0-86d188477289"
        },
        "item": {
          "id": "9ef47e9e-1fb5-45ba-b5c7-8caba4397968",
          "name": "identifiers"
        },
        "response": {
          "id": "63ac0eb1-6b71-429a-b4cd-8dcc930cf6c7",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bafad74-55bb-42e9-8013-1bffe071d67b",
        "cursor": {
          "ref": "1ac92489-d562-42f6-8814-5e481d3385f6",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "dab40a7d-6e1a-4301-8b5f-97316b697c23"
        },
        "item": {
          "id": "8bafad74-55bb-42e9-8013-1bffe071d67b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "622f5c5a-8d78-4edf-bb67-c43fd88a40a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9194d02a-b026-4455-9c15-65df5a296cf1",
        "cursor": {
          "ref": "82fb586e-39d5-4ce7-8796-3f8d50c9247e",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bd602f18-0dad-4d69-b166-fbe4bcfd7c98"
        },
        "item": {
          "id": "9194d02a-b026-4455-9c15-65df5a296cf1",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "678031e8-bb7b-4534-b899-33422ca82696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d2d108-f74b-4886-b85d-3325d22c3632",
        "cursor": {
          "ref": "ff1fed49-908e-45d9-b58e-878966de5848",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3723e834-4ff7-4101-bacf-1f2586568181"
        },
        "item": {
          "id": "26d2d108-f74b-4886-b85d-3325d22c3632",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "73bc8092-72ac-412b-8366-b0ba7fb355c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de8fb45f-6ca2-4725-82ec-8545dee00604",
        "cursor": {
          "ref": "675d55d3-5f54-4b8c-9787-c086397ac72d",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "de8aa178-76c9-4a25-949a-a4de63e35693"
        },
        "item": {
          "id": "de8fb45f-6ca2-4725-82ec-8545dee00604",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "8fed50c8-abc9-4afa-ba7e-117dce6d1e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4e1a656-f95c-4174-95b3-fd99201073fb",
        "cursor": {
          "ref": "e4d66589-bf59-44cc-98d5-31171487688d",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "22e95a1a-7b60-4529-86d0-f18da4b4c222"
        },
        "item": {
          "id": "e4e1a656-f95c-4174-95b3-fd99201073fb",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d2a4cbe7-9ce0-4186-9668-8560b5c68707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11204936-435f-4ad2-8d25-14f87b763f44",
        "cursor": {
          "ref": "242b3a56-a462-4a82-90dc-f59064ec0447",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0b673043-0577-48bb-80c1-1a75c55f0b6f"
        },
        "item": {
          "id": "11204936-435f-4ad2-8d25-14f87b763f44",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "77d804a1-50b8-46bb-b54b-9b922f5888fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "606664eb-bd41-4509-a510-35eb0062e0b4",
        "cursor": {
          "ref": "1bbb1599-ec8d-4a09-b5f5-eb5cda8909f5",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "02c14c1b-ef44-47aa-9c1a-e569d22afd52"
        },
        "item": {
          "id": "606664eb-bd41-4509-a510-35eb0062e0b4",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3df97059-fa2b-42c8-9e76-e1017e2421b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d63a8cfd-9f5f-4f86-be7f-33540019b610",
        "cursor": {
          "ref": "4d4a9689-fb19-4f44-959b-488e6a2df39d",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "020f0bf4-5110-4ee9-9b04-577507969536"
        },
        "item": {
          "id": "d63a8cfd-9f5f-4f86-be7f-33540019b610",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "6c515171-7be4-4b5d-ac36-0b5695594ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e463e8e2-f065-4919-b51b-3a54aae22b8e",
        "cursor": {
          "ref": "8803a99b-86bc-42a7-a656-1af3f783d29b",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1335effb-4010-4535-a504-565c64885a32"
        },
        "item": {
          "id": "e463e8e2-f065-4919-b51b-3a54aae22b8e",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2dc48462-7baf-484a-803b-e18b974735bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6adc82b-92bf-4c70-a768-dcb09e702727",
        "cursor": {
          "ref": "dc765a5f-a791-46cd-beca-219247389bca",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6377e41d-ed6e-4459-a9b1-ad6aa45f7c49"
        },
        "item": {
          "id": "f6adc82b-92bf-4c70-a768-dcb09e702727",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a89f7f0d-ce58-4e28-8cca-0f2188fd7ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca8bcf9-38e5-4fec-b52e-22fa93bf643f",
        "cursor": {
          "ref": "c857ca8c-9ff4-4678-9155-d5589f41b62d",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f2928e05-e8fb-490a-9de0-4ac852faf696"
        },
        "item": {
          "id": "4ca8bcf9-38e5-4fec-b52e-22fa93bf643f",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b8b8a0cb-fab5-490a-a89c-70a7a6fc1f80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d94a6370-3136-404a-9257-62587c1d4876",
        "cursor": {
          "ref": "a8345297-d170-4ea4-8ba2-e930da2c59e1",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "12101b40-7abc-411b-bf80-e667736bfb0c"
        },
        "item": {
          "id": "d94a6370-3136-404a-9257-62587c1d4876",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4634c2d4-7858-47a7-9428-240bc8b92818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe69a4a-a6c8-4e8d-91ec-69e46ec0eeb6",
        "cursor": {
          "ref": "5fd5e14d-fe58-4d6f-aa84-56588703877e",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bd2e9de6-c23f-402c-8355-8fa51a9e12a2"
        },
        "item": {
          "id": "3fe69a4a-a6c8-4e8d-91ec-69e46ec0eeb6",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f6e24a0f-65fd-40cf-89f1-661f43d79054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d9794a-46fa-403f-aadc-99fd01eb12b0",
        "cursor": {
          "ref": "6335fda4-9a9b-4cac-bae9-9d68135722f7",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "efc89147-6ece-4fe7-b00b-c75ba85aa38b"
        },
        "item": {
          "id": "77d9794a-46fa-403f-aadc-99fd01eb12b0",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "43b327b3-2f43-466d-b595-942941fc6ff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "656ab9eb-209a-4a27-9f1e-77f20833667e",
        "cursor": {
          "ref": "98120024-68c9-4d37-805b-59daf0aae4f2",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "767d56ce-eddb-46a3-b0ea-70c4dff36227"
        },
        "item": {
          "id": "656ab9eb-209a-4a27-9f1e-77f20833667e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c33a623a-a5fd-4b48-8514-3a277a7b8a4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a4df9e9-5c93-4b45-95b0-27e5993ea140",
        "cursor": {
          "ref": "e8d7baa3-658f-4f32-aaab-5a1579f8fd3e",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "23bc2aad-6ef5-46f6-bdbb-0ea9a0247a35"
        },
        "item": {
          "id": "3a4df9e9-5c93-4b45-95b0-27e5993ea140",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5ea4a0b1-d58b-4536-b931-fb166ccfed13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa0e4cb5-eae0-4bef-ac66-028126db693d",
        "cursor": {
          "ref": "e20d5dc6-7217-485a-a378-3766ef011b07",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f87cb65a-4551-4360-ad7e-d257f6e32b9f"
        },
        "item": {
          "id": "fa0e4cb5-eae0-4bef-ac66-028126db693d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c77ffcb1-4012-4e46-a309-88b16df7f718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab94ddf-2027-433a-9191-1e4aad1af9e6",
        "cursor": {
          "ref": "48ecde72-e522-44b9-b446-d152e1a9e8dd",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "1b37d3c3-3f20-454b-b1e1-4dceaa1c302e"
        },
        "item": {
          "id": "3ab94ddf-2027-433a-9191-1e4aad1af9e6",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b45b49f4-0af8-4e2b-a4b5-63eda684a0bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279a3941-c0f3-46c0-a76d-f42e900fc548",
        "cursor": {
          "ref": "69bac152-dedc-48b1-8bda-e98327a0cfb9",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "44f6542f-82c7-41ac-877b-611378f8c287"
        },
        "item": {
          "id": "279a3941-c0f3-46c0-a76d-f42e900fc548",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "dd4d6cee-b1ac-4e29-9460-beb21cfc21ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d01ee059-7444-49df-a995-75a2eeb81ef6",
        "cursor": {
          "ref": "c0dddd13-1566-4ac2-af5d-cbb9c8c8db95",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "152a50c7-38e8-4752-86a2-d81e578e14df"
        },
        "item": {
          "id": "d01ee059-7444-49df-a995-75a2eeb81ef6",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c8943d9c-ef5a-4dc8-b6dd-3c23735aced4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84998c51-ce51-4c36-848d-64bdea6a051c",
        "cursor": {
          "ref": "c78e37f1-8a17-4f24-922d-3134396e9f71",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ff409bcd-b4ed-41b2-a24d-197788cf0bbc"
        },
        "item": {
          "id": "84998c51-ce51-4c36-848d-64bdea6a051c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "95b9cc6d-4e02-4936-8bec-89353d9c9402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f53d506-9267-4bf3-907b-056049f991eb",
        "cursor": {
          "ref": "a9f933ea-abb3-4546-993b-4391c5df2f88",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b206c796-ad82-4a93-bb80-75c28a0114af"
        },
        "item": {
          "id": "5f53d506-9267-4bf3-907b-056049f991eb",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "5903c36b-eaf6-48a1-8d2d-de39a2a098f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "088818bb-c11a-43ad-9fb7-4241e11cfd6c",
        "cursor": {
          "ref": "8f070b68-5b71-4ab7-9a39-9922a71789a4",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ee321ac3-9d8b-407f-8019-a16787af0fbd"
        },
        "item": {
          "id": "088818bb-c11a-43ad-9fb7-4241e11cfd6c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "6a64775d-60c0-44ef-8b4f-a311928f10fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "556447ee-e136-4168-8aff-92683325b019",
        "cursor": {
          "ref": "9e139818-1940-4913-a2cf-503d87a60cd4",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d0d2ff58-c5ef-4d98-953a-9dfb57223991"
        },
        "item": {
          "id": "556447ee-e136-4168-8aff-92683325b019",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "dc5f808d-e1bf-4fdf-b0e7-8c54a6a4a07c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "914eb780-93ad-49a9-bf3c-c90ed7797617",
        "cursor": {
          "ref": "a730fc43-bf73-4059-94f9-d34a3d6f6baf",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "13554988-9a99-4ec8-8ace-43392c9a9460"
        },
        "item": {
          "id": "914eb780-93ad-49a9-bf3c-c90ed7797617",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "105126ac-958f-47a3-92ef-b923837bc558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "668bdd1d-d0a9-4d9a-b93a-97520e438d79",
        "cursor": {
          "ref": "34f30b72-d681-4204-a89e-a42125715e94",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "19a5cf77-ea10-4f73-8f9e-76f0fd9845e1"
        },
        "item": {
          "id": "668bdd1d-d0a9-4d9a-b93a-97520e438d79",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "76767496-e29c-4385-a81d-a70b2cffab9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e97cd57-57de-4097-a802-641d3d8d2a24",
        "cursor": {
          "ref": "599f0c5f-e502-4feb-a1c7-23150c490d45",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8837b358-b08f-4af7-bb82-a0f738d5bf25"
        },
        "item": {
          "id": "6e97cd57-57de-4097-a802-641d3d8d2a24",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "78fbbe18-ed01-45a5-bf53-27cd19d00acd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f01f33-d6b1-44b5-989c-ffae63df7a3f",
        "cursor": {
          "ref": "451b9df8-fb29-48ab-b488-fadd1797f6ec",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3167805d-d03d-4414-8f2b-f4684ec4f6b3"
        },
        "item": {
          "id": "c3f01f33-d6b1-44b5-989c-ffae63df7a3f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "82174d71-c4d3-43d0-a64d-f69073e0a4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5324ce72-1c50-4dd9-9cde-f0a5bc1698bf",
        "cursor": {
          "ref": "cee1eaad-3d8d-4828-847c-afdf7cc366d7",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1148eac5-d0f4-4909-80f3-5f0fe765d879"
        },
        "item": {
          "id": "5324ce72-1c50-4dd9-9cde-f0a5bc1698bf",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6ec94326-f989-438a-89f5-34c9be6ce0b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25c9f5e-1940-4c87-975b-9ce524503887",
        "cursor": {
          "ref": "b2c3702e-48e6-4896-840b-892256fc8766",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b29448b9-b0a5-4419-8504-9c878942f60d"
        },
        "item": {
          "id": "b25c9f5e-1940-4c87-975b-9ce524503887",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "426b1f47-6578-4855-9ab8-498860e99d75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110760e5-d7af-4003-bf26-e3ef2dfddab5",
        "cursor": {
          "ref": "7e1c62de-8d5c-4d03-843a-ef924abe0624",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fb3cec26-520a-477f-af23-39e2a351b239"
        },
        "item": {
          "id": "110760e5-d7af-4003-bf26-e3ef2dfddab5",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "630f6ee7-51ed-4a16-b5e2-4daf60d2bd3c",
          "status": "Created",
          "code": 201,
          "responseTime": 592,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "61abd700-d19f-4fe6-a1be-3fe9f58fa6ed",
        "cursor": {
          "ref": "619500aa-41ac-4caa-b662-5b036b2a9479",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b1fc61bd-9268-4047-ac2b-ba282809cdba"
        },
        "item": {
          "id": "61abd700-d19f-4fe6-a1be-3fe9f58fa6ed",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "49a5e3cf-b313-4b00-be87-4921b32157f2",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "6633d992-511a-4595-a98d-7b0b0970a643",
        "cursor": {
          "ref": "350038db-b875-42b1-8481-c7a1cf077e15",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a7b5c971-d2e6-4981-b4f2-e0f32f982e10"
        },
        "item": {
          "id": "6633d992-511a-4595-a98d-7b0b0970a643",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "87c7d709-b2b4-4477-90a2-cc83d0cfce8a",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "01d7a274-2b4b-4cb8-9e74-44aa22527b6f",
        "cursor": {
          "ref": "db474ceb-03d2-4205-b7a6-4b78fadac2dd",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "88f1e09c-b310-4270-b8af-1258bdca9c18"
        },
        "item": {
          "id": "01d7a274-2b4b-4cb8-9e74-44aa22527b6f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b0cb57d4-8119-444b-9f45-d94423b4796a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c178cf59-e9ba-48ca-bd76-d677dffe7d76",
        "cursor": {
          "ref": "df2f61c8-c7ca-401d-b981-d6d8b85d0014",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b163f77b-46e0-4770-828f-3cfc8b040ee8"
        },
        "item": {
          "id": "c178cf59-e9ba-48ca-bd76-d677dffe7d76",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3e0a3c55-21e7-414e-8111-1365c1421b27",
          "status": "Created",
          "code": 201,
          "responseTime": 385,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "17ee779d-ec55-4df0-b7f9-a11cb103e0e0",
        "cursor": {
          "ref": "967fb8e7-7cef-4a15-8932-d3ccdc2698e3",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c028d847-4dbc-41a8-b0cf-91182148d178"
        },
        "item": {
          "id": "17ee779d-ec55-4df0-b7f9-a11cb103e0e0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a4bb405d-6678-463a-8e1c-c8490d7400e1",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2c88cd59-cb7a-4d8e-89c9-d2c3f2b290c1",
        "cursor": {
          "ref": "d733821b-4f72-490e-aaff-971d19038791",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "bf418f90-85c6-487b-bd13-e303cd8825cb"
        },
        "item": {
          "id": "2c88cd59-cb7a-4d8e-89c9-d2c3f2b290c1",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d031c014-70d6-4372-937e-767f7876578c",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "73087149-2428-41db-a100-a62c02c72166",
        "cursor": {
          "ref": "a6d8bf3b-0c62-49dd-953f-d6726c02c65b",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "34c3a391-c109-43ab-beb6-27459f9e0e70"
        },
        "item": {
          "id": "73087149-2428-41db-a100-a62c02c72166",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "82d805ef-6981-458f-82ca-b6551505f061",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "e5b9fc90-c5b5-418b-b763-1c1990f60ac3",
        "cursor": {
          "ref": "21fc5e7c-f03e-4f0a-a9b7-41e7bdc8eaea",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8d58a86b-dee1-424b-9a6b-1d062cbe9bd4"
        },
        "item": {
          "id": "e5b9fc90-c5b5-418b-b763-1c1990f60ac3",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f26981db-7d3c-46fd-be0f-735b11e44e51",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "56891153-a6ad-4353-b09f-d67bdedea902",
        "cursor": {
          "ref": "1e60095a-515f-4c30-9573-8a1d1e520c38",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "89754aed-8244-4651-b7c8-fe11ce1c2543"
        },
        "item": {
          "id": "56891153-a6ad-4353-b09f-d67bdedea902",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "059a75da-a211-4390-b3a0-e56526d858c1",
          "status": "Created",
          "code": 201,
          "responseTime": 428,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "40936627-0463-49ee-9a8f-f218a95021d0",
        "cursor": {
          "ref": "ffb63a76-a6d3-4e54-96b1-e54dbb15e2a3",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4550302e-a373-4586-8ced-bed6f10a9e35"
        },
        "item": {
          "id": "40936627-0463-49ee-9a8f-f218a95021d0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d9cb806b-30f8-405e-891d-14d02ef2200d",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "1c0c1960-082f-455f-ba32-0b0d8902cdd3",
        "cursor": {
          "ref": "a7fcec1b-8cc5-41ba-9288-8c8133123c7d",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f623f248-e4ec-4929-8c25-89ff4f0028c0"
        },
        "item": {
          "id": "1c0c1960-082f-455f-ba32-0b0d8902cdd3",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4d3fdac7-180c-4281-8326-3fd299402148",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f996f375-ee8f-4bdc-9e11-870328114f8b",
        "cursor": {
          "ref": "0ee9e8db-8159-4555-b807-5b82118a54c9",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b86a8e43-c815-40bc-bfae-308c0ce3b5ed"
        },
        "item": {
          "id": "f996f375-ee8f-4bdc-9e11-870328114f8b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "20607689-1d8c-472e-b3a3-afbf39d0baf2",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "1c81878a-62c3-4373-88ad-1a78b33141d9",
        "cursor": {
          "ref": "3606305a-a4cc-4efb-a588-a24a5e1ca248",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a9f6b789-cefd-43aa-b286-1dfcafb7f2bd"
        },
        "item": {
          "id": "1c81878a-62c3-4373-88ad-1a78b33141d9",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "4622bbaa-6cac-42f5-9447-cf0e826823b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d854119d-0374-46b2-9c1d-687a246e93be",
        "cursor": {
          "ref": "684c0f63-9604-48f5-9c53-90e90dc6b681",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "91d99cca-7a76-4981-906c-0dff0f285ff6"
        },
        "item": {
          "id": "d854119d-0374-46b2-9c1d-687a246e93be",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "caa3bcda-07aa-4617-ab02-1a1427daeb14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d00f7403-4c35-4740-ac26-db643ff42290",
        "cursor": {
          "ref": "aea4dbc1-6758-4cc3-9a9b-e6ee7b62199b",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "23105230-6aa2-48e5-adf0-80b833444bcf"
        },
        "item": {
          "id": "d00f7403-4c35-4740-ac26-db643ff42290",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "2eb43309-cdf1-4afe-a3b9-9d8268126f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fb7565a-db9a-4865-99cd-c5b9122ceb62",
        "cursor": {
          "ref": "ab19cda7-9410-462c-915a-50939f432cf8",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a93f23e7-b733-4e76-a6ed-5cb7addb7842"
        },
        "item": {
          "id": "7fb7565a-db9a-4865-99cd-c5b9122ceb62",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e429d78d-878a-4ac0-a68d-7e62c99ceceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87816547-05ee-4b28-a054-129e39e10503",
        "cursor": {
          "ref": "b7b01e7b-1ecb-4f83-8553-2158e2b77752",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5baa0b14-c078-4de7-bea9-0f1858a5f9d6"
        },
        "item": {
          "id": "87816547-05ee-4b28-a054-129e39e10503",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ffc31498-cfd0-4487-864e-f79efd9e67b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f159201-a938-4a71-9e1c-e5b25000a670",
        "cursor": {
          "ref": "2c012dcc-742c-4dfd-9319-1ec345ba8b8d",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e8a94751-58f0-4b81-92eb-a904378965bb"
        },
        "item": {
          "id": "5f159201-a938-4a71-9e1c-e5b25000a670",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a9cc56ef-be13-4438-acbc-e0c4670484d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac3879e-ff16-4a7f-913f-e7ec7be4eeab",
        "cursor": {
          "ref": "a73bebd1-3f2e-4a0e-ba52-442869061736",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "43090e9c-9999-4968-a46e-86d43ab7d0b3"
        },
        "item": {
          "id": "9ac3879e-ff16-4a7f-913f-e7ec7be4eeab",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9bccb240-2130-45b2-98e2-90d7cc1f4c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec0c045-c1ab-41d2-8051-c8668466f04f",
        "cursor": {
          "ref": "724d1e36-1f27-4c5a-888b-5d88f6f3cc29",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "abbf4ca6-a467-487a-8c98-2983f3b32bbc"
        },
        "item": {
          "id": "4ec0c045-c1ab-41d2-8051-c8668466f04f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6b93a4f4-7614-4458-b2f1-c46d8d8c5702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "412a60c3-6f4a-4b5d-974d-03cfa0f7eac3",
        "cursor": {
          "ref": "61af73df-5514-4263-985e-e6274deed813",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "63aea560-93c9-4cd4-a6c5-7bda6a12dd4c"
        },
        "item": {
          "id": "412a60c3-6f4a-4b5d-974d-03cfa0f7eac3",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9b06f8ab-a0c9-48c7-bf3b-b4b85d3e98fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e1fb695-d7a2-4a6d-9e57-0bbfebfe1138",
        "cursor": {
          "ref": "bc9ca198-80e9-4289-bca5-771aa21fb8fe",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "faf4ef07-77ad-466a-90ca-2bc70c562382"
        },
        "item": {
          "id": "5e1fb695-d7a2-4a6d-9e57-0bbfebfe1138",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "516f6d5a-cfc5-4918-baf6-8df7085e184e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceeb625f-539a-4192-bf21-52c7817ed281",
        "cursor": {
          "ref": "74fbb4ea-2df7-4407-becd-a12e1df74580",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "371142f4-c4c9-424f-9ec6-619f0cd2d8ef"
        },
        "item": {
          "id": "ceeb625f-539a-4192-bf21-52c7817ed281",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c44113e2-f9cb-42d5-889d-2ee9a9eac605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e37066ab-dd8f-4180-b7cc-5bbacb7d1d65",
        "cursor": {
          "ref": "08b9e140-2f57-4656-b891-d0209805ed9e",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "40b4636b-eb56-432d-98d9-73b5d56ed4df"
        },
        "item": {
          "id": "e37066ab-dd8f-4180-b7cc-5bbacb7d1d65",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "c249c0f3-05a2-4a89-9ce3-f2ce11db9ea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7266dbac-ee01-4bcb-8b73-74e26e9af117",
        "cursor": {
          "ref": "178b8ff7-16af-4c03-9a86-79330fffb536",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "babcff86-925e-4da1-b55c-8048f9c24d89"
        },
        "item": {
          "id": "7266dbac-ee01-4bcb-8b73-74e26e9af117",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "02480321-c91d-42bd-b0b2-71b2cf20959e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c2da87-470d-4ec6-bd71-34dbc7c40f94",
        "cursor": {
          "ref": "be725dc4-a4cd-433d-a2da-576c5ccfcbe8",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b8b56371-6969-4d04-8426-4c4cd428382b"
        },
        "item": {
          "id": "e6c2da87-470d-4ec6-bd71-34dbc7c40f94",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4fdb3987-26c9-475f-8435-71ebc30bc82e",
          "status": "Created",
          "code": 201,
          "responseTime": 364,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "2854cc40-1644-4826-9812-7746aa747335",
        "cursor": {
          "ref": "2407e64b-d1c2-4585-add8-9be2a029f3db",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9bb0f109-238d-4b5d-ad14-e76f3e210fc7"
        },
        "item": {
          "id": "2854cc40-1644-4826-9812-7746aa747335",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7c64a80a-5954-46d0-8395-59d04d103f0d",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "0f2fd4c7-c808-4576-a74e-a535e9de4238",
        "cursor": {
          "ref": "52536470-7de4-4b25-9bb8-4bef9dccd0fd",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "0b8ff32c-bb74-4813-8c42-0b51f4d69ca6"
        },
        "item": {
          "id": "0f2fd4c7-c808-4576-a74e-a535e9de4238",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "2b9eea4d-9c15-4efb-ba83-e5b629adf35b",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "60d7bc40-dbc8-4ae3-9ee1-42bcb6a9a284",
        "cursor": {
          "ref": "826fc176-9c4d-41ce-a1c4-b3b7b786458e",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "bf9cd7ca-99fd-4817-8316-b26121389768"
        },
        "item": {
          "id": "60d7bc40-dbc8-4ae3-9ee1-42bcb6a9a284",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "9320fe16-6898-4274-9527-b1fa2973d308",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "a712841c-28e1-48a4-8856-286e9d12a8f8",
        "cursor": {
          "ref": "552f4e57-7e1a-4ee2-8fcc-94587ea0763b",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "39535200-e68e-4065-bc35-371e2c03f665"
        },
        "item": {
          "id": "a712841c-28e1-48a4-8856-286e9d12a8f8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "77024916-f225-4922-8b05-8f0aa784394a",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "2a0f0429-7447-4fb4-b3cf-c338872025e9",
        "cursor": {
          "ref": "20c426c1-a741-4135-bc3e-4a6d63ef446e",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "666d73af-a135-4ce7-aaa2-0c6433471447"
        },
        "item": {
          "id": "2a0f0429-7447-4fb4-b3cf-c338872025e9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "9b63fac6-8c21-42a2-a80b-497bf3eae228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba0046e-4053-4dd5-bb9b-133cea78ffed",
        "cursor": {
          "ref": "a879f04c-cba3-4af1-acb5-15f17857adfa",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b3f9c05f-4082-4046-8d29-8153df09c4f0"
        },
        "item": {
          "id": "eba0046e-4053-4dd5-bb9b-133cea78ffed",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7b39fecf-9072-452f-85d3-62b6d88d57fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b759b5-76e2-4d7e-adf6-ed570c369d81",
        "cursor": {
          "ref": "313e23cc-590a-4b93-b71e-23e3f88a22f8",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f4740e2d-3106-4862-8d5b-1929e824fe92"
        },
        "item": {
          "id": "98b759b5-76e2-4d7e-adf6-ed570c369d81",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8f0f0fa9-1c48-49aa-8603-40ee68590bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e825692-610c-4216-b146-d3851d93fe16",
        "cursor": {
          "ref": "a3f454ba-043b-4e46-a39a-b35031b1e455",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "efc3c154-ebc3-42af-9a39-1dae1296ecbf"
        },
        "item": {
          "id": "5e825692-610c-4216-b146-d3851d93fe16",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b1496614-66fd-458c-a8aa-e17592ca8bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c72b8d9d-be0e-4ffb-b6da-30cea57d8cb7",
        "cursor": {
          "ref": "f35de0c1-7af6-4b0e-b0b8-55ac4c8a0f42",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b9c1cd2e-1a56-4c06-83cd-974668c60287"
        },
        "item": {
          "id": "c72b8d9d-be0e-4ffb-b6da-30cea57d8cb7",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "00af6a22-7fd1-4643-ab37-b5b8c81fed09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34072e7-fc67-49b7-8c42-2f0879a6b7ea",
        "cursor": {
          "ref": "0da341f3-40fb-4566-b169-647bdf0540db",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "92275a33-caaa-45b0-874a-a7ccb3a814bc"
        },
        "item": {
          "id": "e34072e7-fc67-49b7-8c42-2f0879a6b7ea",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d1ba4616-1dd9-4cc5-8fdd-768a3f4af9d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fe8afc0-57d2-4111-a450-32bb02464b9b",
        "cursor": {
          "ref": "f01b6802-e3a4-4d74-b35a-4916d6b266be",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "dd32b43d-2390-410d-bcf6-8f4b63886a62"
        },
        "item": {
          "id": "6fe8afc0-57d2-4111-a450-32bb02464b9b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1e04109b-c14b-4666-9777-57b14433af6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386bd048-b531-44bc-9d1d-43164463d165",
        "cursor": {
          "ref": "a1641186-c6c2-4436-a11b-452537deb6c4",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "dd85af16-feca-49cf-bd0f-ba940cb20be7"
        },
        "item": {
          "id": "386bd048-b531-44bc-9d1d-43164463d165",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ae63013c-13ec-4e4d-a565-dfbd7378e11b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12878c4f-da9d-441f-b85c-9cb8b03e8ea9",
        "cursor": {
          "ref": "b0618732-e449-493d-8eb2-0f360c1d9651",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0eee977d-8dbc-4fa3-8af0-53837b422841"
        },
        "item": {
          "id": "12878c4f-da9d-441f-b85c-9cb8b03e8ea9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "baf465f9-ef90-4249-aeb4-d8c7c1df387c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41570d97-6b31-4653-8118-d50a3f5d4145",
        "cursor": {
          "ref": "aaa5b3b1-716a-40c9-9fda-7642823ed72a",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "ce8e39d2-155b-40b0-a2c9-10a3b7062474"
        },
        "item": {
          "id": "41570d97-6b31-4653-8118-d50a3f5d4145",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "190f12e6-8b41-4501-bf0e-507fe1a11470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa79491a-fbfa-4977-b026-e2df3e46e1b4",
        "cursor": {
          "ref": "d9c5c7da-fb3a-455f-bb2c-3d58c94709b4",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d6d487b3-ef9b-4e97-84f1-ea0390f5214a"
        },
        "item": {
          "id": "fa79491a-fbfa-4977-b026-e2df3e46e1b4",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e8b3c63e-e0e3-45d0-96ba-d204e934ec64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2acea466-1e38-4f0e-9df7-b4a154a05c8f",
        "cursor": {
          "ref": "09d3c229-2648-43f3-a394-cf5e9f1b5ecd",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "39b28488-194d-4345-b696-c26640dd3fef"
        },
        "item": {
          "id": "2acea466-1e38-4f0e-9df7-b4a154a05c8f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d217bc96-5a35-4d94-9e4f-850d079279eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f9e0567-4bd1-4900-8ec3-68bb2a9422b1",
        "cursor": {
          "ref": "3906ee5f-84f6-400f-abc6-4d13ad4262e9",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1eed99b7-17e4-4b2a-ac21-d816a3ed4334"
        },
        "item": {
          "id": "3f9e0567-4bd1-4900-8ec3-68bb2a9422b1",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "04c27991-7e94-4f58-abc3-dbbeaccf6431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e34dae8-d2c4-4c06-ab48-9fbd16a96b44",
        "cursor": {
          "ref": "5696cfa3-5b03-41a8-a77f-d6e30f4d6b63",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d7d3b51b-ac9f-4303-aa93-9e59c6fb980d"
        },
        "item": {
          "id": "9e34dae8-d2c4-4c06-ab48-9fbd16a96b44",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "255e1de2-a89e-42cb-952a-69fbce8d2b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "675c4568-27a5-4e33-b103-6a58199dc008",
        "cursor": {
          "ref": "6e6cfa68-8c6f-413e-b872-2bc22994cb95",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "00f89c66-f05e-4a60-add1-8408bf11bf55"
        },
        "item": {
          "id": "675c4568-27a5-4e33-b103-6a58199dc008",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "36a64dd2-6b08-4b06-8adb-1feeefdb50de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776541bc-0b3f-4a17-9618-4ed882b964ef",
        "cursor": {
          "ref": "7166ad6e-a74b-48e2-8551-5370f04ff8dd",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9c52b14b-5a99-426f-819a-2b787f6bc33e"
        },
        "item": {
          "id": "776541bc-0b3f-4a17-9618-4ed882b964ef",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e42ca531-4445-4abf-9971-09ff3986556a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fb2c2a6-9526-4c54-97a2-c9a32a47dbc5",
        "cursor": {
          "ref": "92fc125e-83ac-4d9c-8e62-ce7cfe596882",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "af1f4e9f-10c6-4961-8133-11dea2c2cb44"
        },
        "item": {
          "id": "4fb2c2a6-9526-4c54-97a2-c9a32a47dbc5",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0c6e5aec-dcef-4d0d-8b7d-499580be07c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dfb280b-da3a-4d4f-b8a3-ea20b6f2cd1f",
        "cursor": {
          "ref": "708b28a7-e30f-4416-9363-291ca6aaf731",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d3197dae-e2f8-45c8-b63e-6abbd8c2c97b"
        },
        "item": {
          "id": "8dfb280b-da3a-4d4f-b8a3-ea20b6f2cd1f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5a9ed88a-cef2-4cb1-a889-356c4d13875f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715b8262-8b77-42f6-a0e8-bcadf80df998",
        "cursor": {
          "ref": "19d7932b-1c69-4249-aa47-c52128458352",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "7f105620-65c9-4b4d-b67d-5b7521ce7c45"
        },
        "item": {
          "id": "715b8262-8b77-42f6-a0e8-bcadf80df998",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b2e3f443-b926-46b3-878d-9a3c1cb9949e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41365c25-dc1f-4c15-917e-07ea6c410b70",
        "cursor": {
          "ref": "2cbc8108-4c58-44ba-8550-65e6af55978e",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "bfa0a3f7-3f0d-455a-aa62-5036b32778ef"
        },
        "item": {
          "id": "41365c25-dc1f-4c15-917e-07ea6c410b70",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "1c4d5e1f-7a7d-4b65-b9a7-dc518f808a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5263612f-f1ec-4ed7-b917-4a4cecdc81c4",
        "cursor": {
          "ref": "879c97e8-588f-487b-9f03-e6fc318fa3e6",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "83434c91-b100-4cb1-90ae-8be850846d03"
        },
        "item": {
          "id": "5263612f-f1ec-4ed7-b917-4a4cecdc81c4",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "043a73bd-1c07-4048-8650-3b04a7bf60da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6221a59-b8a6-4752-977c-e49c51594675",
        "cursor": {
          "ref": "6b6fe27b-2d44-4a32-b715-0af5999685b6",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "db3137a8-dae2-4d48-8a6a-c2f966bbbf5d"
        },
        "item": {
          "id": "b6221a59-b8a6-4752-977c-e49c51594675",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "64525145-bb75-48c1-a872-f8c44034c12d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cdb8449-498d-468b-95a6-8834c62d84d0",
        "cursor": {
          "ref": "80f27e50-bd28-4dfb-a962-bb80b4d24749",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2ca7984f-23fb-4e27-b722-a4174e68f70d"
        },
        "item": {
          "id": "5cdb8449-498d-468b-95a6-8834c62d84d0",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b134497f-0030-4a56-a65a-28594636f540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "838811c2-2c11-47f4-aea3-14a6ccf46bd0",
        "cursor": {
          "ref": "330d793b-7bd1-44de-8404-3e08ae8f9759",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "5fb270e7-f475-4510-9711-46d081546e31"
        },
        "item": {
          "id": "838811c2-2c11-47f4-aea3-14a6ccf46bd0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "432224c5-4854-4f52-bd1c-7858a237e921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3294a2-0728-4e00-8d6e-9d097a89f730",
        "cursor": {
          "ref": "754794ef-05b7-4f7b-be50-d0490ddb1925",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "b7ead4f7-8e9b-4d8c-9746-0d6116636362"
        },
        "item": {
          "id": "5d3294a2-0728-4e00-8d6e-9d097a89f730",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "841de803-be49-46f7-af71-4b08a60e7fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4ff9d1-1f03-4fc5-b3c0-a2bafc349fef",
        "cursor": {
          "ref": "f06b62c5-32ab-44cf-866d-a3cb071f2553",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ca71d17a-a345-4dba-828f-7522a4faf5fc"
        },
        "item": {
          "id": "3e4ff9d1-1f03-4fc5-b3c0-a2bafc349fef",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "5b83e331-6667-4861-9eff-9818675f94ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6175ac5-9bfc-4e70-9130-5a671f7fa7fc",
        "cursor": {
          "ref": "9fddbad7-d9d6-409b-ab2a-60908dc310c5",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "9c671900-19e2-499c-89a9-dad1d9445a1c"
        },
        "item": {
          "id": "a6175ac5-9bfc-4e70-9130-5a671f7fa7fc",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b5f7d0c5-ded3-4311-a558-f04558dab786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8bf6c63-4ba7-401f-aa0e-2079c888460c",
        "cursor": {
          "ref": "84cf2ee4-efff-4813-a51c-9916674d4cf2",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0fb1463f-89cf-4090-b1a2-d4af6bca4ae6"
        },
        "item": {
          "id": "c8bf6c63-4ba7-401f-aa0e-2079c888460c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f08d8610-69b5-4268-a587-9fac70550dca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a48e4d05-9311-404b-8eff-016a382a55b3",
        "cursor": {
          "ref": "98583c52-ab81-4a29-ab5f-1b4594bbb728",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f5712981-233a-4af9-8e73-675b90d71be9"
        },
        "item": {
          "id": "a48e4d05-9311-404b-8eff-016a382a55b3",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d6982c74-71af-49d1-a23d-7559a8b3893b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed01749-884d-4d88-97fd-8f2dcab1bc8c",
        "cursor": {
          "ref": "10388034-ad7f-4c9b-9ec7-157148e2dcd7",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "61e5eff6-a322-44b7-8268-c2b77fa84610"
        },
        "item": {
          "id": "fed01749-884d-4d88-97fd-8f2dcab1bc8c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b9fa0fbb-1e98-47a5-bdad-2c2d094be099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1b0afe-0ddd-47e4-863c-6bd86f032ea5",
        "cursor": {
          "ref": "06189a3c-dbcc-4155-9030-dbdadc4fe863",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "fb1ed515-948b-48f3-8fe3-ae2d8465a4df"
        },
        "item": {
          "id": "fd1b0afe-0ddd-47e4-863c-6bd86f032ea5",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e7aff9e2-8b69-42bc-8a93-ba9cd49607c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "480cd8d2-cad4-4c57-9959-b7f36cd1e844",
        "cursor": {
          "ref": "c8a32898-f7d4-4d66-b532-45ebce50026c",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "16b697eb-fc3c-4f46-b8e6-b367707544ad"
        },
        "item": {
          "id": "480cd8d2-cad4-4c57-9959-b7f36cd1e844",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "879b0b18-00f5-4703-8d1f-620ae936f2bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed67d686-04e4-4a89-baad-c86a9e4590bb",
        "cursor": {
          "ref": "7cc1fee8-c0bd-4f3c-9498-9e21bf360352",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c1b82f2e-2e1d-439f-8cc9-09e65c2d9679"
        },
        "item": {
          "id": "ed67d686-04e4-4a89-baad-c86a9e4590bb",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "f50ef844-cf66-4a03-b77f-27a7ba81418c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "5c807834-22f2-4e2a-9276-9b5ce8b32bd3",
        "cursor": {
          "ref": "08150f79-d3c4-47fa-80fa-7e0330067fac",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "762c1972-f88d-4131-89f0-5526e72151a8"
        },
        "item": {
          "id": "5c807834-22f2-4e2a-9276-9b5ce8b32bd3",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6476aeed-1c6e-4252-8d40-a0dca724dee3",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fe30ee7-63f0-4511-850d-f29712acf161",
        "cursor": {
          "ref": "6ddd4c1e-88a2-40e1-8c5f-6241b32576c9",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2498295e-d5d5-406f-9981-a087bc60b746"
        },
        "item": {
          "id": "6fe30ee7-63f0-4511-850d-f29712acf161",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "52a8e3f9-67cc-40de-a3b2-b36a6661a162",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4879eac7-616d-46c8-92e3-15456653bff7",
        "cursor": {
          "ref": "dd1702bc-d924-496f-92ae-50fb99b0aab6",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9899f7cb-1445-4751-9bde-e56ac29ab33b"
        },
        "item": {
          "id": "4879eac7-616d-46c8-92e3-15456653bff7",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b12d5031-ee31-4667-b212-b512ae070410",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "09d20673-17c6-4eb4-94ac-4d1a3e4ec9ff",
        "cursor": {
          "ref": "f150e0de-0f24-482f-8746-12be254324ef",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a9e55287-8d60-40eb-b802-07be499418b0"
        },
        "item": {
          "id": "09d20673-17c6-4eb4-94ac-4d1a3e4ec9ff",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a1eabb22-6be5-48e4-b8dc-a9bb7a626182",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c693a9e-ec02-47a2-a63f-8a1153377eee",
        "cursor": {
          "ref": "10774141-4c02-48e2-9e5e-c8e5d2eb7d53",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1db2fad9-6be6-4f64-b398-b722c4bbfd11"
        },
        "item": {
          "id": "4c693a9e-ec02-47a2-a63f-8a1153377eee",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0518e62a-7635-4c64-86d8-a334bae6b5f6",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-07T00:36:04.776Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-07T00:36:04.776Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "7e6f2bb0-0ad3-441b-8732-0780985ce912",
        "cursor": {
          "ref": "23d42ed4-d40f-47e2-b652-7d96c9dfedda",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "bd728688-ce44-4000-8e7a-785bd9f3335a"
        },
        "item": {
          "id": "7e6f2bb0-0ad3-441b-8732-0780985ce912",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8a76f14e-32fb-4eb1-9fe5-2fbbdf9daa98",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4fad47b-a2e7-41a3-8d7d-76ebd2a4c707",
        "cursor": {
          "ref": "8e93b920-ab09-4df7-9b9b-013f77cb8355",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8e69c270-2a99-4cba-b5da-b89fa05bf681"
        },
        "item": {
          "id": "c4fad47b-a2e7-41a3-8d7d-76ebd2a4c707",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "72aacc26-3ddd-4fe8-a669-0356e8881f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea513dde-2fb4-4def-986e-846024c51128",
        "cursor": {
          "ref": "ba725419-3554-445e-89cf-d65d38be170c",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d87e17bd-4511-4b6a-b25c-2e8e53aa0ab6"
        },
        "item": {
          "id": "ea513dde-2fb4-4def-986e-846024c51128",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "93919824-ef47-4e7d-824b-b303959f7870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "886ff704-a981-4a5b-a8d1-dca898238bc9",
        "cursor": {
          "ref": "e9830d9d-056d-4521-bcc0-cb460e144577",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "15601eee-76fc-48a6-b3fb-6be285431b2d"
        },
        "item": {
          "id": "886ff704-a981-4a5b-a8d1-dca898238bc9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c05cf357-b83c-4cde-bd52-c355a3dd3c93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ad275e-46b4-4e59-8dba-330f549bba54",
        "cursor": {
          "ref": "195f72b7-7fc9-45e1-8c97-21c4210ea8bb",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "bd25a1b3-4876-4025-abf3-79fe82df9d55"
        },
        "item": {
          "id": "c4ad275e-46b4-4e59-8dba-330f549bba54",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "34af269f-06fe-416c-adf6-4cdbcba223d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92c4c25e-c67a-4b9c-a872-ff46ad173b37",
        "cursor": {
          "ref": "f88a57a7-f2bf-4520-83e1-42c67e1ab23e",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2a12cb87-4593-448c-8691-73e90dc50547"
        },
        "item": {
          "id": "92c4c25e-c67a-4b9c-a872-ff46ad173b37",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a3a6b30b-e514-4e80-8474-d4265b23ca7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09a0a5fd-3886-470d-950b-a1ff7817e8d0",
        "cursor": {
          "ref": "6d727d17-e051-4d7f-ad97-8808cb38e8f0",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "05a35a05-1b12-40f3-b74a-3db6c155e820"
        },
        "item": {
          "id": "09a0a5fd-3886-470d-950b-a1ff7817e8d0",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3f5a47ed-3a98-4d8c-b2f4-ea5d2162a4e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "347785bd-1879-45f6-9a12-bf3a4cad6a6b",
        "cursor": {
          "ref": "e0fd16a6-1069-46bc-b507-49f2de26d0bd",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "07bde225-5b02-4fae-94de-7ec5334db643"
        },
        "item": {
          "id": "347785bd-1879-45f6-9a12-bf3a4cad6a6b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1ff2a229-0f63-4501-bd08-1a518a40ee9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b9b556e-2335-4179-a33a-8170243de035",
        "cursor": {
          "ref": "e986a910-4c23-4ad6-9c03-9baecd1f4881",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8164525f-3ed2-4574-992a-7fec21f15e68"
        },
        "item": {
          "id": "4b9b556e-2335-4179-a33a-8170243de035",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ba386686-d9b4-42f0-b1a5-bf02a30e7680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e82cc5b0-3cb9-40f1-8ca1-58573bc986f3",
        "cursor": {
          "ref": "185cfbb9-ace9-4718-a991-d7b1b695a9b3",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1a40d76a-1734-473b-86ee-22b97a493d2e"
        },
        "item": {
          "id": "e82cc5b0-3cb9-40f1-8ca1-58573bc986f3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e28179e9-7932-43eb-bb6e-8c8bea5d2907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d3af4c8-95bf-4497-941f-8915a871a4fb",
        "cursor": {
          "ref": "e12c0bfd-fa18-484b-8684-1cf0e425ac50",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "30944b93-afd5-4879-8f9b-52c638b282cc"
        },
        "item": {
          "id": "0d3af4c8-95bf-4497-941f-8915a871a4fb",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b09920e2-214e-4a3c-82ec-0a1407d016ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7cf0d02-0258-4f48-a7c6-64bb731cd3b1",
        "cursor": {
          "ref": "b9e34967-0618-465d-9443-efb1d211854c",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "91c84b24-43c1-4d2d-95b8-527ca8eb105f"
        },
        "item": {
          "id": "a7cf0d02-0258-4f48-a7c6-64bb731cd3b1",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ce52596a-834b-4738-959b-15f2a66c0d17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b866ca5-8ed6-469e-ba12-efced6ed34e5",
        "cursor": {
          "ref": "b7e112cb-ce11-4f5d-aef1-534d50312a93",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "693421dd-e7eb-43e9-ba78-c036d57f00b3"
        },
        "item": {
          "id": "4b866ca5-8ed6-469e-ba12-efced6ed34e5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "34df269f-13fe-4df8-8c30-0349f617dcd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e734741-960c-4bfe-a5be-74d2ce868ac0",
        "cursor": {
          "ref": "e9640d33-5d4b-4e51-92ea-f19101b30e38",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "bde7b75b-c48a-4b63-bb17-64b57d10e301"
        },
        "item": {
          "id": "0e734741-960c-4bfe-a5be-74d2ce868ac0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8bd4a321-6bfa-4195-abc1-049def9e7465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ca459b-0e25-49d3-a1b4-204922630737",
        "cursor": {
          "ref": "47fd24b6-a8d0-46b3-a229-7291c3efa0c9",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e59cf031-f0b4-4adf-b7b5-50ca6beaa0e6"
        },
        "item": {
          "id": "68ca459b-0e25-49d3-a1b4-204922630737",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d9a12901-d696-4067-878a-7138df7a4cbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120371d4-9a83-4624-b4c8-b288c973f604",
        "cursor": {
          "ref": "97e565a5-d285-4182-91d2-94ccd420ad58",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "19bcc228-8478-4dea-bab2-c024d228a213"
        },
        "item": {
          "id": "120371d4-9a83-4624-b4c8-b288c973f604",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9f55b198-8e03-494c-a17b-285e47586ed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2543970c-e5be-469f-9025-0e8ca5af52ea",
        "cursor": {
          "ref": "503ea504-7519-40bd-8bf6-fa7a29c52481",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6969969a-7b8e-43c4-9abf-9e032503b613"
        },
        "item": {
          "id": "2543970c-e5be-469f-9025-0e8ca5af52ea",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "22e76bb4-b4e9-4f12-9a82-5a7de1670e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f0e5c7e-e747-4230-8124-d5e052e00dfd",
        "cursor": {
          "ref": "b485bfbb-a27c-4b91-9b40-7fa5b46b6b70",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "da16a2f9-dea8-4971-be6d-dbb6407b8e79"
        },
        "item": {
          "id": "1f0e5c7e-e747-4230-8124-d5e052e00dfd",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e9cf92c3-63a4-48ab-9586-1d3b8d5866c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ebc39b-abda-48a2-9eb0-5f20623c4e36",
        "cursor": {
          "ref": "2f0d9566-4f1a-45a4-bed5-82c77ce231a1",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b84ba205-92af-4f06-810a-2350927847db"
        },
        "item": {
          "id": "43ebc39b-abda-48a2-9eb0-5f20623c4e36",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "993a09e8-1cb8-4372-abe7-88ccfb371ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a26f7ee-8a72-4188-8b29-cb9b03ee9130",
        "cursor": {
          "ref": "4177d550-5c29-4cda-ab1a-7211b4df426d",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "bf40b381-b7c2-4b3c-93cc-5e8c8377a9df"
        },
        "item": {
          "id": "8a26f7ee-8a72-4188-8b29-cb9b03ee9130",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4a494718-d3aa-4fb2-8907-f36a67421229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e3b24ad-89a1-4899-b8af-9a3e7e18f0ad",
        "cursor": {
          "ref": "92ece7af-9a14-4897-9a6d-6b6d6d3bda16",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4430e147-0e57-47bd-a1fd-faaed9b4082b"
        },
        "item": {
          "id": "0e3b24ad-89a1-4899-b8af-9a3e7e18f0ad",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6c30747c-174b-4779-befa-b54ce1c76ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d4b52a7-30e7-486b-a503-4e4f4063fad2",
        "cursor": {
          "ref": "78445935-65d1-42af-be3a-1f82f323d94b",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0176e8fd-92b4-4241-9341-cabd5f80ddb7"
        },
        "item": {
          "id": "4d4b52a7-30e7-486b-a503-4e4f4063fad2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9744659d-0df6-40dc-bc03-8028a5a34a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e514a37-9153-4d72-b1d7-b57d6a89b51e",
        "cursor": {
          "ref": "29346ac7-c033-42c9-b919-12ef959d178d",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1f2c7ecd-6391-4505-95b4-d40a946a6a32"
        },
        "item": {
          "id": "4e514a37-9153-4d72-b1d7-b57d6a89b51e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8c25a236-afdb-4900-91f8-8229dfb26a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2300dd8-4b46-4043-bea1-c1906c71ffe6",
        "cursor": {
          "ref": "6dce19f0-2b21-42ce-a4a6-b6cd9fc8b32c",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "82e4f6f6-ba80-4cb0-a0c7-7b848418cd7f"
        },
        "item": {
          "id": "b2300dd8-4b46-4043-bea1-c1906c71ffe6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6dbc02ea-0eb4-4fd0-af12-0a40f0e4f62b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8444c8be-e518-4627-84a1-0ecab9d8b2c1",
        "cursor": {
          "ref": "6fe5d557-8468-449a-929a-21e088ac75b4",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f30c4828-00d4-401e-8e42-2efa69d5a552"
        },
        "item": {
          "id": "8444c8be-e518-4627-84a1-0ecab9d8b2c1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d4d79ed5-5475-40db-b7e5-9a0cc988eff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d593f03-3235-444e-9937-a227362aba74",
        "cursor": {
          "ref": "77f71faa-7cb3-4d3c-b1a0-3da343b2a86a",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5ba574a6-96c6-480e-a21f-34397497161e"
        },
        "item": {
          "id": "2d593f03-3235-444e-9937-a227362aba74",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b85403d0-88c1-4edd-b887-2d2c0a85c1ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c12032e0-8ee9-4830-8db5-c97018bd4ac9",
        "cursor": {
          "ref": "0677dc66-5ddf-4f34-9d25-a7c096e11836",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9e21e0ae-d7c0-4296-bb35-9c59a0db6e90"
        },
        "item": {
          "id": "c12032e0-8ee9-4830-8db5-c97018bd4ac9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b08a7286-a0ca-4d46-a141-d09705b17b11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba769645-686f-46cc-a543-4fb1307d2678",
        "cursor": {
          "ref": "6a414b65-f6db-42c0-b9c2-93dd63673e70",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7cbeff68-c634-49cc-a90c-653c872ba51c"
        },
        "item": {
          "id": "ba769645-686f-46cc-a543-4fb1307d2678",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "dadb8f71-820f-487f-9aa7-3304bccfab55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dff4a74-b299-486e-bf34-07efdd12b508",
        "cursor": {
          "ref": "36b3e012-2d66-45e4-b05e-7fb7d330b05d",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1068b3ee-e919-4a49-9a19-e22ad1a94dca"
        },
        "item": {
          "id": "0dff4a74-b299-486e-bf34-07efdd12b508",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7f6afdbb-ec37-4de7-8b5f-3fb45cd8b262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02691912-6b2c-40a1-928c-f38f660cdbc5",
        "cursor": {
          "ref": "f99fea91-3ceb-45d2-8c55-11dccaa0ecac",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e8ba181a-f43e-4bb1-b0f3-4a5adcd23f70"
        },
        "item": {
          "id": "02691912-6b2c-40a1-928c-f38f660cdbc5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "525788e1-cf6c-407b-900a-9b4fad482bea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c4024c7-e2ff-4ad0-83b6-d2759174fb09",
        "cursor": {
          "ref": "acd5fe3b-1d21-48e1-a679-cd7deb5e945c",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6c8156e3-44e6-4086-9c04-e746cf6868e7"
        },
        "item": {
          "id": "8c4024c7-e2ff-4ad0-83b6-d2759174fb09",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "205e72cd-1381-4b3d-97aa-76b876ea7769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74422dd5-d2b1-4c1d-b296-d1e0251cec44",
        "cursor": {
          "ref": "e67606c7-c8f3-4b5b-b83a-483a3e2a0e6d",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "603167da-985a-44ea-9a55-8380d9d5994c"
        },
        "item": {
          "id": "74422dd5-d2b1-4c1d-b296-d1e0251cec44",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "bd212f1d-197b-4249-aea4-000016db4af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1480acd-f573-44b3-9503-996795fa949c",
        "cursor": {
          "ref": "84b08760-e6cf-46a4-a4a3-8a377ffd7cd8",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "079797f6-9298-4418-a1e2-8beeeb529331"
        },
        "item": {
          "id": "f1480acd-f573-44b3-9503-996795fa949c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "47f19f81-f4a0-45c5-8033-966cccbdfe96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dfe5861-7dd7-4cf1-8bf9-a2791dd274be",
        "cursor": {
          "ref": "a6d1547e-ce81-42f8-856d-c8ee4a7f6086",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d1496c99-d340-4657-acf5-5a00288b6281"
        },
        "item": {
          "id": "5dfe5861-7dd7-4cf1-8bf9-a2791dd274be",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "bd11dd89-5ba8-4da1-b018-d08fdefefb38",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cbfbda9-14f5-4306-8fee-dcf714070b73",
        "cursor": {
          "ref": "7323aae8-30e9-4aa6-9e9a-48b94c9265e4",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "237f2789-10fe-4d8f-b675-e361bdd39bb6"
        },
        "item": {
          "id": "8cbfbda9-14f5-4306-8fee-dcf714070b73",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b8483e54-063f-4a72-ad2d-246e4d400328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a1fc6bd-78f6-40b6-93a4-f73c946b2444",
        "cursor": {
          "ref": "30933d6c-beef-4925-9d9e-d5343daa26e2",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c68932e1-e57b-496b-a481-3a857c007cc3"
        },
        "item": {
          "id": "7a1fc6bd-78f6-40b6-93a4-f73c946b2444",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d407de16-d6fc-4b83-8dfd-4807765f487d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b40204-f3c3-4300-8e68-cbaf02d7dea6",
        "cursor": {
          "ref": "845f7209-69be-46c4-bbb9-5d028a6d07d5",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "710c9102-d64e-4063-83cf-b896e051acf7"
        },
        "item": {
          "id": "66b40204-f3c3-4300-8e68-cbaf02d7dea6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "26ee95c1-c4ae-4687-a783-30538aefafe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e11a06ec-325c-45b0-9230-b8a0cf3afcc3",
        "cursor": {
          "ref": "0bd36aac-c3db-46a8-b718-e39db110d20d",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9071790a-b6ba-4171-9e2d-8f0d938b21ae"
        },
        "item": {
          "id": "e11a06ec-325c-45b0-9230-b8a0cf3afcc3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d807e772-cc6f-4994-a6f3-f95f0aa23a77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdee656f-69f3-4514-9cfa-9b34c66e14ec",
        "cursor": {
          "ref": "efa89278-a471-4d21-93a6-09dfc97b9367",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "28f717a2-b8a3-4a18-8119-2e3cc9b4a15d"
        },
        "item": {
          "id": "fdee656f-69f3-4514-9cfa-9b34c66e14ec",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0abeeb8f-46d2-4b0a-a9b1-e05030b2a1ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b077a768-85e7-4c2b-8de3-58932cebc73e",
        "cursor": {
          "ref": "02df22f4-da9f-49ba-a11c-3589e4727246",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1ebd53ce-385c-4a22-a4a0-c4c481e826b2"
        },
        "item": {
          "id": "b077a768-85e7-4c2b-8de3-58932cebc73e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "593a87db-57e3-4828-9234-518ca4ae05ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fffa8684-e562-4463-a7b0-e4021cc49257",
        "cursor": {
          "ref": "6cfd2f38-3b43-40a3-95fc-44516a03b432",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "672efac9-9c89-42af-8f51-3a080b7ec69f"
        },
        "item": {
          "id": "fffa8684-e562-4463-a7b0-e4021cc49257",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9fd3688a-b33f-413b-86fe-3b94dd96fa16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365fb2a6-1290-4b1e-a03f-a138d61b4966",
        "cursor": {
          "ref": "e15f99f8-9688-4f2b-a47e-31c844088275",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6a331488-0780-49a9-9865-bc59c4fc3388"
        },
        "item": {
          "id": "365fb2a6-1290-4b1e-a03f-a138d61b4966",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6810c7ad-23eb-472a-b4b7-9e8277c8501c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "462957ec-d2d6-4dfb-bf51-4e78bb960cb2",
        "cursor": {
          "ref": "1ea65001-e3ae-4090-beed-ca77e6977a83",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "cfebcd71-badc-4811-8d47-5163e9dcfddc"
        },
        "item": {
          "id": "462957ec-d2d6-4dfb-bf51-4e78bb960cb2",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5b76fcb2-7c3d-45bd-8eb5-08f44864d07c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e42648e-f0b6-485d-97de-7a993457b6cb",
        "cursor": {
          "ref": "6ed3b038-21ca-4e6e-b45a-d75488ad1ff8",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "366212c9-03dd-4521-a854-5cea970f0f58"
        },
        "item": {
          "id": "9e42648e-f0b6-485d-97de-7a993457b6cb",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "63286e83-aff9-4dd1-95ea-19a5099f091d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52dd134a-ef5a-4a4e-b954-e0ffbbb61a59",
        "cursor": {
          "ref": "5d6c3412-8bf1-4615-8289-1c3731dc345e",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "dfc4bbf5-658a-4eec-8970-c29266168e6b"
        },
        "item": {
          "id": "52dd134a-ef5a-4a4e-b954-e0ffbbb61a59",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6787bcf8-e8ad-40cc-9c43-74b5cc0d1dda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 170,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7255170-85e5-425c-a0fe-3f76629c4526",
        "cursor": {
          "ref": "9314c5eb-c363-4c19-9608-2dd1e42a9408",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8250a558-405b-4818-a312-0667e04a9e81"
        },
        "item": {
          "id": "e7255170-85e5-425c-a0fe-3f76629c4526",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8399cae1-6d04-4dae-8f1c-2c563f85672d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d72b15-c477-4aee-9ef3-ebc36dfb15ae",
        "cursor": {
          "ref": "5a467886-7181-40ed-92e5-71441636c4b2",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0524775f-dbb4-4b93-b6da-bf7e06f820dd"
        },
        "item": {
          "id": "59d72b15-c477-4aee-9ef3-ebc36dfb15ae",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ca1cff73-c18e-4eef-be92-f46e7fc89b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b81bb86e-271a-47b4-a794-17630d2b60da",
        "cursor": {
          "ref": "85d8c72d-dff3-4824-80fd-9c575817d43a",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c1757204-9aff-422c-b6ce-e19307acca36"
        },
        "item": {
          "id": "b81bb86e-271a-47b4-a794-17630d2b60da",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d711970c-3572-40d4-838f-aa70833ff176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96364485-4541-4206-bde0-4f4199e9a497",
        "cursor": {
          "ref": "62fc21c8-9933-4673-93b4-b31c4918968a",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4a881d0c-ab1e-4040-aca3-378a2f9d169c"
        },
        "item": {
          "id": "96364485-4541-4206-bde0-4f4199e9a497",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "76250158-4d09-4601-a54d-0234c3cead6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3920652f-3f3f-42e1-9dd2-391024c00a8f",
        "cursor": {
          "ref": "769c8258-56ae-4d1a-8e94-97c62903e359",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7fc04399-40df-401f-8b0f-39482dc480c7"
        },
        "item": {
          "id": "3920652f-3f3f-42e1-9dd2-391024c00a8f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ec882ec9-e4f9-46e0-bda6-edc1f46b1ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7eba64a-6b9d-4e89-9f53-a42237f3851e",
        "cursor": {
          "ref": "56bdb6d5-c426-4c79-97b9-4d846913bb06",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d785ff5e-4fdb-419d-9293-ef3f8d46d690"
        },
        "item": {
          "id": "e7eba64a-6b9d-4e89-9f53-a42237f3851e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b3ff3a0b-1dce-4655-8898-6feed7704ddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e626fc2-a5df-4ff2-981b-43938db8c364",
        "cursor": {
          "ref": "e32ab5f2-e721-4bef-850a-3c2b32786cea",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9044f63b-a5f3-4fea-b37a-22b7c27f5311"
        },
        "item": {
          "id": "3e626fc2-a5df-4ff2-981b-43938db8c364",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7e6dda23-070b-4855-bc43-22799b7c45a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d36f4c81-c70c-43e3-9805-93d086a7584e",
        "cursor": {
          "ref": "fd5abaef-d9b8-4829-859b-99b2802ada3b",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9edd2a58-5287-45f8-b408-c9118947221d"
        },
        "item": {
          "id": "d36f4c81-c70c-43e3-9805-93d086a7584e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a61bcb7e-a555-44d1-9af0-bddfe761bc84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54447090-1815-439c-a86f-8e1b9066feb6",
        "cursor": {
          "ref": "6b176bed-a8a7-46ef-972a-08033a5d884d",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9539bcbd-dfee-451f-bc0d-3bde834758e2"
        },
        "item": {
          "id": "54447090-1815-439c-a86f-8e1b9066feb6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b41110de-bdb8-445b-ba43-3324fc68919e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9debd5-9f89-47e6-a927-8e9703559aff",
        "cursor": {
          "ref": "01082490-65db-4ed3-8579-480b61ae1307",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "aa4f05bd-2085-4bfd-b0a3-ee639a10df66"
        },
        "item": {
          "id": "db9debd5-9f89-47e6-a927-8e9703559aff",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5fe467d4-23fd-4cc6-913b-b2d0c81ceea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8654ba9-1f71-46fe-867e-9d343b5a597e",
        "cursor": {
          "ref": "2cedc0a7-0512-483d-a74e-4046b14d6346",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c0c0e1f1-0f82-4240-8722-a9f70eac172d"
        },
        "item": {
          "id": "c8654ba9-1f71-46fe-867e-9d343b5a597e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1800d6db-24dc-47c6-a4f1-bbf70e9a5e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49219023-ec81-4193-9e0d-2e3d273a85a8",
        "cursor": {
          "ref": "f6986f66-8c32-44f9-b475-0bc03b27bc97",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "5f549856-a9aa-4a5b-9480-92884dbc36c3"
        },
        "item": {
          "id": "49219023-ec81-4193-9e0d-2e3d273a85a8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "240f733d-a702-4cef-a17d-178f13d92f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8670f822-f3a5-47ce-bfb1-eab2377180b8",
        "cursor": {
          "ref": "08dc2dea-c828-4ccb-9164-c763a2f9d0bf",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "addd7552-31a8-412b-810c-40f58c9f0379"
        },
        "item": {
          "id": "8670f822-f3a5-47ce-bfb1-eab2377180b8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f4ea8934-1711-4aed-844c-e55749073a97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbcdbb4d-f135-4cc9-9c92-2ea3e8245533",
        "cursor": {
          "ref": "9a7b59b4-7800-42e8-8de0-1ba5214ea0d2",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9cb93cc0-46de-41f0-a772-3a4daf4dad5d"
        },
        "item": {
          "id": "bbcdbb4d-f135-4cc9-9c92-2ea3e8245533",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b92f0381-833f-46ab-bd54-95edbb6990c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3599329-9c8a-49f5-84ca-86a17ce57411",
        "cursor": {
          "ref": "123e1d83-630f-4046-8aad-299102d442b4",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "267565fb-f5a7-4f05-9b50-2fff523ae0d7"
        },
        "item": {
          "id": "f3599329-9c8a-49f5-84ca-86a17ce57411",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6899cec5-0829-42d7-af11-ab05d998c8e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2f88983-7ec3-4f47-b456-ddd249736e43",
        "cursor": {
          "ref": "3ddd8171-d8b9-4f87-bd76-39aea4363919",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d915ad82-27b3-4328-9eee-68a42c6b8841"
        },
        "item": {
          "id": "f2f88983-7ec3-4f47-b456-ddd249736e43",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c1c763d9-6048-40f9-b23b-47a846a28c6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52234296-e6d3-48a2-94ce-3ce11510cba2",
        "cursor": {
          "ref": "c40799fd-8cbc-4898-80f3-e3e47ab94ed5",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "fb4024bc-c2fe-4146-a1f4-a0e72e6a10d9"
        },
        "item": {
          "id": "52234296-e6d3-48a2-94ce-3ce11510cba2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2c967ac7-d056-483e-91ee-86063000d86c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c22de2-65c0-4b1a-b66a-b887a9f5775c",
        "cursor": {
          "ref": "ff7cd94b-ffa9-481b-9034-8f6699dfe070",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "edf01244-8634-4a88-8339-57a67f56e27f"
        },
        "item": {
          "id": "37c22de2-65c0-4b1a-b66a-b887a9f5775c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "fc5730b5-8e95-4934-9f82-004b026dd290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f579e881-139a-44df-be5d-630649bac3b8",
        "cursor": {
          "ref": "005007be-4b25-4c92-ab1b-8fc11ec2b81a",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3e092e44-4746-468f-958d-c337bd72ca47"
        },
        "item": {
          "id": "f579e881-139a-44df-be5d-630649bac3b8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "637fe931-7033-4c6c-9237-12afd7ed5e03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "517ce09a-e8a0-40eb-be00-be5d96b39963",
        "cursor": {
          "ref": "15ee0710-9b81-4619-b9f9-4c9886c3c1a3",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "17d29eb9-7e40-4ed1-ad61-5e315cadc604"
        },
        "item": {
          "id": "517ce09a-e8a0-40eb-be00-be5d96b39963",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2ab55d99-1dc2-490d-b038-420849f710a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4a2ddae-3711-44a8-ade2-3f7259d2a74f",
        "cursor": {
          "ref": "195f92f9-0272-4a3a-89ba-b2863455bca8",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1f588bd9-6218-4940-97be-49d68b257a30"
        },
        "item": {
          "id": "a4a2ddae-3711-44a8-ade2-3f7259d2a74f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "847b13d2-1889-46ec-a07e-fe5f2e3c6be2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a061b8fb-1897-48a3-9e91-886a8b602757",
        "cursor": {
          "ref": "44eb2119-c5e2-4601-bb93-5920f9b3f9ba",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7c87cc80-4f8a-4f0d-902e-3e6f22e3a984"
        },
        "item": {
          "id": "a061b8fb-1897-48a3-9e91-886a8b602757",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "c3fa32c5-8d5c-4788-9ca0-bb16fe9a2a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29186598-a768-4563-8f29-eaa49af1d41a",
        "cursor": {
          "ref": "d004e7a3-0a85-4b10-992e-3d4f010064ee",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "88fbb8e0-647e-4126-aa2f-6807bb0d55c0"
        },
        "item": {
          "id": "29186598-a768-4563-8f29-eaa49af1d41a",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "05cd75e9-495d-4385-8247-d790f14210d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6f036c2-fcc1-4856-99aa-d230e9844e5f",
        "cursor": {
          "ref": "6ecccead-0b92-4854-82d1-194c9c0c2500",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b7305e19-c617-49b7-b346-f107d6c7cb8c"
        },
        "item": {
          "id": "b6f036c2-fcc1-4856-99aa-d230e9844e5f",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "956ed77e-edd3-454b-9684-97bca9e55b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44bf12b8-43b2-48bc-8b2a-ff93811bf0bd",
        "cursor": {
          "ref": "b305042c-717f-4449-80b7-650c25654f46",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4724be94-39a4-485c-885a-c7f8cbcee8ca"
        },
        "item": {
          "id": "44bf12b8-43b2-48bc-8b2a-ff93811bf0bd",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "d5df15bb-2147-4fd8-af0c-6c7bf9c9fcbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0b3cdad-5ee3-42c4-bb9e-074b4b92bf38",
        "cursor": {
          "ref": "88f5c492-e8fc-4aa4-987b-bce455947c05",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "97a7c22b-a1ce-460a-bde1-8e1daa0c86cf"
        },
        "item": {
          "id": "c0b3cdad-5ee3-42c4-bb9e-074b4b92bf38",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "0db1358d-70d7-4aad-ba05-046e53c13f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e117a01e-7edc-49cc-8e81-5d5e68556f6f",
        "cursor": {
          "ref": "87048fe4-7f4e-43d1-91ac-017222d729a3",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2c88fb87-828f-421c-92d9-f6e4dc61983b"
        },
        "item": {
          "id": "e117a01e-7edc-49cc-8e81-5d5e68556f6f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d0ad29e8-6bae-40d3-a7be-e8f21cbe6c35",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd69d0c-b296-4643-ac83-0da2fe3fade3",
        "cursor": {
          "ref": "eac68427-b123-4b4b-a3ec-b44dbdebfdec",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5ea8d30a-1141-4a9f-b98e-54a31b8fff23"
        },
        "item": {
          "id": "4cd69d0c-b296-4643-ac83-0da2fe3fade3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5ce9e5ba-3e1b-4e33-b3d1-189d841a3fd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5490255-5e44-4597-9d9d-d2b626b3275b",
        "cursor": {
          "ref": "e03794d3-9538-45e7-b05c-607b81882a59",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d4bb044f-130e-4c82-a7be-9c90cb157d94"
        },
        "item": {
          "id": "a5490255-5e44-4597-9d9d-d2b626b3275b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f5273285-5332-48fe-9206-da5f617f23ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aff58a8-b9e9-4dca-ba09-8476713830f0",
        "cursor": {
          "ref": "227ea0b6-845e-4243-af92-1a850fbc35cd",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f27283b0-1701-4967-ad0c-eaf6b1afb864"
        },
        "item": {
          "id": "8aff58a8-b9e9-4dca-ba09-8476713830f0",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ccacd56c-05bd-42a8-981e-ef57d1a1c72d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c2018e9-c2a1-4758-95ef-4ec6a0f2f4a8",
        "cursor": {
          "ref": "b9856ad2-c6e4-49e5-b8f8-627b968207b9",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3936311f-5d64-43a9-bcb0-f4a88d708f32"
        },
        "item": {
          "id": "1c2018e9-c2a1-4758-95ef-4ec6a0f2f4a8",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5f46d3a7-2229-461a-9185-0014c57122f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8672744d-20b6-4b36-93ab-6beb86337541",
        "cursor": {
          "ref": "266ae008-86f0-4082-be27-42279ebb84eb",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "522de5c0-9a59-4b15-9ab9-bab850dd4cd7"
        },
        "item": {
          "id": "8672744d-20b6-4b36-93ab-6beb86337541",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e9410a33-e2e4-47d2-94ac-44bb8afd707f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e31e61-59f8-45e9-be5a-d6c9859b8267",
        "cursor": {
          "ref": "2ea1c5bc-5673-44b2-9da7-50b597659211",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c37b9747-271d-4ba7-ae95-03d100a8925f"
        },
        "item": {
          "id": "32e31e61-59f8-45e9-be5a-d6c9859b8267",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "87ab0e4d-1b20-4dfd-b54d-3647ff8d14c2",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "64685f75-9fec-4f99-9944-b0308b0d07a0",
        "cursor": {
          "ref": "a44b640f-90e3-496d-9c95-04268320769c",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "bebb553e-ed1e-4b54-8758-f3da605edac2"
        },
        "item": {
          "id": "64685f75-9fec-4f99-9944-b0308b0d07a0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "bdbf5bcb-6ed3-4f40-abaf-4466083fd0d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822365d7-c265-4b67-b8a7-3123e7700728",
        "cursor": {
          "ref": "61702926-5fd9-43c2-ad3a-022f5b6ebe68",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "c9d86bee-edb3-4249-bd22-47ce5e154b42"
        },
        "item": {
          "id": "822365d7-c265-4b67-b8a7-3123e7700728",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "33b956c6-27bc-4ad2-a10e-06f05a6f339c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a778cb5-e4a2-42f8-9805-579bf75bdd8f",
        "cursor": {
          "ref": "20516679-df30-473f-a4d9-d129e7183b4a",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "92af84bf-dcb3-4f83-8b7f-576cdf7ec956"
        },
        "item": {
          "id": "6a778cb5-e4a2-42f8-9805-579bf75bdd8f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "40ad36fa-266e-4435-8ea9-0b34a6a085a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79e808c-9b71-4ab8-8995-14a862515105",
        "cursor": {
          "ref": "2fa9be04-60a6-4c16-a162-9a39b4ccd78c",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "438f3953-7092-438a-b81d-1f213fa0044a"
        },
        "item": {
          "id": "a79e808c-9b71-4ab8-8995-14a862515105",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "bd00a973-a3c8-44e2-ac6a-d7d7b70aa448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1b5a5e-e671-4cd5-8f9e-a3456b361553",
        "cursor": {
          "ref": "ef63cfe9-143b-4a3a-ad5e-f7fd8149c84a",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4ba17c7c-1bbd-4e58-8226-f886f4f54847"
        },
        "item": {
          "id": "2a1b5a5e-e671-4cd5-8f9e-a3456b361553",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "706cb92c-3afc-43db-b833-e0c6625d85f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a1e83c-5ea6-451c-a121-e9956c31725e",
        "cursor": {
          "ref": "38d8b3e2-64a7-4429-a3c8-affc4e33c2fc",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "54798164-acd4-41c5-90ca-e11d61fc14d3"
        },
        "item": {
          "id": "e7a1e83c-5ea6-451c-a121-e9956c31725e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d1ea767b-195c-47e3-8076-65e365944324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb102dac-7fd8-4b1a-823e-bdf71acc621d",
        "cursor": {
          "ref": "23da75ea-f2eb-44e9-b4ff-148402584e5e",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "450ab5d7-2e5e-4f82-a394-374f549d0f1c"
        },
        "item": {
          "id": "cb102dac-7fd8-4b1a-823e-bdf71acc621d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d32b06da-79bf-4867-acd6-0e239bcd10b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "268ef140-cdb4-4801-92a3-a1555fa0b516",
        "cursor": {
          "ref": "3a51b62e-201c-44e7-8189-d729e1059bc2",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9e0348e8-5b4c-43e9-887d-3e3aafa475e1"
        },
        "item": {
          "id": "268ef140-cdb4-4801-92a3-a1555fa0b516",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "fc972dee-c944-430d-ae48-3eaef2cf1dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45dbd38b-886d-49a5-96f8-f97b1fa2cb9e",
        "cursor": {
          "ref": "6d8f7ec2-3ce5-4dff-9638-048821072220",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ab6cf4a0-5a60-41b4-9d61-7ffce12043a7"
        },
        "item": {
          "id": "45dbd38b-886d-49a5-96f8-f97b1fa2cb9e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c1130893-d096-4a9d-8112-1fc63cbd6b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea853ae-4a7b-4f52-adb6-424575f68a3b",
        "cursor": {
          "ref": "53e2bbbf-bc86-4e5f-b151-41f86a51ac61",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4b053604-f2e3-4332-806b-a1c800b786da"
        },
        "item": {
          "id": "fea853ae-4a7b-4f52-adb6-424575f68a3b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e67fd8f6-1fb4-4775-b846-db758116b42a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c22f211-003c-4a78-b2fe-580b2a279ae0",
        "cursor": {
          "ref": "9fc5af9e-5aaa-45bb-bc52-1df8dfacc3cf",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e2cf332d-f7fc-487b-8edc-52e47ac99584"
        },
        "item": {
          "id": "5c22f211-003c-4a78-b2fe-580b2a279ae0",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "576f69d2-cf09-4d24-b3ab-339c24027fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c660118b-7c41-4cc9-99d4-f39b73be180c",
        "cursor": {
          "ref": "f33fb3ff-d769-4323-8212-89dea4f1c9a4",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "5f9b13a5-ad6e-4f88-8d9b-73edc12f64ff"
        },
        "item": {
          "id": "c660118b-7c41-4cc9-99d4-f39b73be180c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4b49bab8-e63d-433d-9a68-2935c674d820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a197d78a-c8fe-4859-aec1-873bc7b8e914",
        "cursor": {
          "ref": "b30b8106-4bb3-44b0-b498-5f42bdeefd9c",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "2c6dbd18-dd87-48bc-a61d-8870c003e948"
        },
        "item": {
          "id": "a197d78a-c8fe-4859-aec1-873bc7b8e914",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3fa9c38c-2a2f-436b-bcfe-e845c1f14d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59934ac-8e61-4364-985c-be4891edb66f",
        "cursor": {
          "ref": "9eba7003-1224-4823-9232-d1255373e27d",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f453f470-5741-4d09-be7c-bd7c5cfbc038"
        },
        "item": {
          "id": "d59934ac-8e61-4364-985c-be4891edb66f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ac48e0e6-611c-4474-9bee-f39909812a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df8028a-d04f-424b-a851-b960f6607dac",
        "cursor": {
          "ref": "5c9904a5-ac49-4f5f-981a-2a48eb8a472c",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4484e619-59f0-4ce1-b7de-d7b86364a192"
        },
        "item": {
          "id": "5df8028a-d04f-424b-a851-b960f6607dac",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "834f57a9-a92b-42be-980f-e08590b7c651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3623d2d-5363-43b9-a0f1-f9b6909bc0f3",
        "cursor": {
          "ref": "f05586ae-0c69-4605-86dd-5e7ab1c27992",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5ce5c1da-5771-4583-b4dd-10d3747ccbb5"
        },
        "item": {
          "id": "e3623d2d-5363-43b9-a0f1-f9b6909bc0f3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "fc02bcbd-17ce-4dab-84db-7cb5132c3122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc29115-3a0d-47c4-8048-e3ac4aaf7638",
        "cursor": {
          "ref": "b2f3a7e9-6912-4e85-8c8f-72dc40f5432c",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "4ef2a664-dcab-4f87-81a6-fb9a99fbd9fd"
        },
        "item": {
          "id": "dcc29115-3a0d-47c4-8048-e3ac4aaf7638",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3f717d43-143c-4d53-ad11-f30dcf3286e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afcbaf86-8fb8-41b5-b5bf-bdaa3d955be3",
        "cursor": {
          "ref": "51d8fbeb-1494-4a28-9345-d47de8558409",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1a5fc74c-20e1-4234-868e-db7076f1c142"
        },
        "item": {
          "id": "afcbaf86-8fb8-41b5-b5bf-bdaa3d955be3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7830a818-65e0-4bf0-8e3d-004020d905da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3374f6c0-3d34-4c30-9338-42b05593adce",
        "cursor": {
          "ref": "1bfc0508-dd86-4acb-9651-300aa26845eb",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8c4500be-da71-44f2-a318-9d50f3fbb0a2"
        },
        "item": {
          "id": "3374f6c0-3d34-4c30-9338-42b05593adce",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d8a32fcf-fe40-4c91-84d7-6cef17d9c953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa10638-44d2-46d6-b64e-0d348b6773c4",
        "cursor": {
          "ref": "2a7666ad-8c80-4b4c-9b23-1a1c5a588898",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "fe253c33-9e6e-4caf-a2bf-b986efdcf20f"
        },
        "item": {
          "id": "8fa10638-44d2-46d6-b64e-0d348b6773c4",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7ee87c9f-5203-4132-b5c2-6ef42d895e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27d4ee8a-5736-47c1-be76-b30ed7663217",
        "cursor": {
          "ref": "47f89138-e7ea-4860-8819-2f8f279bb966",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b92edf59-5929-433e-b121-b8388dc82485"
        },
        "item": {
          "id": "27d4ee8a-5736-47c1-be76-b30ed7663217",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3a071b1b-c527-4240-a5a0-22e4a710f330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad80e145-3ed2-4de0-9c25-8ff3f3016eba",
        "cursor": {
          "ref": "b9d2a172-4e98-4a43-90ca-22c477a24a54",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7ab436d7-ec30-4d50-aedb-423a24295988"
        },
        "item": {
          "id": "ad80e145-3ed2-4de0-9c25-8ff3f3016eba",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "2c053bc6-bc26-443f-9af0-0cfc59874072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c3389c2-2fff-4f7c-ab5b-e0a8f9d4dbc6",
        "cursor": {
          "ref": "b26daed1-3cee-4833-8f18-95d28d094516",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c7e1ce4c-72f3-4f8c-b70f-8f88f2f622c1"
        },
        "item": {
          "id": "0c3389c2-2fff-4f7c-ab5b-e0a8f9d4dbc6",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a9c5d554-e24c-43d2-a46e-85748fe17ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6994f8-800c-4ab8-bb43-1c9d9f438957",
        "cursor": {
          "ref": "c2bd7fc2-39c6-4abe-ad9a-02a9298aa1bf",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "915ebbf8-930c-45f4-8716-5db6fa02f35b"
        },
        "item": {
          "id": "0c6994f8-800c-4ab8-bb43-1c9d9f438957",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f930fc80-2146-48a3-a347-32b606a74d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37978e3d-07ae-46d4-822f-f88cb02d64ab",
        "cursor": {
          "ref": "e9f83ba9-5204-43a0-afaf-2a6188915e46",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "f8558c52-f772-4ade-b194-533d3def0d6f"
        },
        "item": {
          "id": "37978e3d-07ae-46d4-822f-f88cb02d64ab",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "db73c818-b19e-42d3-94de-e40270ffaa12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51605750-2320-4d47-9826-fc7d6a68648b",
        "cursor": {
          "ref": "53e39cec-4a9f-4f27-8574-5ab153bff20a",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "4fb11a9a-65e1-4c67-9959-e0f768dc0318"
        },
        "item": {
          "id": "51605750-2320-4d47-9826-fc7d6a68648b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "94631866-ef6c-4cf5-947c-0c7dc342c6b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2571f849-dac4-40bc-a35d-cddf6535ea3e",
        "cursor": {
          "ref": "102e324e-9532-46fb-a870-ce6d53abb32d",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "73615f06-462b-4d1f-8445-6a4043c22bdb"
        },
        "item": {
          "id": "2571f849-dac4-40bc-a35d-cddf6535ea3e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "25dd8fb1-d427-41a8-a749-b2d42003de90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b4a5e28-bc08-461e-a381-f6f0a480e21a",
        "cursor": {
          "ref": "4632a5d4-0f43-4ce9-9921-88bebb023665",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "3bc8deb0-6d79-4e18-b280-5b6e698bdfff"
        },
        "item": {
          "id": "1b4a5e28-bc08-461e-a381-f6f0a480e21a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "218b59c4-162d-4bee-a1b8-96b946402342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de37f263-a85f-4787-a6b9-80edb47aafb3",
        "cursor": {
          "ref": "93da0c4e-d244-4260-a558-702db8ccc430",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c6c47fd9-5fe7-480d-bc82-9c580847c2e7"
        },
        "item": {
          "id": "de37f263-a85f-4787-a6b9-80edb47aafb3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c6ecb9f6-f617-4f0c-8f93-0d3e3be39cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8dd438c-feb5-4de8-a465-d9776c35d04b",
        "cursor": {
          "ref": "2ca5370e-3096-4d2e-bfb6-7e386c497872",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "af886493-5b70-4576-b7b4-fac75c0de1f4"
        },
        "item": {
          "id": "c8dd438c-feb5-4de8-a465-d9776c35d04b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e7d96703-3ffd-4279-abd0-21c2b9dc2afc",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "11e7e795-20b0-4cfe-b50d-410a60e55c91",
        "cursor": {
          "ref": "aac94b95-9785-4ec8-ba95-d3a0a0f5966d",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8ca21e3e-4049-42bf-9148-be15c653aba5"
        },
        "item": {
          "id": "11e7e795-20b0-4cfe-b50d-410a60e55c91",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f06f2c72-5727-4abd-9d8c-24649712d9f5",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "8256a757-9562-41bb-bb8a-a24f4c93a39d",
        "cursor": {
          "ref": "b9dbfca7-b0f3-4757-a165-ca69a1cb2785",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7242c336-efa4-4513-93d7-ba10de11ebc0"
        },
        "item": {
          "id": "8256a757-9562-41bb-bb8a-a24f4c93a39d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9746c610-08e6-4d82-99ff-f9d06afe6505",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "fff64133-1612-4435-8fb8-0ad86793d72d",
        "cursor": {
          "ref": "a5e0d37b-a886-45b0-845b-b47dfba410b6",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1492b8e1-f2fd-401c-9abc-46367ecab9bd"
        },
        "item": {
          "id": "fff64133-1612-4435-8fb8-0ad86793d72d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "aacae944-cdbf-43d4-af48-fff6d979ae04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f407d8c-21da-4254-9900-dcace2eb8858",
        "cursor": {
          "ref": "f58e79d3-b0f0-4acc-82dc-c0e6ad1146ce",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "92fd0506-6613-4736-b80c-3a2ebc5b1ba1"
        },
        "item": {
          "id": "1f407d8c-21da-4254-9900-dcace2eb8858",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4bf42047-28bd-4cd7-92fb-545d095d4aba",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "973d5033-68e0-4990-bf0e-38260098ffa0",
        "cursor": {
          "ref": "d08f62e4-21dd-4510-8b03-faad0fb0f297",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "69c4a840-8f25-4b28-a71b-356540d93f96"
        },
        "item": {
          "id": "973d5033-68e0-4990-bf0e-38260098ffa0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2cf538e1-840b-4111-99cc-e8ccc47b8ec2",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "cd19671e-4ab9-43c0-bf97-d5c24f6267ce",
        "cursor": {
          "ref": "65757e94-7f24-4418-9980-3d012e1c114a",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "46ebc523-b08e-49a9-8c0b-3d950dce8eb9"
        },
        "item": {
          "id": "cd19671e-4ab9-43c0-bf97-d5c24f6267ce",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6eb42915-744b-46b8-b868-f09fb25e557a",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "50c750e9-4254-48e6-9e1f-08531afe7279",
        "cursor": {
          "ref": "2653e530-6224-4d3c-9e1c-a476d513aef5",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2c2063c2-f48e-4682-b547-7cf3afc25b5a"
        },
        "item": {
          "id": "50c750e9-4254-48e6-9e1f-08531afe7279",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e4b6e26c-27ab-441c-82aa-3deb415da4cd",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "9305243f-5986-419a-b628-2b96f6a33016",
        "cursor": {
          "ref": "694aea1a-a835-4970-a679-b7c5920b02cc",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d40a5194-c12f-4bd1-a43e-5244bebd9c6c"
        },
        "item": {
          "id": "9305243f-5986-419a-b628-2b96f6a33016",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "54839308-d058-4ea7-aaaa-e9f4ee189fa1",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "24fd50d5-d798-4803-a792-f3843a444e98",
        "cursor": {
          "ref": "45a73a2f-e6dc-4d9a-ad04-957c14480d5b",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c8e46fad-f542-429b-ae72-8dca3cde69fd"
        },
        "item": {
          "id": "24fd50d5-d798-4803-a792-f3843a444e98",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f4a3453f-bbf0-4ade-b358-8b6bc958d45b",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "cac7afec-f10e-4814-a5bb-4af3ce7785ad",
        "cursor": {
          "ref": "7fadf11a-8611-4d18-86fe-beb967568a30",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9e39b917-aef5-41b9-a342-017269a72379"
        },
        "item": {
          "id": "cac7afec-f10e-4814-a5bb-4af3ce7785ad",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3a2306c9-1ee9-4d4d-aad4-12fba55a3730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c91514e0-2ae1-47dd-8f2e-5f46efaa0297",
        "cursor": {
          "ref": "35215afd-f061-48cc-9750-1e2e868f54d3",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8778f073-9e25-4a4d-b4ff-80f5328ee7da"
        },
        "item": {
          "id": "c91514e0-2ae1-47dd-8f2e-5f46efaa0297",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4fbf3ee7-0244-49a6-941a-73d97aa85351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e94910-c475-4426-b122-4369c0ba8c5d",
        "cursor": {
          "ref": "a3afdada-d82c-490c-b8d4-ee09162506b3",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d44407de-ce4a-42a4-9cc8-d499fd434254"
        },
        "item": {
          "id": "77e94910-c475-4426-b122-4369c0ba8c5d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3f079008-75db-40b6-86e4-db206a928137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "640eb263-ad19-4077-b8ab-b4ae02effdcd",
        "cursor": {
          "ref": "6fbcbd56-298f-4ba7-afee-06ecdffea97b",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "43b84c80-c0a4-43c2-90ee-6f19a0a00e19"
        },
        "item": {
          "id": "640eb263-ad19-4077-b8ab-b4ae02effdcd",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7b1408e9-3149-45f3-a777-31cbddc89ed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e1b3dd-201a-49cf-ac4a-2920eb9f448c",
        "cursor": {
          "ref": "025d6b7d-2f0c-4932-9a46-b707d10ea4b2",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "390ca0f0-3b49-4dec-af66-ec4f96fd0a93"
        },
        "item": {
          "id": "f9e1b3dd-201a-49cf-ac4a-2920eb9f448c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "32c616a3-d6dd-4945-bbb2-7c915e1b3644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a257d8e-065a-46ff-aaf7-b73f50112424",
        "cursor": {
          "ref": "767cd812-40e5-433c-8d20-9ab6f728aa99",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ba9919b5-8c33-460d-a0c6-c0cf191537df"
        },
        "item": {
          "id": "4a257d8e-065a-46ff-aaf7-b73f50112424",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "004d41d6-5cf3-4e75-8c12-ff1b48df1c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e9c583-c28c-4c66-8ce8-a1131a6ba099",
        "cursor": {
          "ref": "cdb8e05a-36a0-49f6-a472-4e99febcc3a6",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2880a1ca-8269-4301-aacc-753c30e69ea3"
        },
        "item": {
          "id": "80e9c583-c28c-4c66-8ce8-a1131a6ba099",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5e77b493-556c-4cf9-a8f1-ba1422bdc4b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f04e8ae6-76eb-4a19-aeba-c94392381a3b",
        "cursor": {
          "ref": "8379952d-d404-44a2-928f-ae971cd2fcbf",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "66af5024-d0ba-4224-8fd3-5e8f04837070"
        },
        "item": {
          "id": "f04e8ae6-76eb-4a19-aeba-c94392381a3b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e0acf8a8-5280-4eb7-95b4-12f90643fb34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06aaeebc-0a3b-4683-97e9-57c0682590d6",
        "cursor": {
          "ref": "d0e73483-7951-4f9c-8ab0-a86d0aa6c6d3",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "49385132-efe8-45bd-a614-a910f494960d"
        },
        "item": {
          "id": "06aaeebc-0a3b-4683-97e9-57c0682590d6",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0d71ca46-10c5-4069-97f4-63b91836bba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23cd25e9-8ad8-4346-b0a3-e8b6966238e8",
        "cursor": {
          "ref": "2dee6708-96b1-42fe-ac35-0b5ce0937a96",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "0226544f-0d7a-4d28-a453-09571fa1eda5"
        },
        "item": {
          "id": "23cd25e9-8ad8-4346-b0a3-e8b6966238e8",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "944986ad-8797-4a58-ae33-ce5474aab4e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a2cba5-29e4-4d45-abc4-7ec8b961c682",
        "cursor": {
          "ref": "aa122589-4dff-40de-b713-bf2ab8a422ab",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "85bf0ccd-91f6-435f-a6e9-607238c1a029"
        },
        "item": {
          "id": "c4a2cba5-29e4-4d45-abc4-7ec8b961c682",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d9c9b055-48fe-400c-a473-4851a1fd0fc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19846fe1-936d-45e4-a7b1-e1363eac920b",
        "cursor": {
          "ref": "be1f25c0-efc6-4e71-ac3e-c72609fb2900",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d194ecbf-bff2-4804-b968-ad4107561b93"
        },
        "item": {
          "id": "19846fe1-936d-45e4-a7b1-e1363eac920b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "95b82787-b28c-4afa-95ba-5b75ef57eaad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9535a842-43d6-4dd5-958f-e01829065b95",
        "cursor": {
          "ref": "b4a0a217-dd57-4b1f-a5bb-db734c519b6e",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6ead30d6-2b07-4c1d-be0b-fedefdaff6f9"
        },
        "item": {
          "id": "9535a842-43d6-4dd5-958f-e01829065b95",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "192c67c4-97c5-46a1-b36f-7dd75caaebee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe616748-0668-43ec-bd49-9ff79a691ea5",
        "cursor": {
          "ref": "4c8bc379-5aad-413e-a9a8-d079bca4a6e1",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9a5a77fe-8db1-46c2-af43-b69dd4fa6eb6"
        },
        "item": {
          "id": "fe616748-0668-43ec-bd49-9ff79a691ea5",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "dba750f2-7efe-4b30-82a1-9d05e5d7fef3",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "5278c3aa-8ddf-4541-a41f-1f0d77c03072",
        "cursor": {
          "ref": "4a246b70-09fa-40af-ae4b-da50713eaf40",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "bb03c7f4-4781-4560-9697-81ac2e9d0f8b"
        },
        "item": {
          "id": "5278c3aa-8ddf-4541-a41f-1f0d77c03072",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "efee6178-b13d-4e9b-a9d6-8e7ce3c00e9a",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "fa5cb176-040b-444f-8b1e-69c31a3f6ecf",
        "cursor": {
          "ref": "d7e81b9b-12fc-4b69-9cb2-dfc90170056a",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c1e2a001-282a-40a6-b856-091459fa78f4"
        },
        "item": {
          "id": "fa5cb176-040b-444f-8b1e-69c31a3f6ecf",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "faeee75f-cafd-49f7-bd30-cb42515deadf",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "7c98cb32-90b2-4df0-bd4d-94df84aa0c97",
        "cursor": {
          "ref": "b3d784bb-a461-4e49-ac4a-0c8934abbdd3",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "da355926-fe0d-4186-ad5a-cd7c4593c05a"
        },
        "item": {
          "id": "7c98cb32-90b2-4df0-bd4d-94df84aa0c97",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "294baa28-7dae-4c47-977b-9e75cc0ee277",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "5622e35e-f1ba-411a-91fc-d73fa788ebe7",
        "cursor": {
          "ref": "52ff47be-9ba9-44e6-8182-e8c7975048ea",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a35b3492-c919-4150-bd6a-2ed41a3db71a"
        },
        "item": {
          "id": "5622e35e-f1ba-411a-91fc-d73fa788ebe7",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "888f655d-a7b3-4167-8cb1-34abf41b6e30",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "3db0bc11-cb55-4301-93c8-63fd8263a973",
        "cursor": {
          "ref": "bd4c93c5-0f82-461a-9d7e-cefe6a17a913",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "299a06dd-71fb-49b0-bb25-95cc21ef5c15"
        },
        "item": {
          "id": "3db0bc11-cb55-4301-93c8-63fd8263a973",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9744b8d6-9096-42d7-a826-30b0fe3ef990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d3daa6-9c6f-45ed-a013-9a555d1698df",
        "cursor": {
          "ref": "d8a4a82e-f69b-4ab4-9d9c-5f93af4b5803",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6a94fe56-26ae-4dde-b310-0b36062f60fd"
        },
        "item": {
          "id": "c7d3daa6-9c6f-45ed-a013-9a555d1698df",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "9704569a-fa06-4f31-9e7b-d51408afd517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ceb2bda-3333-4b78-8406-1acffcd74a37",
        "cursor": {
          "ref": "fe7d201f-9c8a-4a01-a28e-35a36caa7d7b",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "dff846cf-f6d7-4ada-a2e6-11e482bbbe3a"
        },
        "item": {
          "id": "0ceb2bda-3333-4b78-8406-1acffcd74a37",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "bbc20a8a-df05-4fc7-b482-3f80d978db82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e89f73-e485-46ed-bd99-5b9179d20c7c",
        "cursor": {
          "ref": "308e883a-6641-48a3-87d4-bbd9ab8507e6",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6b933f59-a4c1-4510-93c1-4e5c90254b13"
        },
        "item": {
          "id": "51e89f73-e485-46ed-bd99-5b9179d20c7c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "d370bace-3b5b-4cb0-a7c2-e8a8bbcd1634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650ac8de-00e0-4265-815b-0d9e928c552e",
        "cursor": {
          "ref": "f9ee1814-b551-48c8-85fa-c80766544091",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e99dc3d9-671c-47e4-8e0a-aa6e2fed488d"
        },
        "item": {
          "id": "650ac8de-00e0-4265-815b-0d9e928c552e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "55e65545-9e3d-4f76-8014-50de94794cb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650a1b1a-52f2-4bde-a1c1-27473953745e",
        "cursor": {
          "ref": "4a80e212-9ad0-4d94-909d-8686725239c3",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f8b7f444-d2a0-4127-b3e1-0505c553add9"
        },
        "item": {
          "id": "650a1b1a-52f2-4bde-a1c1-27473953745e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c9dfd681-a174-493a-b369-d58b3680fd17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e19fa4-7f21-49d7-a05a-3b95c4fcf383",
        "cursor": {
          "ref": "351995c5-edfc-4294-80fa-fed5b1ce5c0d",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "75c9c179-441e-4f70-9a89-2b34749a757a"
        },
        "item": {
          "id": "13e19fa4-7f21-49d7-a05a-3b95c4fcf383",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f8117167-e058-428a-9fce-8065f0d25096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ba6007-4738-4ea9-88a4-f6fc701a8138",
        "cursor": {
          "ref": "edbe917d-bfb5-455f-90c9-4ac7a68ca7cb",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "618bcc84-8c4b-4b09-b58c-126968873b52"
        },
        "item": {
          "id": "f2ba6007-4738-4ea9-88a4-f6fc701a8138",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7d56d93e-2eeb-43d1-8d7f-66cb3e067fed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05efc600-5b48-47ba-862c-d373291b3d51",
        "cursor": {
          "ref": "21e3272e-a20f-485d-97c1-e5ff274ccde6",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "7d0b83a1-3d03-4793-9452-0dea00a36721"
        },
        "item": {
          "id": "05efc600-5b48-47ba-862c-d373291b3d51",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7dd68070-9866-4af3-a04f-760a7bfa7d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef89871-3524-443d-8af3-b5bb09729595",
        "cursor": {
          "ref": "a0ec31a3-9bac-4fa2-9f33-83e422c76403",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c93e1095-287a-4425-bc8d-78e607e0c462"
        },
        "item": {
          "id": "5ef89871-3524-443d-8af3-b5bb09729595",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b14b6822-0697-49bb-8724-694d133f5775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c9c5fe-94c3-49be-8749-090e98f876e9",
        "cursor": {
          "ref": "2c3e5d8d-6634-4a6a-9e2e-fe544bc4ac99",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "8b0fd136-7fbe-46c8-a243-51d57356cad2"
        },
        "item": {
          "id": "f7c9c5fe-94c3-49be-8749-090e98f876e9",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "2b7d1477-3350-45a0-84f7-9a6962c3fcd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd58fcc8-e74c-463a-95aa-f6e28100f0f6",
        "cursor": {
          "ref": "0f7dd50d-a18c-4348-ac7b-1134ba8d563b",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "2f82a008-e728-4537-9d26-37a69581ccac"
        },
        "item": {
          "id": "dd58fcc8-e74c-463a-95aa-f6e28100f0f6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "37398174-2639-4b39-a00a-82b778ff07d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c2f6b64-93f3-4bd7-aff5-c2135b2180a5",
        "cursor": {
          "ref": "d8e45c80-5359-4a88-9714-22e5af8a059e",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "29dfb2fe-afe3-419a-9275-73882b398524"
        },
        "item": {
          "id": "6c2f6b64-93f3-4bd7-aff5-c2135b2180a5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "194ba7f4-c25c-4d0b-aac3-5007efdc9b32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78acd789-e9eb-4cf7-9fbc-9f6d39afdb6d",
        "cursor": {
          "ref": "0adda0cf-c084-47b9-a200-1d52a77a7ccc",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "a8a9801a-674e-48e2-9f81-d8eff5cff386"
        },
        "item": {
          "id": "78acd789-e9eb-4cf7-9fbc-9f6d39afdb6d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2492468a-ed71-437d-bb13-23c41a41f5b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf701ec0-62f2-4ec8-9c96-0bca290c3693",
        "cursor": {
          "ref": "f5c5eb57-54fb-4d1d-8d0b-9141f46aa6a4",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "a6c3e47e-7fd1-4001-a6a5-6bdc45a181df"
        },
        "item": {
          "id": "bf701ec0-62f2-4ec8-9c96-0bca290c3693",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3ffe6b5c-9b09-4cc1-9d3c-f1687b0ac12c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c11f88-9759-4a82-a956-a9f3b9d23db0",
        "cursor": {
          "ref": "cd466f7c-91aa-4c66-80ac-e8e351b03be4",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "9f1e9405-c2d3-483b-8e02-b491f739131b"
        },
        "item": {
          "id": "71c11f88-9759-4a82-a956-a9f3b9d23db0",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "841b767e-5ab3-4315-840b-9683b3eb1d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d00ae6d4-2891-4358-8d81-b254f62bf8b6",
        "cursor": {
          "ref": "daa6617b-a3c5-4aa7-a9a4-741e27d4e071",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "0ba8cf01-72b9-44a1-b494-6816ffe4363e"
        },
        "item": {
          "id": "d00ae6d4-2891-4358-8d81-b254f62bf8b6",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "caf65b0a-fda5-45b7-95de-a0b814c702b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "137e3d7e-db2e-4cb4-8480-b8bb23691ca4",
        "cursor": {
          "ref": "b94de855-8472-4bbd-abcc-298864cbafa9",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "9b0c682f-9925-45ee-8ee5-045d38e8af88"
        },
        "item": {
          "id": "137e3d7e-db2e-4cb4-8480-b8bb23691ca4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1ea68dc5-110f-4ebf-a188-8979e68cdb19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "764c95cc-31e4-49ee-9e81-3dd01acb8a8b",
        "cursor": {
          "ref": "e421b099-30d4-42b6-8362-fe083858d6c7",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "85a7ac3e-5416-4bb2-8c59-fa88da493122"
        },
        "item": {
          "id": "764c95cc-31e4-49ee-9e81-3dd01acb8a8b",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "dd4471fe-405f-4ae4-b150-6e329b431f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b335463-db46-447d-bc5d-06987a009372",
        "cursor": {
          "ref": "8e507503-991b-4eea-ada7-1a37c11418b0",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "9d7c6cab-a25e-480a-983f-f2405cc528b4"
        },
        "item": {
          "id": "7b335463-db46-447d-bc5d-06987a009372",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f8d76ca1-670b-4a7f-92f8-b618c594df20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec3d711f-f96f-4c4f-970c-39f2f72d6cb7",
        "cursor": {
          "ref": "3d40409a-7936-45ed-b7d5-029d5fd8877d",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "59ec0cfc-4d57-432a-a0af-ddbf2eb4940d"
        },
        "item": {
          "id": "ec3d711f-f96f-4c4f-970c-39f2f72d6cb7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "90475d0f-6e3b-46c9-880a-a2ba4cfeb8fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fccf212-82ff-43f4-a5a5-2ffbaaa2a7dc",
        "cursor": {
          "ref": "47396682-946c-43a2-8f20-81e82eab09a9",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "1dba2b6a-e2fe-4616-8ca4-5796c64c728d"
        },
        "item": {
          "id": "2fccf212-82ff-43f4-a5a5-2ffbaaa2a7dc",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8ae26f03-eba6-4ecb-8e2f-c658123ef6ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a0e847a-1d0d-406e-b672-f754cbaeafc9",
        "cursor": {
          "ref": "9ecd079a-be3b-4cc2-9306-b50f1282f4de",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "b172afc4-281e-4280-bc71-f5e3f9dc173c"
        },
        "item": {
          "id": "5a0e847a-1d0d-406e-b672-f754cbaeafc9",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ed09cf9a-ca35-4b4c-a9fe-31e6c8e4d6b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6faa4679-b447-43f7-81aa-8da04d85440a",
        "cursor": {
          "ref": "d9542e23-c793-472d-b026-33c421938bec",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "24d450ab-f1f9-4c03-95a8-6c78286b78b2"
        },
        "item": {
          "id": "6faa4679-b447-43f7-81aa-8da04d85440a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b995d2c3-f87c-4811-b3e8-fe11642ff609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3a330b4-b018-4f99-9736-2245ca48134c",
        "cursor": {
          "ref": "33ef90fc-8259-47a4-991b-ea4b4bde374c",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "e027d84a-f6d6-4b96-a3c4-cd2c8e97c37e"
        },
        "item": {
          "id": "c3a330b4-b018-4f99-9736-2245ca48134c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "337847ef-c526-495c-8b1a-04e069895a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "631301a4-6b05-40ae-9d7a-52e4c9eda436",
        "cursor": {
          "ref": "217fc1d2-4ad1-4cb5-b6c7-221793ee8115",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "0b4e6e82-945e-452f-842c-799de6889708"
        },
        "item": {
          "id": "631301a4-6b05-40ae-9d7a-52e4c9eda436",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "67ae76be-a0f9-4ba0-af64-6d3ca45130ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce2cb716-535d-4827-b1e1-d53ce116c6d2",
        "cursor": {
          "ref": "df7aba99-d58e-47d0-bf41-f92e15f232a3",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "fe13b7bf-e609-4836-8fd3-26299f11968c"
        },
        "item": {
          "id": "ce2cb716-535d-4827-b1e1-d53ce116c6d2",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e0e0df24-2365-4a04-a445-e7b5c372023d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62165e6-52d6-40ac-b927-a574d1ee65de",
        "cursor": {
          "ref": "0e00d795-3857-4958-ba0e-a0ab01658253",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "946fb028-e804-4da6-aad6-245d5d7226fd"
        },
        "item": {
          "id": "e62165e6-52d6-40ac-b927-a574d1ee65de",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "57721fe7-8ad8-4148-bcc6-0a73c4952f6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "563c66d3-48a5-40e5-9789-2b45953e8066",
        "cursor": {
          "ref": "018fc448-2292-4e8f-a0ec-e6ba43cbccab",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "7de53d1c-6e6d-43ad-a8bb-4f5e0ad15c15"
        },
        "item": {
          "id": "563c66d3-48a5-40e5-9789-2b45953e8066",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1dd7afef-6d88-4c0a-a9bf-22c1382db6a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34383042-f62a-4b4a-a9d8-7c45134af8e3",
        "cursor": {
          "ref": "71df7237-a1d5-44b0-9bf9-14a76ce73f60",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "e0ae6411-e5be-4382-9109-4c1702138769"
        },
        "item": {
          "id": "34383042-f62a-4b4a-a9d8-7c45134af8e3",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "61c48a14-2342-4356-9e83-3044efb1fc4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c458ab-cdfa-4b75-951f-47178c1b1014",
        "cursor": {
          "ref": "ea424d9e-8a67-43ed-a184-8fac3b7ca308",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "2d1fa50f-a7c2-4ba1-8683-14ce34d25c1f"
        },
        "item": {
          "id": "20c458ab-cdfa-4b75-951f-47178c1b1014",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "88bcd970-3871-4d27-b415-7af4097ebe81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d386b6f8-7f46-4959-bb23-b8d0d3082ed3",
        "cursor": {
          "ref": "8437049f-0406-421f-b229-a1b46b075843",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "a3be79e5-64a7-4b7d-b8cf-6c05c94cfe20"
        },
        "item": {
          "id": "d386b6f8-7f46-4959-bb23-b8d0d3082ed3",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "7535e89c-c2fd-400d-83a4-d463e9e4533c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "543f843f-de5b-4c11-b8d8-4386d86746c1",
        "cursor": {
          "ref": "a40dd838-85b6-4fa5-98ae-2e0bd7d1977f",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "b05f2217-2bdb-4c28-99b2-a63f201e11d4"
        },
        "item": {
          "id": "543f843f-de5b-4c11-b8d8-4386d86746c1",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9139099d-5ecd-43cc-80af-c7d3ceb76b3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4527a48-fb39-4f27-8743-fc1130644a56",
        "cursor": {
          "ref": "56bde86e-7566-4748-8d03-9ef008d3b464",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "04065d90-6954-4f52-9714-24ce6ca7e835"
        },
        "item": {
          "id": "a4527a48-fb39-4f27-8743-fc1130644a56",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a6a48f79-9d32-48f9-a371-321f2dd35a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb0ea9c-ddd7-487e-8e84-faf84c1ccbe8",
        "cursor": {
          "ref": "e50ed636-08cf-4315-b004-91a9533fa891",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "ebfabb75-89ee-4149-ae07-a970e0ba85ad"
        },
        "item": {
          "id": "bcb0ea9c-ddd7-487e-8e84-faf84c1ccbe8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0823aaf6-83d5-4726-839a-95f77dc4aca6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb92b677-d1f9-4f68-b02d-ffdd89d9b76b",
        "cursor": {
          "ref": "f9562b93-2830-4c2a-a81a-ecf6f650b4d1",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "9304c3eb-0770-4a3e-9bfb-823f79f79cd1"
        },
        "item": {
          "id": "bb92b677-d1f9-4f68-b02d-ffdd89d9b76b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "608ecd66-09f4-49f8-b342-a4d5697978b4",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "335e985f-d2db-486b-90c5-c75f43e56b17",
        "cursor": {
          "ref": "284fdcd5-abe7-43f1-82ce-bac002deb050",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "d1184245-05be-4ec7-bbd3-47373ce725e0"
        },
        "item": {
          "id": "335e985f-d2db-486b-90c5-c75f43e56b17",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3cc005ee-03c1-41ca-98ac-c4fa013ede5b",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5fc0962-d860-4d3a-ba93-cdd1217b8ded",
        "cursor": {
          "ref": "1d3bf0c0-8d42-4a5a-b0d1-f837bc709a0d",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "d0151b56-0551-4126-a581-4e15dd53cc88"
        },
        "item": {
          "id": "e5fc0962-d860-4d3a-ba93-cdd1217b8ded",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e1f937a3-74dd-4a2f-9a92-d5102f735c9e",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce40f2e-86ec-4346-a4d3-10d88e51acf4",
        "cursor": {
          "ref": "bb07b698-712c-406d-a4f9-8028d8e31daa",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "433ad048-47b4-44a8-9768-919ac1270c54"
        },
        "item": {
          "id": "fce40f2e-86ec-4346-a4d3-10d88e51acf4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5ff88e64-1529-4e26-864d-24d084cd8ecd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce40f2e-86ec-4346-a4d3-10d88e51acf4",
        "cursor": {
          "ref": "bb07b698-712c-406d-a4f9-8028d8e31daa",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "433ad048-47b4-44a8-9768-919ac1270c54"
        },
        "item": {
          "id": "fce40f2e-86ec-4346-a4d3-10d88e51acf4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5ff88e64-1529-4e26-864d-24d084cd8ecd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f444b66b-e0b8-48b7-8b0d-4806c4886879",
        "cursor": {
          "ref": "60460053-d85c-4713-873c-63d3dd198ade",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "fb77ba1f-bde2-4ccd-9095-fb2a13e3cd71"
        },
        "item": {
          "id": "f444b66b-e0b8-48b7-8b0d-4806c4886879",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "10e6ec4e-8401-4642-bfeb-90fe6226b18e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd60670-23fd-4557-bdd6-1e3153982186",
        "cursor": {
          "ref": "f1afe020-30b2-44ef-b953-df36ef479336",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "6acab79d-6c49-487d-91ab-baaaa28cca2c"
        },
        "item": {
          "id": "4cd60670-23fd-4557-bdd6-1e3153982186",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8b39d68e-2624-404f-8b2e-f1fff0bf3202",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}