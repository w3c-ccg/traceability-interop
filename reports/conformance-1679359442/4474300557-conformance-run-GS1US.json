{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "962bcf2f-cb90-4e91-888f-e6f718bd8403",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3ec9ead0-b811-419b-95b1-960d1c99c185",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3ccbb6da-274e-4b5b-bf97-9454ade568b7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c6e9ccf5-0581-46a5-a5d2-f8bbb15bcfbc"
                }
              }
            ]
          },
          {
            "id": "5152a79d-3b31-463f-842f-00e034976a97",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "22493cc5-37e3-420c-a438-584798b0b80f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fc74773f-fb42-4b1c-a7c9-591519236d23"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c45d0731-6954-431b-832c-ad208cc6d445",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c5c5999f-45fb-41f6-af7b-4e7e68dafe86",
            "name": "Positive Testing",
            "item": [
              {
                "id": "14f41c67-47cf-4873-bfff-b39ef89a684e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f333b047-25c5-4b68-b927-ea62fa24b405",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "63c0368e-e15b-41b8-83b1-91813812bf45"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "55f996b3-c5de-49ad-810a-e38e00f8ec13",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "37fba9e5-1710-4386-9b7c-735893acb4c3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bb3782b4-6f6c-4ef9-aa9b-a6170474bb57",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "446cfe9d-58c0-4dc6-a8dc-57b2d3dc4519"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95b719db-8dc1-42fe-8fd9-e8b3ad3f2dd7",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9e97206b-ec9a-412c-b841-2b2ca7a8536c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce7e7d0d-8616-474c-b090-e8cf5afd340c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2fae7645-26f0-4ed3-9f50-08b6ad46fb73"
            }
          }
        ]
      },
      {
        "id": "c56ab1c7-7ced-4dee-87c5-0c688954634e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9f02530e-80a5-49eb-af77-1d396b711c1f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "171bde87-973d-4d27-a359-d4046409a9e2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ff3a178b-fe77-45d7-a803-2b3f4e10d2f6",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de9ec52-ada7-4591-8673-55add4362199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fcb1f579-783f-427d-9bf7-9887f12877ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bbec8a7-dec2-4c09-9528-9f70360983c1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c397e5-1541-4b64-8d64-792ccf70ecb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0eceac03-c142-44de-af15-9a914273724e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77601fe-5a46-474e-9db8-04d67f6d3ed7",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7a690e-6a38-40d2-8508-acdfdc30eaf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a540264-1e03-4240-a69b-67e54bb4a50d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9c122d0a-ee26-4844-b067-468df329798a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a357fa50-a9ac-427f-9824-2b06be1c4ff9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e0a2a5-6a8d-407a-a1c0-e96a7dab27f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7d48ff5-784d-42d6-b44a-a42de041e308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "495aca98-5b1a-4cb5-9188-fca0d3dfd640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95ad4ea4-bbfb-41b9-93a3-0250fdeed97c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4f8aa6-f8ee-41eb-b373-6c472f095237",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35742b3d-b536-40bc-a7ed-e2a152cf55cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec65aa02-bfcc-4291-a090-7d9594285526"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26bd676c-3a14-40ca-81e9-e6de9f55bf63",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "b1f61d16-1e83-495a-bb0f-84ae27749e81"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "358f6c9a-6a10-46f5-b27b-df9247f641de",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4cac3fe3-8fba-4910-835f-73400a2db18e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fa0909a-94e1-4243-b177-54bfd9652cfe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0b81c030-af3e-44d1-8209-e5c11dea5e77"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62b38032-53e5-46d2-bd21-3d19382d0b2a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "2131a25c-4a60-4410-83c1-40b313811e55"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0d4b487c-a594-45f6-b918-07563473c9bb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8a4622e5-80fa-4a71-805c-d1676edefb7b"
            }
          }
        ]
      },
      {
        "id": "7577096a-7ea6-4894-b568-a7ff7e479f66",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "30d1783a-4335-471d-8d4d-5a150734d168",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5cb62c31-c6d9-4631-bcf0-68e0bf600afc",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7479e072-b12f-4e5c-881b-9f2f1c8a30f7",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "772b3e66-75e3-42db-9a57-cc895e1c6ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9edcbf28-ec30-476a-98b2-1c6508420c25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdaad5b8-9c71-4c0c-8806-3448264656e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4df16847-de8a-46f1-9959-b8f26f0d31d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae56d699-a3ce-469e-b3e9-bc19b515a67e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b1f6b3-3dc1-4a95-a295-a2219b2bf220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df97578c-349b-49b9-b024-856f565efb0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f0412b2-2d28-4d59-9531-d2b283ff532e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f45329df-6c96-4baa-82ec-3b6ba344bb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d866eb7c-6b62-4141-95da-7d070a6bb8f9",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82000c0b-9467-45c0-9cda-73e5921fa23b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20a12004-2642-4482-9276-c7e59098d45c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62579d24-72b0-4707-9a10-ab9fc023a41f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b488b5fe-20d2-45c7-b2d3-03f06a678a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de470af-5a17-4f4a-b8f9-bbc5b81ed241",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "986d41e3-6db1-4b27-abbd-8e7cb227653a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0700c4c5-4b14-426a-9d9a-f1d50b0ee44d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d23ed91c-3f91-4aa8-b1c5-b9ad43569f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb5f32ad-8f5c-417a-b65c-438c91fbc040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68047e16-b111-427a-8be5-bb21216db096",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab6c955-0341-4d14-be3a-19e746f8f282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11474d11-3ff8-4954-9845-bb39e2d5a892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d945b8-be89-41e3-b012-eef021689c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b3cf04d-e067-4445-a904-53d44c62b5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a9d0e5b-d908-4808-8710-10553335ea5e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ecbe18-3722-43f7-9748-6a07d1d48648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e609d9e-e181-4ebf-a2ee-a68fdf46bda3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34fba242-016e-4582-867f-3898473be3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "294527d0-dd81-4aa5-b7d8-f3dab199d8fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d6014f-28e7-45c7-9f5b-9b3451eb70f1",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06da655-db64-4660-b7ac-3a864910d94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1314674-5a8e-41b3-aaa6-2b085c7bf794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b9afcbd-3b34-4f2a-9764-530632869fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d914a6c3-066b-4ed4-80da-cd28e7414126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1731c9c3-dc9b-454a-9571-bb4db00ad6c6",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50824ef-ed50-4561-9ea8-f1c353e4893e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66751230-6be1-47b2-844d-bdc8df91874f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520ad15d-0515-4124-96e0-07755a2208f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b394203f-0138-4d9f-8e52-d5f9c7bd5cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b04b01-3937-4d07-9551-168ed04b0fa3",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ae25c5-a06d-4fbb-8897-dab1c6a02a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e575b78b-11c4-4f3e-84c4-79c59ac5049f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a8ca217-1e13-4cd8-94a7-7429d40ab408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "495a984c-4daa-47d1-896a-a13b3cd007e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16383b7-57ec-46ec-af86-bafe30c89b07",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd88195-5a17-416d-a6ba-3958d802d67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f8acb75-9c1e-452d-af69-2426ed9a6203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b5cc9e-6cb3-4f1a-a4ad-1c62aa7af759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6010898-3da6-4a56-a5b0-34c1b79fd214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655e9dfd-2c90-435d-ad86-628fc5e6068a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba11e75a-0f97-4d3f-a381-a56b69bc0ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56a35156-348b-4a99-b06b-23d3b57e089b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cdb95e8-353f-483b-84c7-f6dad9feb4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07bf6a2a-ed84-42a9-b57f-bc7ddcdff0be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83669a90-e82d-45a5-9068-0f166ba363ef",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1441928-02fa-4a6e-8b0e-45a8382bfc89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f7924e-b2fc-45e0-a230-235cd4c311cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0209906d-a959-47d0-a247-a2e1b43a4f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a84a8385-6e04-4e02-a7c7-31a7a06d2ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5d8546-4a0c-4371-bb5c-d66005e0ba2a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0607b8-117a-41cd-8202-c882ea4a051a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22c13337-34f0-46ae-ab0d-69d83d3d2183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e03ba0ef-ac9b-49d3-8f82-7536f4bcc5b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c894a1fe-506a-4160-b7d8-d8c575915f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e157015-fba3-49dd-8e27-2d9ddd161800",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "351297a9-1ae0-4a86-a6e6-d059930767fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4193e80e-e299-4597-b300-8458b9a90abc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a1e0d0-51eb-47d6-83ef-7fcf3d451349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a7eeafb-0314-4559-8fa6-4ee99b0bf8d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6287c4fe-1382-4ebd-9d05-0c2e37884656",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6901d49d-895b-4b4b-bc5b-7008c029cc85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7456aa82-0d03-4b08-bc64-3097b20d23a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120cda32-49b9-452e-8591-9e005d8e66c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47952772-cda4-44ca-9463-b107485d002c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2256466-f6fb-40cb-bab6-385edf233f20",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e2708f-b94d-40a2-a695-f652a3154318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3881567a-c30b-4d19-b500-9e4f4f449d1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf9c7d6e-750f-40ff-98c2-91e398c1a901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e5d92aa-4060-4f9e-99f3-6e907e4ac63e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25968987-00f2-473d-8a54-7a429db30b2f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1d6b6b-3102-4642-b29d-a8e27c141050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40fb7229-775d-4e10-a0d5-2145a6b45074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb0422b-ac27-45f7-990f-1d34f0577c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12d93c6a-b326-4274-ae09-d9c02a66ca41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c90b643d-8b99-4aee-9bad-c74fe9c5a365",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d1f0bb-0cfe-4ae1-80b3-eed41832a7af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90814654-7c79-4220-9a9b-220e364fc0dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b14512-592b-4259-bbc1-4e92a455515a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "eadd08f3-8529-4674-ab6f-4b87efef2ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe41c29-9c82-413a-9b4d-b35a1e5b027f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0bbd92a-dc94-4d16-8c26-c2bce16bfaab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d916925a-26fe-472c-9bb1-8e3471fed1f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2104a646-f923-47ae-9718-ce15b53bde43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "06ac03da-d01d-44e1-805a-1ed58aa21a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad4989e9-4a76-48fe-bedf-c0f61410de9e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e24214-0992-4312-a913-1dc20a7756ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ad67736-9d3e-4ff5-8a78-584847dace52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8dbc427-597d-403e-aabd-819179980ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "940cb636-8de2-4ceb-9674-1123a0ab1c6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89466ccc-2ae8-45e7-8eca-33b40c4478d1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12023377-76b3-4f90-b390-dd3b77556c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82ccc00c-e59a-4c29-bec9-e4647407363b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b3b650-27fd-465c-814c-d1d42de1ce1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "444d4be9-2cc1-4655-9312-90bf6e3178e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ab6756-4de9-4766-9278-d2729c994ccd",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b11ef2dd-8733-4fa4-92a9-bd5a131038a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ca3276e-ec83-4907-a080-817df817b7dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4afa4865-e81b-497d-b9fa-1c2cc46bb89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8659913-6f77-4550-9212-615ffc47a976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f295431c-11ba-409d-adcf-8eb40b6f9ad4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "534bdf59-0b30-404d-87db-4fd6e510fd12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a9577ea-1c06-4dd5-b374-e44172025ad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ac4a25-e85d-4273-a229-ec643ccc9a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "065aa20e-4be6-4975-84f4-1417540fbee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b291d7a2-3e64-4bab-a43e-68eebbd8f48e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1420ecc-3980-4c51-9c65-d1c016761459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b655058f-7ffe-4252-96ab-111df0665b3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0016aed-321d-4450-9e6e-93b121f58aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "81d2a8a1-6902-458e-88ad-6ee9d8ffc2e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e729f86-fa19-476a-be1d-476f491a7781",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efaed127-a1fe-436f-af5d-f1cd296841d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ca4cb0-52af-4dce-964c-951bec9be31c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31574ee1-9ecf-41eb-b1e1-a6ab0510fdeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "376e7cf1-724d-4bb6-b6b5-4ef47a9cf523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e10cda-66c8-4688-a17d-565ce7828ced",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47343eb2-284a-40a8-8925-6d332dc65efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79aee9cc-00b5-4976-8614-462e85a5705d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab4382a4-037c-4e88-9f9a-8c3d57708434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "33042ca1-c1d3-4670-ae1d-2876e74bab8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23281a40-5024-4035-a99c-8962238e8478",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ba0258-6fdf-47a4-a230-95fc084d563f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "050414c3-fd92-461f-b43e-eeebd4dbcd4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86dac215-6754-44f7-a59b-94ac5c7730da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "42df9d8d-af53-4de6-9f02-f1c94b3bd7c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22445d84-5e01-4a73-b8ae-c1b3d309b1ac",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83962842-7e7b-4dc6-8a3b-e889913cc197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f63ae31-c467-4568-9a56-0a332398b858"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8a02fc-8f6c-47b1-aae9-4b6d61f09a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a914ea8e-d52c-4c87-b2e6-0b4395aa4f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c350fb5-3ff6-4269-9636-66e4fee77cf7",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d31532-cf11-435d-a3a1-27f670a38291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd2737d4-57a8-4764-ba28-32c3872832cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d415a9-fa45-4b7d-ba3e-77a1f7d75bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5450eaf5-6f65-43df-b610-194988a4324e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1838976-63a9-477e-aec4-df7d15f0b96d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b25ec70-39b2-4410-a84d-71b0e5a2c5d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d192f40-5c18-425b-8e59-d4fca3139505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac6a883-951a-4033-9cde-083f7aadf942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f70e46a-a65a-4e9a-ad67-2b48f1dd03b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c29ddb-f741-4f7f-b9d0-f573d3375468",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4798f93b-2923-489e-8ece-19cf1333cb36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "023c2446-66f6-40db-b17b-ce758e095de2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ef2f1d-12c2-452c-8796-1b95e5b0f4b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8da3b1b7-f873-4230-8950-2704dd8c2e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d511b2df-f3df-4773-8ef8-2306c933e45b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30736ae-3338-4ed4-9c3f-144ce70e3186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b1e99fd-2f29-4ad0-848c-16a4720de8aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9fbb443-3c28-4d7b-8995-ad81e86a8db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc35a8af-b171-4cf9-9ed9-c68caa114e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c13b8ced-6f67-4a81-8e5e-d1873395b8a1",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f7e4fc-977b-4126-9d86-25514700cbc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb675f9-f557-4697-a0dc-e23ec2b89ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d3489e6-6bd9-4679-91e2-efb3a70fec1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3db2230-4452-41ad-81eb-1b6be76bda07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4b8aee-b51b-4166-9bf5-815260c5a636",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be8e66f-bedd-4d31-aba7-1fab89d17a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "673f3930-dea9-45ee-ae3c-402f3ebcc9cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74910d32-2bd5-40bd-8da0-2935d3fc7034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cafdc79-c0af-4a00-9c67-cb78eedbd2f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87878ed9-ad74-4f32-9687-7650af05b122",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6036ad8c-45e2-4172-a33f-98d7fd527123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aacfd029-08b0-40fa-ae5e-cd8113a7239c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c035560-87fd-477f-a819-cc89b425c96e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2fefa909-867c-4bbe-82d2-4b15ada567f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bc620ec-a180-47b8-9e6b-db4dbfac9295",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c924d1e0-b1b4-4f5b-8ca3-88f4e89266c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5623595e-2f8c-4ae0-8bcb-edb8a1759eb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496af33b-218c-4d4c-b951-1d4ac90ddefc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b7d96157-e885-41bc-adab-c62c2f9dc51f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "412632cb-07aa-408d-99dc-740a3826867d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f6e00c9-b467-40da-8410-bbd69fe01858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9846d65e-c31b-430f-bd39-ad12e70d1c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "495c3a77-a430-43c5-beb8-d07af5960cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e80bda0-37dc-45a1-8f8c-226a2a225f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e402cb17-2168-4010-be8c-382284d4ba9e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25487b51-d85c-4f7b-9335-2ea33592f676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acab399c-9ec4-4dd9-bd80-e80ee439eb5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62087d1-c39b-4280-8902-a71ce2ffbbab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6909dfdf-2d57-4a99-bbcb-177b9b634348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c5e25f-7899-4227-900f-c7b7399d46ec",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e32a5c4-aa5f-42e0-b7a8-679f277634a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecb2d799-a7cc-44b5-a6fa-6bfc433a0e51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2f623f-a9b8-45f6-9ba4-31590b04e7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9aaa18c3-5353-4ad1-a823-1e3af117b4de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea8469aa-881c-4528-bd93-b6406028831f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57fc95c1-e96c-4e60-a834-2636169df5de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64cec992-8299-41a4-b9f7-06631b2800e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d92e1a-f7d7-4257-a596-8145cde0bc7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2c3234f-a96a-4ae1-af99-e4a2ad006bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff561524-4fde-4c1a-b161-acd90ab9c42b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c78916a-43c7-41a4-8986-55b7614ca866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02bbd928-f27a-41b5-a21a-a1a8be0662ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df183c9-d24e-4fe0-b31f-fe1a3c3084c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5130764c-3eb4-4c82-a486-cc6bb82cfd89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff15706-36df-4721-994c-614d7ad784cc",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a439ff-2638-486b-94c4-b27312cbf167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af179f56-ab47-4d1f-93ea-750cf481a8d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de269f0-0f67-4958-98fd-5a19b67bdcc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5c98cf95-c666-494b-b631-9da1764a1e7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b9f0d5-522c-4cec-b622-22a51372c22e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d20d84db-d6a7-4a29-9b21-7679031a0579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80b2604d-20bf-4177-886d-9c7eab8fba29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3d3bf6-941e-436a-95a9-5631a009f0d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee38d5f4-5057-4d92-8f4d-72fd777b5017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6416d791-ab95-426a-9f6b-692406630270",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f632909d-35d5-4bb4-9421-9941e440e8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afc502ce-7464-47db-901b-3123bb653ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b58a51-e3f6-4092-ac6b-5c1a9c0a4908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4c2729f-b974-46fc-8bb1-1ab0fd5a0f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7da6eb1-d61e-4a4f-9e96-5bbe4daa0667",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86342798-15f0-47aa-9b07-a7a073f2a3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3470b3de-0e47-44c4-9898-1a959e1145bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3b43a7-616d-4681-800e-d620ae89d639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aeceafda-39c2-47a5-99bf-a778a6302f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc505cd1-835e-4b2d-83ea-f9fd4b18aecd",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ebee926-6ef1-4265-9ec5-ef3c7598ca8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b7b34a-335d-4239-a537-122336b53630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c34d77-15de-49ba-961e-6805ceef8362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8481b776-696f-4531-9e8f-c33835d58713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14e03dc-44c1-44f4-a484-ca65c813aaaa",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15821383-ccfc-4414-a979-409d78f5481e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d1ed84-100e-48ca-9ccb-fa5cd3dcce2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd79bbe5-77e0-4432-863b-fbd4d1a4f057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5df950c1-84e7-4930-a6c9-460be43e5a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb853d7-0596-44c3-bd9b-38258329b8e0",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67157889-1f0e-40dc-9edd-a7520ab20d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26e4f106-1856-4972-bc8f-00b250f3d34a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6d28cc0-0e2f-49b2-9603-f091c27974c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "77a6b563-748b-46f5-a9d5-d1ae79b8837b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e52b84-0399-4865-9a62-6d857270461d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed59727-4ad8-4274-9495-ad9c2b5ebc8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb4e3321-2f7a-4363-a810-d289c9047ea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "055f8bb0-c8cf-4e31-9261-65799eb2b877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "06866ad0-02a5-49d4-86cc-a498ff1ed4fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6cf5818-1af0-4eb9-a39e-03f1c6b59f48",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8bede19-0184-4aa2-8b0d-55a383c3f13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c1a1e35-ed50-4e1e-8b6c-af92045ee59d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ad544b-71d7-4c19-aab4-97c086110ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7cc46b5e-0f73-4371-b0d0-bd48bbf19603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c9de1a-8776-4a85-887d-769a9785efac",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ddec6cd-1499-4204-9edf-82632baede60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66835a58-fe45-4842-9a99-68b38a0a79bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf95ff6-70ec-4461-b42f-af20ff02a38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "28d9c278-b927-43fa-85a9-de9637995b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27790fc2-9410-4098-916d-ddf8af916300",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbfb9f44-0930-49d2-9467-2bf7f3e521ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f17c545c-f9bb-4e7f-a2e9-3636057cc1b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d43664-7d4d-40f0-b9d3-aceef678bcf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb1a4503-0148-42aa-8a0f-d37ce04ff0cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4553b9eb-471b-4c65-b16a-20eed748bf77",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a376ba96-e35b-4f4c-84ff-77a9294cb5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fe5f67a-61a2-4477-b9da-5882fed0b33f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c187fb-0cbc-4604-bd1e-9d3d8c843c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dbf2c99-0788-42ee-8a8c-1fcaf004b887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed25610e-ec49-4788-89a8-693e0cae312f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c97301-bb23-4507-9b2a-a498eb700bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc6ac2dc-0a1d-415d-a47a-d872dce883a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d7fb47-d1ca-4b99-805a-fe94e0fdd1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "48d5dc60-e5d2-4a3b-80b7-7a376dea1b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0058261-d67a-495a-a8cb-a63ff0f50005",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "554fd0e0-753e-4f26-98db-9559c0c458f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7ae296b-509d-47e5-bf40-e4211a1703c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddac64c9-49e6-4e09-8a28-6da2ee2ba1ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "623db319-1a04-46da-87f8-f9c074dba1e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a3acd5-90ce-42d0-939b-c1002c38cefe",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc82b86f-b947-457b-bff7-5f9c2f5d6569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46a18fdd-d0c0-4eb1-9562-13b047811e71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d1084f-ac35-4d2e-a6d4-7977adaf65a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d3c86dbe-c4b4-4e3e-ad8a-1e5c88177cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340f966c-4fb3-4edc-a6c8-b040fb02fdfe",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ca02ba-c57b-48b1-95ca-7abdf89602c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "679a567e-fa9a-4f5b-8000-7f432f2db3a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f875c06-27ee-440d-a816-15288ebb2f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e32c51a-85e4-4eff-9181-c1cd3942bfc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "026de07f-c5b7-46e2-bca0-c2ad09b72978",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "821af468-f234-4232-a602-74beddaab5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4fad879-260e-4558-a295-6f3a2bf1a455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061484cb-7185-4cf6-9343-5fee5b84dac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "874fdcfb-0f94-4996-b21d-d6c544864e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bfbe4a9-8174-4dcf-9c7b-f861a83d7cb3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28fcd15-8d01-444b-8968-4e2cfeb867e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a76e9698-5a21-440c-9091-3cbf43590df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd74b38f-0e76-407e-ad37-8ed5d424856b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd06c34e-1968-4c0b-88d1-54dea41eac8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69d1558-4ab9-4b84-a04a-90e14478fa92",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "481448e1-dc6f-4cd7-9490-e609b10587e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc9d0d28-ad37-4a3a-8d56-2ae26fd87983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f844d05-27c7-43fe-88ef-2ee65f19c946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6428e15c-d0d5-433b-adf5-e16576625cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e121327-92fc-4986-b4ea-41549d8f1547",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2359fd66-75c2-4f84-bed5-96fcb36d2733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4bfe92f-90f0-4521-a6db-5eee55b27858"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af000e7d-97e8-4539-814a-b754d8f4b824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d727e0f-8117-46af-a863-e52d271dcfcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef652a1-8c0c-4724-9d71-1373624fc3e9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d47ebcd-8968-4c5d-b896-82c39da14d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e59e3a9-c075-441b-95cd-c60f35eb95a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1fdcb9-836a-4b25-aff1-297c45dff096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f876544-887e-4c86-a7b3-41eb583f6036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be53a213-d691-4268-a7f4-0681535387a3",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53bb3f0b-eced-4ffe-8b86-5fa819b1462a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcafe43c-13b8-4384-860f-bc36a2ee0090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8735b4fd-8bcb-44dd-a72b-818fa58652f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b0cd477-7be0-4602-a415-9d6c0b672d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396d643e-3093-4f09-8f5c-49aa41fd5ce0",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ff3d40b-a31d-4c81-9f91-21bec86f9c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1959ec18-98a4-4291-ac0e-6d26352545ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ffe7c9c-10c7-485e-ad38-7a49ce4adee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac75c9e5-f0d7-4d12-8e77-f34a298a54c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4765e412-8435-4ff2-b71a-019d8cf098e2",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a371cdef-e1bb-4944-8903-8155b07d4aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "253c99b6-7727-4b22-b16a-17bd76cd7d10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe4f133a-0357-4e1c-94f4-ce3b7a988a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f6a3a72-e145-4396-b91d-18fd810eba44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ba5eb4-f9bd-49a1-abe0-ff2714c341f4",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6eb295d-99c8-418a-9f40-b7426088bf42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58930721-dbce-4259-955f-63369a12922d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a58f50-b924-40bf-8ad6-2c7c634635f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcc046ad-86c7-460c-b1e1-f0f0f70d6deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e64d06-7b5e-418c-abf6-1b40df4470ab",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "427f283d-ad8b-4f73-9c63-fff6f4df0470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a54d23b3-2ee1-4401-b304-5d759ecfd4d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee3153b-1b6b-4e35-b8a2-b18bb2570312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8d67f86d-df49-4e54-9219-9778b5fb391c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0098625-9500-4667-82b8-74b7e3066704",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "223d17b5-d938-4ea2-a1ba-96de7a888816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c18507ec-e433-4809-8954-4d4bbc11b0b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c6ffae5-1114-42a3-9257-43489f986ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "273d62e3-a8b5-4b45-9d53-1ce1dae49a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c240976-f62c-4ea3-a8a3-538eeaa03885",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da23887-aa62-4fd6-b1bc-5b5b605463de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "387d601d-e4cf-4160-a489-c9bc55078f36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1b5b15-e4d9-472c-aa12-3fd93d7e52c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b4b49f0-aed4-4971-b50b-74269ccafa78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7109a35c-bab3-4fb2-91bf-c8a2c0b5932f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d754948-669b-41a1-93ab-abe48fd302e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "143afd19-8a53-48f2-a35e-4082bdf21713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7260ea6e-5dc4-4637-bb03-4ca722a8a704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "307c5875-559e-44ce-a210-d3ec77a4cf83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe5c0fa-d99d-4b1d-907a-e4589c048dc5",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ecfe05e-88ab-436b-ab4f-1d9914713452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37a44545-218e-4561-9f52-0cb09bd57040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907508f5-cb44-47c6-9782-08055fcf7b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9bb6d29-a366-47cb-bcdd-4724f941f952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db315f50-b548-4b73-9b35-a0781fbd3753",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b4d1e4-cc0e-4af7-a172-f78812b408ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd1056c2-ac62-496a-8c74-72e38c4ecddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b06acfa-ab02-47f0-8104-a10498832cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f220000-aa27-4687-ba35-85aaeccd99bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e47aaa-9d88-42b5-ad69-322452e79272",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6281867-2649-4bb8-91a9-9727c1365f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "125fcc60-abc8-4d14-8cc3-3261087769dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c9d7c1-ce38-4dfa-8dd0-5baf0931b69d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6bbc0d6f-d1e1-4292-9e3c-c1e715ab121d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3109a12f-d9c1-405d-8fa6-075628775c8e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b397cde0-3aa9-4cf3-b15a-cbd76b31730c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f848effa-7840-4442-aa87-fe46e07cf05b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72fc6867-a4e0-4ff8-9bc9-f08e0ee0e1b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "20b6fb92-7377-4540-ae28-73294f6b8811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce393480-a167-47af-832d-699c08579218",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f8fb4f-f728-4097-9cbc-477e8ae3cb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d695bed6-f761-46b9-b511-0f30916e300b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a8e971e-ffc7-48f1-9aac-6c109e4641ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a71c570-af87-438b-93ee-fa31695f71d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ce65c4-34c3-46c6-a6a9-7b2e8cef5b42",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b3f28a1-c6b0-42d6-aced-6ae8b607ac70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9e380fa-6a5e-4de8-ba79-283c24e2942f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3038f85a-0a07-4a72-a5ac-0dbb8f2b3f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7595d83-79f7-4b43-89bf-3001a64fbe33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1362f806-f5c9-44ff-b923-b23f2135a526",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8657dbc-ab2d-4b5e-9ed7-fa365b740c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65711a01-a617-404e-bcf6-b86bf9974d16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b98d868-1325-4324-b0bd-d51223a40d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e96be983-2ac3-4b8d-805b-d3a26e89ddd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c813db2-79c5-451d-80a6-4b9fa39ae18f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "088f702f-50bf-4bc3-868c-69e0b6496623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae54093a-abd7-4559-ab3b-d165b32db994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6cd41d3-dbe0-47c8-b576-4c114ef0a037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a52ddd0c-e003-4f60-a72a-54238b1b7509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dadff7af-eda9-432c-9397-9aa0ad85e625",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a3872bb-a81e-48f4-994a-1bfc8da4bfc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a89c7de-28a9-4411-8382-74e9d8083779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc64e887-e11c-499d-8b86-03390556f842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c03b4c1f-c7b9-40cb-9c37-9fc63922f54c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76768e3e-e90b-4aa1-9359-2decb213cd35",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab320767-6baf-4d1f-877c-6d9657473be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d584e58-3c45-4caf-9501-58d4511d1172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22d66e8-e0e1-4b27-a42f-0b11075ae8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "990ac054-732b-4595-9a82-c11fbbb35b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a242e00a-feec-4ec3-882c-47da2db3c533",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeefc76b-7857-43f4-8ede-da65934ded15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090e595c-ef08-4436-be73-13236836a46e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95ad4d63-e1dc-48a9-b599-9f09df23f4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e54695be-2a6a-4676-a7e5-8d7331ff5eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad38184-81b4-4044-ab5b-9d0c6b43f240",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52b3b5b-268b-42a5-a5e8-0f2e7aa1f7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d9ddd41-e847-485a-b5c8-e3862a7670be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d919aa1f-1a92-4774-9f9a-644dde103b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec0a0604-8b69-4f65-b5e0-b9fa77aef91a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52cb89ef-ed18-4ac4-a9be-a9332eda2a42",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aca5124-b187-4576-8e97-11301c2faf83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "549a8cae-6e23-4cab-be87-b088f5249492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be7c469b-f779-4834-b080-d93d5277ee09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c739651c-9ca1-497a-a54d-1f2ced318d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48b374d6-801a-4a05-af15-aa50c828aaf0",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d799942-1920-4a5a-898b-5c3cd2028874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76519bc8-a189-4a7c-ba81-a2e2690a2344"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd7a84ed-b8b5-48be-9e95-f5c22516ad06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3602ba1b-b3e1-4727-b6b2-d8f59d96bef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17e5edc-9cae-4280-b84a-7797f74957d8",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d51b60-bac5-43f5-aa13-3e3ff11debdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45b0c9e6-2120-4cca-9e55-e5e409d6ba59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88917885-2e06-46f1-926f-7544624ecc9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ed01808d-4fa1-465c-820a-bc2ab16d5071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6c92e6-2b8e-4dcc-b570-4c086f3e10f4",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d746677-0d62-4d9d-92bd-846654eddf3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785bb5e5-7b26-43dc-9f02-d34390b06965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a7a9d4-5a44-4417-bab9-b9cd5b293c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8e7f63-b463-49e6-b8a3-27b069505568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f957ad57-1fda-4760-bd54-7a97459ef38f",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d1ba4d-d4c0-4516-b65f-f075b04daa16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f8a901a-1fbb-40ac-8f3f-bb94abd147d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f2372f-c19a-4506-9948-d650b3f42b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9afb1b95-78b4-4c90-b933-58233a603c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df69d92-490a-408a-a473-14843cce8e47",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd6a1e1-809c-4f88-8e40-27c7275dc82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "637d6c16-9467-442a-906c-333a79157cd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e51b5774-6617-4f77-a45b-73ba9f98d89d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b30b079e-10f8-4bbf-99e0-e6c2650fb258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90881943-59a9-437c-8e5a-1ddc29044a92",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ac0c57-5e75-4f94-aed2-e9860375a3fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd2a7869-27bd-4f8f-99c9-f9640aec34f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f39a8b-99a0-44ef-9095-0ebe793a0c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "edce34c3-43c7-41b6-b7b7-7431f440c2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a0f8e6-844c-4cd9-a94f-f71628f920c7",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bfe21cf-735b-4b42-a53c-ae980b0dd3f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75b6f5b4-2f44-4d95-b9e4-340f5826f3de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580198d3-01eb-47de-a27a-21e3cea5a328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b2b097c-ae05-488f-8646-70b8b9e89a29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68fac11-3cbb-43fc-88fe-d6607ea98141",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1487a2ac-1d9e-484a-be80-e134c9b43b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c24cd913-9cb9-4842-a344-332275dc2f8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d71820-7ec7-4b24-a1a8-824dcf75a3eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "72221ef1-285e-4ce8-8cc4-48594d4b3151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6b361b-4934-4c8d-8d12-795851e51d0a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "216319e2-eaab-42b8-85c8-3a8e7f24dd3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "44650284-0b3c-47a1-ab67-8528ac6ce20e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60dab8e0-281f-4f43-b23d-4264c30afe7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b8b361d-991d-4009-a7d6-c791a5fe1d14"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "97319eba-1c70-4b4f-b7a3-7a75544944ba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1e42ab53-d116-45b2-88aa-67c8008a0cac",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba1b34ec-5b66-4dc7-a1c5-28d903c5cafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "742ca9e7-1530-485c-ab21-296908dae7cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8115a7c6-c233-49b8-9814-6e186e8185ca",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c49a7397-7029-4b5e-b75f-36f5f2a4c7b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46570761-0964-4b8d-b994-fdb33d3dad9c",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "898d8cb8-6548-4cf9-915a-84ce953fa216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c37db43-3a03-45c7-b7df-ecb8c19eabe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493b42ee-6231-4e28-a3e2-1e425bf843f3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20111f1d-60fe-4745-8010-bcaa1c4f915d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dfe02c7d-3044-4b35-af75-c4c62d9beee4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c2ef466-6e3c-417f-bca9-29945da0bca4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "07b791f1-2c49-4d8f-b852-fdc26bea76be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbbe6397-bc4a-49f9-80c4-9dac2219a866"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fcd573cb-69e0-4433-b227-87668802fe32",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c621cceb-6c4a-4143-9f38-54f7bb591ddb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0d4e4287-d345-4f48-9905-b726b1190a92",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "670f0418-b99a-4914-aad4-8ebcb904b339"
                }
              }
            ]
          },
          {
            "id": "6c726def-a7ff-45eb-bc1a-4071a2e60ae5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e2005cff-94ab-4023-9482-9cdbd1d3b771",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7d93785-f440-4299-a42f-510d782e9877",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "50647932-b139-497c-a3f5-0cfff77e6052"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3c3d981-1582-4058-8c84-ef1323b3e9d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4d715a8c-412b-48b3-95a7-0108514b4450"
                    }
                  }
                ]
              },
              {
                "id": "2c1ad411-a227-446a-a3ac-56d0e8bc59c7",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2815cf9b-1165-4474-a7c0-e156df35f2fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "521015fb-17df-46c6-8c23-497a1dca142b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4bf9f611-af9f-4a82-a729-8f5192c0473f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cdde049c-81d5-417f-a704-041828f6e087"
                    }
                  }
                ]
              },
              {
                "id": "b48d5a7d-8ce3-478f-97e7-eb7f2a13c15f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a786b9a-0524-4171-9eb3-67f5224ca072",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c9bfd9a0-fbc8-45cf-98d6-92aa776b7cbd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e54a3ef6-df1a-416e-8b52-39f193d4dacc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3bbf8f14-f110-41c0-a93b-5d761ecda572"
                    }
                  }
                ]
              },
              {
                "id": "3979e09d-c205-4523-b77e-9918d3991d05",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b74d846-77c4-4d38-9ebe-f5032886bd4a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9d475cd4-74a3-48b7-abfa-60512e3c22e3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d60da5d9-5fd7-4229-984a-1dcb2e6ae0fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "14539728-11ab-4749-bce9-0a56a8a9d335"
                    }
                  }
                ]
              },
              {
                "id": "e7231d88-8489-406c-830f-21325ec554a9",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "edac589a-42e4-4590-aeb8-890e2ccc454c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7f733b76-3302-4b6c-b5f2-da3c90a8448e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb21d30c-4a9c-4c8a-855c-e014f033be8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f15c30bf-e8f4-4d5d-81a6-abec019684f9"
                    }
                  }
                ]
              },
              {
                "id": "f3dd6640-1ff5-4087-a3da-efbde60b68eb",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2894328b-ef44-4422-9076-de6fe9c4ef6a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c79fb10f-2b17-45e0-be52-cf14d2af2671"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75d55ffa-4369-4585-be89-d3b282200e2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e44f0f88-f56e-44e8-9c29-73a99d990828"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b815adb5-a61d-4c21-921a-2b8233b7131a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3bf95a18-ef7e-4ab4-9629-74ee28dcfd5e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "edd75bb3-1fdb-47d0-8a6f-6245aaea2ea7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "89d5ab08-ba5b-4ba1-8928-420a5b9ad69d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8a88eb3a-e0be-4cfd-855f-cc9110f2b51a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "76809764-85d5-4470-9713-116bf96e59f8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d83d9a8d-a6a4-40f6-9908-d468a5acfb17",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "57b5ccb5-c2af-4658-ac50-0db1f822963c"
            }
          }
        ]
      },
      {
        "id": "9cbde63e-280e-498e-bc91-90541f4e1adc",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "aa151b27-cc1d-4c1d-9eab-1879eee31a28",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c0323b90-1765-43c8-beed-373eef2aff07",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d220165c-f34c-41de-9b19-da03b188fde9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90cbbb2-8ca2-4ab8-89ab-c1d8f0dd34df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb184cf3-56ab-442f-963a-0eb487b03205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "842b4ac7-d660-4b39-8278-555590c05b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e477923-862a-4ea8-8439-12ec7ab199ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6288f32f-43ab-442f-aa7c-e7e017009a67",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46f2839-d0ac-4323-b31f-ca09442f4977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "518e9a45-90d9-4633-8334-4b3d2b87eab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df57d2c-5c01-4608-9619-9d7d73526339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9efe7b15-7671-49bd-9063-9bbadb3366e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a64d99-e273-44d0-8cf5-ba07aea603e6",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec2dc3c6-d96f-40aa-978a-7bf7ea5cb078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "358f45aa-6ee9-4c46-bbe6-a64db375a90d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c5eae4-0862-4ca7-a5f1-1a9d92b9fe9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7f19188-f841-4199-8800-d5472fcbeaf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2428d28-494c-4cf7-be70-8302fcd67ce4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9bb01a-83c4-4fd8-921e-a147aa3418d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e84b4d9f-dea1-4139-bbe5-149054c3362b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda84065-c68e-4247-a5d3-0cff12288b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da8653b9-3df1-472e-8446-751f64ac5d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3805312-7424-4bf0-b4c5-543993877238",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce268687-a5a9-4040-8672-8d7571937ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd500396-bd96-48d5-8e71-e73e99a1da90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9325e6d5-37f6-4d08-9e75-6b8262e7ca5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c32bd0f7-abbb-4e5a-ba04-74fb1ce12279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e142487f-53ae-41fc-8e9c-e8e87b10712e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac18399d-ef69-4475-9e2f-3a4e5bfc512e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5b03fcc-53b8-4492-8168-e9aa0a8f81a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5dcbc76-6e0a-4124-b18e-29c748be1462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "01676ea5-acfb-4ce0-8cce-896d1747a6c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3af8b870-93ba-4fe0-8f08-6c7316c9b270",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a59ba9f-6b7c-4ee8-99e7-5c88334533c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f64c103a-ee15-421c-82c6-1cac54563a90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793dfe4b-e28b-48c2-9479-a9cee9719210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "41498866-6f01-45a1-8df6-21241f8a1888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1a8856-0361-4c8e-b66d-fa4845844fe9",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8aca0de-fdc5-4e45-95b0-53d7197c0627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bccfcbe2-bc07-4a72-90cc-f34287f92019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d21f953e-a521-4f9d-8d83-dd8806208231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "050e93db-0b05-4cde-b90c-489fcb6c1aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50797631-5871-4f21-8f31-2e87a6235d63",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a333eb47-c232-49e4-9ab8-f0858b70c1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e39b42e-bc28-44b1-b4db-ab0ea3a1792c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0086bf0a-247e-485a-9834-a9de05e4277f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0e10bdf-d3df-4846-b6bb-f22734549edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9932c82b-0ce2-4776-aacc-ece55925eac9",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0165ad2-967a-4545-a114-db9e321f1049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a04dd21-44ca-48ca-bcf1-bd77188ca93c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84a85c0-ff36-4137-baf9-4405dd936fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "99c0bc4f-deae-44d8-bf98-04ff04ed4369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9aa2f0d-1d4b-4099-a0ad-ac3de96c1b27",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db49c27-9d6c-4002-83ef-b6e6d710b1ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21986127-7f8f-4ccb-9296-3391c2c0aedc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aec1550-3f84-409f-b56c-d5eb6b86bc33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9b532295-8ac2-4761-91d8-0f3f47174cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651b9e48-88f8-4011-98e9-9241831164ae",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee77b01-1072-401f-a9ac-3b1a1c29d187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a659d59d-2e25-4b7a-9c40-09c99c4e5b12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893d2d79-3c38-403e-89f0-c231de76ea47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "04985353-c487-4327-a3ce-c2e5592e980d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935622c5-70c9-4a55-8ed3-69fbb96206a8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40226c10-9eab-49aa-9345-55be724d7b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c0327b8-1614-43a2-b2b8-573782012b55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a3144c-9612-4407-8f1b-8ca12b3ce157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c211fd34-a2bc-4d12-8485-23b7cf3c8ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f7a633-cec1-4c8a-bc78-5b089f86114f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c10d8706-7059-4f1c-affa-4d6377d50a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5120c93-4ae3-4e8d-a21c-a1e5c508a285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f033341d-5808-4f8a-850b-1d7dbc9fe4ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "33649a89-e933-4dd1-99e7-9f3280487a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ed01b7-fec4-4f80-8973-30044e974733",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ffc3bd-7016-4704-9d6f-3e13d0647d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf88ae72-b36d-485d-a986-b3f84d097750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b99803ae-4e0f-4b79-b00e-27ec26bd9cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "635e724c-d65e-473e-b60a-801c43a6c64a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310b703f-a0b6-4cbc-ad91-3206e4442a78",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7081e42-30cd-4473-be0a-2d5d3b232317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65200842-4c2f-4d7d-8e6a-bba4e636159f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ed00e9-6123-48e8-ba05-144cd966f0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ef56f4-0232-44b3-93cc-1cfa8a045055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb65c2d-955a-4cbe-a692-399cbc783e5f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a972fdb-421a-4d7f-99ed-6ddd03ed546d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca55c8db-5b39-4cd5-979e-b77a48cafc89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7602a947-bea3-4eda-8011-89d8f4e5b94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "47a57996-4444-4808-a6c6-2ad0ed014e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b493b13a-e72d-4137-b1ca-54142cf58a42",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11507760-1c46-4b63-9831-125a2e25132d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c283f41-6710-4130-83ad-04b1bfd735df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3ac152-8830-45b4-8c35-2b5128dd7bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3924da42-f9e5-4d08-8918-b3ba9ee1dac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b224e6d0-ea8f-4e38-8bd3-a81284f6b868",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf1c4ca-b219-4d9d-aa5b-59ba3d2e1c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98180c4f-ddf1-4798-9963-d379fc9bfba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba978881-9df6-41db-b245-def9c83d0d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4c2064f-bd64-4893-9235-770ec09615b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aac91e1-a27e-4d15-b4c3-218e51a2aaa1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a2bfe6-f9a2-44ba-a24f-cc404ff29cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74717c5d-1c94-45fa-891e-d4d326a4956a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e44f89-c57a-4260-a669-b2f7045ca2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ee4b7f9-b796-468f-b63b-05151921a670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f1dcdb-db28-4181-a0a4-822fa6f5fd95",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e294bf8f-b579-4a0f-8280-1d736f96a7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ea8547f-3c55-45d5-8cf1-39aa0832052b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ad7d95-769b-48f1-92e0-d250cdfda27a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6683687e-3c2b-4524-a8f1-885c2448a57a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a4e3c4-22b4-4846-9934-51c26c39799f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8faad20-e58c-4156-95a8-671da48fce90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3229a79-cc6f-48f0-a233-d8c6e7147de2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95405940-26b4-44b0-a165-b8b8f7311b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2617674-c884-4a27-abcf-6694ba045841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b9593c-f645-4e22-88b9-2a0f17e466f4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7adacf3a-c3b0-447b-9a38-e1df2a37d163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e58a597-69ee-4879-943e-bc85874c6278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3966bc-10ea-410c-a9f2-704732022d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90322a56-c50b-4292-b7e4-e88b74076fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b28cbf-eaa3-4fad-b19f-92efad9005de",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beedd7e2-49c9-4e16-b2d3-e37daa323c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c383fa3f-c015-4804-9a58-e529f894afbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43b481f9-c9ef-4427-99e8-16b6eab7e0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51b37227-e676-48ac-8456-1e20b4bef057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec2a4b2-3460-47a1-a040-f09270106cdb",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc40325-47a4-446e-a530-dbc9beaaf959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785f689e-49c5-47f3-9ae2-c2e7a15a749d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "064a78b3-f1d8-4908-b37f-bf54872ac7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf98fc45-611f-4bf1-9b04-0cd444db4317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1d5a46-1e71-4255-ba10-ae7d1ac054bf",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba3c987-891c-4687-9873-5dcf63005906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b265ec8-b642-430c-9d6e-5c66a1e9c591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad5096fa-e905-43f2-a1fb-94b711d63220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81ce1b01-4478-4516-82d3-cc5373244a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4826a79e-4a80-4e99-a44f-45e1592a713d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc07c430-86aa-4cbc-99f4-cab171feb2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f475102f-4b81-43ef-b9d8-19b99d0b7cd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab11b1ce-7c9b-4547-b0e9-07c7bdbd00e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ffc3b62-6b5b-4366-9c92-c024630fc006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e70f4f-2b74-467a-9065-bc7c8ef7edfb",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbb37e2-8c5d-44ab-ab29-e1a3fa5326ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee2e6fac-e89a-4533-9b8d-da519b3f593a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd3905d-7509-4cb9-b815-54703df602fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee305ae-0912-4277-9db1-b7e9ddef0193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ffbc156-a897-4bf5-9386-af5594626c38",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16459c9c-ef70-424d-89bb-b967d6d42616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09cc3a80-a821-4a0b-bd84-e3362c4579db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf72dc54-e309-485d-9110-e6f3c95f7424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dde8aec9-6efa-41cf-a804-49d69ae4df64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b82c8bbd-d733-4566-8c0a-f0bba5f64a67",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ca7917-86eb-4af8-a180-424456f0681d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68ce7af5-a35a-4002-80a3-7feabfcfe160"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73c1916-a689-4c78-b8ba-529a3344dee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7173b52c-c415-4ec5-bd3d-bc9d3b01e1a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13753803-95ed-44a2-8eff-9d0e83023a8d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d4bf275-aac2-4bbb-8a7f-95dcb5240025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b67da64b-61ad-4821-ae66-a5bc5fe9cee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af94e9a-ec00-4bcc-a4fc-e177fc33ee48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3d70a28-158e-40ac-83c2-4dc2bde7312f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc2bdd8-ca56-446a-9474-b0a2ff86c21b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb4cb198-56cb-4aad-a435-cedbe9002635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6047c25-ae09-4dca-9393-0849d4b4b010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e562fe5f-5a5f-4293-83c4-58f0a88394fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fce28f20-87ee-4f9c-ace9-33424ff96adc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "22560ee3-9386-4324-ae9f-f990823f9c01",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6e340e4e-0160-4b05-a575-b1aea492ed3f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb4c316-667a-4c2d-a0a5-e5ce86cfab34",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c04215a4-da67-4fb3-ae8a-63dc75965063"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e1c358-007e-4a57-a584-929068098e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "503777b1-2a74-4471-9723-f38537e58708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edad7c8b-a4dd-48e8-9934-47978ed6c2e7",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2414c550-1ba5-4ecf-adc7-9ab109165026",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "58e95c95-c0ed-42f4-a795-fe362ca2ef34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bdc1bf5-2694-4fda-9a8d-9e07b926a99c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "863de0a8-42ae-492f-bd49-2613a711f341"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33a61506-a74d-494b-86b7-85e305c4838d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f0499f4-1785-4ed0-aa9b-33af7ee04c6d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "78d2d931-6a81-4292-af5e-ea766383150c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "934ba1de-e152-4c4e-aa61-5935ba89d75f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cad2b41f-c1ac-4b0d-a530-f7a114188425",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c40ba116-012c-4dc9-a156-8f92ee5623f2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "314fc1f9-8a3e-4846-b334-c466f3b76bfc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "74c393d7-c85c-4279-b42d-ad17f61b3065"
            }
          }
        ]
      },
      {
        "id": "2de85abb-7af6-4988-a258-ec53fae50978",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a31a6580-cf29-4a46-869f-c43d29666ecf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0e3668c3-f446-42c4-9995-a8d6e5bb471f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "77d50019-010c-4494-a06d-5e27b32a57b6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f6cbde-bd30-4103-912a-48061ef363f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11b4a73e-bf2a-4e5f-a633-6cf6b56ef466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc109bb3-caa1-473f-8233-0515919e5c91",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9cfd47-93fb-4014-957e-a3727af67011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19c6ba04-36a1-4d11-b17b-757af1c1cf83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea59167b-5b2f-474a-b757-53339581aed8",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd35b05-7b40-4708-86ef-60b46a621490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1f4a96a-08db-4e82-9457-3a122ac84284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2149c24-2300-43d6-98c3-d16c85fa6a88",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdcde781-fa2e-47e7-b230-eda6d08d222d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68a1bb28-9d7e-402a-8e2e-07aa57d9465e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200cc3c8-a514-409f-9c4b-b9ea8b17e3bc",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ef9739-ca88-4bc3-9edc-c507188ef3ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11571df8-b960-4dd2-804e-dacfea46f427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "903cbd80-26c4-44e9-a275-b74334cac3ef",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3becd2-cbb1-4ec6-b03b-90737ac89c9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c34bf1-97e2-4b1b-9685-199b69c4e241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b116dcbf-e5f3-4d78-aaa7-23b9c54052d0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38831b53-7d03-4ebc-8757-93e11fde773f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e46a6c7-aec8-4ce6-97f8-da53ff7d2ace"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71df891-f89e-4766-aa70-d39031a17195",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc21cfcc-8db2-4314-a86a-29f83a2d2676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d279f45-87f6-4515-b4f2-9a0c9323555e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f6ab838-5d26-4c15-9544-62191646a8fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbf62e42-e54b-4ceb-8e0c-79ed344d9241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44ecb74-f28f-4862-bd36-6e8b74a1f2df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e6ddcf5-5984-495f-9332-624a2f21fe91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "475d7c7a-2c3b-4a63-8472-0a4e1e4998b8",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24664390-0856-4d06-988e-99470ff7bee2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5acabbcc-c98d-4075-929d-1921856d8116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f180d9-39a1-4f59-8d4f-b408945f4ffa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bc5f0d5-f36b-4fc6-bd93-5e5c2dd438dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48deb0d-a918-4643-88ed-a9d824b1002b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ae2faa-bcc1-4a3f-b100-dd688d6fbc26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1764c5de-9e5c-4474-90de-86d584c85dc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad36ae02-10b0-4c65-9655-0523393b2a78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f6ab85e-52d0-4a80-8dde-13bc06c7be20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf05400-6d57-4d39-8f8a-30fb57a83faf",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de51e45-e51f-4ca2-8408-f698bf6f1575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a9f162f-e34c-4251-be10-2af285b4079b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f684a3-d323-4838-bc7e-92524507b727",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9e57188-10d3-41b8-b8cb-a6fbdbc1a476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20949ca0-e779-4e59-8724-d2b4e01c010b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a90a70-00ed-4284-a7c7-5a481676f17a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce6b3565-0afa-4fc4-a398-1924b98d2569"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6fd4f49-521e-47a4-b465-034fdfc5cfd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ee5c4a5-ec47-4113-84c1-0e1d50a02a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d6e958-062a-4b9f-a13c-eecc1d45d7f2",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f98d713f-47d2-4bf2-ae17-538fe0dc1662",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "833e701f-5a44-458d-b2b8-72b31db509c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6311fa-ecde-46c4-9ac7-2ee44aa16c7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8e8baa8-8840-4de7-97d5-6934120f325e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc1f07a-ad73-4610-b2f4-4661386dcd5e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ddf118e-b9f1-44f7-b8cd-bbf4572bfa36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd67bb84-28ab-49b9-8105-14ce5e628ca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce3f48a-c519-4cfa-8b25-ac19823e4821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9fd6e6d-4c0c-44de-a404-3802cfa020e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae3a7acc-6933-44ba-aa65-13dc762dd252",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cf29ae0-864c-40f5-a1bc-c0354c8f145e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d855fa03-88e4-4177-9d86-69e22b810601"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba97d9c7-ea73-4f04-9268-a3c50ca42646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be86f267-c9cf-40a6-a140-7713d0ca8030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "686990cb-4e1e-4132-baa9-da5a716d4256",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d0d8d3-23aa-4419-9ad8-6deb0c41a8bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3825501a-dcb1-4d32-b983-e76763c97b28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0870f738-9e03-4029-af2c-73b1eb9777cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7883920-78f7-4427-ba7d-13f8dac7ff73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "549466bb-f8a3-49db-98ae-688af62165f7",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2097a869-4162-4efe-bb41-20c507c89e98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16bfaaa6-6598-45e9-96d2-570ab4293381"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e587ee55-d547-4e43-808c-0473fbddd325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b77e433a-8bc8-4a57-aa03-a7088e126173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9497cf43-957c-4ba0-b9fe-0dad47a6688c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc40f89-6ff1-49fc-ba66-c6ff66aa3a69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee66dbe-2093-4fe4-b1a5-5758928f57fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "848a0438-042a-4e64-a5a4-456b41be9cd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eef0a944-affd-48e3-883d-67aa775a8f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eaa6b2f-5e92-47f0-9ecf-b89e228e5bfb",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d9a167-4f1b-4d91-a7da-9c80d22c7574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c236b8c1-1ae5-49a1-87be-fecb2ce2e86f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ceff74-324b-43e3-8e28-8619266c4e46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb04576e-8879-479d-8acf-99d5e1cf57b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b656999-4bd0-4910-b351-971d142e3713",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ba87ae-c285-41e0-97c2-dba2071f0c8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fbc6756-0ba0-4ba0-9ebc-7a6883d5f7f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f2862d-ae82-4220-a705-0b60c4cc786f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c1ec81-75ca-4dbd-b318-8bd5a5edaca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6513797-0c69-4aac-97bb-e4a0e97c295d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f7eefa-d101-4789-a90d-7a83b5c95eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c7e6c37-c084-4437-9580-4bc7c7382609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc3ca917-18f9-4c33-bce1-5e5f4859a286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "324a855c-7689-4202-bc95-690e59e065d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3adc5896-db84-40b9-869c-a1e73abc355b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c621753-e747-4016-ba9c-fb9cdc462a39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7622c10f-00ca-42ab-bc1b-8bbdd5ec4d0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c34bdb-06e1-4258-b9ec-99127bf859fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35c86ecf-6d43-4601-9d7d-74c548c5969f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3332621-4959-4066-9f2a-3cd6f75fb847",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "528de787-1255-4c1e-9102-5ead33449b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1ead421-46d1-413c-ab08-40192fac936a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59424462-75a0-4174-9ac6-4844f5962bc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e46a1761-4f3d-4c19-b69c-df296c810ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "858d2899-b58b-4af6-9eca-cfd95034b571",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4339a20a-f094-4565-b37b-27439f2e863b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a923986-e3df-474c-b1a7-fc540e7bdb3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a403a98e-3730-49e9-a741-146479014e18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db27a8f6-7f12-421b-8391-6dc027f8505b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d63f61-8002-4ea2-abac-824b5067b7b8",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c426398-10b0-47d5-aca1-fc43f0cd98b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a28d5722-e33a-437a-8f7f-0aa59db3f9f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb79d34-10e0-406e-8761-4fe25dfa8f22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfedd509-4a82-4767-b37f-f960953e30ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3247b56-a38f-4f73-8572-489f38f88ba7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b839d4-974a-4111-a79d-07055cf84d56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ff140b2-9124-47dd-822d-6f7d7fefa633"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2ddb78-bd5f-4d70-a2b8-bc0fa3436091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18917478-8bc9-4fde-9b1f-f97383da59b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce5f49a-7e25-4849-ba05-1b944866bb3c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39477447-1237-4fe1-93c8-83222b10dde3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fa10aac-9500-4c07-963b-66ef9349d2c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "125afbb8-b03b-4917-b54a-c5228c73b1d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad3e4b7-2fdf-4971-b57b-1a777200a99e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae81066-6e50-4edb-bd0d-22fab0efd296",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a1ba83-57da-419e-8b6f-c1d17d6adace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdebd16a-4fd1-435f-9e20-ce1d7c0e4ee9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a26e8a6-9990-4d35-8551-eb390e5858e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23939636-6a2d-4dac-899f-cd24edcf29af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b98fe3-f2c5-4ff5-a0f7-8efba94dbd12",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a3a4d3-8942-4943-94a2-f3de4b5ddeb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37ba3375-b1ae-4f4b-aae9-87eac7fa8f71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06c369d-e80a-4220-a24e-1ee8c1819375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0b38e06-d53a-463d-aab9-db184996e1f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f5178c8-72dc-4a6b-8c95-54504387ae22",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d24528-7855-4759-9cf6-3c2948bcac25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e9335d3-6741-4164-a04c-49467a488304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40bf2899-a588-4d11-a0b0-ec462cf013fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef7bd009-4466-45ff-9baa-4974b9ea6d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61983394-e52c-4250-aba7-1ecae40b9977",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b297038-5511-4ebd-b32f-d8dacf2930e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4df50fb7-a5d6-4e70-8842-fb42c3a3b27d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b318fa-9e78-449a-9eb2-68c182cf4e97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "171aa6cc-e736-49f1-8c5d-849d5a0295ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67280821-4a4a-4ea9-8ea5-f4a3c08348f6",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5771180d-a84b-4b33-b550-3323f2bb243d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c300c07-509f-4c1c-a1b1-a281fec3a373"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bfd184a-4efc-47fa-ad26-a36221c439d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb75abfd-d16d-4e28-b398-8c04d1e028e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81fe3a2a-8568-4798-854c-aba3c57596d9",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c187de-cddf-4555-af54-6e8e5611469c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8311a8e4-a084-4cd6-ad81-0f0710a9f557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee56a2a9-567e-4055-b958-1a60598055bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1742d791-ba41-4311-ada0-937e3d76e0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb796379-eed8-478e-a37f-ef73182cc6ac",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a47ba5-a998-463f-bc77-f1e228054902",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03e03f16-1450-4433-bdca-cb07e21ce8e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "648a32c9-cf94-49c2-9c1c-e0bebf4098a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cbbe7e2-905a-43f3-be2f-29b13392aedd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87be9fae-cbcb-41aa-b65d-60d476fcd648",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d97c60-44e2-4a56-a3ee-b5585928a238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a49142d1-4c80-4acc-b0be-82939df2d396"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab0baa8-6623-401f-82ad-5b1aabfafd07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aaae5cd-5e34-4c32-8148-72ddbec97e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ad5204-a369-4ed6-bf0c-d7c3e90678bf",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "400bc24e-9647-4fb1-8aa6-63bdb54dc7ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79f606d4-4ad4-44a1-8bbd-7bc94adda3d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59c0868-acba-4260-aa68-5bbf7d208018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "763ae077-963b-408c-a20f-0804b46977ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605f7c03-16d8-43c8-b8d2-6be0850512ad",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9969d8de-1d68-4b94-a548-d5d6ae92f1d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cfbc95c-7220-47db-a075-1b618bfa4578"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae89d988-9d3a-4efa-883f-e3a58f99167a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a506f29-f1ee-48a0-86a0-55663c73fcbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f34294-7f79-4b80-83e3-ffd910d8d279",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b09dbe-4fb6-46f7-a7b0-527601ffbba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec81847-1a89-4be9-81fe-13bb352d1b4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b587f41f-f6e9-4486-afbd-885011331eb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e89b212-d250-4708-a5d1-8e54ffe5dc23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6807efcd-50a9-44da-906f-02f121199805",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b714e2a2-ad3f-4e93-99b9-79a4e9707858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "920db6c4-e5e7-4ac3-af6d-9cb0dd558c24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff7d02a-1ea7-4a04-a18f-e60a82f2d877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f67edf6-c284-464a-a940-2332b16e8ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "146a9d69-edc6-4e5d-b724-816b204c067b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af5ba2de-86e3-4265-95c3-70646136a620",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2209b82d-eb26-4265-a069-21f8a4ae0177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1efd53-97d8-4836-8404-854ef4eb4a45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57f0178c-7b92-47c0-8008-d1a37a349c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa596bf-766d-45ad-bdf0-a85ebd65a78a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ac2f13-dfa8-43bb-9803-f424fe5603c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7650ba01-0775-4396-a491-b78a1471bb03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a7f0ed-8722-4a98-9021-b4dd3faadce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3398af0-e3c2-42bc-ba97-348a91e8c4fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1588b89a-798f-420f-a8c4-383daaf93548",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c81b92b-29dd-4f7d-a55d-f55f47c096c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd7b2bec-5f51-4a3b-98ce-f5daf902ea79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6432d8e-4c98-4a2a-82b6-8870f45fdcb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b63764ba-a826-4634-a573-8b117ba0a1eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e706ab0-4ec3-4fd9-8563-e117a2cc47b4",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42abd2a9-6662-402d-8d39-5735687204c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95896b2d-fed1-4e95-aacd-13da4b84bead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49299d41-87f1-4470-90d9-993a567cc78e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20b77c49-9adf-44a5-9b0e-0f7b84f0dbdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f776e6c2-6ba4-4c0c-91d3-d121e500b665",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ab630b-32a2-49be-91e3-d2faf41f8527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebc11937-1422-4d74-9c1d-eb402fb7ac90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24eb4be1-fe9a-4f90-a8ab-1e943aca0845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4462a35e-652a-4217-b888-31e7be38c900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8fa4f32-a0b6-43e6-90c7-27f21523d0b3",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15b2c91-043b-4d17-9f34-e35082d85576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c82abebc-e31e-45aa-987e-b1dd45418193"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb9d4a8-e2b7-4fd4-ada4-2553ec21e1fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a970e0aa-1cb4-447f-ab6f-181ebb5e94c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b98c4c0-2b09-426b-b549-f5de5efa66c8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb80e9a-0384-40d6-9c11-3791fde3e717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0441d1b8-c5d9-4f8c-9856-c5e587999897"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfebf419-013e-4b93-94a6-caf26abf8d45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fdb4576-8a86-43cc-9318-a0de4e360124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf607090-594e-4e39-ab9c-68d1ff1cbc60",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbef7a5b-8ed3-4278-9c64-eccbef08d6be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "955f80d6-db68-4abd-99fe-b652648f0a72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "805bb94b-a77b-4819-b2ec-13c4eead3296",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aa7027e-ba0c-4399-b07e-0c479b9d247a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b64523-a51a-4068-b363-778dcef81697",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8aaa707-6650-414c-bf05-ea1759940aff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e175d66-d4be-49d8-8d16-aaba247f3ccd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a6407b-2cf8-4cf8-a928-34ce2d1f7398",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54004938-9c99-4690-a628-745a1a40e2bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d0b4fd-ef22-4b00-8385-f99c565f90d0",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da50ea4-d449-4a2a-bc6b-43c9a37ce7a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08f63ae-9217-4716-9b41-38dd0c420bef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "357254e8-4620-47f9-b793-13b1a7be998a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c85ebaf-eb5c-45ab-a5c5-d4d876c3d2cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273d545e-20db-446c-a56e-fe08396824b2",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82493de-1936-44ca-9483-f9d74ead7ace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3eb9751-9715-408e-8421-2743d1005c03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17af024f-7dd4-4e7c-a7ae-c239b3698099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9282c8b5-81bc-499c-b6b0-67692889872b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e487b7-6607-4f33-a202-61cd5a295ac3",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b083720-26f3-4899-b254-7bdf5d2f7b0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cfd80ce-5769-4482-8b7a-0d31181cb153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1756b152-58f3-4a9d-91f0-f8fe0292a958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "154c7b41-35dd-4b2a-a0bf-756db7f1d802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e3df750-f19f-44fe-90f3-97770cdf511f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d95f196-78d2-48df-9923-0cef9d7d1ddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27f6907c-e6be-4c54-ac39-33ad562bcd5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e45424-d553-4ded-9ec4-a1f0d3d2f669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b4a6735-1aab-4d22-b04d-8846a69e14de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef2da55-7e71-453e-918e-02d99b826ec3",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d8573a-323d-4d5b-bb2c-c470dcb1cf0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bfcf63b-b046-47e3-80c0-1f48cdce90bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77db170a-5055-4879-af0e-65ee82b872f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9c62c38-c177-4c79-8dbe-480a1ca08613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "903cc1da-2dfa-4555-8b68-894d8f710e35",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5087086-28e7-43ce-8ddd-e8997e7286f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73f5aa74-7e45-4b70-8bfa-d0f266fbb5dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ec28fe-ad19-43fc-bedb-adda4a538687",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dd7601d-0285-4839-a796-7cdd016c3709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e7048f3-0b3b-4940-a24c-98705147198c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bea352b-4a7a-46aa-a36e-2a721eb08863",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "400edf8b-de53-40f9-ad3d-8bbd4040c350"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7ea55a-0df5-4426-b8f1-a04dac5111c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac474424-d211-499b-a6b2-58dc6bf2bbe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de4eaf01-b58f-4ab5-a921-e8b63cad4f13",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e701e1ad-cdb8-452e-9402-fb956c308329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3561e399-fae3-4ea8-a9ef-148b99dd14b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e154fa6f-d97e-4fa2-9acc-8ad8e17a080b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "162197e4-0ade-40ed-9378-59358bbaf2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b79f0c12-a65e-4b7c-84e2-cb750980fd0c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8622504-5144-412c-b98e-f61c0ed3c3a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c0fcf3f-e35a-4a47-a382-dfcca3dd4a65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaba3646-37c9-469c-9a01-361355b32560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dce9856b-cd53-428c-981b-aa27052068cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d692516a-fb78-4326-8ba5-920b6ec87a39",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2dc44bf-23d5-4dd1-ba4b-fc67d93d9070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fc5d476-b83e-4dbf-a468-95a68b459ba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34360688-6e51-4a11-b50d-46b6efeb0f23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dc5b7be-2c9b-469a-a962-3c759db5637b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a562328-cfc8-4760-9446-34107f5a9001",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb9ee65-ddc4-4ba7-8dd6-49f5cbdcdc71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91ffaee2-344d-4504-8baf-7e9a6c51904b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f41b2c2-4114-43b2-accf-43884a22fa0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28cfaf94-537c-465f-87fd-9fadd492952d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a4df0c-b9b0-4119-85ac-c0d267c35872",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "263b6d0c-af6d-461f-9e7b-df33a2cdf17f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03ff11cf-3bd7-435b-b238-df85865701fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "854ecabf-9308-4b9f-af95-6f2a53a03eb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61f37ab1-82b4-4b86-8b11-ef47e9a26f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb24f638-99f8-477e-ad09-eccb087c6d35",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd7961ea-f2cd-4aa7-accb-51048e768c23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a89ebb40-92a7-4d13-81f8-f7352442338b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f87a535-ef0b-498d-961f-ebbaaa0d06d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af7a5566-60a9-496a-8960-bc97e8014cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4119c2bb-80ff-4347-a972-3038ff80384e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbf8498-1cff-42fe-91aa-b894c1709831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2baf3aed-edb2-4193-adaf-fe5a3a83cf68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3d4e65-bf65-453f-9e63-f6be82d3cba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab48049f-ea0d-4b95-bab7-6315a50014f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e1ff5f-785a-46a4-8a16-e701f4174cd1",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a85d948-f1bc-4c02-aa67-b4fbdd10d68e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e469d0ab-1af5-44a2-a99c-b4e7550b3fd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dbaafa4-36d4-4fbb-868e-7868ae869d95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfc99ef0-72fd-489f-820f-af6e1b6d74b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17daca24-fd26-4349-a374-5a3a86b30025",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e130919-cd15-4d0c-bd28-988d1cc16ea7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64d362ae-24d3-4e36-b147-5bf3a90c03ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f371467b-0db8-4629-883b-9bd63acdcb79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e32d8f7-8b8f-459c-8119-c0547e69c2a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fd6655e-8030-4f97-a6e1-dfc277859687",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1a50d8-b1d9-4b12-a855-75b63ba4fa69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aefe9d32-573f-47d6-a477-e0ca59641131"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9f2ad1e-45af-4b0f-961e-c9de889f1cd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "944312fa-c578-470a-ade8-bf4d66e7af90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3fc0d7-09cd-4368-87ba-23ab4cf596fe",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a5518c-428e-452a-bb17-432c13270993",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a291aa94-8b3e-44bf-8191-a9c420c593e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a714719-89f1-4d4e-a25e-fd6a1c26c468",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4599a03f-bc68-4823-a466-35499f899736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d33e15-5a19-43ff-9b2d-b071fe50f808",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ab9333-7392-4ce4-9688-a1dcad37eafb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d9d45b2-4ca0-4567-a404-a078dd94ed1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5876145e-70c9-41ca-b6c2-48cc6e52ea37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94d69d19-887c-4a87-8c44-469173fe8928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "970c0b07-4ec7-4bf7-abb5-361db695a5a0",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2635561b-9229-474d-81a6-9ba2cc56c4f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67a256f1-cd61-43c0-b065-607cd6276065"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c017843c-8f38-4f2b-a5dc-062b64d97560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15983337-9a83-4a2a-8ae8-cc1a4ad73d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53fddbd-f37d-411c-b9bc-087845ba52e5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "891978c1-d482-4bd2-a0cf-6d5d4c47c455",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35b652d9-d876-488f-93f0-575db7cb451e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf34df5-ed5f-40ff-99cc-95ce40b56549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "817ad1a8-9591-4906-9a28-4f6671999521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b5c5509-e36c-4ba3-858d-e1e25916b36c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47fadc79-f829-4dd3-bd66-98f4324838a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09b845bb-36f7-47cf-acab-507dbc177efe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a889b9d2-ce8d-42e1-8957-33446e27c421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac931da3-7bf8-4b0d-885d-18a556dd1a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff65330a-778f-4e59-ba4a-e90be6741137",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb660f9f-3b4d-4028-9a2d-7585098013c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ec19a12-959f-4954-8f42-05dc7f67b912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9f2456-4f94-40a2-8618-061656d7646a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b4dc216-23b6-4cc2-8d12-1e0d6e18af93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83180d2f-aa29-4f9c-8e5b-26bacda734b1",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c472ea0f-267e-4d74-a7ca-af1a73f12ba4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e4a3649-be63-4e54-b598-ffd3f87480bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31fc3eef-86e8-4e89-869d-8dd789e7f6da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a551c008-4fab-4601-ab89-31f6dd69219a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b63ce5be-6391-42d8-9e17-add1e6b64fbf",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a481d8bd-06dd-45b0-b49d-662a835be7b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a31af65e-50d9-421e-b29a-5501c844d7fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4555552-ebf0-4b68-8301-818da591d5fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa9247a2-030e-4d6f-9f13-fe410b317c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea806f7-6925-4ed9-9c97-65c2da88d5be",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06016960-20d3-4b3f-ae62-b216b5eeaf67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b17a6c5a-476a-49b9-9989-20dd50c78a44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea86aa1-0a7d-40c5-9d0d-873d1a46e391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e777481-b2c2-41a8-adf6-4d23b553ae40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7525e109-393b-45c0-9628-480a57c2b8da",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d69236e-9aba-4915-af17-1882f0812cda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7627ec8a-0444-4050-a79d-2414d37a9d17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "047e69c0-695b-4a7d-ac04-c6e29e9d4851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee8649d2-eda7-4aca-9d93-2a9eea044b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9dca4b-31a4-4aeb-ab31-6a966caf6464",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b67fe2-283f-46d2-bc40-393c23cfc933",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34f56409-8f73-4149-a669-6f0f2acec296"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a72e886-0fc2-420d-b883-d99a6e6753e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecdee897-ee48-49dd-a719-432510cd9b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f304bd88-8a6a-40c3-bae7-2a53fc386001",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72d36934-5a62-41c6-8147-3316c1df4bc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9270aac0-44bf-4840-b7ff-08caab575cf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9196bae-d2e5-4a0b-bf65-69655aeb22d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc1fbb1-9fc4-4aa5-93cb-7899c024d265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ba7e1b-b525-4682-a1aa-343cbcd795ba",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f96011-d84c-4c5a-a551-34b7b8e125ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e305ac0-d812-4bc2-a8d7-8fe776c0d73b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d833c4-690b-4742-a60a-e023252e009e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca3ee98d-5396-457a-a9e1-04355c7db078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f672214-4782-4b07-8133-27d35bd54e5f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "543316d4-1d71-4364-8cc8-c388fa3f1f07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcc2d8db-b920-43f2-bed9-7d5428fe58bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70abdf9d-e4bc-45bd-9ca5-886a85711639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd2701b9-578a-4be2-b572-460eb8ce3406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6811381d-365d-4ad0-b9ba-b9cd72c2af5d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1541adb5-976c-4833-bbdf-3d3e20f93311",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc9d9bcf-b60a-4b75-8a59-9ee8ff884c8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b26684a-9e38-431b-a6a4-5bb00c018e4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6db3c53-0ce8-429f-ab00-65234562d083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ddfdbe-ec33-4a52-9fd6-26406d368e2f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d3f10a-9b46-47ee-bd67-849fcc02c514",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "849b2289-6e32-470f-8de3-0b1cfa8b39b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af7deb9-5c31-4256-a8e4-8a93a4835ea8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dcfedcf-3279-426a-8a76-122f4ee32154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e778da8e-5548-47cb-970f-69cc5346ae62",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0bf4d8-75ad-4367-a1d4-13f3d0aa0623",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3317f635-f0fd-420f-abac-8fa189e01304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aadf9f2-582a-4ed3-87ad-078b69345f32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f8aec08-19cb-4e87-980d-a68622b62d9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a3ab4a9-2b93-4948-b671-e2ea2958efc0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3f2c23e-bfc2-495d-81f2-5f45a9122780",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6e82172-cfc8-4f83-a047-bb71f761f305"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aff07af-4f0f-4a41-ba8b-32a9f325d870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aab000de-eead-4cd0-aaf7-f44e4108f23b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa100d9d-02a4-498f-866c-c2f39dcc2027",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3742b19c-ee68-4237-8b55-59398f70165d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a997ed2-cee6-46f8-893f-448a6d55054f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf63fb8-f446-44c4-8380-bbbaa845ea12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b27f359-848a-417b-b49a-34060cb99b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a03292-a1f7-410c-aae3-a0b57b16e787",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f97a6e51-9f51-43d9-9feb-9a55d421d5bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b17cbb19-e52f-494d-acb0-64ade0c666b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1b7f51-4edf-4aae-a7e0-0f0d9a2871db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e1e8696-6fb8-4606-bf2a-e6605ecc23fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac2ae2a-9c5c-4320-ba7e-5be7213c7146",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "680511c4-78e3-4781-9126-a65689d6ee5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b40d8474-8229-4291-b42c-cbe7d26134c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14327896-1f65-4017-b5f0-caa6ccec6c1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "762b6876-b2b3-4416-8cab-bcde037eaa1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e8c408-5c59-4945-b4eb-67e8a99850e0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e8663a-bfa7-414f-9ebc-736a08bc5ce9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb00256d-bc4f-44f0-85b8-2a2662beece7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce90513a-3adb-4508-a3f4-52e4593735fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dccc763a-0256-428d-bd3b-625e713592a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8ba3c3-dcd0-4bce-a077-b2a3dc369850",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b64e848a-593a-4ac1-894e-42e094f39674",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc284815-3af4-4d4b-ad1d-1bee16e208a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c4151a-2f23-4b30-bedf-42f4ae2e8aae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dd7d9af-35f5-4f26-af87-42b64ca96ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d35ccb5-d0d1-4298-a6af-f4359966ab46",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c85f1dd-fb76-4826-953f-fe3ebd32a45a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca161deb-5988-4583-a3e7-d62ea3bbe347"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7039989c-a05b-485d-b1f7-6d5e414e728b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa1a2e2b-e639-4411-9346-720b4087feed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5634a5be-d34e-4ee9-a408-9e50f1145930",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee96ca3-8456-4704-ab62-bdb01df7eb22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05348df3-bf29-4409-8403-fdba1d896428"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca693008-f5a2-4484-bd64-3841e083a38f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dab4834-3eaf-40f8-8ecc-0b408ffce66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068efa63-1912-4532-9059-4fe5314bb223",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b5319d-e4ca-43dd-a0ba-c5fe76e615f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e47455e2-7f22-4d2c-ac1d-2ebdecd7eb33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca39213-50cc-485b-ac9d-14986ab38a30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "300d16cd-572f-45dc-a81f-3a721dcf478e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e57972ba-8d83-45c3-9fb5-70017084d055",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e16d929a-d6df-455c-957e-d928dbbddb91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "314f8952-f243-4dc8-9dee-305107563c8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "757ad4d2-05ac-4fb9-91c0-1c6f62eddbf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04a82a8a-4040-419f-9f8e-3e65b1578d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9183441e-901a-498f-b278-76ed03c94a0b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42daabf2-ab29-4836-99ea-efd477a9d6ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d30140f6-af3f-408d-b616-76d969bf80a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "615ead1f-e672-413c-9fd8-7ae1d05f7675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00ef9423-4739-419e-82bb-5770c26f9eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6248d23-a5de-4f9e-93ec-7923c8b29590",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d17bdff4-8538-421a-97e4-0dc0695f7241",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6db3b79d-9498-4342-9324-dde4f8e5f25d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f74102-3d06-4d37-bf88-d2bb88f1cf69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b5faba6-f9bd-4c79-8ed5-9cdc1205cc6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c81a26f-3d38-4ba1-84f1-c9e809c4a220",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5afcb9f8-657a-44a3-befa-9a708cf7a991",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b02d1a8b-d554-4c72-905f-495d6bc4b2e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ad8aa2-d378-4e15-9881-2712ec4324ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be58507a-df2f-4814-95a7-d0886480bd8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30fc86b8-d8f0-409f-a088-68ac04eaa0a5",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07808101-480f-46d3-9495-a5be58ce74b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "038d7b98-ea6d-4ef9-903a-3b23fffca812"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac7a1d9-49d8-419d-9fa7-3d2b08ece8b2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ccbcf3-30fd-433b-bee6-c5eafb2bd22f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72cc41ab-1dc1-4790-a078-33d23e18417b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34a88e9-065b-4b28-b4d1-cee47373a540",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af585204-6ac9-413b-80db-17c1afd53f5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "858a5617-1751-4737-b6b8-0fbb85453c54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "129d170e-3fe8-42cf-aef5-cfade0a1d06d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c1c8ffc-c828-4c07-9f8c-7998d24ec6e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "22cbdaad-44f1-4740-b63a-cfe6f916c440"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7cd705c5-8ba3-4bf3-8c54-3d650dd9f6ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d8448df5-66cb-4aef-85df-6fea7e1f4685"
                    }
                  }
                ]
              },
              {
                "id": "7dd78d16-90ab-4502-a1ee-79b041e17ee1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "484c56e4-bd3d-4258-8e0c-44938fd8387c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f24003-33b6-4aa3-9324-e1be2d276c33",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "abd35f66-e589-432d-89a5-c84e0ba22371"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0598792-8ab0-425f-851e-cd26a8aee0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ecf6a438-6045-4898-bfd5-5115c14fef4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfafa4e7-3938-4885-bb96-90d8ef435f4c",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af57519-2e99-45f9-afc1-a073102fd9d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "06f84e03-913e-4afe-9f7b-c322a14b2b01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "047aa007-db42-4445-9ad9-8e5acdc29222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75e40947-2844-4997-8d53-f17666a142a0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe4141b2-dd1f-4189-b8d9-9281772e3dd9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5fbf2e55-546a-462f-9cee-82662c6f763b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e0f38ff-677d-4473-b638-562992088616",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "249cebcb-8975-473a-afaf-22b50c53412d"
                    }
                  }
                ]
              },
              {
                "id": "9bc07ed5-2b09-4abb-a46e-04f615fa22d2",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "89096794-766b-43f5-8588-85c5e4d99845",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d35bb73-e137-4db0-8fc5-07188024e6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "cc42974d-b92b-4234-a028-210d45d12700"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac9098b-bc6f-4c51-8dd9-2e96f02044d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9ecc712-aff6-425d-bbd2-8129f8bf2699"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e28548a0-9fd1-4dbe-9c98-ab64e86ff51c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a9404dcb-4803-4134-9127-23d453848f0a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a9911e2-15a1-428a-ba26-5c9f3dfa3db1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c3455d24-5cbe-4f69-b1ec-c44865ebfb56"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "733ee2b4-3654-4f52-97aa-435fa9c00cc1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70b7c218-78ff-43ba-8564-f8d59f9b9d15"
                    }
                  }
                ]
              },
              {
                "id": "a778a990-8500-43ba-b4e9-ed98862c76ba",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3dfcff45-215d-4b30-9ee8-048bf9e6361a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "96ef31c2-2335-4f81-84d5-16b73ee71ca4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e034437e-8691-425c-a8d2-9529516dfd76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "398b4a6b-3738-4948-abcd-4797bdfdbfbc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0ef03501-ebd5-417d-b281-c2ec4d5886b8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "98e54033-4aae-4e35-bb83-84e46c0f8c84"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "da7a8f4d-1df9-4bd8-a99f-08505776a3ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6da6cce5-a6f2-4903-944e-790f9f611e22"
            }
          }
        ]
      },
      {
        "id": "3930d92c-4ecf-42a7-a773-23ada9b811e8",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "76a19350-3c3b-418c-89a0-4e33230d98db",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ebed77c1-2e2a-4ce6-83e4-035a8044a74b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0f34d84c-f999-43be-a520-5dbc167693dd",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e70458a4-8ead-47d5-84fc-14175dbdc0fa",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6d76b73f-6331-4f38-a86a-25910afe6cc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f44add4-4e3a-4881-baef-7248f7ad993b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff62f907-2c56-4c57-90a8-6e80b0cec249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed967402-1ea4-4e5d-8766-2c8c8ad9f572",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c57e31-9972-4814-8f0c-590a90b2f80e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a603c322-3408-41bd-b72b-c143ff56273a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8d1694-1eaa-4602-ab52-05c2c88b8133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85d239f6-6249-44e8-aa67-09a897b64ba6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cdeb6187-0aa2-45e4-9d98-1a83044f9132",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0fa4b59-2828-4e11-b611-15281dcd9261"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "98fbcd4c-eae0-405d-9add-02a832fb3fbd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84346478-23f0-4119-aeab-347fa63ee1f6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "076f3754-f28c-4583-bc99-8e3b8d923df4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "75155012-c17b-4f38-83cc-e980c093e992"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "971fa2d3-5400-4145-b099-da4d68e959ed",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9ac9a08e-b4ed-4183-855e-04001af1633c"
            }
          }
        ]
      },
      {
        "id": "9cccb460-ff47-4a09-ac6c-271e5322c6cc",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3c38b36e-0037-47fd-9de9-e70dda61c2bb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "21902e24-abad-4d4f-bcf8-c3ab465858f3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3aa68f80-6792-4aa8-8902-d26a688b9187",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b2db730-d331-45aa-aafa-4268382c5906",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af60b1ac-465b-4894-8ea6-fc82bf26d503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44cd60c5-6b7a-4f9a-87cf-dd7ee4eeae0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33077707-4f20-43f9-a488-313dec2d0059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc84bb40-e8e2-43d5-9677-3b8c3f06d42d",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e6c5fe-d844-4d04-923d-af9548a598b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "820f0519-ca47-4904-9e52-2fd91e2e7322"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad3095b5-0210-4eda-9182-7d972a15ad84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba5e3848-81fc-4f5c-a261-85b2afc8dc22"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b8f9257-6641-4a70-9ccd-71cfc787d350",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cdd35cd5-2511-431f-b64b-8620e1f86472"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "825b4ff2-fa36-40eb-a9f8-ccf4270d29a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ab03fb0-6937-443f-8e5b-a4c872025d35"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cca25dd6-6385-4f1e-aefe-6a02867b3f13",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7018ff49-fa30-4842-b30d-e37fb804186c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4e260a46-d822-4a11-85d7-d3d95e7cd526",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "18b013b6-f22d-46f8-b13e-6de5545e4ef3"
            }
          }
        ]
      },
      {
        "id": "18c06035-5289-4dfa-a7af-85b8816a649e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5004d2c6-c59f-4b9c-a25a-3b49782da7c0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8173d2a6-365c-4da1-9df3-7c6a3b668d96",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1a36e83a-860d-450b-a619-f11b1757e04c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fb9842-75ea-4d8d-a5b9-2a9746ff114b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2dc7bf83-d13a-47d2-b23d-e3cc53935cef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2bcdda9-de91-40cd-b13c-9d83da6137fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c2ab090-7252-4492-9689-bcfa25a5c107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b2c36cd-dcdc-418c-bd0b-398fe191fbcd",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd3f210-3214-4554-aa77-5f5754499f22",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8b13b199-c31e-4f00-ad72-382a92d9db63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85528e17-2712-4643-b5a0-f27f9d92c28c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4303e98d-74bb-4df3-bc1b-0ffaa685eee2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc2d1bce-7c74-4515-92df-54b5e1c7d682",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "706e10ff-679b-4090-87e4-c30625f9986e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4c4d850-ff54-4c28-ba1a-fc5a64288bec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2725fca1-b8d0-45f0-86b4-cbcc26347f99"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "99839a51-1465-4bc1-8177-558cdb40aaab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "62766f31-caea-4795-80e2-114e5288e367"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ff17a4fc-30ec-4e2a-b558-9799c8541cf7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "76d3e41c-06bf-43da-bf4b-49f1db099c25"
            }
          }
        ]
      },
      {
        "id": "874a372d-603d-4473-91c7-d1cfd1a63dea",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad8f70ad-5f9e-46a8-b484-be361418211a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "74abd81a-c2c4-4233-b32a-63cd2cf28d9b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9c37ca5a-6f06-4eb9-8a67-94bb9bf42237",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fb97abd3-1538-4081-b03e-05f6f873aa8f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "015a81cf-e996-4a30-a6ed-0c84adcdcfa9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 303.4461538461539,
      "responseMin": 15,
      "responseMax": 6635,
      "responseSd": 871.4334129779738,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1679359051829,
      "completed": 1679359143521
    },
    "executions": [
      {
        "id": "3ec9ead0-b811-419b-95b1-960d1c99c185",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3cba0cb8-a4c3-4ec5-8377-5812b8e63616",
          "httpRequestId": "dc3c688d-35b5-45f0-ac94-6455e900a903"
        },
        "item": {
          "id": "3ec9ead0-b811-419b-95b1-960d1c99c185",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "47457639-e298-4c0b-8f41-b90c33590ec9",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 0
        }
      },
      {
        "id": "5152a79d-3b31-463f-842f-00e034976a97",
        "cursor": {
          "ref": "6ca2d183-1dbc-45a9-97ac-420ad6bbc4bc",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1921840f-59ea-42c9-9979-c278f65c9239"
        },
        "item": {
          "id": "5152a79d-3b31-463f-842f-00e034976a97",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7a893b1c-38c6-48ae-a12b-4f6caec70f33",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "14f41c67-47cf-4873-bfff-b39ef89a684e",
        "cursor": {
          "ref": "711822f3-6196-4d1d-8951-d49ef78ab22f",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d370bc60-7879-4949-b293-a114ff89c794"
        },
        "item": {
          "id": "14f41c67-47cf-4873-bfff-b39ef89a684e",
          "name": "did_json"
        },
        "response": {
          "id": "ab3f335c-fac2-451e-a355-ae49b60413a6",
          "status": "OK",
          "code": 200,
          "responseTime": 371,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3a178b-fe77-45d7-a803-2b3f4e10d2f6",
        "cursor": {
          "ref": "08db4b3a-56e2-4dc7-8991-d92fff81f238",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ce0a91d0-2af4-4954-acc3-8a2cd1e75451"
        },
        "item": {
          "id": "ff3a178b-fe77-45d7-a803-2b3f4e10d2f6",
          "name": "did:invalid"
        },
        "response": {
          "id": "8e58a4bd-a118-4934-a591-58bf51de9808",
          "status": "Not Found",
          "code": 404,
          "responseTime": 3639,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "ff3a178b-fe77-45d7-a803-2b3f4e10d2f6",
        "cursor": {
          "ref": "08db4b3a-56e2-4dc7-8991-d92fff81f238",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ce0a91d0-2af4-4954-acc3-8a2cd1e75451"
        },
        "item": {
          "id": "ff3a178b-fe77-45d7-a803-2b3f4e10d2f6",
          "name": "did:invalid"
        },
        "response": {
          "id": "8e58a4bd-a118-4934-a591-58bf51de9808",
          "status": "Not Found",
          "code": 404,
          "responseTime": 3639,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "9bbec8a7-dec2-4c09-9528-9f70360983c1",
        "cursor": {
          "ref": "6871f8d3-8d0a-4222-824c-dad2c14b04bc",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8fed5b93-8631-4d11-9b55-fe839ecbccc1"
        },
        "item": {
          "id": "9bbec8a7-dec2-4c09-9528-9f70360983c1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "eb635b1b-3276-450f-bad1-bd2bd64b3e87",
          "status": "Not Found",
          "code": 404,
          "responseTime": 59,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c77601fe-5a46-474e-9db8-04d67f6d3ed7",
        "cursor": {
          "ref": "26602650-a8c1-42fd-abcd-2297e416152c",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "faea0c67-64c0-47a6-8188-415cc18ccccd"
        },
        "item": {
          "id": "c77601fe-5a46-474e-9db8-04d67f6d3ed7",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2fe0d4d1-55ac-4164-8eea-7c33ca7790e4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 55,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a357fa50-a9ac-427f-9824-2b06be1c4ff9",
        "cursor": {
          "ref": "c36ce8b9-e155-429c-8586-43a544921266",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f1762a41-c444-4f64-aca5-db30ae0e8e8f"
        },
        "item": {
          "id": "a357fa50-a9ac-427f-9824-2b06be1c4ff9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "21855b61-a673-4a29-b180-48cabaa37e49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "eb4f8aa6-f8ee-41eb-b373-6c472f095237",
        "cursor": {
          "ref": "f5c748a7-b638-4df9-b06b-b533605b50db",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fd7c659b-e114-4ae9-b4d8-01dc0492c48c"
        },
        "item": {
          "id": "eb4f8aa6-f8ee-41eb-b373-6c472f095237",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "bce34073-94b9-45fa-aec8-fe1143df2c75",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "eb4f8aa6-f8ee-41eb-b373-6c472f095237",
        "cursor": {
          "ref": "f5c748a7-b638-4df9-b06b-b533605b50db",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fd7c659b-e114-4ae9-b4d8-01dc0492c48c"
        },
        "item": {
          "id": "eb4f8aa6-f8ee-41eb-b373-6c472f095237",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "bce34073-94b9-45fa-aec8-fe1143df2c75",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4cac3fe3-8fba-4910-835f-73400a2db18e",
        "cursor": {
          "ref": "a9c02e52-8966-42ff-94dd-96994478be04",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4926f8a2-a865-49d3-bd61-81f47faafb1e"
        },
        "item": {
          "id": "4cac3fe3-8fba-4910-835f-73400a2db18e",
          "name": "identifiers"
        },
        "response": {
          "id": "61165a8b-1711-4f8b-b916-b767ce555e57",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7479e072-b12f-4e5c-881b-9f2f1c8a30f7",
        "cursor": {
          "ref": "6694791a-57ee-421e-a3cc-a3bd5227bec1",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "12699a3e-6d67-4efe-b373-a1d41196eda9"
        },
        "item": {
          "id": "7479e072-b12f-4e5c-881b-9f2f1c8a30f7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d754fba2-7e6a-4587-bad7-b85221a3aa58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7479e072-b12f-4e5c-881b-9f2f1c8a30f7",
        "cursor": {
          "ref": "6694791a-57ee-421e-a3cc-a3bd5227bec1",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "12699a3e-6d67-4efe-b373-a1d41196eda9"
        },
        "item": {
          "id": "7479e072-b12f-4e5c-881b-9f2f1c8a30f7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d754fba2-7e6a-4587-bad7-b85221a3aa58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae56d699-a3ce-469e-b3e9-bc19b515a67e",
        "cursor": {
          "ref": "65f1902d-4eec-4267-80fb-6d12076999a8",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "01c9af7e-6044-4f0f-96d6-87f885516dcb"
        },
        "item": {
          "id": "ae56d699-a3ce-469e-b3e9-bc19b515a67e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f03e4bc3-7d6b-4fdf-9882-bd79ea268224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d866eb7c-6b62-4141-95da-7d070a6bb8f9",
        "cursor": {
          "ref": "80988915-7b75-4d45-9e29-df64162d0bf3",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3a56c252-c460-4f34-8fcf-930579eda749"
        },
        "item": {
          "id": "d866eb7c-6b62-4141-95da-7d070a6bb8f9",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7a056baf-e0e6-4fe3-8bbe-29ba0b7912cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de470af-5a17-4f4a-b8f9-bbc5b81ed241",
        "cursor": {
          "ref": "b84c9c07-66c9-4d85-bd23-3ed20a3d40e7",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "18c57765-4a14-4879-823b-220b796510c5"
        },
        "item": {
          "id": "1de470af-5a17-4f4a-b8f9-bbc5b81ed241",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "1d884cea-4f6f-4071-90d1-f5e89fe35fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68047e16-b111-427a-8be5-bb21216db096",
        "cursor": {
          "ref": "3f52b017-6d23-45dc-ab2c-649ab3cecd16",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0b32875f-c9b1-44ad-9d3d-dd9ff38c1129"
        },
        "item": {
          "id": "68047e16-b111-427a-8be5-bb21216db096",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6c539fe2-96c9-423a-9e0c-09199aa90294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a9d0e5b-d908-4808-8710-10553335ea5e",
        "cursor": {
          "ref": "0eb986b2-675c-4d74-bef9-00576b265377",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "449aea50-32d3-4f43-a170-a17e74480d68"
        },
        "item": {
          "id": "9a9d0e5b-d908-4808-8710-10553335ea5e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a09deeb8-0a25-4273-8de3-a98e54bf1989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d6014f-28e7-45c7-9f5b-9b3451eb70f1",
        "cursor": {
          "ref": "90955abf-d342-4c2c-b123-3336ef2da4a9",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "18f5c762-9cff-49a2-b88f-6512136db0ed"
        },
        "item": {
          "id": "14d6014f-28e7-45c7-9f5b-9b3451eb70f1",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "69a60d05-ce6a-4ff2-86f6-6d90b675aafa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1731c9c3-dc9b-454a-9571-bb4db00ad6c6",
        "cursor": {
          "ref": "b9b774fc-ac43-478a-9d2f-f0a8d4eed683",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b18a3e9f-dc30-4373-a8ef-f7dcfb0d5383"
        },
        "item": {
          "id": "1731c9c3-dc9b-454a-9571-bb4db00ad6c6",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ae6ef32a-5f4f-4092-bca3-8f7d88702a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b04b01-3937-4d07-9551-168ed04b0fa3",
        "cursor": {
          "ref": "63f2eb0f-3cbb-40b3-a60d-e0aae19db324",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0ec349f3-dd36-4f5a-a12c-70e719b20f21"
        },
        "item": {
          "id": "42b04b01-3937-4d07-9551-168ed04b0fa3",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d3dcacaa-29e1-451d-a7a7-ff7bbf4c98e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16383b7-57ec-46ec-af86-bafe30c89b07",
        "cursor": {
          "ref": "9129dec9-970c-4630-9a9a-616f04bcfced",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "54585bee-451d-479c-a776-69f4dc5bcd35"
        },
        "item": {
          "id": "b16383b7-57ec-46ec-af86-bafe30c89b07",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2a753cb1-5205-4537-aba7-98b0b07dc38d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "655e9dfd-2c90-435d-ad86-628fc5e6068a",
        "cursor": {
          "ref": "9769c037-dca4-4545-9d28-4cf9ddba6a1d",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d5c5a8ac-1ae4-4fcb-b86b-29fd8b93e8f1"
        },
        "item": {
          "id": "655e9dfd-2c90-435d-ad86-628fc5e6068a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d856a8fd-cbcd-4d70-8382-5a97df736046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83669a90-e82d-45a5-9068-0f166ba363ef",
        "cursor": {
          "ref": "78e94d05-b81e-4a5d-888c-d77d676fe586",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "52068e36-a652-47e8-acca-29b83612d3b9"
        },
        "item": {
          "id": "83669a90-e82d-45a5-9068-0f166ba363ef",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a31ec6b3-286b-4a9b-bbd9-f2254f2432e6",
          "status": "Created",
          "code": 201,
          "responseTime": 1263,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "8a5d8546-4a0c-4371-bb5c-d66005e0ba2a",
        "cursor": {
          "ref": "0e13a4a8-8ce4-41fe-96a2-783336a24885",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "76f10a85-fe69-4500-9fcd-e4ea490a9bec"
        },
        "item": {
          "id": "8a5d8546-4a0c-4371-bb5c-d66005e0ba2a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "07a92902-e961-4ff2-8b02-175e4912d7fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e157015-fba3-49dd-8e27-2d9ddd161800",
        "cursor": {
          "ref": "da19c215-89cd-4084-b9bd-c5ade0a67c5e",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3452ff2e-fd98-4d77-97a0-dd5924f85ed5"
        },
        "item": {
          "id": "0e157015-fba3-49dd-8e27-2d9ddd161800",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "56415a39-3cab-4243-837f-207426c5f808",
          "status": "Created",
          "code": 201,
          "responseTime": 3716,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "6287c4fe-1382-4ebd-9d05-0c2e37884656",
        "cursor": {
          "ref": "6d802707-c4bd-4bf2-9d94-e1ee62918dd7",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0f87062a-fd87-4bfc-9c67-81e7af3fd3f0"
        },
        "item": {
          "id": "6287c4fe-1382-4ebd-9d05-0c2e37884656",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "39018d18-b13f-47fc-84db-5c4008826876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2256466-f6fb-40cb-bab6-385edf233f20",
        "cursor": {
          "ref": "1325308a-c235-4a1e-b628-1dba42a0ad11",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ec6a05d6-414b-4373-a469-87aed2d2f908"
        },
        "item": {
          "id": "c2256466-f6fb-40cb-bab6-385edf233f20",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "398892ae-683e-4749-a319-980312ec1126",
          "status": "Created",
          "code": 201,
          "responseTime": 5364,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "25968987-00f2-473d-8a54-7a429db30b2f",
        "cursor": {
          "ref": "b0bcb66f-851b-467a-9507-97682f13b83b",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d06bf6be-2a9e-4c9b-b4e9-72f0d99ca2bb"
        },
        "item": {
          "id": "25968987-00f2-473d-8a54-7a429db30b2f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2230d7f3-83ae-4d72-8041-7a475096571f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c90b643d-8b99-4aee-9bad-c74fe9c5a365",
        "cursor": {
          "ref": "eacde973-0f38-4e07-abf2-3a0c83680c6e",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "dbfa0953-2611-4c05-90a4-a86f4ef2b1cc"
        },
        "item": {
          "id": "c90b643d-8b99-4aee-9bad-c74fe9c5a365",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7452c85a-fe6b-49b9-ba20-109b5bb7c0ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe41c29-9c82-413a-9b4d-b35a1e5b027f",
        "cursor": {
          "ref": "c62df588-86fb-4bb6-a6e3-e5fa622d615b",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "952082d7-2a00-4b49-89bc-dc12a3c77a6f"
        },
        "item": {
          "id": "4fe41c29-9c82-413a-9b4d-b35a1e5b027f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c5b9dafd-7e17-4593-aa03-66f28a8b5ab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad4989e9-4a76-48fe-bedf-c0f61410de9e",
        "cursor": {
          "ref": "a91086e1-2797-4ce3-87c5-12757e8f1508",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0dc8d3e1-e548-440a-b133-cef5f1fe3890"
        },
        "item": {
          "id": "ad4989e9-4a76-48fe-bedf-c0f61410de9e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "410e62b5-5150-4872-8f77-205222af7055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89466ccc-2ae8-45e7-8eca-33b40c4478d1",
        "cursor": {
          "ref": "594a2be3-efac-44b5-98ac-6d6eae56fa85",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3392883c-9e0e-4bac-bdc8-41658df8d7e1"
        },
        "item": {
          "id": "89466ccc-2ae8-45e7-8eca-33b40c4478d1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "cc7a4e99-b554-4f02-91d9-73135937ea30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ab6756-4de9-4766-9278-d2729c994ccd",
        "cursor": {
          "ref": "477e0f45-6822-4698-9b4a-787b9670bbc4",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0ffaff55-5c79-4279-8838-c0e752e2feea"
        },
        "item": {
          "id": "66ab6756-4de9-4766-9278-d2729c994ccd",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b73b5092-71b3-4ba7-bf10-2bd57d0c80aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f295431c-11ba-409d-adcf-8eb40b6f9ad4",
        "cursor": {
          "ref": "46e5a9e8-c73d-4e89-9ad0-b0a36b7b8679",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6918b4c4-b8d5-441c-bb78-9cb5e4f70d2d"
        },
        "item": {
          "id": "f295431c-11ba-409d-adcf-8eb40b6f9ad4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e52b3f58-7060-433d-b9de-85a7ebe2e715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 357,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b291d7a2-3e64-4bab-a43e-68eebbd8f48e",
        "cursor": {
          "ref": "7dcdee6e-59d4-46c6-8b0a-3e5fc2b0e6d3",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ead14d3e-5f3f-4b7f-a634-8f81b9098cd2"
        },
        "item": {
          "id": "b291d7a2-3e64-4bab-a43e-68eebbd8f48e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "fa51bce2-cabe-4dd9-b717-f3c78093097c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e729f86-fa19-476a-be1d-476f491a7781",
        "cursor": {
          "ref": "f9f79153-6bdc-494a-9ed8-b8262b205d7a",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c3c175b6-2501-42c8-9ee3-32004a2470f0"
        },
        "item": {
          "id": "6e729f86-fa19-476a-be1d-476f491a7781",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5efa9032-038e-41f3-a6a6-cc4636a525df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1594,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e10cda-66c8-4688-a17d-565ce7828ced",
        "cursor": {
          "ref": "661f8dcf-a638-4119-b9fd-1cd7c13a62d4",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3ee3eb9b-82a9-4282-9815-1c63061625b5"
        },
        "item": {
          "id": "f2e10cda-66c8-4688-a17d-565ce7828ced",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d2dd8517-e4d2-4a4d-86af-72939d1cd896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23281a40-5024-4035-a99c-8962238e8478",
        "cursor": {
          "ref": "35026e77-83b7-4fd4-8978-b9d49c044328",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "beea0fce-afe4-497f-8ab5-79ae369d5b9a"
        },
        "item": {
          "id": "23281a40-5024-4035-a99c-8962238e8478",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "83e8a65f-8289-4bde-a1dc-ca15689c3bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22445d84-5e01-4a73-b8ae-c1b3d309b1ac",
        "cursor": {
          "ref": "55a82334-0604-4d58-9830-f20a7755c225",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "064231ac-5967-4408-875b-1ce7b6df2b60"
        },
        "item": {
          "id": "22445d84-5e01-4a73-b8ae-c1b3d309b1ac",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "11e200e7-5674-489c-a2c8-7457f3241c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c350fb5-3ff6-4269-9636-66e4fee77cf7",
        "cursor": {
          "ref": "8ea2dedc-ce6d-427f-95bf-15493a43e23b",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3c07ee12-8c0b-4e07-b5f1-ad83dcb4cec2"
        },
        "item": {
          "id": "0c350fb5-3ff6-4269-9636-66e4fee77cf7",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e9bf442f-972a-42f0-9e81-fb3d6fe5fcef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1838976-63a9-477e-aec4-df7d15f0b96d",
        "cursor": {
          "ref": "b8b8abd5-dd2e-4c5c-9dc7-51252d749cc5",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "09855c05-b064-4d46-af93-f0baf4388e13"
        },
        "item": {
          "id": "e1838976-63a9-477e-aec4-df7d15f0b96d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "cddd0911-3d6c-46d2-bdfb-e7c38b9c6009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c29ddb-f741-4f7f-b9d0-f573d3375468",
        "cursor": {
          "ref": "48203c14-aeb2-4464-b964-2e84ce5c6335",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7be92e1b-916e-492a-862c-a668b989da47"
        },
        "item": {
          "id": "36c29ddb-f741-4f7f-b9d0-f573d3375468",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "63b78dc5-307d-4e21-9b78-437c81413ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d511b2df-f3df-4773-8ef8-2306c933e45b",
        "cursor": {
          "ref": "6a9201db-f692-4b96-b84c-a0fcb74affee",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c4369809-961b-4580-807e-3ee2a42c5a46"
        },
        "item": {
          "id": "d511b2df-f3df-4773-8ef8-2306c933e45b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "626ddb72-1a03-4d25-ab77-ae49e7774dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c13b8ced-6f67-4a81-8e5e-d1873395b8a1",
        "cursor": {
          "ref": "da757114-e172-4555-bc08-ae802d3cde5e",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8305b290-0a80-4196-acc0-d97a2cd80d71"
        },
        "item": {
          "id": "c13b8ced-6f67-4a81-8e5e-d1873395b8a1",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f4b0f7ba-6722-433b-835d-3930df04f79a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e4b8aee-b51b-4166-9bf5-815260c5a636",
        "cursor": {
          "ref": "f7fd091e-c872-4a79-9553-c6f0efc738c8",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d9d1fc28-8e7b-4e32-b31e-b4228870177c"
        },
        "item": {
          "id": "2e4b8aee-b51b-4166-9bf5-815260c5a636",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d43dfcd1-3993-4919-9b0d-4eb2e6ef6f38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87878ed9-ad74-4f32-9687-7650af05b122",
        "cursor": {
          "ref": "be8b0d4e-cfa9-4c24-b395-0cf832a922a6",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "79073651-f6c0-4723-aeae-5b020935597f"
        },
        "item": {
          "id": "87878ed9-ad74-4f32-9687-7650af05b122",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6f993347-4adf-4a05-ab3d-16338f81cd09",
          "status": "Created",
          "code": 201,
          "responseTime": 2622,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2bc620ec-a180-47b8-9e6b-db4dbfac9295",
        "cursor": {
          "ref": "c7f5f541-5e7f-406c-92eb-21f8553c01b5",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d3de517b-aaee-4e02-af95-2cbaa4ef0d6f"
        },
        "item": {
          "id": "2bc620ec-a180-47b8-9e6b-db4dbfac9295",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "119df907-2e4b-4083-becd-89a255052c8e",
          "status": "Created",
          "code": 201,
          "responseTime": 2678,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "412632cb-07aa-408d-99dc-740a3826867d",
        "cursor": {
          "ref": "230ebf04-fb4a-4648-bb73-169bb3378444",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "63717e24-4ee3-4dbf-b01a-52e4196c26f6"
        },
        "item": {
          "id": "412632cb-07aa-408d-99dc-740a3826867d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "76df8a9b-0961-4c77-a62e-8fab5d4d2567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e402cb17-2168-4010-be8c-382284d4ba9e",
        "cursor": {
          "ref": "6e28027b-354e-4faa-a8ad-aecf2cbf81f5",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7693ce26-a0dd-42f6-a5d2-e6a4d8c7bc6c"
        },
        "item": {
          "id": "e402cb17-2168-4010-be8c-382284d4ba9e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "7abdb005-7f8f-4669-907e-9bf5300e20c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2c5e25f-7899-4227-900f-c7b7399d46ec",
        "cursor": {
          "ref": "db5c3380-1473-4df7-b8b9-83b4c27c98c3",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "66fa5923-5580-4eaa-b0c8-7c2e5bd512f8"
        },
        "item": {
          "id": "c2c5e25f-7899-4227-900f-c7b7399d46ec",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6f7c8d72-76ef-4f64-841c-e13c9178c394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea8469aa-881c-4528-bd93-b6406028831f",
        "cursor": {
          "ref": "019109f3-47bb-4318-a0d1-e5a632ae292b",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "96533cf3-5b38-482e-bdc5-d366b6b058fd"
        },
        "item": {
          "id": "ea8469aa-881c-4528-bd93-b6406028831f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d0180b88-6ca2-4d67-ab04-d0daf0e2f971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff561524-4fde-4c1a-b161-acd90ab9c42b",
        "cursor": {
          "ref": "4018cd06-c4f2-4013-a012-188ca4358bc2",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a2607003-7fec-4e83-92e0-6168114b0c41"
        },
        "item": {
          "id": "ff561524-4fde-4c1a-b161-acd90ab9c42b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "447ff2c4-52e5-4616-9a1f-9025cfe5d502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff15706-36df-4721-994c-614d7ad784cc",
        "cursor": {
          "ref": "3f22410d-bd02-4b11-b07a-c6596bd9687e",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a5bdbe39-b6ed-4c46-9fbd-3230e8eac035"
        },
        "item": {
          "id": "7ff15706-36df-4721-994c-614d7ad784cc",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "99590736-aad5-4282-9060-a4de7ee09e88",
          "status": "Created",
          "code": 201,
          "responseTime": 2952,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "36b9f0d5-522c-4cec-b622-22a51372c22e",
        "cursor": {
          "ref": "24abc8e3-efaa-4c44-a37b-120d53c57da8",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a17e8e05-e1c2-44f6-9af6-ff39445bebf4"
        },
        "item": {
          "id": "36b9f0d5-522c-4cec-b622-22a51372c22e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2c5e67d6-f2af-44fc-9644-3dd0cb2cb209",
          "status": "Created",
          "code": 201,
          "responseTime": 2648,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "6416d791-ab95-426a-9f6b-692406630270",
        "cursor": {
          "ref": "43c5c589-6864-47bc-ba84-3996bfa759c2",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "50af720f-ef22-4ee5-8d76-29d1bd1b6d29"
        },
        "item": {
          "id": "6416d791-ab95-426a-9f6b-692406630270",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0bc36a0c-f806-4835-ac22-656e3f9bff76",
          "status": "Created",
          "code": 201,
          "responseTime": 2686,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "e7da6eb1-d61e-4a4f-9e96-5bbe4daa0667",
        "cursor": {
          "ref": "bdbd7326-20b4-4c5c-99ca-9e8098762355",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "eb2c538f-be90-459e-874d-d6b4eda9d9b8"
        },
        "item": {
          "id": "e7da6eb1-d61e-4a4f-9e96-5bbe4daa0667",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e7696007-834b-42e8-ab86-5d9fdbaee412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc505cd1-835e-4b2d-83ea-f9fd4b18aecd",
        "cursor": {
          "ref": "1e6eb5e4-dce7-49a5-818d-8792b6e0d304",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e9564cf3-a40a-4983-ac91-1a20a29fe413"
        },
        "item": {
          "id": "cc505cd1-835e-4b2d-83ea-f9fd4b18aecd",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e8e014ff-524d-4d33-a7c0-2240b9bdeed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14e03dc-44c1-44f4-a484-ca65c813aaaa",
        "cursor": {
          "ref": "9e0e059b-3402-403b-be8a-4a603397ce1f",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "bf9dea9d-ea58-4969-8af1-fec38013dc58"
        },
        "item": {
          "id": "f14e03dc-44c1-44f4-a484-ca65c813aaaa",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "aec25d05-56f4-4b78-bf79-1527398747bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb853d7-0596-44c3-bd9b-38258329b8e0",
        "cursor": {
          "ref": "fdf86758-aff7-4a70-b8f0-ad8c79930138",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "9946b739-31d0-4607-9c85-c3e0d61308fc"
        },
        "item": {
          "id": "2eb853d7-0596-44c3-bd9b-38258329b8e0",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4f8edeea-b44d-4720-b144-dcc8b2e432ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e52b84-0399-4865-9a62-6d857270461d",
        "cursor": {
          "ref": "8c8d40dc-3cb0-480e-b2b0-1d7086d57685",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "acb7384e-e221-42be-bf8a-235377592e36"
        },
        "item": {
          "id": "62e52b84-0399-4865-9a62-6d857270461d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "68ca9b0b-5f04-43ee-a1d8-84b12685e025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6cf5818-1af0-4eb9-a39e-03f1c6b59f48",
        "cursor": {
          "ref": "60efdd5a-a0a0-47fc-9e35-94456554d6b3",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "145eebee-6ed6-4fd9-aee3-d68c7ff522a5"
        },
        "item": {
          "id": "b6cf5818-1af0-4eb9-a39e-03f1c6b59f48",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "10ad5ea7-9073-465e-97cb-e28cfa1e19e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6c9de1a-8776-4a85-887d-769a9785efac",
        "cursor": {
          "ref": "14978d27-b8bb-4872-bb4e-22cdcb58869b",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0df1badf-4196-433c-b42e-a101dcbadd89"
        },
        "item": {
          "id": "c6c9de1a-8776-4a85-887d-769a9785efac",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "212d4b5a-26f7-43e5-88d2-7a55f3485ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27790fc2-9410-4098-916d-ddf8af916300",
        "cursor": {
          "ref": "140ee93c-3093-4d54-a977-7e8ca44fef87",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "713c6cc6-cc54-4937-aa44-86acf2d0bb7a"
        },
        "item": {
          "id": "27790fc2-9410-4098-916d-ddf8af916300",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "38a67bb4-c0b9-4b55-ba67-e3b2826c27be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4553b9eb-471b-4c65-b16a-20eed748bf77",
        "cursor": {
          "ref": "27062750-3514-4a8c-9ab2-14a5aae1621f",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0cf878ca-d091-495c-906d-85f6256933ae"
        },
        "item": {
          "id": "4553b9eb-471b-4c65-b16a-20eed748bf77",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5b867fbb-b20a-40ea-9ecd-ebc76c48e600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed25610e-ec49-4788-89a8-693e0cae312f",
        "cursor": {
          "ref": "2d443ee6-8c3c-47cb-96b3-9ac5e1de61eb",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "542376bf-6039-44ed-b7ca-779794900111"
        },
        "item": {
          "id": "ed25610e-ec49-4788-89a8-693e0cae312f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "eb22899c-4dc5-43fd-bd50-d69c269f0c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0058261-d67a-495a-a8cb-a63ff0f50005",
        "cursor": {
          "ref": "d5d6d457-fc0e-4018-bb54-1c03c5379675",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a1182d6c-0669-469e-a9c8-01f1c1e8ba7a"
        },
        "item": {
          "id": "b0058261-d67a-495a-a8cb-a63ff0f50005",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "44f39243-d72d-47ac-8a09-2351245099f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a3acd5-90ce-42d0-939b-c1002c38cefe",
        "cursor": {
          "ref": "702da0fd-c8ac-45ab-bce8-e44637ba1f31",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "bc4b1e87-9202-4d11-944e-28341afc39b6"
        },
        "item": {
          "id": "62a3acd5-90ce-42d0-939b-c1002c38cefe",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b66eb88e-f6f4-4fad-b4b6-5647302ee5f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "340f966c-4fb3-4edc-a6c8-b040fb02fdfe",
        "cursor": {
          "ref": "54c60267-6cdd-4149-a314-5ca1815a27ab",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "bd4e346d-545c-424d-b19c-ba1ab38974df"
        },
        "item": {
          "id": "340f966c-4fb3-4edc-a6c8-b040fb02fdfe",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "47d67a8a-1bba-43be-9c6b-bc54731603d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "026de07f-c5b7-46e2-bca0-c2ad09b72978",
        "cursor": {
          "ref": "c1ef061d-a99a-4183-98ad-327c5ea829e4",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "55da9cf7-f763-4368-a958-f1f9e0863997"
        },
        "item": {
          "id": "026de07f-c5b7-46e2-bca0-c2ad09b72978",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "cf3ae800-0796-4f93-89cd-8780763b6552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bfbe4a9-8174-4dcf-9c7b-f861a83d7cb3",
        "cursor": {
          "ref": "defa1f0e-208c-4f24-8ada-7d607bd54147",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "0643219a-21c2-4fb4-be15-2d6fc50923e5"
        },
        "item": {
          "id": "4bfbe4a9-8174-4dcf-9c7b-f861a83d7cb3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "bbd397ff-0e99-4e30-a4e1-172fadff96b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69d1558-4ab9-4b84-a04a-90e14478fa92",
        "cursor": {
          "ref": "667e3f14-15a1-4c43-bdf1-14f559ed34c9",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "72ce53de-2d97-4869-89b7-daec0784c5c1"
        },
        "item": {
          "id": "b69d1558-4ab9-4b84-a04a-90e14478fa92",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "346cf010-be88-4939-8cdd-f2e9416c85df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e121327-92fc-4986-b4ea-41549d8f1547",
        "cursor": {
          "ref": "33978faf-403f-447f-9e45-53348b181dec",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "91e20f8d-ae88-4031-a292-12e12856a46f"
        },
        "item": {
          "id": "2e121327-92fc-4986-b4ea-41549d8f1547",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "4d0ff557-0bc3-4e79-9958-04766b5cd5f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef652a1-8c0c-4724-9d71-1373624fc3e9",
        "cursor": {
          "ref": "f5060dd7-5b72-40e2-b1a7-875568a0a79b",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "269d69fe-c609-4233-b39d-7c4baba53cf9"
        },
        "item": {
          "id": "2ef652a1-8c0c-4724-9d71-1373624fc3e9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "55af9f7b-34bd-4b56-8b4d-68e3e61ecf04",
          "status": "Created",
          "code": 201,
          "responseTime": 2683,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "be53a213-d691-4268-a7f4-0681535387a3",
        "cursor": {
          "ref": "7537e905-6e2a-4206-89f8-756db35b5d80",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "754afccc-7204-402f-a8e9-3b46e438d8ec"
        },
        "item": {
          "id": "be53a213-d691-4268-a7f4-0681535387a3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "af696879-6b38-45b7-859a-982f54aa3752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "396d643e-3093-4f09-8f5c-49aa41fd5ce0",
        "cursor": {
          "ref": "42e7fda3-316e-4109-8aa1-81cf0003e392",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "13184242-6e33-4e97-b02d-47ee3e543fcb"
        },
        "item": {
          "id": "396d643e-3093-4f09-8f5c-49aa41fd5ce0",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "640b9a93-7c59-436c-9144-2bdc27dfc715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4765e412-8435-4ff2-b71a-019d8cf098e2",
        "cursor": {
          "ref": "279782f0-dada-4ed5-a7bb-29ed02a2d6a2",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "cb060ea4-ece0-40fc-87dd-22738ba1e765"
        },
        "item": {
          "id": "4765e412-8435-4ff2-b71a-019d8cf098e2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5f6e81f3-f3d3-4af2-a1e8-94f01137c7ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ba5eb4-f9bd-49a1-abe0-ff2714c341f4",
        "cursor": {
          "ref": "aae13ed0-ab6c-4864-8dd6-3bff909721da",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "fe27b5a7-9a21-4ad1-9419-688e966e705e"
        },
        "item": {
          "id": "76ba5eb4-f9bd-49a1-abe0-ff2714c341f4",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "19681de0-ef77-45a6-8eea-f3abb3750672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e64d06-7b5e-418c-abf6-1b40df4470ab",
        "cursor": {
          "ref": "2dc8087e-8e94-4866-b0d6-e1fead685283",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3c672ed6-5ae5-4adb-845b-4603a978b1ac"
        },
        "item": {
          "id": "f2e64d06-7b5e-418c-abf6-1b40df4470ab",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "5e572bac-3b36-402f-bf72-b374c0f7bb8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0098625-9500-4667-82b8-74b7e3066704",
        "cursor": {
          "ref": "c13ef2a7-2b21-42d3-a940-ae0c300a3ace",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "dd3e7973-dcdd-49a8-b988-3812b89adada"
        },
        "item": {
          "id": "d0098625-9500-4667-82b8-74b7e3066704",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4ff6b58e-ecfa-4abe-bc4c-953116fbfd4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c240976-f62c-4ea3-a8a3-538eeaa03885",
        "cursor": {
          "ref": "19a389c8-81ce-43dd-9b64-ef9f3a709894",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "c041b706-e373-4ab1-9c37-f6c63100d024"
        },
        "item": {
          "id": "0c240976-f62c-4ea3-a8a3-538eeaa03885",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d362797b-e8dc-4404-afb2-25a468356790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7109a35c-bab3-4fb2-91bf-c8a2c0b5932f",
        "cursor": {
          "ref": "24663860-74ae-4b40-9a62-05cf562e299e",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "8f72db70-e4cd-49b6-8e8d-f2605ce4fe16"
        },
        "item": {
          "id": "7109a35c-bab3-4fb2-91bf-c8a2c0b5932f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7d381d32-c554-4019-94a2-17ed2731440b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe5c0fa-d99d-4b1d-907a-e4589c048dc5",
        "cursor": {
          "ref": "85d297e2-6d03-4d0c-9b37-5595397a47b6",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4e5be155-d2d4-4168-aa20-2fcd12ea0fab"
        },
        "item": {
          "id": "1fe5c0fa-d99d-4b1d-907a-e4589c048dc5",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "59a0a70f-6652-418a-a597-32bb0a6ad8b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db315f50-b548-4b73-9b35-a0781fbd3753",
        "cursor": {
          "ref": "f9fdb49a-260f-4695-8dc7-4c14e8e54305",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "bcdbad43-946c-4548-8ede-67cc64af087b"
        },
        "item": {
          "id": "db315f50-b548-4b73-9b35-a0781fbd3753",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4b64b472-8f28-4f34-b6b1-90ef6ba71855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e47aaa-9d88-42b5-ad69-322452e79272",
        "cursor": {
          "ref": "c000a02c-494e-4e56-bb59-97fc2be9ca94",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "fb2b5e9a-db4f-4a58-9487-2cdc14265bf8"
        },
        "item": {
          "id": "57e47aaa-9d88-42b5-ad69-322452e79272",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9c2c6898-eec6-4ee6-bd00-c60e4c5a94ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3109a12f-d9c1-405d-8fa6-075628775c8e",
        "cursor": {
          "ref": "9d549274-fe4c-441c-8712-3965ab046234",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "936591ed-b6a9-4891-999d-a6e50115ebf2"
        },
        "item": {
          "id": "3109a12f-d9c1-405d-8fa6-075628775c8e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "69dcef1e-ac01-4490-8906-85e6c5930334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce393480-a167-47af-832d-699c08579218",
        "cursor": {
          "ref": "fcc8f56f-70f6-4c5b-bde6-967b3e3e6540",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9bd957aa-27a8-4053-95bd-9a706d60c540"
        },
        "item": {
          "id": "ce393480-a167-47af-832d-699c08579218",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4fe780ab-86ed-498e-a357-a6553b7eba35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ce65c4-34c3-46c6-a6a9-7b2e8cef5b42",
        "cursor": {
          "ref": "493219a7-392c-45aa-bf9c-d079df51d3ca",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9916f790-b0e6-486c-a15e-4b49376e91df"
        },
        "item": {
          "id": "06ce65c4-34c3-46c6-a6a9-7b2e8cef5b42",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b4ea569d-8ef8-4fde-bb6c-228bddb3ee3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1362f806-f5c9-44ff-b923-b23f2135a526",
        "cursor": {
          "ref": "ff44f194-4d92-45aa-8045-b6b1e9286cf3",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "db13ada9-1e33-4b4a-b752-d4bac2a6163b"
        },
        "item": {
          "id": "1362f806-f5c9-44ff-b923-b23f2135a526",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "553ff0e8-4141-4e18-88cf-b9e460fb7f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c813db2-79c5-451d-80a6-4b9fa39ae18f",
        "cursor": {
          "ref": "4a2c5298-7683-4ff4-a17d-483a55b784f6",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "0f5d58ff-8e01-40e0-92c8-ee9901495023"
        },
        "item": {
          "id": "2c813db2-79c5-451d-80a6-4b9fa39ae18f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c265fdeb-0849-4700-9555-08261be05aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dadff7af-eda9-432c-9397-9aa0ad85e625",
        "cursor": {
          "ref": "9253e340-bd55-4109-b335-28e29e6fcca4",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "066d0484-7278-441c-8380-b8f6cf92bc09"
        },
        "item": {
          "id": "dadff7af-eda9-432c-9397-9aa0ad85e625",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5c936586-5bd3-4677-a4b3-26581c85bafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76768e3e-e90b-4aa1-9359-2decb213cd35",
        "cursor": {
          "ref": "7a34dfbe-4f14-4332-bf42-47f400016502",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "722ed07f-78cb-4c41-bedd-d104e40def19"
        },
        "item": {
          "id": "76768e3e-e90b-4aa1-9359-2decb213cd35",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4204c0da-26b3-410f-8f38-12a635a789df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a242e00a-feec-4ec3-882c-47da2db3c533",
        "cursor": {
          "ref": "d03686c4-2103-4ded-8510-9ab5dd60d3fd",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b9a1cf63-b81c-4547-8323-d2ae17089d88"
        },
        "item": {
          "id": "a242e00a-feec-4ec3-882c-47da2db3c533",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "eca78a06-9880-42b2-a360-c6f665860b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad38184-81b4-4044-ab5b-9d0c6b43f240",
        "cursor": {
          "ref": "a2b9fbfb-33ea-48fe-93e8-bc437f045a26",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "501db1c4-5920-4b84-b954-3e6b488c329b"
        },
        "item": {
          "id": "1ad38184-81b4-4044-ab5b-9d0c6b43f240",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "af7bbd0b-d1c7-4d21-88d8-027adf72e442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52cb89ef-ed18-4ac4-a9be-a9332eda2a42",
        "cursor": {
          "ref": "cef44921-2927-4e0d-8572-a8ebccb6e654",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1d1d2006-12d6-4688-af3b-eaa5de987512"
        },
        "item": {
          "id": "52cb89ef-ed18-4ac4-a9be-a9332eda2a42",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "0d8ea4c4-9df8-4de9-a9b9-f6777f7e3327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48b374d6-801a-4a05-af15-aa50c828aaf0",
        "cursor": {
          "ref": "8da6e61d-4727-4257-aba7-244f481a298f",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f8161c15-9c84-4c2c-bbee-11f353b6db06"
        },
        "item": {
          "id": "48b374d6-801a-4a05-af15-aa50c828aaf0",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "270f5449-1cfa-45d7-b3f0-85410a6a001f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17e5edc-9cae-4280-b84a-7797f74957d8",
        "cursor": {
          "ref": "8d8b7cd5-3de5-43c6-b620-c3fa81dbe043",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d86fc47c-24fe-43d5-b7b5-b79f4a4a77a6"
        },
        "item": {
          "id": "a17e5edc-9cae-4280-b84a-7797f74957d8",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "522f3c80-b521-424f-97ba-c9904e1cb860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6c92e6-2b8e-4dcc-b570-4c086f3e10f4",
        "cursor": {
          "ref": "af679732-9eac-4ac6-9432-e3fa0e916c57",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6ade3a90-25a5-4abe-9ef0-a3de59304b78"
        },
        "item": {
          "id": "2c6c92e6-2b8e-4dcc-b570-4c086f3e10f4",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "40ef23e9-ad7e-4747-a252-f0718714b2ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f957ad57-1fda-4760-bd54-7a97459ef38f",
        "cursor": {
          "ref": "f2d22e4f-2f7b-4deb-8f32-baf093b1f90f",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "1b4188bd-d064-4ca0-9e44-92fbd553bd46"
        },
        "item": {
          "id": "f957ad57-1fda-4760-bd54-7a97459ef38f",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a607a567-e68a-4158-b246-21a8d4282814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df69d92-490a-408a-a473-14843cce8e47",
        "cursor": {
          "ref": "a83e3ffe-16bb-45d0-9b7c-abc737382dfb",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7d8c9915-93e5-4e79-b5d8-5555514fde72"
        },
        "item": {
          "id": "9df69d92-490a-408a-a473-14843cce8e47",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4f520f85-dfba-4322-8ac9-9884eee85abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90881943-59a9-437c-8e5a-1ddc29044a92",
        "cursor": {
          "ref": "0df7b245-4a38-4b36-960e-450580e054cc",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1dbc692d-709b-45b4-8cae-d84b52185336"
        },
        "item": {
          "id": "90881943-59a9-437c-8e5a-1ddc29044a92",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "009ab010-68f3-4c3e-8464-f862182a55a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a0f8e6-844c-4cd9-a94f-f71628f920c7",
        "cursor": {
          "ref": "7135f6ff-92db-432f-b284-dedf39c43942",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1b7e00e8-01c9-421b-9905-7e86ebb5fffd"
        },
        "item": {
          "id": "b9a0f8e6-844c-4cd9-a94f-f71628f920c7",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "9c0bea40-a871-4a8c-8ccc-5a7dde1c1c6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c68fac11-3cbb-43fc-88fe-d6607ea98141",
        "cursor": {
          "ref": "89f8a509-e083-4272-a747-3907c5043bfd",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "cfa21abf-d51d-4817-8dd4-1a00dcfb6013"
        },
        "item": {
          "id": "c68fac11-3cbb-43fc-88fe-d6607ea98141",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "bb751b8a-378b-4eb6-a149-0c00eb29a4c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6b361b-4934-4c8d-8d12-795851e51d0a",
        "cursor": {
          "ref": "d18582d6-8844-4c51-bba2-1baea81d0bc3",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f6eb95f5-a75d-4a78-8aec-cfe5647ecb43"
        },
        "item": {
          "id": "7d6b361b-4934-4c8d-8d12-795851e51d0a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7851a011-5816-4606-a64c-46d324df1cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e42ab53-d116-45b2-88aa-67c8008a0cac",
        "cursor": {
          "ref": "e7fc4047-5903-4bf6-abbb-a10d57d3bb02",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "425e2b6c-fa92-43ac-b859-f174e1362cc0"
        },
        "item": {
          "id": "1e42ab53-d116-45b2-88aa-67c8008a0cac",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "771abce2-b026-494b-912c-a860c2fe6ed7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "46570761-0964-4b8d-b994-fdb33d3dad9c",
        "cursor": {
          "ref": "84ff4390-3f5b-4635-95b9-2c46d1e1c325",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "7b7fddf7-ff16-44d4-84b8-c0a17a529c3a"
        },
        "item": {
          "id": "46570761-0964-4b8d-b994-fdb33d3dad9c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "0c040d74-9340-4282-91e3-c5289c8846ee",
          "status": "Created",
          "code": 201,
          "responseTime": 2239,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "e2005cff-94ab-4023-9482-9cdbd1d3b771",
        "cursor": {
          "ref": "8d99ecdc-eab7-44b8-9b9e-37e943005f86",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7f6cbeda-d25a-4b6c-9cf6-5e255b3fa988"
        },
        "item": {
          "id": "e2005cff-94ab-4023-9482-9cdbd1d3b771",
          "name": "credentials_issue"
        },
        "response": {
          "id": "31c95d51-458a-4754-9c8c-e999bc6d5129",
          "status": "Created",
          "code": 201,
          "responseTime": 2470,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c1ad411-a227-446a-a3ac-56d0e8bc59c7",
        "cursor": {
          "ref": "01ad04b9-258e-4117-b84a-921267e87398",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "fed1581c-705f-4df6-8a03-63c4e7aaf175"
        },
        "item": {
          "id": "2c1ad411-a227-446a-a3ac-56d0e8bc59c7",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "3015ad23-63f0-49f2-b2c2-1cbc9618b9d0",
          "status": "Created",
          "code": 201,
          "responseTime": 3335,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b48d5a7d-8ce3-478f-97e7-eb7f2a13c15f",
        "cursor": {
          "ref": "b3ccd222-0e39-4590-9363-aa25ebf13381",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "34175449-7e5e-451d-b821-bee1835cbe6e"
        },
        "item": {
          "id": "b48d5a7d-8ce3-478f-97e7-eb7f2a13c15f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f82f3ca4-630f-4244-887a-bac20905c9a9",
          "status": "Created",
          "code": 201,
          "responseTime": 4842,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3979e09d-c205-4523-b77e-9918d3991d05",
        "cursor": {
          "ref": "8e671b08-2269-4b02-81d1-52a6f7ad698c",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0e60f428-556c-4c6c-aee2-e6bd504de237"
        },
        "item": {
          "id": "3979e09d-c205-4523-b77e-9918d3991d05",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c1141ff9-386e-435d-9dd7-5f0f8e542044",
          "status": "Created",
          "code": 201,
          "responseTime": 2400,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7231d88-8489-406c-830f-21325ec554a9",
        "cursor": {
          "ref": "8b2bb242-9dae-4487-a6ee-0e8c13d8f7c2",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "78c2916f-123c-48f5-8c71-67240bca5446"
        },
        "item": {
          "id": "e7231d88-8489-406c-830f-21325ec554a9",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "bc363710-b917-4147-86d1-25acb58f5f60",
          "status": "Created",
          "code": 201,
          "responseTime": 2262,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-21T00:38:38Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-21T00:38:38Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "f3dd6640-1ff5-4087-a3da-efbde60b68eb",
        "cursor": {
          "ref": "2739e3ef-e2a0-4bbb-8503-21c1233b0845",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2ed92fda-8c30-4957-a578-a42c6352d654"
        },
        "item": {
          "id": "f3dd6640-1ff5-4087-a3da-efbde60b68eb",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f83d1379-9980-4560-a868-ecba74431f4f",
          "status": "Created",
          "code": 201,
          "responseTime": 2363,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d220165c-f34c-41de-9b19-da03b188fde9",
        "cursor": {
          "ref": "99b28660-3cac-44ee-bc59-70d627892f57",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "932a1c3b-c989-41d2-b95e-491140b91ec4"
        },
        "item": {
          "id": "d220165c-f34c-41de-9b19-da03b188fde9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f81a8314-ed50-4a19-b262-41dd5657b9b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d220165c-f34c-41de-9b19-da03b188fde9",
        "cursor": {
          "ref": "99b28660-3cac-44ee-bc59-70d627892f57",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "932a1c3b-c989-41d2-b95e-491140b91ec4"
        },
        "item": {
          "id": "d220165c-f34c-41de-9b19-da03b188fde9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f81a8314-ed50-4a19-b262-41dd5657b9b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6288f32f-43ab-442f-aa7c-e7e017009a67",
        "cursor": {
          "ref": "51e903fc-a383-4677-9b10-b2be2561601a",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "630568d6-a9bf-4422-8ded-d9a78092139d"
        },
        "item": {
          "id": "6288f32f-43ab-442f-aa7c-e7e017009a67",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1240f2fa-526a-453b-ae81-de8164acbd34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a64d99-e273-44d0-8cf5-ba07aea603e6",
        "cursor": {
          "ref": "85933314-d4ce-4566-aa1b-383502333e27",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f6253c53-f0e7-4e9d-9ef7-6c42263ecd87"
        },
        "item": {
          "id": "53a64d99-e273-44d0-8cf5-ba07aea603e6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3e3f473b-a69a-491a-85e7-daa264d8a1f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2428d28-494c-4cf7-be70-8302fcd67ce4",
        "cursor": {
          "ref": "35daa885-69a7-4901-8c08-1a4e3ab75f04",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "390fc488-d1c0-43f5-a9aa-701f30576c8b"
        },
        "item": {
          "id": "a2428d28-494c-4cf7-be70-8302fcd67ce4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3e0a1bca-de80-4cb2-abe7-66e1ab3ef4de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3805312-7424-4bf0-b4c5-543993877238",
        "cursor": {
          "ref": "b0ec9e69-2e6f-4521-b710-8109385052ff",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c834a864-df74-41cf-9b72-755501f6613c"
        },
        "item": {
          "id": "c3805312-7424-4bf0-b4c5-543993877238",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5454daf2-8dcf-495b-b04f-e687e6c7a004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e142487f-53ae-41fc-8e9c-e8e87b10712e",
        "cursor": {
          "ref": "51e166cd-5615-4801-a16b-dafb3307407c",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1877cc68-e8b8-4aae-b520-7cb519b9ac3f"
        },
        "item": {
          "id": "e142487f-53ae-41fc-8e9c-e8e87b10712e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5f97e931-3db6-4d5b-9368-b1bb428c7f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3af8b870-93ba-4fe0-8f08-6c7316c9b270",
        "cursor": {
          "ref": "0d2c7cd8-4c74-4703-8b46-1d2d03cd2d16",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "23cf77e9-1dab-49f9-a301-c05037e7333c"
        },
        "item": {
          "id": "3af8b870-93ba-4fe0-8f08-6c7316c9b270",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e359c852-e5d7-45da-bf12-b51626637ec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1a8856-0361-4c8e-b66d-fa4845844fe9",
        "cursor": {
          "ref": "11860496-78da-45f8-a11b-e7859dd6dade",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e37fe961-ad61-4cb2-aeb0-356372c58fe3"
        },
        "item": {
          "id": "ad1a8856-0361-4c8e-b66d-fa4845844fe9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a83c41e9-ed4b-4c2c-b18d-d947c6df4b9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50797631-5871-4f21-8f31-2e87a6235d63",
        "cursor": {
          "ref": "50ae4e35-77e2-4459-bb80-2f82fb6c14d8",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c8015842-4ce5-4b24-a5ff-a69932a5f160"
        },
        "item": {
          "id": "50797631-5871-4f21-8f31-2e87a6235d63",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7f3bb4a7-2709-4f0e-add0-281d945c4786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9932c82b-0ce2-4776-aacc-ece55925eac9",
        "cursor": {
          "ref": "d1d4835f-634e-4c90-9052-6e14dfa33b4e",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "61230847-29e8-40a0-a524-c11ad57cabce"
        },
        "item": {
          "id": "9932c82b-0ce2-4776-aacc-ece55925eac9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e4787ba1-0b3a-467d-8809-eb71734d3faf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9aa2f0d-1d4b-4099-a0ad-ac3de96c1b27",
        "cursor": {
          "ref": "31c5465a-bff0-4df0-9cd1-7f14742b51e1",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "147133fb-b1cf-4b75-b2d4-636772358a98"
        },
        "item": {
          "id": "e9aa2f0d-1d4b-4099-a0ad-ac3de96c1b27",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1fbe019e-0da7-4a86-b57f-f16288f5ecc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651b9e48-88f8-4011-98e9-9241831164ae",
        "cursor": {
          "ref": "fd8c933f-0536-4b8a-93ec-1b245ae77425",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "136a46bf-3e28-4e27-ac8a-9ea9efdeafd7"
        },
        "item": {
          "id": "651b9e48-88f8-4011-98e9-9241831164ae",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "dff98eb4-28d7-4855-92ba-b79cbb0be9a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "935622c5-70c9-4a55-8ed3-69fbb96206a8",
        "cursor": {
          "ref": "a9871ed4-ca67-4486-9b1b-b67d1eb46045",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "bf7bc5b7-1f81-4d9d-b06a-4c6da171eb51"
        },
        "item": {
          "id": "935622c5-70c9-4a55-8ed3-69fbb96206a8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "6a36b42b-dbb7-46e8-87f3-e86988b5d945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f7a633-cec1-4c8a-bc78-5b089f86114f",
        "cursor": {
          "ref": "cbb7d588-0cec-4af9-a3cc-560c75a065d2",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "116793a6-dc00-4cde-837e-6f11f12fe384"
        },
        "item": {
          "id": "06f7a633-cec1-4c8a-bc78-5b089f86114f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "593bfb60-8f99-4688-8f32-35d5ee0579dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22ed01b7-fec4-4f80-8973-30044e974733",
        "cursor": {
          "ref": "91d66cad-1f96-46ab-99d3-192f26324737",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "754aadb1-5ad1-4e0e-9245-96332055d373"
        },
        "item": {
          "id": "22ed01b7-fec4-4f80-8973-30044e974733",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1a234006-92a0-412f-b377-cfc6494c8a76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "310b703f-a0b6-4cbc-ad91-3206e4442a78",
        "cursor": {
          "ref": "fa556f62-7874-49e7-bf70-2807f338d537",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "22fcc74e-30a2-448c-b276-867609980719"
        },
        "item": {
          "id": "310b703f-a0b6-4cbc-ad91-3206e4442a78",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e46d18f1-0917-4db6-833b-492a6f31cecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbb65c2d-955a-4cbe-a692-399cbc783e5f",
        "cursor": {
          "ref": "4cf9c30e-0fef-4180-a712-b0cd01cba2e2",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "58fbf7b2-3704-45ad-8e8c-781e3827fbf0"
        },
        "item": {
          "id": "bbb65c2d-955a-4cbe-a692-399cbc783e5f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "37eadd5a-286e-4e90-b31e-223a26a8469a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b493b13a-e72d-4137-b1ca-54142cf58a42",
        "cursor": {
          "ref": "29b5468e-6cf6-4c70-8b4b-6c10a8b9428f",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "fe59e648-007c-492a-afc7-35267ce67e6b"
        },
        "item": {
          "id": "b493b13a-e72d-4137-b1ca-54142cf58a42",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f84483e5-f1b5-4bd1-9440-eb2cc8fdfe73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b224e6d0-ea8f-4e38-8bd3-a81284f6b868",
        "cursor": {
          "ref": "47ade1ee-ac12-477b-8984-1ceda44213be",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7ed07db8-2e0d-4078-a71f-f88436e7eff6"
        },
        "item": {
          "id": "b224e6d0-ea8f-4e38-8bd3-a81284f6b868",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0c919356-cf26-431a-b5de-4315c4681233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aac91e1-a27e-4d15-b4c3-218e51a2aaa1",
        "cursor": {
          "ref": "958760bf-5fee-4ba7-b0a6-60bc70754618",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "622af382-15e9-4dda-8f4d-4f1bdb62e092"
        },
        "item": {
          "id": "7aac91e1-a27e-4d15-b4c3-218e51a2aaa1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "db606ea8-9905-4609-9230-c47fe2fe5a7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f1dcdb-db28-4181-a0a4-822fa6f5fd95",
        "cursor": {
          "ref": "e1f03b57-1cd3-4fff-9470-173ce853a5b5",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "734babfd-e3d2-4aac-bdde-4479f8e13161"
        },
        "item": {
          "id": "64f1dcdb-db28-4181-a0a4-822fa6f5fd95",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e3546cb9-efd7-4a53-848f-ec1a78564691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a4e3c4-22b4-4846-9934-51c26c39799f",
        "cursor": {
          "ref": "8cf5f35f-e5aa-49bb-8651-4d29bafd92a6",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1600b688-3705-4318-a219-8a008eb71841"
        },
        "item": {
          "id": "d4a4e3c4-22b4-4846-9934-51c26c39799f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "90e83e5e-4309-42f0-9c78-a104de8ca0bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9b9593c-f645-4e22-88b9-2a0f17e466f4",
        "cursor": {
          "ref": "1f1e8bec-2161-40d1-b8e4-f8f18ee6f6fb",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7dcac9ab-7f09-4d35-93cf-2e750fdbbad1"
        },
        "item": {
          "id": "e9b9593c-f645-4e22-88b9-2a0f17e466f4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2f001f11-a694-4167-98e1-8062aee62cbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b28cbf-eaa3-4fad-b19f-92efad9005de",
        "cursor": {
          "ref": "52ab3e65-ee05-468a-9303-982b2d4a3121",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "305d21fa-eba7-4bdc-b6e1-92fa6c83f473"
        },
        "item": {
          "id": "05b28cbf-eaa3-4fad-b19f-92efad9005de",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2336ff4a-d7a6-48f0-b877-fdb7fb1d8caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec2a4b2-3460-47a1-a040-f09270106cdb",
        "cursor": {
          "ref": "f3fce6de-0c18-4e8d-8363-e404ce6da004",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4940dd57-f6ca-4032-b53d-fcb5ca835a5c"
        },
        "item": {
          "id": "bec2a4b2-3460-47a1-a040-f09270106cdb",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a15e487d-afb7-493b-a8e9-96dac912f2cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1d5a46-1e71-4255-ba10-ae7d1ac054bf",
        "cursor": {
          "ref": "6d81df8d-5bfd-4f1e-a049-9c79606dcadf",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "805bc450-8de7-4f15-9b6c-f22e329166a8"
        },
        "item": {
          "id": "bc1d5a46-1e71-4255-ba10-ae7d1ac054bf",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8edb85d3-0297-4a7a-bcd2-d1650258386c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4826a79e-4a80-4e99-a44f-45e1592a713d",
        "cursor": {
          "ref": "18a1dd86-35a2-443d-992c-ce22b19860a3",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "89d915e7-76ef-46a8-a66f-22a69b3b1392"
        },
        "item": {
          "id": "4826a79e-4a80-4e99-a44f-45e1592a713d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d6ffd478-5848-4150-8a62-a6251f23398c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e70f4f-2b74-467a-9065-bc7c8ef7edfb",
        "cursor": {
          "ref": "d5330c59-8cdd-46d2-9705-0e8a66effaf4",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9ec66113-121d-46e8-8b10-4fe7d5e78f43"
        },
        "item": {
          "id": "34e70f4f-2b74-467a-9065-bc7c8ef7edfb",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0b0dc689-4f01-4073-93f0-3549aae8b85f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ffbc156-a897-4bf5-9386-af5594626c38",
        "cursor": {
          "ref": "56a62b7d-93fe-47a7-8637-8615b248c27c",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "10b4fd48-e80f-40ac-92d5-240104d9fbec"
        },
        "item": {
          "id": "8ffbc156-a897-4bf5-9386-af5594626c38",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "db0d041c-762b-43cc-b2c1-e19da5487e28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b82c8bbd-d733-4566-8c0a-f0bba5f64a67",
        "cursor": {
          "ref": "2d09cc79-374d-4cd5-aef1-db0c307ff893",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ca76c90b-f0b4-4ea6-bebd-d7f117ccdf0a"
        },
        "item": {
          "id": "b82c8bbd-d733-4566-8c0a-f0bba5f64a67",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8f7908fb-546d-43b6-a50e-39935cda5fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13753803-95ed-44a2-8eff-9d0e83023a8d",
        "cursor": {
          "ref": "74430244-7ad5-4e07-82b5-1b8ea3b8f760",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3e4e0fbc-7374-4b33-99f3-d4aa68f3c6ca"
        },
        "item": {
          "id": "13753803-95ed-44a2-8eff-9d0e83023a8d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "69b51335-d9a7-401a-a2e5-eadcee82088d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc2bdd8-ca56-446a-9474-b0a2ff86c21b",
        "cursor": {
          "ref": "ab7cd451-fe22-45d6-8392-a7ecdead6594",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "36cf0a1f-7947-42d8-854c-8887bc410d79"
        },
        "item": {
          "id": "adc2bdd8-ca56-446a-9474-b0a2ff86c21b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "62ea044e-83fd-4053-b495-5ca1b560aa4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e340e4e-0160-4b05-a575-b1aea492ed3f",
        "cursor": {
          "ref": "7bb419ac-82db-4b0b-90ad-69186f3ad06c",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "07aba307-1f9c-48f9-ab02-99feca0b6054"
        },
        "item": {
          "id": "6e340e4e-0160-4b05-a575-b1aea492ed3f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4dcc3e93-f3b4-4a7d-83db-7bbee19afb4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "edad7c8b-a4dd-48e8-9934-47978ed6c2e7",
        "cursor": {
          "ref": "90c2ea17-bf3d-4152-bf89-d45677a48b77",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e698b0f3-b2db-4fd0-a388-32c9e9e78d9d"
        },
        "item": {
          "id": "edad7c8b-a4dd-48e8-9934-47978ed6c2e7",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "670bc4bc-bd2d-4e64-ace1-01bf678cbba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "77d50019-010c-4494-a06d-5e27b32a57b6",
        "cursor": {
          "ref": "1f99e95e-df37-4f71-a129-03c59ba21234",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "740225b1-7710-4465-9e9f-7bdb9c0cb7d6"
        },
        "item": {
          "id": "77d50019-010c-4494-a06d-5e27b32a57b6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "effb7c82-2177-4663-bd8f-e68033d98f02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d50019-010c-4494-a06d-5e27b32a57b6",
        "cursor": {
          "ref": "1f99e95e-df37-4f71-a129-03c59ba21234",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "740225b1-7710-4465-9e9f-7bdb9c0cb7d6"
        },
        "item": {
          "id": "77d50019-010c-4494-a06d-5e27b32a57b6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "effb7c82-2177-4663-bd8f-e68033d98f02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc109bb3-caa1-473f-8233-0515919e5c91",
        "cursor": {
          "ref": "b8c69624-6e58-4ffc-9927-b82f0dcfecec",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "00bc8ff3-774e-440b-b1c9-f84ff45621a3"
        },
        "item": {
          "id": "dc109bb3-caa1-473f-8233-0515919e5c91",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "30fc77d2-52ef-4a62-b9c3-319a16f4bb04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea59167b-5b2f-474a-b757-53339581aed8",
        "cursor": {
          "ref": "79606ac2-1f30-42fe-abe4-3620326e2f22",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b5c3fdc2-ac37-4838-adda-fa9aeae4675a"
        },
        "item": {
          "id": "ea59167b-5b2f-474a-b757-53339581aed8",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "25c7576c-2c67-491a-acf4-623f24e5a611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2149c24-2300-43d6-98c3-d16c85fa6a88",
        "cursor": {
          "ref": "9a98c3b2-3059-49ae-85b9-ccd75bcf389a",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6f563daf-e722-447e-96a7-0a8d6b75c432"
        },
        "item": {
          "id": "c2149c24-2300-43d6-98c3-d16c85fa6a88",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "3dd4f148-f7aa-477b-96ac-abf7f9621467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200cc3c8-a514-409f-9c4b-b9ea8b17e3bc",
        "cursor": {
          "ref": "8d3ac250-7496-4c6e-ac21-ae87a79921cc",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "116aa1ea-2a75-4683-a0a0-0fb6fe490d92"
        },
        "item": {
          "id": "200cc3c8-a514-409f-9c4b-b9ea8b17e3bc",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6acc3111-3266-46e6-94f1-d9fa6f841eb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "903cbd80-26c4-44e9-a275-b74334cac3ef",
        "cursor": {
          "ref": "58f4533b-dbf6-4480-895c-1021160c4c38",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3a08c666-30d5-4aa0-9e3f-ac47b3d46d97"
        },
        "item": {
          "id": "903cbd80-26c4-44e9-a275-b74334cac3ef",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "14e40967-ffc3-4a72-b7f9-88ae893eaa74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b116dcbf-e5f3-4d78-aaa7-23b9c54052d0",
        "cursor": {
          "ref": "cf57cc63-8053-4f09-8961-1cc80593229d",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "27124866-adc0-4c93-b4cc-c126043f729a"
        },
        "item": {
          "id": "b116dcbf-e5f3-4d78-aaa7-23b9c54052d0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1980db19-ecf9-4bf7-87a3-ef29a1b84590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d279f45-87f6-4515-b4f2-9a0c9323555e",
        "cursor": {
          "ref": "b65f553b-40ad-48d8-8603-d62517d6ae57",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "93e2a680-aa92-44fc-8406-313d36e93628"
        },
        "item": {
          "id": "6d279f45-87f6-4515-b4f2-9a0c9323555e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "930e84b0-3c94-4ec4-8196-3b15ea2de5ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "475d7c7a-2c3b-4a63-8472-0a4e1e4998b8",
        "cursor": {
          "ref": "1c83e3ba-4506-4ab6-b991-9600c8866eba",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "dce61368-855d-4df8-8df2-af39255d85ee"
        },
        "item": {
          "id": "475d7c7a-2c3b-4a63-8472-0a4e1e4998b8",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b86ba4aa-1b6b-4ac8-ac33-542203b17e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b48deb0d-a918-4643-88ed-a9d824b1002b",
        "cursor": {
          "ref": "e2119378-6b3f-4064-a17a-fc3fc3a8ddaa",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e658b308-8f2a-440f-ab3e-6cb4b096c9dd"
        },
        "item": {
          "id": "b48deb0d-a918-4643-88ed-a9d824b1002b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a66e869e-e924-4f35-b18b-35bd1215dc01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bf05400-6d57-4d39-8f8a-30fb57a83faf",
        "cursor": {
          "ref": "ce846b74-98bc-4b5f-a57b-8f4c8fff30a1",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2116da6d-fcbc-48b8-a6c0-dd490db3459e"
        },
        "item": {
          "id": "0bf05400-6d57-4d39-8f8a-30fb57a83faf",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3701f438-2914-40fa-ae7e-ab509151e64d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20949ca0-e779-4e59-8724-d2b4e01c010b",
        "cursor": {
          "ref": "94d4ddb1-0c1a-4924-aae8-f75d99b4563f",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "72080052-b115-43ab-a7fc-c3f13d6f0346"
        },
        "item": {
          "id": "20949ca0-e779-4e59-8724-d2b4e01c010b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e9625de4-3f8e-4ed2-aaa6-d64f5e98ca96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d6e958-062a-4b9f-a13c-eecc1d45d7f2",
        "cursor": {
          "ref": "1260cef3-318b-42e5-9df8-992d4a9e7ad1",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ccd44f6a-dea8-4aae-b92a-eeec0c5a0a27"
        },
        "item": {
          "id": "82d6e958-062a-4b9f-a13c-eecc1d45d7f2",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e5f3ffeb-0892-45f6-a62b-a132da43c418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc1f07a-ad73-4610-b2f4-4661386dcd5e",
        "cursor": {
          "ref": "3b45917e-f40a-4b38-8483-3e2012d23da9",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ab798ecf-fac9-473b-b68b-f67f3e731917"
        },
        "item": {
          "id": "acc1f07a-ad73-4610-b2f4-4661386dcd5e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "430a5ad2-f85b-448b-894d-a8bba6003b7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae3a7acc-6933-44ba-aa65-13dc762dd252",
        "cursor": {
          "ref": "e007ab8b-e806-44eb-b367-c09034f52d51",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "2d5761cc-f6fc-442c-abd1-9de4db5e2f3a"
        },
        "item": {
          "id": "ae3a7acc-6933-44ba-aa65-13dc762dd252",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5e87dd5c-bc0e-4760-b843-9295da64da3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "686990cb-4e1e-4132-baa9-da5a716d4256",
        "cursor": {
          "ref": "9f342da5-808d-4e1f-8d94-de7ba5c996e3",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "77aec19c-4e0d-4d95-ae48-388ed4549c79"
        },
        "item": {
          "id": "686990cb-4e1e-4132-baa9-da5a716d4256",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6b25b2aa-dc6d-4607-96e7-198f3d1a8817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "549466bb-f8a3-49db-98ae-688af62165f7",
        "cursor": {
          "ref": "dda53cda-312c-4194-b5a1-f14c046c7aa2",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2bdf5a74-89ca-42f4-8e56-e6f2824480be"
        },
        "item": {
          "id": "549466bb-f8a3-49db-98ae-688af62165f7",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "740a30ad-d837-4fe6-9243-b512912a2ccb",
          "status": "OK",
          "code": 200,
          "responseTime": 342,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "9497cf43-957c-4ba0-b9fe-0dad47a6688c",
        "cursor": {
          "ref": "561a474b-2d88-4bb9-b3a2-a1ca4a2ccf92",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "6672655f-a8fa-40d3-9c6e-db1a1aa4605e"
        },
        "item": {
          "id": "9497cf43-957c-4ba0-b9fe-0dad47a6688c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "267086eb-4416-45a3-8c3e-cbb17ba5b0b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eaa6b2f-5e92-47f0-9ecf-b89e228e5bfb",
        "cursor": {
          "ref": "dcf6e93c-ca3a-4bda-8e9c-c97965121dcf",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "49f8628d-cfe0-4109-89de-d2e5d9d72c86"
        },
        "item": {
          "id": "8eaa6b2f-5e92-47f0-9ecf-b89e228e5bfb",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1d214691-6c5d-4c68-9437-97a479aa4602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b656999-4bd0-4910-b351-971d142e3713",
        "cursor": {
          "ref": "62ae9f11-2675-475e-8a3d-5b2b51ef42b6",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "591d285d-afff-4cc2-a339-baf73709953c"
        },
        "item": {
          "id": "5b656999-4bd0-4910-b351-971d142e3713",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5c2da901-f46a-41ad-b2cd-a3c42df434b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6513797-0c69-4aac-97bb-e4a0e97c295d",
        "cursor": {
          "ref": "031d497f-79e4-4ffa-9251-8acfd97502fb",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e0593465-65a4-4d05-a256-674a476f46c6"
        },
        "item": {
          "id": "c6513797-0c69-4aac-97bb-e4a0e97c295d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e2569b0a-3853-4bf3-aa2b-ccc327002a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3adc5896-db84-40b9-869c-a1e73abc355b",
        "cursor": {
          "ref": "d0942a54-a592-41fd-b643-bc0d9bf7507b",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6fca93ec-84e1-4804-ae03-91d68969c097"
        },
        "item": {
          "id": "3adc5896-db84-40b9-869c-a1e73abc355b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "67d34067-2fec-481e-96f1-1839e2a9c7f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3332621-4959-4066-9f2a-3cd6f75fb847",
        "cursor": {
          "ref": "b8af295e-720a-4daa-9b96-a30094743333",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "de6df816-14de-4640-8222-ded2c6de281b"
        },
        "item": {
          "id": "c3332621-4959-4066-9f2a-3cd6f75fb847",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "984682d8-57dd-42db-8951-9fe525f68c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "858d2899-b58b-4af6-9eca-cfd95034b571",
        "cursor": {
          "ref": "363d5de9-85ee-4b3c-8d5b-7f644cf0dd8e",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7f6c1908-8b4a-42c5-9f45-314a78667961"
        },
        "item": {
          "id": "858d2899-b58b-4af6-9eca-cfd95034b571",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "debecdb4-ba5a-4ab7-be92-164402019ff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13d63f61-8002-4ea2-abac-824b5067b7b8",
        "cursor": {
          "ref": "8bc8d606-8485-45e8-84c0-93192fac0680",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1afbce87-e0af-4485-9d43-861dd4e7de23"
        },
        "item": {
          "id": "13d63f61-8002-4ea2-abac-824b5067b7b8",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "61561b97-bdd2-4876-9d81-5adff8ab2ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3247b56-a38f-4f73-8572-489f38f88ba7",
        "cursor": {
          "ref": "e4017e34-664c-4e0d-b545-2e689adf0227",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6ab8fad6-4601-4361-9d03-9c94b220ce9a"
        },
        "item": {
          "id": "b3247b56-a38f-4f73-8572-489f38f88ba7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "77bcc6a6-2378-4d8d-aee6-62a6c3654371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce5f49a-7e25-4849-ba05-1b944866bb3c",
        "cursor": {
          "ref": "1b3de439-6bf8-479f-8937-0d75950eda1e",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "450c103e-3e6e-44df-b59a-5129882fddad"
        },
        "item": {
          "id": "8ce5f49a-7e25-4849-ba05-1b944866bb3c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8e34034c-3bad-49bd-8ac4-ee5994e273f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fae81066-6e50-4edb-bd0d-22fab0efd296",
        "cursor": {
          "ref": "98abea3e-15be-4970-a5a4-36bed5426a57",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "cb38be86-f394-42b3-8f6e-6273b6d0de68"
        },
        "item": {
          "id": "fae81066-6e50-4edb-bd0d-22fab0efd296",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "212bc2af-0390-43c2-8931-5e570b0b2b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40b98fe3-f2c5-4ff5-a0f7-8efba94dbd12",
        "cursor": {
          "ref": "c7f23c04-9d3f-4f15-9eff-1124226cad42",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "67fa0898-f444-406d-89e2-5117f8498185"
        },
        "item": {
          "id": "40b98fe3-f2c5-4ff5-a0f7-8efba94dbd12",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "760d20a5-b5e8-4633-a42b-c7172d14b46a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f5178c8-72dc-4a6b-8c95-54504387ae22",
        "cursor": {
          "ref": "4479806c-5b97-4233-a082-a070392f461d",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "3b9661a8-3305-48aa-a796-112c9ea94aec"
        },
        "item": {
          "id": "9f5178c8-72dc-4a6b-8c95-54504387ae22",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e4d9024c-d31e-4a70-90db-4d4740bd3ce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61983394-e52c-4250-aba7-1ecae40b9977",
        "cursor": {
          "ref": "a097651e-d5cd-457c-b9f7-8a547bdb89db",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "da12366d-78ed-476b-aed3-e10472cc2351"
        },
        "item": {
          "id": "61983394-e52c-4250-aba7-1ecae40b9977",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "7baf4771-ebd3-4f78-99a0-9259eb19de11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67280821-4a4a-4ea9-8ea5-f4a3c08348f6",
        "cursor": {
          "ref": "b67293f5-0826-44f6-b26a-7505659a50ce",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "48d5ad1f-09c5-4bae-9af4-d7d6cc4d9ed4"
        },
        "item": {
          "id": "67280821-4a4a-4ea9-8ea5-f4a3c08348f6",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "72d4d69a-7919-400a-a05f-61387b410f9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81fe3a2a-8568-4798-854c-aba3c57596d9",
        "cursor": {
          "ref": "7c735425-2ac5-4264-9688-3bad83d779d9",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b396db77-c5cd-45e9-af24-54eac138205a"
        },
        "item": {
          "id": "81fe3a2a-8568-4798-854c-aba3c57596d9",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "30bd09c9-0666-40e7-bd6d-b12db9a93053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb796379-eed8-478e-a37f-ef73182cc6ac",
        "cursor": {
          "ref": "9a334d26-25ec-4fe7-8283-ee4a5a4a4b17",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d68852da-173f-4f61-a0e2-33571939ac19"
        },
        "item": {
          "id": "eb796379-eed8-478e-a37f-ef73182cc6ac",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3221cef2-3eb4-4c75-b828-e679689b5aba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87be9fae-cbcb-41aa-b65d-60d476fcd648",
        "cursor": {
          "ref": "c9a58223-df44-43cd-957a-f577083d613d",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "98cc8873-886f-4231-a463-907a73a4cd41"
        },
        "item": {
          "id": "87be9fae-cbcb-41aa-b65d-60d476fcd648",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "28db8b07-3508-4dd6-9578-e3ad68966fed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ad5204-a369-4ed6-bf0c-d7c3e90678bf",
        "cursor": {
          "ref": "8fd6c27e-d9df-47a4-8b11-cac34cbd1b42",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a130d1a5-d806-4998-b094-1cee68befdd0"
        },
        "item": {
          "id": "16ad5204-a369-4ed6-bf0c-d7c3e90678bf",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c999c915-ec2c-4ba3-94c1-492a46be5eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605f7c03-16d8-43c8-b8d2-6be0850512ad",
        "cursor": {
          "ref": "905161a4-7e59-4dd9-9bbd-f991f5dfab92",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "08a486cf-03db-4027-a46f-50acf47aac61"
        },
        "item": {
          "id": "605f7c03-16d8-43c8-b8d2-6be0850512ad",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "62be781e-e9fe-42ea-bf71-2476230265e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5f34294-7f79-4b80-83e3-ffd910d8d279",
        "cursor": {
          "ref": "3e048187-97ce-4966-b7ae-2f36874fe9e3",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5bb87e8d-0652-4c23-8c88-48bbd1e85219"
        },
        "item": {
          "id": "e5f34294-7f79-4b80-83e3-ffd910d8d279",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0992b74f-deb2-4c7c-a27f-f67d580cc43e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6807efcd-50a9-44da-906f-02f121199805",
        "cursor": {
          "ref": "3a9cbd5c-1a6c-4ffe-9b03-4fa69ec2ade7",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "28a5e281-f493-4ffd-9e24-63c521b6f42a"
        },
        "item": {
          "id": "6807efcd-50a9-44da-906f-02f121199805",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "bce98625-0f66-4d30-8e5c-8aae6516f8b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "146a9d69-edc6-4e5d-b724-816b204c067b",
        "cursor": {
          "ref": "66ea840c-b6ea-40f5-8afc-c54a1827f517",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "86185ba0-ffc8-4225-bd29-55acf516d815"
        },
        "item": {
          "id": "146a9d69-edc6-4e5d-b724-816b204c067b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f369493c-149e-4c80-b014-8eb40af97454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa596bf-766d-45ad-bdf0-a85ebd65a78a",
        "cursor": {
          "ref": "f72c9cee-004d-41b4-8d8b-7c4fff0fe9a3",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "16e370bf-0f58-4d0d-b4d3-457dc275a0c6"
        },
        "item": {
          "id": "afa596bf-766d-45ad-bdf0-a85ebd65a78a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "9d41fa10-c186-4428-9f43-4ba737b159ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1588b89a-798f-420f-a8c4-383daaf93548",
        "cursor": {
          "ref": "50196c1a-13c1-4d0a-a940-a9a710266215",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a46b2073-c85e-4fe2-b2af-ca38bf3a53c5"
        },
        "item": {
          "id": "1588b89a-798f-420f-a8c4-383daaf93548",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c4ff1f25-6fb0-4fad-a22f-4a95b608bf7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e706ab0-4ec3-4fd9-8563-e117a2cc47b4",
        "cursor": {
          "ref": "8dd74572-a5c7-46a4-a550-e3b4999fe42c",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "18eecf7f-0eeb-4622-abf7-d38bc9d90f37"
        },
        "item": {
          "id": "2e706ab0-4ec3-4fd9-8563-e117a2cc47b4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ea7e03a2-bb70-4487-b8cf-36e244f4d70b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f776e6c2-6ba4-4c0c-91d3-d121e500b665",
        "cursor": {
          "ref": "1e4acc4d-ba54-43f1-84d9-ea6e1b3a975c",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "76e5935f-c4a5-455d-873f-db8c431782bb"
        },
        "item": {
          "id": "f776e6c2-6ba4-4c0c-91d3-d121e500b665",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "fbb45adf-96f8-4ecc-bfe5-41bf214aaf48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8fa4f32-a0b6-43e6-90c7-27f21523d0b3",
        "cursor": {
          "ref": "da914170-8e89-44ee-a835-3a5739467468",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a8e3049d-af9e-423a-aa0d-34501e953c10"
        },
        "item": {
          "id": "c8fa4f32-a0b6-43e6-90c7-27f21523d0b3",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7d23fabf-17c7-4949-9b12-c992ef2521a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b98c4c0-2b09-426b-b549-f5de5efa66c8",
        "cursor": {
          "ref": "c584e9bc-eceb-4797-a1f8-8f00bb5d56c5",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1d4269bb-7105-4a36-bda5-8c9e5bfc5948"
        },
        "item": {
          "id": "9b98c4c0-2b09-426b-b549-f5de5efa66c8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "56a56ccf-2515-42f3-900d-b65a36482571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf607090-594e-4e39-ab9c-68d1ff1cbc60",
        "cursor": {
          "ref": "4eaa8267-79f9-416b-9711-f145b46a27e4",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ab6344ff-6a37-4711-8638-1653d9826c66"
        },
        "item": {
          "id": "cf607090-594e-4e39-ab9c-68d1ff1cbc60",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f56c9b57-f433-4093-83a7-b5e5ca9a8067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b64523-a51a-4068-b363-778dcef81697",
        "cursor": {
          "ref": "829ce326-1e64-4806-a7b4-4cc594d0e981",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3c800295-b105-428f-b330-a7c1bccae2e9"
        },
        "item": {
          "id": "04b64523-a51a-4068-b363-778dcef81697",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "ebf40437-1038-4ff4-a0eb-8f8fc0a902b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d0b4fd-ef22-4b00-8385-f99c565f90d0",
        "cursor": {
          "ref": "086db83e-8772-4a1f-8f1a-bffef467f1cf",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "724651ba-a180-45d3-a598-db487b0d5a49"
        },
        "item": {
          "id": "98d0b4fd-ef22-4b00-8385-f99c565f90d0",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5a8f1b83-57b6-4e4f-993f-c6deda527546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273d545e-20db-446c-a56e-fe08396824b2",
        "cursor": {
          "ref": "7a547f0a-170a-4278-9fe2-08a2f14175e3",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a70ba134-77a2-486b-a21b-8d067b6a49f8"
        },
        "item": {
          "id": "273d545e-20db-446c-a56e-fe08396824b2",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "23ddf60d-1a08-40bd-8962-5626b9f73a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e487b7-6607-4f33-a202-61cd5a295ac3",
        "cursor": {
          "ref": "fff99e4d-a316-486b-830b-07b57bb23c58",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b0abb130-4ee3-4cea-89de-441da31e85fe"
        },
        "item": {
          "id": "96e487b7-6607-4f33-a202-61cd5a295ac3",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f08a99fa-2000-43c8-81c6-fdd207a83d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e3df750-f19f-44fe-90f3-97770cdf511f",
        "cursor": {
          "ref": "e4146858-988f-4e7a-92fd-b1a60d44f177",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c5b0466e-b724-42d3-9047-0d88266c01e6"
        },
        "item": {
          "id": "9e3df750-f19f-44fe-90f3-97770cdf511f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ed62f40e-bdce-439e-9edf-8fc6c7063e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef2da55-7e71-453e-918e-02d99b826ec3",
        "cursor": {
          "ref": "177a97aa-c0f4-4fc7-9a14-c81b23168e3f",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b4c7027d-c984-49e7-a084-12721fc401f5"
        },
        "item": {
          "id": "4ef2da55-7e71-453e-918e-02d99b826ec3",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "556190ca-2bc9-4a4b-b272-87259c4bf8d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "903cc1da-2dfa-4555-8b68-894d8f710e35",
        "cursor": {
          "ref": "a79815de-e48b-4317-987f-3365f3916960",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b3da3032-0268-4282-921d-a2816c9e3b3b"
        },
        "item": {
          "id": "903cc1da-2dfa-4555-8b68-894d8f710e35",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "80468f0c-927c-4240-b981-1a075851fde9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e7048f3-0b3b-4940-a24c-98705147198c",
        "cursor": {
          "ref": "7b61632b-4180-4c1a-a756-501ae7b998af",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "99b3325d-49c3-49d5-bc52-8b16bf105dd6"
        },
        "item": {
          "id": "2e7048f3-0b3b-4940-a24c-98705147198c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "462e82a1-bdca-485c-ad91-9fb870de0c7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de4eaf01-b58f-4ab5-a921-e8b63cad4f13",
        "cursor": {
          "ref": "db048a49-429f-4c69-9537-9ea7545272b8",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "137cedb9-6d69-427f-a709-cb0e46312a52"
        },
        "item": {
          "id": "de4eaf01-b58f-4ab5-a921-e8b63cad4f13",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4381cbaa-bcb1-47d2-98d0-cc612483e553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b79f0c12-a65e-4b7c-84e2-cb750980fd0c",
        "cursor": {
          "ref": "01c69383-ee1f-42a0-ba16-616cf93a425c",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7f3cbc13-f422-48d0-9d7d-5311da808db7"
        },
        "item": {
          "id": "b79f0c12-a65e-4b7c-84e2-cb750980fd0c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "34cb349f-4499-4f40-afe4-7e49e1474958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d692516a-fb78-4326-8ba5-920b6ec87a39",
        "cursor": {
          "ref": "e24f061a-b95a-4259-bc27-21cdcb8ba9dd",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e34d6339-e64d-40b9-9f4f-2b62b99b7669"
        },
        "item": {
          "id": "d692516a-fb78-4326-8ba5-920b6ec87a39",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "2b3119bd-c91c-4798-b43b-de0200e0d99c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a562328-cfc8-4760-9446-34107f5a9001",
        "cursor": {
          "ref": "3a838c1e-52c4-4120-a312-aa5d396a7b8a",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f60fe22f-dbec-416e-b055-c6ae290cc513"
        },
        "item": {
          "id": "1a562328-cfc8-4760-9446-34107f5a9001",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "08448a6d-afae-48fb-b611-274869908803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a4df0c-b9b0-4119-85ac-c0d267c35872",
        "cursor": {
          "ref": "5cd4b3e9-264c-4f67-9d77-3e10e0372442",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4ce2bfa9-463e-4cc8-9e7a-52226063f9db"
        },
        "item": {
          "id": "b6a4df0c-b9b0-4119-85ac-c0d267c35872",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "fe12c0d2-6a2b-468d-aa21-f8f73675167a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb24f638-99f8-477e-ad09-eccb087c6d35",
        "cursor": {
          "ref": "01cf6079-2acb-48de-a6d1-cae1191ecf45",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "387fe6b6-c546-4fd9-ba26-b58c3ec8d281"
        },
        "item": {
          "id": "fb24f638-99f8-477e-ad09-eccb087c6d35",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "681d1cf8-2e28-4e0a-99d7-a94ebd57bd2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4119c2bb-80ff-4347-a972-3038ff80384e",
        "cursor": {
          "ref": "1710208c-bc9c-40fa-b2e6-3d4d07fe208d",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "addec62e-a822-4d73-9ce8-3302690f770f"
        },
        "item": {
          "id": "4119c2bb-80ff-4347-a972-3038ff80384e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "fcf02ae6-96d3-439e-92b6-be466495eb7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e1ff5f-785a-46a4-8a16-e701f4174cd1",
        "cursor": {
          "ref": "6c9cb6c6-b08d-4c43-a68c-9541b729bd94",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "77eed7c6-2173-444c-b88a-d5a49841bdef"
        },
        "item": {
          "id": "c5e1ff5f-785a-46a4-8a16-e701f4174cd1",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5563ddf3-3d06-492f-b5cd-df38549180e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17daca24-fd26-4349-a374-5a3a86b30025",
        "cursor": {
          "ref": "68b76543-8eb8-420c-a1a9-8a26d5f4aa32",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "36d6fe50-5f69-47c1-9e96-7c8ef5d4fa96"
        },
        "item": {
          "id": "17daca24-fd26-4349-a374-5a3a86b30025",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "17d5ceac-ee25-475e-a00b-cc91966abe62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fd6655e-8030-4f97-a6e1-dfc277859687",
        "cursor": {
          "ref": "384db80f-2d5b-49b6-9fac-939af4f0d996",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "89bfab61-e300-4718-90aa-6bd83b29fd51"
        },
        "item": {
          "id": "0fd6655e-8030-4f97-a6e1-dfc277859687",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "fa4bef86-2ffd-4d69-b510-58cc27abbdba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3fc0d7-09cd-4368-87ba-23ab4cf596fe",
        "cursor": {
          "ref": "e5c45d4e-7460-48fc-8378-69053bb52e64",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "fcdecfee-ee1e-4e6d-9037-059938f46f47"
        },
        "item": {
          "id": "ef3fc0d7-09cd-4368-87ba-23ab4cf596fe",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f8fe5673-ae53-43b5-ad1c-f0b68f9b5b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d33e15-5a19-43ff-9b2d-b071fe50f808",
        "cursor": {
          "ref": "2fcb9070-19c7-40cf-8ef1-bc613295b431",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "f8bf57a6-bd9a-4eeb-ba50-ec77bb5ac425"
        },
        "item": {
          "id": "02d33e15-5a19-43ff-9b2d-b071fe50f808",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8e2b45ef-c229-4fc0-bb68-ff1a10cccd96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "970c0b07-4ec7-4bf7-abb5-361db695a5a0",
        "cursor": {
          "ref": "f65939ba-a0c1-40d2-b37e-89de5a69fd9c",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e95d8378-a864-48e5-863c-8399318c23c9"
        },
        "item": {
          "id": "970c0b07-4ec7-4bf7-abb5-361db695a5a0",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ee49b8a1-0eda-4b81-b4c9-42b2862f4fb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f53fddbd-f37d-411c-b9bc-087845ba52e5",
        "cursor": {
          "ref": "580a000c-c3f4-45e1-8961-d227f6166df2",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d680656c-9a1c-4aa7-930b-60324ed9534d"
        },
        "item": {
          "id": "f53fddbd-f37d-411c-b9bc-087845ba52e5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e0a43dd7-8e90-4699-9674-520e88832ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b5c5509-e36c-4ba3-858d-e1e25916b36c",
        "cursor": {
          "ref": "d2dce341-94ca-4012-a31e-1d1102707b75",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "66ec34c5-f551-4f36-a5aa-7a6916eea3d1"
        },
        "item": {
          "id": "7b5c5509-e36c-4ba3-858d-e1e25916b36c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "bf442a3c-19ea-4dcf-a71a-b09c7ed1b614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff65330a-778f-4e59-ba4a-e90be6741137",
        "cursor": {
          "ref": "cda61be8-1af8-49c1-b979-cc2234387eb3",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "20c1b28a-088a-4377-a447-32d8f0ac5c88"
        },
        "item": {
          "id": "ff65330a-778f-4e59-ba4a-e90be6741137",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ac27e4be-1df0-4998-b2e9-581b3ac3bb82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83180d2f-aa29-4f9c-8e5b-26bacda734b1",
        "cursor": {
          "ref": "a0ddbe23-3191-413b-9e4d-6cec69c27264",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8ab0ee24-7e74-4ca0-b26e-90d223fc3682"
        },
        "item": {
          "id": "83180d2f-aa29-4f9c-8e5b-26bacda734b1",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "388ae769-8f82-46af-8951-b9db617c15eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b63ce5be-6391-42d8-9e17-add1e6b64fbf",
        "cursor": {
          "ref": "d97dd39f-73c3-4ebf-8b0f-72c2dbd2bc1b",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "20eb63ac-b05b-42cc-85b4-6e234cea7b42"
        },
        "item": {
          "id": "b63ce5be-6391-42d8-9e17-add1e6b64fbf",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "956cae40-3ccd-44bf-842d-1d0f1602fc7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea806f7-6925-4ed9-9c97-65c2da88d5be",
        "cursor": {
          "ref": "491c5294-ebd5-45d2-915a-1fb29506ceeb",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4323b16e-d2c0-46d3-b550-bc120a8b2cfb"
        },
        "item": {
          "id": "8ea806f7-6925-4ed9-9c97-65c2da88d5be",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4ae3bcac-8828-4f2d-819b-688ddf0de586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7525e109-393b-45c0-9628-480a57c2b8da",
        "cursor": {
          "ref": "e85df562-49d5-4d8f-b22c-423225e2a26a",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f84a6a40-b9fa-4c88-b97d-fdc6488ddd00"
        },
        "item": {
          "id": "7525e109-393b-45c0-9628-480a57c2b8da",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "20ea6649-a092-4034-83de-f0505bf4544d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c9dca4b-31a4-4aeb-ab31-6a966caf6464",
        "cursor": {
          "ref": "e1247843-f3da-49ab-92aa-742bf95245b4",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "19334a54-dfc3-4f64-b0fc-580699ac92a3"
        },
        "item": {
          "id": "4c9dca4b-31a4-4aeb-ab31-6a966caf6464",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "72c3b473-51a5-4b05-a0b7-4ad31fdf980d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f304bd88-8a6a-40c3-bae7-2a53fc386001",
        "cursor": {
          "ref": "86eb2867-d187-415b-8fad-5d9d62774010",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2903106c-9624-4a2d-82d3-0768c8f93d41"
        },
        "item": {
          "id": "f304bd88-8a6a-40c3-bae7-2a53fc386001",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9c5cc781-655c-4803-bb49-29d5e1def6b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ba7e1b-b525-4682-a1aa-343cbcd795ba",
        "cursor": {
          "ref": "7f8a8794-366e-4ae9-a233-18b76f28b4cb",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a73068bc-24ae-4eb1-b84c-ce8371d79f7b"
        },
        "item": {
          "id": "b6ba7e1b-b525-4682-a1aa-343cbcd795ba",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "23a20902-15e3-40b6-a2e8-97272970b946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f672214-4782-4b07-8133-27d35bd54e5f",
        "cursor": {
          "ref": "9cd1035c-44ce-4653-9ec1-b910d3f00fd5",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3072e7b3-0c85-4a99-9d62-6c295b68b908"
        },
        "item": {
          "id": "7f672214-4782-4b07-8133-27d35bd54e5f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "58448f18-09e5-4af2-8e0c-40243ec8ce33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6811381d-365d-4ad0-b9ba-b9cd72c2af5d",
        "cursor": {
          "ref": "9447400d-d880-4480-aed1-662f9bef87d8",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4db6fd0e-d488-4f51-ad31-7d59895f1988"
        },
        "item": {
          "id": "6811381d-365d-4ad0-b9ba-b9cd72c2af5d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "70536129-45d8-454e-9de2-b9c59e7ba795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ddfdbe-ec33-4a52-9fd6-26406d368e2f",
        "cursor": {
          "ref": "86ff7947-95dd-4256-a1bc-4a5112bae37b",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "644f5f80-276b-4453-a634-8f2708bef320"
        },
        "item": {
          "id": "b5ddfdbe-ec33-4a52-9fd6-26406d368e2f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "da085a31-df4c-4e9b-9f6c-50a9d76d769f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e778da8e-5548-47cb-970f-69cc5346ae62",
        "cursor": {
          "ref": "052cc7cd-0a6f-4a73-b476-7305ec8dbd86",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0c117e73-bc9f-4217-b44e-dd9f41d44e49"
        },
        "item": {
          "id": "e778da8e-5548-47cb-970f-69cc5346ae62",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "88e030c3-58e5-4405-b5f5-8752ab7ee549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a3ab4a9-2b93-4948-b671-e2ea2958efc0",
        "cursor": {
          "ref": "05d95358-2e28-40b1-800c-7357c46d39b0",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "252944f9-a11a-4630-8112-9da0ad9d1540"
        },
        "item": {
          "id": "0a3ab4a9-2b93-4948-b671-e2ea2958efc0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2a4010f9-c386-4b30-bcfa-d8608e05437c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa100d9d-02a4-498f-866c-c2f39dcc2027",
        "cursor": {
          "ref": "63dbc942-0ca0-4b12-920d-524c1b1fb196",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e2c849b4-13ae-4888-ae97-8d1b3a59bf53"
        },
        "item": {
          "id": "fa100d9d-02a4-498f-866c-c2f39dcc2027",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a4c171ec-7538-42cf-bad4-bcbfc925ceb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a03292-a1f7-410c-aae3-a0b57b16e787",
        "cursor": {
          "ref": "944b96bf-0cb1-464f-a0f7-05b4f1fe37ee",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c6af0453-f135-440b-8c19-cda7f2a705e4"
        },
        "item": {
          "id": "60a03292-a1f7-410c-aae3-a0b57b16e787",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c62ff0ca-8b10-470b-81b7-db4115913e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac2ae2a-9c5c-4320-ba7e-5be7213c7146",
        "cursor": {
          "ref": "fa01c4d4-c2fa-4179-8a96-615dc10ffed8",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e582a72f-edbf-466c-94a3-3c0e01aa970c"
        },
        "item": {
          "id": "cac2ae2a-9c5c-4320-ba7e-5be7213c7146",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7e883cc8-9f5c-4b48-b621-b79cb889a2ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e8c408-5c59-4945-b4eb-67e8a99850e0",
        "cursor": {
          "ref": "0db37ef4-974b-431f-8963-c53af7e6b103",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9c1bbe49-60f7-4937-8a64-660fb678160a"
        },
        "item": {
          "id": "10e8c408-5c59-4945-b4eb-67e8a99850e0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "faac1ae9-36ac-44e4-bcc7-26b9109cb9f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa8ba3c3-dcd0-4bce-a077-b2a3dc369850",
        "cursor": {
          "ref": "ac2e306f-5323-45af-911a-299654e05515",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "629993c9-1e6f-4df3-81f1-b982e7466d1d"
        },
        "item": {
          "id": "aa8ba3c3-dcd0-4bce-a077-b2a3dc369850",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5fa0aa4f-60eb-41b5-b3cf-2ba439d37889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d35ccb5-d0d1-4298-a6af-f4359966ab46",
        "cursor": {
          "ref": "28474db9-5023-47b7-b144-03a3cecc9d2d",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "aec4e0d5-94c9-4056-85d2-8051f34ddddb"
        },
        "item": {
          "id": "4d35ccb5-d0d1-4298-a6af-f4359966ab46",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "efef4aca-6230-43c2-9c3a-5715215fbc67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5634a5be-d34e-4ee9-a408-9e50f1145930",
        "cursor": {
          "ref": "f99f915b-eab7-4b04-9fdc-49855ac7792c",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "17ae7572-3a54-424e-9e17-c68f78f4cd59"
        },
        "item": {
          "id": "5634a5be-d34e-4ee9-a408-9e50f1145930",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d17d8621-2744-4e8c-aa9d-93ef3106cf6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068efa63-1912-4532-9059-4fe5314bb223",
        "cursor": {
          "ref": "7ef7fdb0-f8e4-40fb-96a9-61175dd7b715",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e6704037-8e09-4806-bd27-8c2b1450ccdc"
        },
        "item": {
          "id": "068efa63-1912-4532-9059-4fe5314bb223",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e7463be3-84d4-4a92-a43a-9b4314f80ff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57972ba-8d83-45c3-9fb5-70017084d055",
        "cursor": {
          "ref": "590ee385-218c-4f9b-9f29-07518a8b3a7d",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "da32e241-1444-4c86-a5ee-139432a9bc41"
        },
        "item": {
          "id": "e57972ba-8d83-45c3-9fb5-70017084d055",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8a8b4de0-83b3-40e3-ab58-355a6af2fab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9183441e-901a-498f-b278-76ed03c94a0b",
        "cursor": {
          "ref": "336f4fcb-ed98-4bb5-9fc2-9f5aa27ae2bb",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "07d2a9a6-62cf-4e8f-83f7-87dbdb36352e"
        },
        "item": {
          "id": "9183441e-901a-498f-b278-76ed03c94a0b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4281836e-27ba-4b0d-ae22-dee311b241e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6248d23-a5de-4f9e-93ec-7923c8b29590",
        "cursor": {
          "ref": "f600b08d-af53-46ce-8d22-b301e4d5f414",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ee1fcce4-ebf7-4225-9bf8-58605d6e566c"
        },
        "item": {
          "id": "f6248d23-a5de-4f9e-93ec-7923c8b29590",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4c799fa7-7415-41f6-a28a-2c7f2a7b18d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c81a26f-3d38-4ba1-84f1-c9e809c4a220",
        "cursor": {
          "ref": "99c9e8ad-ecb0-4880-ace5-0dd3b34341f4",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "eb133d49-5a0f-4d7c-9f1b-44b397586172"
        },
        "item": {
          "id": "7c81a26f-3d38-4ba1-84f1-c9e809c4a220",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "77a31f4b-ea05-446b-a161-122e9f845dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30fc86b8-d8f0-409f-a088-68ac04eaa0a5",
        "cursor": {
          "ref": "d7ce7a97-c2ab-4fbd-9f70-f4d104902a85",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "302073af-437e-4574-82d7-0d5071e08fa6"
        },
        "item": {
          "id": "30fc86b8-d8f0-409f-a088-68ac04eaa0a5",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "0fa3d26a-cba7-4a7f-880d-f0c8dee96831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72cc41ab-1dc1-4790-a078-33d23e18417b",
        "cursor": {
          "ref": "bd1cc296-63be-4520-8087-d498adff9956",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4abad0cc-ba31-4d83-b838-90d54ef4686a"
        },
        "item": {
          "id": "72cc41ab-1dc1-4790-a078-33d23e18417b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d99d9d73-3c2e-4482-8d34-34c85c5c0881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "484c56e4-bd3d-4258-8e0c-44938fd8387c",
        "cursor": {
          "ref": "8fe6a287-13f4-41b7-b8f4-29553c206b1f",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f10819d2-9c7d-4176-8f1d-ee60914fd415"
        },
        "item": {
          "id": "484c56e4-bd3d-4258-8e0c-44938fd8387c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "eda24854-e100-423a-b93b-4036fb269990",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "dfafa4e7-3938-4885-bb96-90d8ef435f4c",
        "cursor": {
          "ref": "c36ff4cc-88e8-41e1-b79a-f3bbf0f18e6c",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "9a458ab1-2077-4a29-9e60-c33674822352"
        },
        "item": {
          "id": "dfafa4e7-3938-4885-bb96-90d8ef435f4c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "af46a6f6-9104-4555-b7b0-fa9a1fa915d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "89096794-766b-43f5-8588-85c5e4d99845",
        "cursor": {
          "ref": "a155b25a-aade-4c40-9cd6-d101e9a00107",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "86794840-e8f2-443c-a9a4-10a01de750d8"
        },
        "item": {
          "id": "89096794-766b-43f5-8588-85c5e4d99845",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "43e8a408-2fcb-4eab-a380-5123a7b4aa2a",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9404dcb-4803-4134-9127-23d453848f0a",
        "cursor": {
          "ref": "f729783e-8024-4ff4-b2e8-99e3d309f1d3",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "eb4c6882-9119-4153-8e97-5ff528cce5d5"
        },
        "item": {
          "id": "a9404dcb-4803-4134-9127-23d453848f0a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "74f39b54-a622-4ac9-b1e3-40b49734deeb",
          "status": "OK",
          "code": 200,
          "responseTime": 2406,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a778a990-8500-43ba-b4e9-ed98862c76ba",
        "cursor": {
          "ref": "000985a2-3373-49de-b6ec-a2dd4d88fa83",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5ae74ffe-b428-4534-806f-8d3635210cf2"
        },
        "item": {
          "id": "a778a990-8500-43ba-b4e9-ed98862c76ba",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "13dbc61c-0ee3-4fe6-a1e7-aa1d9d8bd49a",
          "status": "OK",
          "code": 200,
          "responseTime": 1817,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f34d84c-f999-43be-a520-5dbc167693dd",
        "cursor": {
          "ref": "cd5602a2-62a5-4e6a-869f-eb4512ce7c62",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "876f4e47-2f7e-4a1e-be30-3c28ee0db73b"
        },
        "item": {
          "id": "0f34d84c-f999-43be-a520-5dbc167693dd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "056a4960-a9e9-42a2-8d32-223fcbab85c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "0f34d84c-f999-43be-a520-5dbc167693dd",
        "cursor": {
          "ref": "cd5602a2-62a5-4e6a-869f-eb4512ce7c62",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "876f4e47-2f7e-4a1e-be30-3c28ee0db73b"
        },
        "item": {
          "id": "0f34d84c-f999-43be-a520-5dbc167693dd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "056a4960-a9e9-42a2-8d32-223fcbab85c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "0f34d84c-f999-43be-a520-5dbc167693dd",
        "cursor": {
          "ref": "cd5602a2-62a5-4e6a-869f-eb4512ce7c62",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "876f4e47-2f7e-4a1e-be30-3c28ee0db73b"
        },
        "item": {
          "id": "0f34d84c-f999-43be-a520-5dbc167693dd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "056a4960-a9e9-42a2-8d32-223fcbab85c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "ed967402-1ea4-4e5d-8766-2c8c8ad9f572",
        "cursor": {
          "ref": "8feafa8c-d9fc-4ad3-816d-f84df2b0e1c9",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2df106ec-865f-4c8a-8e8a-02594d7ead82"
        },
        "item": {
          "id": "ed967402-1ea4-4e5d-8766-2c8c8ad9f572",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "2a83df72-413f-4551-9c9a-1d5a1561a5a2",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "3aa68f80-6792-4aa8-8902-d26a688b9187",
        "cursor": {
          "ref": "1c51185f-bac2-4e7f-9040-94d87eae9d71",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c75ccb67-83c0-4cec-b088-a900504b16e8"
        },
        "item": {
          "id": "3aa68f80-6792-4aa8-8902-d26a688b9187",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bcfcf1fa-6308-490d-aaab-d32938b5b14a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "3aa68f80-6792-4aa8-8902-d26a688b9187",
        "cursor": {
          "ref": "1c51185f-bac2-4e7f-9040-94d87eae9d71",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c75ccb67-83c0-4cec-b088-a900504b16e8"
        },
        "item": {
          "id": "3aa68f80-6792-4aa8-8902-d26a688b9187",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bcfcf1fa-6308-490d-aaab-d32938b5b14a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "fc84bb40-e8e2-43d5-9677-3b8c3f06d42d",
        "cursor": {
          "ref": "856f49bb-7513-401e-b4aa-7453eba5f359",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "aa0f0ad7-b32f-4a97-852a-9c1f3adc8f6f"
        },
        "item": {
          "id": "fc84bb40-e8e2-43d5-9677-3b8c3f06d42d",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "384229f3-21b8-4a0d-b0c0-d5e3d75ab820",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 117,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "1a36e83a-860d-450b-a619-f11b1757e04c",
        "cursor": {
          "ref": "43a37e26-62e6-435b-ab77-8a299db805c6",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "61bea1fc-fce3-4c37-8970-ca3e55a0ea69"
        },
        "item": {
          "id": "1a36e83a-860d-450b-a619-f11b1757e04c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "88301967-2edf-4740-8ab8-c4c8c5cc60fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1a36e83a-860d-450b-a619-f11b1757e04c",
        "cursor": {
          "ref": "43a37e26-62e6-435b-ab77-8a299db805c6",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "61bea1fc-fce3-4c37-8970-ca3e55a0ea69"
        },
        "item": {
          "id": "1a36e83a-860d-450b-a619-f11b1757e04c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "88301967-2edf-4740-8ab8-c4c8c5cc60fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "6b2c36cd-dcdc-418c-bd0b-398fe191fbcd",
        "cursor": {
          "ref": "c36ace65-c860-4423-8944-566e9bbbd0d8",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "b6148d2c-f6b3-4933-b63d-4a6284fc2d94"
        },
        "item": {
          "id": "6b2c36cd-dcdc-418c-bd0b-398fe191fbcd",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "8f1edc1d-fe84-4f19-bc18-de9dd1666c37",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 131,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}