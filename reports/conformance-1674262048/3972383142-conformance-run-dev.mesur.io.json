{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b4f5c1e7-c54b-4627-b979-bc9280c1d23a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e4f0af4b-7ea2-4a40-a51d-233cdd0d6079",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0ff3a3f1-50c9-4d69-8abb-b06496a8166e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "721916cd-da91-4ed3-8e5a-f0a9a5a2128f"
                }
              }
            ]
          },
          {
            "id": "c518641a-3bba-4730-a7f6-0e11131d0c9c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5e4315e1-5fab-44d4-b71e-97132ced85b5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2e2cb111-5762-4a14-a347-62c599c8e43f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "78a4c4b8-0052-4200-b296-a4f9418b9bfb",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "892817ad-a9f3-497f-af7b-035bd703570f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0ac899bf-c0b9-4953-8ea2-141388e5730b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcc20ecc-dbd9-420c-a0d3-12c03bbc3782",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c09ef90f-c1b3-434a-9372-27209fbd2903"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "76a3bb6f-3684-4e75-aa71-b8c2ccd60865",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2a155971-9e74-4381-a217-e4413cb01ed7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0ea17251-9e1b-4613-815e-51c65cf50d55",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6d317f12-5594-46ec-a3e8-2f5741c21def"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "59c417a6-ebe3-4c5a-895d-e1a3158570f1",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "5d302773-a91f-4e33-812c-3836a7651505"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a4997cd4-aa8d-4b6f-a36e-6b0a4a20fc60",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "437467e2-a525-4478-a96c-2b7b20b6f221"
            }
          }
        ]
      },
      {
        "id": "af809000-63eb-412d-8ff6-411e008e3daf",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "061c4732-6a4c-459b-9dfd-f374d97185af",
            "name": "Negative Testing",
            "item": [
              {
                "id": "62848a0a-8d56-4d01-bfef-4265e41c2cc1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0bbfbe76-87cb-4333-b484-d07e503942a2",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aae913c-9b78-436c-94b4-35ec0894b3b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d55bfc63-ea58-4ade-a4bc-aa74c28dcac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4768243e-092c-4779-b180-d4f7e6a2732d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1357db-6e73-46ca-9cc8-98e0c821c7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b2ee5ed-87b1-4d24-bc43-cac3c110c67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5c9a3c-9650-4de0-bf89-6a94c626fb01",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7d2da3-5095-4909-9143-450e85fbe9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f74c9c9e-9fd0-4d48-b2b4-cb82639958bd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "255abdd9-f494-4307-839d-48396c2064a7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c99110b2-ba21-4b44-836c-b7a44e4b4b49",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac153b2-4817-47ac-ac92-bb18f6a7e2cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af95946e-09d0-4c9a-9edd-a88a7b0ec821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83109371-757a-451d-9c11-cabcc359f13a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4d4cd68-4f39-45c7-ac02-057cac44a044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da3e1e5a-abfd-4b42-8ca6-75cf69552657",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b203ac8-e0fc-454c-b351-17d24d81a512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee098073-979d-4305-8743-e709b6f11d04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30906b41-a333-4231-988a-60a5f352c593",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "7f94ae18-9d7c-48b5-a695-32c2ca71770f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "384e69b7-716b-417b-bde8-fd11b420d904",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1c22b658-34cb-473c-b269-9282f9947dee",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6897ef2-1342-4d66-8e0f-591b484ae8ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6dd9145c-3163-4599-aaa1-dbb655811dc4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2dc0a6fb-2298-4e67-a779-c5712ea58ccd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "ab90a1c0-ea2c-44b1-91ad-d068e4b965e1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "07a8d908-4f07-4ebf-9060-86996318418a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "80ae454a-d8ce-4d3e-8b84-0d5c320cc6ac"
            }
          }
        ]
      },
      {
        "id": "bdf501b2-fc19-4039-b67e-1c34d6ab16b9",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f90359b8-0aca-445a-acb1-8a73c871ea9c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "99aa7f1d-7cb9-44b3-813f-cf4fc2f5459c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ac1a6597-8085-4b5b-bb42-989a83d75625",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "013d85e3-0727-470c-a3a0-019645ae8d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5461e0c-de65-4782-b806-b7af0740a814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2baccdea-92e5-47c3-aba0-342df7c60215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb4acdff-de5c-488e-8779-0a3400f81da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709eaa4c-95b6-4d15-b882-7024bf9205e8",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c12f879-c514-4b9e-85df-c2d405140d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dd71290-a71f-4c93-a82f-b215a90a3069"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae15770-16f4-4179-9c85-8bbec9b3849e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73d40db6-06f0-41ad-a3d7-3487e4dfd5b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e590736c-038f-4660-926d-b910ba873737",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc40e10b-7902-4474-bbdf-85834d8ee5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1497c585-650e-4c82-876d-cba41e342510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af2c90a-72a7-49ff-9d06-52886f381039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c4b9706-885d-4317-be23-4cd34623b1d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba16362-9e14-431e-956f-55ebe7517363",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e42340a-ed6a-4fa6-b8aa-cd72802606a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6461e880-4ffe-40a9-99f8-deb45d4e4c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e272007-c202-4c28-b23e-60b47d043c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3951c837-a195-45e6-be63-e136972b7182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a69144-dff1-4794-96f9-6a49699fd71d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "419fc0c7-319c-40f7-8f86-d346ffc28ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e722e946-0b8f-4557-b7bc-3541c7245828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324fa3e5-2fc9-46c8-8df0-3c82ff3aecc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e3a321e-2d97-4d12-a291-8f198120544e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91093b45-aeb0-4c7a-92f0-b468e3200721",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b48803-dde1-4c77-b880-3a9da57d908e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "620e1b29-8b8f-41ac-a681-b9230591da4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01dafc06-3bcb-4844-89c3-c5072d410b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "622de6f9-f488-4727-9d8d-9291edd2babd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0361c0-980f-4fb4-af80-b397c3abe9c9",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5d0635-7081-4f7c-afd4-fa402b3bc779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba71cc1e-e083-4d5d-b748-7a956ffd428a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c86a61-0761-4e07-b617-0816bbd07b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "afdbb136-eaad-41a4-8286-320fb75c9bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5864fdbf-c3b5-4f8a-8a8d-5591a38d174e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "603ecd11-b7ed-433d-ac12-9ec848619600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a897683a-8842-4483-a7e6-ea6a52c1cc53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91eef87e-8ba5-4c8e-9be0-914779810d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3392e85b-5cfd-4120-9db4-47d2d0c9be46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0266e6ca-e1a8-42ee-80b5-6e5f42eeffed",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2272c885-9764-4674-ae02-fb8335dd24f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a092cbf-0f1d-40da-9da1-4978c7b1df7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eabf660-d56d-4b36-bf91-cdbe48ed538c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5135d96-0a7d-4eb6-97d1-2456afc1989f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96bcab25-3061-4d56-b604-ea3795621839",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29b3722-5e45-45f6-90d0-20087699523e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6b60ac1-d710-4424-9bef-7eb74a21b0e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c18d46b-2d5e-43f1-ad3c-3741c7500396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fbe1ac9f-c623-4b93-b0b4-17c68c087e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36856dd-95f1-4628-b0a3-049dcee37643",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8bd2bb8-8b78-485d-af7a-bfa85187d064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8115361-d972-4334-a02f-99e4adf3c935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6142240-3aec-4524-ba00-ab26a7cefd2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18ad80be-d422-4d7e-b4dd-9797df89d7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d777aa4-135c-499d-ba27-6f51263ad073",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f140e577-59ca-4245-bead-f3f88fd23c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d07e3415-2f73-4c57-abd1-5b9460aad77e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac4dc51-e171-4513-ba5f-3f55087c9a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ddfa0dc-ea0b-49f6-828b-1cfc5e8277c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491868c5-f87d-4c6c-96d0-f76a4c07a143",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7818d25f-015c-4e7c-81b4-0824298bb4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fb72290-41f3-4b17-a9a0-64f477c226ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcfd0f0d-2b5b-45a5-aa44-a0e676bb0a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1256b0a3-4828-42f8-b20d-e1528dbbb098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b1ff34-d5ca-4c87-a17d-555bfd075345",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3acc84-536e-4aad-a26d-0526309338b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eed143fc-5422-47c1-a819-fba6755c16f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8d3be8-a837-4ce2-94f5-0f01a86fd50c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "c63df39f-7dac-4cd6-a045-f8df764ffed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3551e8f-912d-42c1-a203-ebf8dfd8f75f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e0ebdb-e78d-4bca-adfe-eed89213ba28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb260b19-248a-442b-854b-67e52d29a18f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1928caad-d4eb-43fb-807d-e10658ff6ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "acc75081-b1da-4250-a2ee-9fa44bb35889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82acfb0e-7f71-4e32-a59c-4576559d09c6",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a757a65a-edd6-43ea-acb6-d283dac6a4cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99e27323-00ea-4aa0-a52a-3e1386a43b51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f75fa1f3-42bb-4563-9fde-919c28ad6ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23010507-d9c7-4481-ade3-c0dde9df9fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7c4e2a-688e-4f17-8ea8-047743409392",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec8570d1-bb62-4b9b-9eee-54202c751240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7279882e-0f9f-4c11-a9f3-4b5bae70efd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b7953d8-8b57-46f6-859f-e671677d9430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb54b8a8-961c-495f-b545-95651747200b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c16af8-b140-4c1c-8a2b-e9728eb88891",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3cdeda8-7457-453f-96ba-b0ae62813a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "063fc629-25e8-425b-9f7c-531a32da7fee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173cc2fa-dff6-426e-979f-a0ca99a31dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42c07278-5be1-4cff-8c02-c4224bcc167a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f98dae-b856-42fb-a7cf-ed5617ab591a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1775b0fe-4143-45ee-bf49-7f521d1c823a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7520f3e9-714d-441d-b83c-33e522583e99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf782058-f246-45cf-a71b-d85e062ce122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f3629df-a1c7-4def-bac6-348971602eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb47e205-d574-4baa-9b76-350a135e86b3",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c1e26e-de92-4ee1-b212-0aac97d1a54c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bf9aa3a-fa31-4ba5-9758-30a53c11d677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f5fcc2-d410-494d-ae2c-cc619a29bb22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "84aec275-adc7-4b16-874a-d1cad33667e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc8ba631-294f-4756-9f27-ebd9bceab057",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ace9e7a-db35-41c1-b561-3bbb49f65845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e601f1ab-4900-4571-a105-f2787c93c0cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12648c57-da10-43f5-91a9-23c5f34c8453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df58b2a5-c255-4129-abba-9ac7714f70fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf94b3d-3e6b-4ed9-a765-08670ededa7d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a02e84-4bae-423b-9226-bc5105c7f6c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46b6aeb9-feec-43a8-a192-d329b874e138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca53c84-3b41-4249-8c1d-e43587fdb408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbafefd4-1a59-40da-9e26-a7edf19f6827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f32185-3d40-4224-8cc7-3d8a70bd7e0b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6437ee-c6d8-437a-a0a9-a0f1c4eb4e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56b71be2-5c08-4df6-a691-f6a6e4f38b23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343413db-c48b-47cf-a0fe-65a3d56591cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5cd45cc6-aa31-4da4-99a8-3ed8a0710120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db438f2a-7fe8-411a-a8a0-f08f0049caee",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b05152fb-2076-4489-8ff0-62ad8532710d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f96f1b59-3707-4ffb-b485-6c35e8f10b0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac94ff36-77ac-436b-b189-597560aa36c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee4ae9d-04a7-4848-82cd-ebb9237910aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d501f1-2f8e-46dd-8cae-27f1a875b936",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28990471-3c9a-44a7-8f82-e8d5345bf5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da6c1800-30d9-4bf3-8854-ed10a6a8a795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf7ad91-cba2-4053-88a9-1bcee7f40224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e4a2bf3c-9c0c-4f6e-913c-97c8e27df20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf3af3e-2a5f-442f-8ff4-52a20428592c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91cba074-3f09-4326-8f57-82b2619375a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c32cf759-54d5-4ba7-9420-4fd6bab01aa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e2b9299-05f2-400a-98d5-2b27fda10897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a886f7e1-c942-41f2-834f-6eb4db07138e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d58f18e-c2df-4bf7-8cb0-fbb1845a796c",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e13f68-48b9-42d3-a37f-50d44fdf90a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e70b871a-b868-462b-9bbe-135b447a10ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a2b6d4-1be1-4139-ac0e-ecb23b4e6f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e76729f0-927e-4fda-8f23-df4b1e6e01da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2634ab66-21b8-46a8-9d28-fe7baf1f4428",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c4cbd0-0345-47a0-8f55-a1d93c77f31b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e121adb7-ec1c-4683-bbb6-2c4f24d47f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d83e34-1691-40e2-aa94-b13dac5c0670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f82077a-3df3-4dd5-8133-755c5d6be90e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32dc0a6b-c29a-4737-a17f-5e1b9488796a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb27c04-348f-461d-8054-df92cb9a1e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37811e5b-a523-442e-8f50-07d3f3326a0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376d946e-bba5-4a01-984b-9ef547697a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "95e444a3-c1be-4967-a54b-93adfc970711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c4cadf-a841-4862-9541-80cdc5074464",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7348c157-e368-47af-b0cc-398cc61e7926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6397012-2bb7-460e-86ca-61bb2fa9ad1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3946f21-f5f2-401d-8c24-2d5f55539a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3c20d63-7ef4-4be3-a5eb-e6310b4cc958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e1c6101-6408-4c1b-bab1-6e4de40302e8",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b90f60-2e03-4435-9c57-a4dc289bb63a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9893af28-0b06-43e5-b02a-8945cf4c9fcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "060dda09-2ec4-4c29-bca6-627425d344e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5893ffe9-cd81-40c9-b6a5-052e898dad87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "157624ac-ae93-4da9-98e5-638a27ff3261",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8abb1b7-6ff9-4f8e-9972-561284974db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac06cbb4-9392-44ac-a060-e56a8ae7a634"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f2e925-0177-4021-92e4-c0255f331db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8cc11ff-67d2-4d85-95e8-9a7958b4bfc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "945f6e4d-279b-4a7b-874b-5f48f853924a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36316bfd-bc0a-4f6c-bec2-71b499357530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb86266c-fdda-4e96-ae33-03399cc0832a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc098e0f-de4a-4ba2-b944-dfc8891c4d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6bcef02-5f44-4f75-bcfc-5f03480a1185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b9c2a52-94fd-4d99-a3bf-2b3afdfca9c3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c85bd40-f3b2-4772-bdee-fabd85c7eea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71b1a90b-6f67-4478-a51b-0b35d78dd006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf85677-ce49-4b95-9737-b9f3d621fb4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "620ed82d-a48b-415d-8984-84fa7cca0d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65d2446-8bd3-40c9-b56c-17a0bfa328fb",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c45a7ff-bf8b-4e95-8c71-4caf73b91145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8be2a6be-6def-4af1-91e2-0cee3e2d8907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7196d3-2516-4ebb-9c9d-439a4982dc78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "11f9153d-3535-4fab-820d-cc75c695692c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d988f9d-203e-42fd-a867-573806de4b9e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76bcedd1-073d-4397-8e4b-454c4923a511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95c0311c-1e3e-417c-82ad-48adf33728bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408dc49d-14b8-42db-b422-d6d30230ee1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1fdc4f7-6160-426f-9ff5-ed78d08874de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d2bff2-491b-4a17-9641-7294d9f5c173",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3454264a-818d-4ecf-9dab-1e5bd5a3d689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c1c421d-098d-4073-a44d-4cf4a1191694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a450d67-4e91-44c7-a0e5-e0766cc1fc97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "54ff8d30-dfcc-418e-b034-d6c018b792da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ac342a-3d90-4432-9aa3-1f924ad2aa37",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0e87bf-1867-49a7-a847-4c64c405f65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3be1b734-0528-446d-80c2-7577f5902148"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e925a4-04ec-4799-9a30-ab4f8127eb59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f6cff4eb-5558-4a7b-ba8a-7eecd64745c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e47c56a4-51f5-4a68-8e42-95fee3593319",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc906ca5-fbb2-4533-a9af-1ab55f515724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9df70e1-aed7-4753-98c6-493427353711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c07349a2-286f-41aa-8206-3e09c4c72694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb7fe13c-c2d7-4e2d-95e7-47dd4b8de1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d903a516-3a87-4756-8c65-ea7fd7e5cfcf",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "062aceab-902a-4596-b1d6-2133e27d8c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a4b3109-02f6-46cc-9517-10d3dd474490"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda6a2eb-2b26-4647-a474-0ecd093e8322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c68d8fd2-6d74-4e71-a6b5-3ace52af49a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "944cb489-5fa4-468b-ba1e-9511cf0c00e7",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b756b870-7e86-4658-af50-ebad571617a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b3800a4-fb2b-4c65-a2ec-a178a0c464ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ced1b80-44be-4a64-b0d3-656cf2bf275e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c57452c3-2a4d-4d2b-a4ba-3834f224e6a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f4257b-d819-48f6-97fe-aa2290e75d0f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380ab061-2329-4239-92c8-2d0e1793fe81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3a79f84-5375-4146-897e-32c7ce212d90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ebbe758-8dbd-40f5-a66c-2193dc5275ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "29cdbd46-5360-4c9e-8379-fa6071989732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdbdf6ca-f7dc-4938-9686-f09ad7820fdd",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0140cfb3-e90e-4757-870b-07a467f21b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2deb761-ae1f-439f-800d-e81a644f7c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09980991-ca15-46ea-84a0-b21b0c0aa284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d17049f-d976-49f5-bfd6-9c18d50c4b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e5c4e4-c5bb-4b8f-b3ae-b75a98bc2876",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a2542fe-632d-4094-a307-ca732f3450ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad41785c-e792-4491-b2d4-bc93c11a3a1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c89905-3047-4496-a7c5-22545975233c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "de5bd7b4-ef1b-4a1a-8d39-2d48ea7da970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1318d8-8572-480f-882a-36b77d43d2fe",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c31b329-8946-4490-8013-c60d58133b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d8ff84b-c971-44b8-bf96-3434947e7975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da52e1df-d585-48a8-870d-cd3178fcc99f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "15af8efc-1f39-4a33-bce7-dd17192014d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c394419-4daa-48c0-a81f-572fb5984eb9",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede55bfa-de18-4de7-ac3e-08d3bae8e61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d52c261a-f69f-4e82-a1a3-21b9340e8e33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3331ae8d-7178-45db-b65e-2ce0a3adc96c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e00a8b11-3e12-4c5a-9db9-f61a3112454c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04caede8-cb05-420e-94b8-0517e903b9ef",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5bd65b8-220d-4e6f-aa91-aa772dfccd12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca3bbe07-9592-428a-90ea-939cdaf9c49b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d8b07a-036a-45c8-b0bd-51e50892133c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcbc6442-cf96-466f-b82e-a063ec5f192d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7570c8d-c08e-4abf-976c-ca1e66d9f7a3",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af325bb-c010-449c-b67e-3391cb5d6fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20d5bfe3-1ce2-4900-8341-9e7e1c81a7a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398fc819-9691-4b84-91f3-9e97834aacba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffe0ec56-6890-4af0-a5b8-7989cc95f14a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004e1099-d4c7-4510-8862-9cc94cce4925",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54721023-168d-47a6-9c9d-e5aacd487fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ff3041f-cf48-4fc0-b2c4-b96aa684c9fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a18434d-22cc-4e54-9d1b-c5d52302bebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f31c019e-24e4-4652-ab04-19cb6643c18f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffe29c2f-de77-4f11-a870-0e35d579e0fd",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a3e5f2-cf28-4da5-8d62-b5c02615342b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c677100a-c3bb-4037-b8c6-aade0ece53b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e66da51-aece-4287-a5ae-3b575f3750d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1203311b-b066-48f3-b5df-d65aa8da32c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d677bf42-38c3-45e1-9311-4da35dd748be",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3318e1c-a8bd-48e4-82ff-88549105f117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33f59957-b170-46dd-a05e-21ae906c1dbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b309ff-b06d-4b6a-bd86-ea991bb4ae6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "642b3859-3458-48f5-9b60-45281866a73e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcec0f65-b0cf-4499-b1f7-4b5acae7e922",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50c510e-1350-4ead-9212-2e1fc3517486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc48afa0-e84d-4870-8e6f-b7e0dac09117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8899da1-76e5-47cd-9f42-f1c0202a225a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "624f3cf2-3e7f-4028-a7e0-d60253ec6f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddd5fa68-f148-459e-9dc9-506773e216f8",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfbf8fd3-2c12-4b56-9c10-e56e03f92c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d1f44ea-15f3-4489-809f-cdf7839fca17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd15cb9-c672-42a9-aaaa-2cc9e9081a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "49c5dbcf-4698-47b7-8b4a-6ced7b38c3c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0820e45b-b4e4-42a6-8965-fe68e34d9fe6",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d79383-aa95-4d7e-a44b-4e635c6f70f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f6142a-5a32-4c5f-94cb-598f84f9cb67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8bcfb2c-842c-46c1-9b56-a96323833a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "412b6ad7-976c-4365-adb3-828a42f2b7a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16872ecf-087a-4070-829f-826cf9bbba6f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7efa234-6aa1-457b-9cfc-751053719090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a68668d8-bc92-4493-91c7-e5645dd0a1ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6276b36-2ffe-484d-bf75-712cb3a93454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "974c40e9-a9a8-4c03-90b5-e22d5653cd59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0171ca0-6b91-45b6-9dcd-0b5660f55a19",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e6e681-b177-4708-be6a-1ef58b8bd3e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b3e3856-462e-4e3f-b8f6-40d7744708f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4bf5038-5377-4137-8a77-b9374db343a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "315ab8bd-6631-49af-85b3-75dad1c64b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db6a2fe-f8a8-43ca-86ee-5876a1826b21",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "750fdd7a-7698-43be-9a33-4304fe07cbfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d821a519-e32a-4d10-a197-e2638aa871f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72367f07-aaee-44f2-9ee9-29fc42889509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "518aa077-3d72-4330-81be-0794e21d7d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb6dae8-a356-4495-a5c6-aa3302975534",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea2f614-0f6c-4eea-bd87-8a4ae98632cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eeee11a-8970-450a-92c3-1fec9090b1a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76428617-54ef-4f52-b32b-8ec12f5a0b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b2249e17-9cb4-47c0-b48b-8643e428ac53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efcaee73-3463-4f3f-b10e-c31033884db3",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be7e70e-1b88-410b-ae58-5b4027b8bac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920f7ec0-0c94-4401-8760-968a667f82ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2acac81b-af59-476e-acf2-514d0574bbd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "55617657-f324-4df2-9d23-f582b0ba1303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6896cfb6-b36c-4bea-8ec6-87a11072e51c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1d7c74-7764-48ee-9394-fca0bd44ac58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f46af955-6c85-4cd3-a099-8753d4aa9f01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a6372d-986c-4567-9818-6e2d8f884efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "42121113-583b-4559-93d1-44a25ce385fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8077610d-469e-4fa9-ae4b-66d69a50708f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57862155-311a-4518-80bc-c0aa78634009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e456f19a-fc09-4f5d-ad1b-60f81362ef15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c2ae21-a10d-479c-aac3-2e1ef88e614f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a96fee48-f4b6-4b06-b0d4-6b2130251581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f986297b-f2ce-4351-a01c-8af0f8b65843",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb28233-dead-4d42-8aa3-354f2dd5fa81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deae30d1-b74b-4966-85c4-8ea1ac701c4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea396155-93e8-4a13-9e15-de91a88a1f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "01b7d553-5a3c-4cb8-b26c-2e18a78dc695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52cb9a8-48bc-4869-a09d-a24f65d29b99",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7552fc3b-792a-44b6-a9bd-4175eed0f8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4d1694b-0909-4a05-8785-6373f4ee81a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a4aabc7-f89c-408d-8fa7-8e11acfe27eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "182fe87f-ef90-4bd0-ba18-2bb262688e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be4caa1-1414-4a90-b071-268b701e1947",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c685ef24-1dc9-4978-be33-be915855201f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9cfcbcf-cee0-4803-a554-9bc0f290088b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "890571c1-db63-4f34-9692-b6a3b262bbd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "43689a42-438f-4410-809f-452a08d3ea7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f655a00a-d66f-433a-923e-699eb4154814",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1929e84-21db-4311-9cad-4b3fd6239bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c606df5-3858-4cc6-a65d-dae31156106e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "010a022e-2364-49b0-baed-c52025abfbb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc5fa107-4b6a-4923-b157-9f66236405cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4cc442e-b812-4e58-8ed1-87efb7e63695",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de863ee-9cdc-45d7-9d7c-9cddf20960ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0290fb1a-076b-42f9-b115-116ddf9fe59e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aad46d2-9249-4d89-b973-1bc2f308520d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec6c9607-7688-4c4e-8aea-f52ebeaa4236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16bd40c8-3ac7-411b-bc0e-b695a1798aac",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "858af1c3-cb31-4818-80b0-10c84f6fe8e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dda1ecbe-251e-4773-93b2-8a75bb791fd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb967572-20ad-4122-b11a-15217c848740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d37f9782-88a8-43bc-90aa-2b0e5d48c0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53aa8e8-70a7-4092-851b-f133850b42d1",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91459c24-7ee1-4c52-8a43-1f61c0971ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36017a0d-d456-475e-a419-6d2ccabbd128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8cfac4-05e2-4db3-ac30-f78d8ba88344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c34d76e-cb70-4274-a1de-da01713f7811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eea3d71-db92-4526-bc28-e4bb362ba577",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5357d458-d18e-4bfa-b000-8310bc68ad32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e899fb35-42cf-4537-b262-5b0e5934c665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd07ff4-6e00-49eb-b9ce-7e2014d55315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1ad8b009-5bd1-47b0-a8ef-818cf4d82d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2f8849b-a9f3-4afb-a409-2a34dfd6019d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ee43a0-bec4-435a-ab5d-9b0928270347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef9a6f72-5522-4584-85bc-ce21240d435c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a34d5c21-ea83-4244-b228-24e5c644721b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1373b181-cc47-4878-b3c8-cd87b958e30e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "844dd91a-8cca-45d3-a26b-f727cea9a87a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b9328b-218d-419b-bcc1-89d7d2d2078d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a883d45b-7d5a-4143-8447-b46b054a1858"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c5f7e9-9930-4275-beea-0b822af02b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f75d2ee5-68cd-4d10-b717-bd804f431d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3973118a-0c95-42cd-8d18-34cc9efb09c3",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ec7ab6-f00a-4713-96ed-a2224ba90643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2624059-d3d8-4842-bd86-efd2be4bc4fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb79b34e-c36b-4a36-a5f6-24c7293368c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc19db53-2b44-42e6-8b7c-e8d469c99294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f765f1-4a3f-4d4d-b99a-00cb3cec3088",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b584a9c3-3826-4ba6-a4df-4f02527bde70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c19b6230-22a7-4618-b0cd-3271f6bc507f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c7d03b-1596-4aca-ac67-be7370377c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0f71664-b306-4098-8003-d9979a1035ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24afe9e0-6eeb-43d4-a0f7-376ed713d33d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe35d89-b593-431a-b082-c77f92b79268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea7be944-05a4-4938-961e-840438fcb9af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fdd1956-b126-409c-b868-5fae13fa377d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa29eb72-3aaa-4211-a534-1131826a5d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f9c1d4-600f-4218-9a33-1d4467d0fa28",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e898e33-6ca5-42a3-900a-1902e3b0dccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c0bf1fe-0b77-4c0b-8770-48412b16e62e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6996fc-d1be-4449-9dcc-e6bf16276b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "69386111-fe93-4051-b90a-22e19ad60b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546526bd-1f13-492d-b0f6-3a2302a87bc2",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "819a6e37-ce85-46a4-86e2-3e33c94a3c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4493ec1-67f4-43a3-9f6f-02b5cd7ad8f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ed88b5-a20c-4b5d-bd81-0baca128aab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b5b6f7d0-ac35-4468-92db-d016cfff2944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba7203ae-5292-4bf0-bb30-4e4fef010c9a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8771b2e2-3d47-48b3-867a-e024eeffe9af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "215c9e58-d24a-4185-ad89-71bf24ed159a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9e38ba-1851-4253-9403-b038a6bc6646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c36c774-338d-4d06-b4b2-7528090cfcea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694d2c21-dcea-49d2-b1be-0096fe106cec",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6580401b-7969-4d2f-8b25-5fe4b5237ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "691d3980-d51d-4eb6-ae70-ff04dddc3f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5835179-c1b1-4fc1-ae49-b2a229075ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e55f1ee7-9f0d-42d7-9786-affad1f47c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c4e1f57-970b-4374-88ed-fbd742c730ee",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3008fe1-3567-473b-89aa-b60557cca0a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d9a9d26-e75c-4842-9a7a-15dbf4a9fe03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc20d413-0f4a-493a-b09c-2f8eca6a9bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a88515af-8476-4774-bb82-c5ecc12c7d64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e80c377-f3f9-4322-ace9-2a2f154c74d8",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2d44b4-3112-4b97-bb0f-042fba2e25f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d837f5a-0be4-4299-b5d1-3dfc743e4a3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b7997c8-e6cf-4b45-8a01-a3ac320272b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0408c53-5dab-4417-952b-00f61f12297d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52dde1f-7c64-4d3e-872c-d87564f3c6f5",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6123e78b-65c8-4c84-9737-173cdf0ef3a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de022625-47a9-4118-b18f-81986603c9dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc592bc-e58a-46a7-85b3-b31e15c442b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc59e9ba-2731-4777-bdcb-b3c43f160473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bd66510-7499-45ae-ae36-e509f306d44d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e18e61-573e-41ab-9268-6b411bb101be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9931fcf5-7f98-4af8-a0f5-060dd5d20781"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf805bf-8e5e-4140-85dc-39e509f97e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "39e084a7-9961-4780-9cc1-83799d6b388c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab66e9a5-680f-42c2-8618-001e953dab02",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d54524f-7a18-4680-905d-92dc59ce0040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "987dde07-7d53-470f-8d17-3bf08d5506b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d02e574-5f79-4173-a5cb-c75e6176f126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "97f5878f-9041-45e1-a748-b25832cc9e30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51108a76-64d0-4c2a-91af-49f588922453",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4caeaa-e4ff-47f9-8aa7-aa8c178c0346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00fc4e1a-4478-4007-bedf-d10fb09ea485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a398300e-2845-4a1c-a890-09f658f79982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d7f844f-86ce-4e61-989f-b2e1b024f86f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de6e507-67e9-4c62-b292-9544e8cca4fe",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac96ca2-818e-46f3-ad96-12704e4d31e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48bd9e0b-665a-430f-bd3d-1a002bdc5d35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be5dc7d8-1951-4aba-9623-af139513f3fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a6d763b-5735-4472-9eed-75cf68309658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224b1620-8e24-435f-bb77-6f1d2d5ef27d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b5c496e-7501-4ae7-8629-6f74cfa8efed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e32dac7-b55d-43c9-95d9-20eca5f08ddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0335e5dc-d289-490b-8dfc-674ec821b0c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccb158a0-4045-48c4-8b24-a6265a85dce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d052cc-21da-4903-9c9a-d1b0556cf5d8",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "048a5f33-ea17-4846-ab6b-a2f72a91436d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffd49808-fdb1-44a4-9f38-80c5035de50f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09be6280-1b52-4af1-a161-b8b8459904f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d400e615-ed81-4479-9f5a-fe55229d2a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77fbf6a7-bc6c-4329-b8f2-462295a64be2",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f10e0395-cecf-47f4-b152-40e2e88d2f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26b5932e-a629-47ee-a521-44fa2975cb46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea7ce232-0c1a-491d-9033-60ba693cf796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "76f4a0ae-1404-40b3-a896-8f25e0674e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e4b81e-de9a-45ab-a70e-e59677c803e5",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21814b0c-efe9-431b-9b80-3199f2f24f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f3d8a19-b23e-4fa7-9a4d-2546a189854e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5198fa80-12a2-4e95-bc64-81845fe0b12a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fdf3ed7b-47fc-4401-90fe-b286cec659ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cdf0840-e7a1-4c64-892a-4060ed725ea5",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e932f03c-4cdb-405b-a916-214ab238d668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a814126b-d7ca-4f1f-bf55-ed109c4d06dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "331e8c35-7536-4e49-9688-2ba26a4ea0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "de902381-8d43-426f-ab03-958206a44a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae3ba0a-646f-4e9f-8e9f-133953c092a5",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "639bd787-1f28-4d5f-b54a-90f12e2a7e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d6e8cfb-5961-4bcf-aa17-858ec0f5e321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb9f97a-d237-4d5d-b4ba-77664ba15082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ddba8fb-9416-40b0-836b-1cf1a90e4b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "329e07aa-dcfc-42fd-96c6-65fb876188ad",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af876a5f-6618-4925-91d7-50d9d810b0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41629279-aad9-4703-8c4f-f5b0729a2339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a06a343b-a9d4-432b-be59-839340b59369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "751cbd0f-07da-43cf-96dd-620b9659c80a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf580cb-2ebf-402c-bd7c-66c169b3531b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b02358af-bd64-4709-8f0c-43364bbb5fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91292d14-7e6e-4cdb-b570-66391b20759e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62985b09-a2d2-4c2e-989c-4fe4e7ea8c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d626ba4c-850b-4a03-ae9c-a9609ffdb2bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319f7894-5a66-4ab0-a3d2-314c0be58111",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5eb8e1-9b67-4ffb-980a-b39a6e390307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7368130e-37c0-46d3-9bc5-ef6c6673203a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c4e42c-3863-4a82-87bf-2221ac855d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "93be7e0f-5d7a-46ab-9b88-54c21fb5a462"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "318b9b87-ddb9-49cf-82d9-822eaa123044",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1c47ca2a-57e6-4985-98c3-2ed0a4c91640",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0773b733-aa6d-47e0-b8ca-1a332e117483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3101b2a-6d6a-4414-ad4e-8ca67fb45e2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16052f5a-c6ed-421d-bc61-5ffcd158636c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "19de4e58-047e-4004-977f-352ab513c5aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542c5370-9934-4957-bb32-84a2ec577f3f",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcffce70-4a6f-470a-9257-6475084724c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "174f359a-aa1f-49a0-973a-79ea973f142b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d977d69e-57e9-4470-90cd-f2834e9d0289",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "fbbbbf6a-52a7-4e79-8cc2-d50377583a92"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ecc5612-96c2-40ef-b0ef-0cb8a5ec2df9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ebc89fa9-d4a9-401b-8838-8ff93cc6b397"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6980ad6e-0513-4ccb-8628-e63b26b51eae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "23b6cbde-63d3-4e30-82f0-76d5d2740e94"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3be3ffc6-1921-4b99-9522-bbf86e518f29",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "058e8b1c-eef7-458b-a5a0-df7e03dce7e8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "384164b4-22a0-42d2-afdb-78c4946c381e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6f8e2080-31b3-4645-926b-54c43fb9b120"
                }
              }
            ]
          },
          {
            "id": "109f251b-f985-4c28-b479-810cb16b7d6d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f23b2d60-eee3-46cd-a3f0-7a29c52451c8",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e17522c8-5050-4b5e-be61-caa3f47f3d7e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7447bd80-4fc1-43af-9609-3e8f0cedc4cc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e58f05aa-466f-4aa8-980a-504af0a5272f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2ecbfa02-d20e-49e5-884a-f5fcde96aa8c"
                    }
                  }
                ]
              },
              {
                "id": "642ecd87-fdd4-4f59-bf76-b53a6bb00071",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae477c46-2cd6-46fa-93b8-08464f67c5e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c9693aea-5d6c-407f-8228-68535b29e42a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31ed8bd9-76a9-4906-be77-bb04dd3ef475",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3412d233-14a3-4b7d-a195-f87296adf39a"
                    }
                  }
                ]
              },
              {
                "id": "084f40eb-ecbe-4d43-ae19-cb04e8b82c38",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8df49dbe-5cf1-4fdc-a8c9-d78870b13bc4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0220a177-d10f-427a-bded-7367934907a1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6753c61f-1d0b-42de-b04a-3ccfc751744c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2d91d722-31ed-41a1-b2a6-ad1f2f317e18"
                    }
                  }
                ]
              },
              {
                "id": "9da24b75-77fa-49e8-97a6-6af72f5d3cd8",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db7e3bf1-50ef-41c6-b73d-43a1c2381fe5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c140883f-ebca-4de3-bfad-929f018c4986"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5f58f4a-afe6-4c8e-86f6-3e009515ec98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e617425b-a512-4d9e-ab55-62125f74abe9"
                    }
                  }
                ]
              },
              {
                "id": "2a7f24cf-9130-43c6-b822-8c4e743e8b92",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c2cddab-3548-4170-ae66-1b14a106ae81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a4513a9c-cc07-47e2-a101-6ea81a5eb751"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96aa1e87-4d06-471c-8a1b-b73b0f7f8a9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cb9e9797-ddde-466f-96f9-505022272f01"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "caf27137-4a08-48ca-bba2-cec870c8aa25",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1b550161-521b-47ca-b7e6-34b02ef6e608"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "17ae986f-5dc0-4534-b4d4-b4f4a357cd22",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "56b7aed9-e031-4e51-b820-92f8fa91f092"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "581c041d-e2dd-4e92-8b64-3d3c1e876c19",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "cd0d03ba-497b-4fa0-a013-38b50c3355c9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b44f96fe-1eec-4347-abf3-3f05a963baef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3f09f2a5-883d-489d-90ad-65873e1cb33d"
            }
          }
        ]
      },
      {
        "id": "d91c9895-5442-4e85-8fc0-b28b97dc4e98",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "569d38c2-0294-4b63-af2a-8916c2d89d30",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d931bf8-2a4d-4a94-9cbb-ff2c429cca10",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5ea6a89b-c993-406b-ac5a-ba9336eab0a9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bc80169-2c70-42dd-9640-d6e3bfc0605b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60992f0e-2b46-49cd-9513-fbe58208c354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37cae218-3cd1-40c4-b340-eb00964d33a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "15cf7dad-7499-4ca9-b4ae-b9bb41397c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4716d22b-581b-4f6f-a061-770f1c2137d7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf4f8a1-d607-4221-96c3-c8c5fd6e74c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c6fa59a-a34b-4a48-a672-591a0fe37b64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb40a97d-103d-4528-951a-a2b58087e954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "32527bea-b350-4b04-9886-1a8975005397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6f306dc-ac3c-4e90-b1c2-fe6caa015283",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d1c6b50-8d3c-45c6-8593-e3b620e90c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17aae8dc-8cf5-42c2-8c68-94d418e54665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b2631e-7728-4e7d-90f7-85cc357457cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "86b311dc-d77a-44fd-9bfa-c7981267d3e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7afdb3da-5269-4d11-930d-b192b7170ec2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30363c1-6a89-4971-9b7c-3dd498d6e20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7499b2b-129e-4407-aac7-fd7226569c77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9100ec3d-e25a-4fcd-9f96-860807b80770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aeea378d-f0af-432e-8996-d7ac5ed10a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7182798-61d3-4c9c-9c51-3a74e51ec930",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdef6ddd-fbee-4930-bf62-4c331cd0b2a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "206aff35-14c6-42ae-af27-96f5e8d30a93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e38f92-5a40-4a5c-8590-283cb9503724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "18be96f1-5208-4e2d-add6-9dd976824e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e47323d-30d4-459d-bc8a-2fcaa8987b73",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db169e4-8eca-4343-a4d5-aa0d2ec420f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47ad20af-e36a-498e-865b-743bb5e6638e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d596042-7902-4b14-ad2c-90310f5314ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a60dc9b2-0933-4abd-a05a-b8a2b61295fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a970d413-087b-4d8f-818c-377159a255e7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcab67e8-861d-48d9-81e3-84ec1714c3db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55ec06d6-64d4-4cc1-85a8-5e2051d672c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d1a015-c4d9-4641-9262-61c85c54f0e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b46acdc8-acef-4328-9651-ddf4dbca7c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e35c19-f075-450c-b57f-e4f0c0591812",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d96e6e3-1035-4c01-8c0c-2228343f6318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7263e33f-410d-412b-93a0-8e96fe339009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce8d8c48-1dc8-466b-9bc4-d3b13230eda5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eae13db8-64d2-4a4f-b912-a4aef4260782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f75ec2b9-ae63-43f2-8617-0ec7d74b8cbd",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56bac94b-ff1e-4278-9214-4ec981dc3ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e57e7645-7a6f-425a-8865-b8606ebcbee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc9d48a-1c79-4d12-ba89-cec019968fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6afe0e3e-001c-4c3c-8409-eb5284a261bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4adc183-ac21-4b10-9dc1-4937090ec2a9",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dce4354-8974-463e-aa70-343f8075b2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa82cca-20c6-4a7f-b6b4-01a6f964c2f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e74b5e5-df84-4f2a-8ddd-deeac5ba0b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64e35441-5902-40b1-8d46-89babbc7af96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f15895a0-e296-4b3c-a476-badfd0b4928c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86da644-f9c4-4d29-aae0-9e9c9b457b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0bc11d-6423-466a-97f6-91ccf4305f2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71bfdf40-851f-4d5e-aff8-eb8157941b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "533407b9-a50e-4b5f-a7af-82533417b4a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008859fd-e766-4370-af63-4a0748dac6fd",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "369cf7d7-0642-44d5-86e5-b0592bd6a963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46a7cd98-eb27-4aa9-bc8c-7598a6950fa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9816ee9a-dab1-4c3b-94ee-d23d6c39b73a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a8047f28-77a5-4f38-af9f-9fc9734f8118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aface2b1-2fb9-482e-8038-ac3aadb6327f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ecf8a8-ad15-43e0-b6fc-c8699a012dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a27a708-33ff-425b-a9a1-f3d1f885e1ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "371de7d4-4fb2-4953-bc86-0c0ee7415f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "45edc365-4805-421e-b76e-73dfc18835f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccae8bdf-8e5f-4063-ab45-92b75afb13ab",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b9c02d-3ea5-4136-9332-4dd669105a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "050fa884-fbad-4408-b089-cbbd2eea85f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79c092e-f73d-4085-8c29-c9fb7b59cd07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "bce579f7-e290-4f07-ab49-20b88eff1d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b69e40-9d12-4892-90a7-0550bfe7e5ad",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffbfb0ec-b84f-4b4d-9c71-86bd69fb6420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbebdfb5-4e43-45c3-b3a0-11af867329e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "721b9b70-56c7-436d-9a0d-9eedd1df9966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd2ca62f-0db0-44fd-8ef2-f1e181a90c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf0ceb2-1428-4ca2-96c5-39933a989dfb",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd262f68-8947-4336-98c8-57f6b5d1ae4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3679c1f0-9b5a-4ae7-b207-4e4bb16696f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac727148-2ebc-42bb-a443-e65d44466b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f315946-e578-4b8e-b543-a4a136114cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5dc843-bb63-4346-9226-107ae8504733",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42aa3e0e-c5c6-4b01-88a0-7f24e740e00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b96e37c-0f74-44e2-b5a4-85fdac4611d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad8c157-cd0e-49b6-9ac7-8c14b6b9468d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c40f1b62-ba39-43a2-b6fc-92ccf0d4a1d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b503975b-d84b-441a-afe2-5a40c9c4e9f5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8bc0722-2c04-4f0d-8c93-ba87960b1e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aac7cf4-9834-4a81-8be4-f39bda03f1a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15c334c8-484c-4cd0-bd6d-d33d7d29b2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a48805a7-028d-495c-9902-a8102fc294a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a36697-2632-49d8-9686-861aa099dc4c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f0bd61-0d5c-4315-88db-c9993d988d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "383cda1a-5f25-4c98-bc22-07f3f1e252b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b372b56-63be-4fa4-aa4e-f6f679eff36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c7343f9-2366-4832-989c-f3fc9502cccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca67d56-49bf-444f-a7b9-25e00fb41085",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e24214-7d07-41d9-9d37-b4ecb178bb3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4126513-cd66-4cef-a63a-64ad8fb9489d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d72ad7-5c8c-4cb0-b1d3-8142280a3ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6c1a3e8-d34b-41da-a841-d7db9f99cd03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66160f7-f079-4066-8667-858aa2877a6f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cce9c5d-e7d3-4759-a34d-0a1df1db805d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83777dbd-74f2-4785-b1d6-0787c2c0e156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36c484c-51fc-4b98-a4cb-69c5f92e1b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f092df69-5ce3-4082-82f4-30e130cf7276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb64f85-9807-41b9-a39f-307299dd4399",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d407bd11-7708-4518-a0e1-79379f485fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20e2c199-589a-4c76-8a24-6bb3be4a2467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a378e17e-364e-4bf2-bcd0-0ea0c9a308ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da269e3c-d11d-4b59-820e-8484daec6c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06d0a0b-fc87-4ebe-b1cc-cd2722703f49",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60947160-7354-4b5d-8eb7-97e3226cb58e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f9cac2f-d919-4b10-b0dc-bba04463bfa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708b7cd7-06de-4737-b6b4-4e67afaa35f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b335852-c81a-4c0b-8045-2a8104240e12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f17ec29e-df83-4ef6-95fe-b1b29926cd10",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9debf2-2000-4f84-9b17-f0e1f819436f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6826dbf-58fc-416b-80da-112b01879aa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c6104a-e5a8-4749-a74d-ca5cc3fbb51a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c18ab0a-9ca0-4e60-ad6a-11409c828650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68139c17-79e0-4f7b-8719-49710da3809e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9356a238-8f22-416a-8e6f-2f9da9cbca53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afcb3b4b-d930-431b-85bd-59f27cda9433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8acef2af-ee68-4063-83a1-1484aa84254f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23d74bf1-cd7a-43ac-9f19-fb53392b26c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f20d31-5923-4503-bae1-8ea2c18581a5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "545e4a15-31f7-4f95-8224-18807992b432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97fef4ba-95d0-4e77-b0bc-b79ab9a40e18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b394f628-ec4b-429a-aa03-058f95867eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25e564a7-d7ee-4887-85dc-72bb75461378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480b6046-30d1-49a9-98eb-94214cefbf45",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd731bc-f91d-482c-8ddf-026966946503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9b9c0ac-d80d-4b04-ac44-bbe9070d4973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8bd8679-9b76-43f1-a4ab-7c3379ad18a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abc3e8d8-7052-48bb-8032-8950180ecf4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fecbf003-981c-46b3-861b-fce6ef5532c3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18861ef9-9b6d-444d-945d-8359412a2e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf3f0be1-f7e7-4a82-89a8-28f5387d3898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f87cbaa-d631-4677-8ead-25a3d8146884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e226d918-c4fe-4189-9f9c-2d2531f382f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be57d9c-bfad-40a9-bd55-7a5686c00b2d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84b78e3-61ce-46b3-9aa4-e0ea2cd6d323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f755a6f9-286b-49e3-a040-d14460045cc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b23618-06e3-406c-ad58-ae867b5089c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d8e3a87-7912-4be5-a3a2-0f0ae254ad73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ccf287f-00eb-4b77-9dcb-278629cbb9d7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c42835fc-67e2-484e-99db-35744dbcedbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e94f456-cc66-426e-859f-bbf2aaf0bc8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a658c4b4-4a1c-482c-92f4-fc648040b120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7754f0a8-993e-4119-b0ce-6c4f7a9fa993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e348c85-4f1c-4c85-8f7f-f00100ef081e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3981f1-f2ef-4f4e-b7d5-7b911e1ecb8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36391122-7ee9-40c3-a191-352b7bdeebb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ed2451-61f0-4b1d-ab9e-9f9556c8ab2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ede15de6-0096-4d08-9013-2d654a29f08c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded8963c-2893-4ca6-a87a-ecb544b7904e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3d7cf2-9ac6-421e-b3e4-65679e1542a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae13047f-0012-469b-8491-ee89b1646d8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60541ed3-f0b8-45f8-9549-8e7ac403436c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcbb4977-534d-4891-84dc-016633b51d6c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "25b0152b-b34b-42d3-93b9-d9ffc87ab843",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "04c35151-aeef-4597-aed3-d3c272529fe3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02a94c0-b31a-4010-b1b0-d58e06ad2c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29545497-47dd-4593-b4d4-4525aedfa984"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da080eeb-74e3-4df1-9679-562ac067b7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f1631b6-3906-4de5-9b39-cadabeee25f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b177af88-e10d-4f65-a2a8-5e7e73919487",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d6d377-fe2b-4317-ab9f-0514d3773d64",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "93f45319-5720-40ff-a193-07de550947fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6474b65f-d581-48dd-9033-e201a52002a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "019a60d5-b610-4ca5-84a9-93f52cb5ec19"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa8eeef7-50b5-471b-a415-d5d9ee850a97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f779c69-e8e0-469c-959d-734bb26dc9eb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc8acf7f-f85c-4bf7-9b31-569e2d9b7543",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4fe5fa59-d3d9-4a51-acd8-20f88902c04c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7ca34a58-446c-4eb7-9e01-bce83851effc",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8a92bff5-ca32-4a27-9344-3bc9ed17d973"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63e40d81-a74c-405a-9238-9020f2a7749c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "75dd3b46-8d01-4c25-b09f-63d9b8cb6a40"
            }
          }
        ]
      },
      {
        "id": "30b31e27-c8eb-4c9b-ab5a-fcc7f01e27aa",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6ec9625e-56e2-497d-90f4-749fb6b5a5eb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e82cd21b-79dc-49b8-966c-3728a370f9b5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "db6f4293-e71c-407d-a54f-dee6bd736d3c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "212411ae-691b-4e6d-8401-8db07eeb3f06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2c0052d-f251-4d7a-a862-7aaf25cf5ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b384793-c99c-4f55-af10-38a77f83fedc",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63dd3260-8add-47d5-a271-9eb78e2c4dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c456e76-2ddd-4735-847f-d062a4bba4c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ebb7bb-0c70-496a-a00b-6022e6e36a33",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cbc396e-55d8-43ac-848f-186c8e26c0d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48f0fa76-ab01-4387-a132-b70491746781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5876df01-ec0f-46a3-a7c8-f47502a05cb4",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d105baeb-e927-4c1c-8174-9b9d077cf17b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8ee5bd7-3e66-4835-80f6-437c33456cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098d0e7f-9c72-44e0-bdae-d085d380bf70",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5136a6d4-4234-4814-9167-c4cbb140afab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7731a577-fcb3-4720-b04d-483c2aeb1002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52500102-d7b9-4a9d-a63d-fde0cd790288",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61fe730f-2c7e-4c73-8ddb-e99dc8655753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5dd0433-c4fb-4453-9d92-cab846371342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aec648a-8769-4d8d-90de-d49f1b915906",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51cb448-887a-426b-8097-8c45e120b46b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7628b9b1-a3d6-46bf-8d94-b2519b8fd2e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2bf3ac-e576-412a-8b62-7136a76464af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "455f1365-8eb6-4fe8-b1fd-bc95cda6aea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c052053e-3a1b-4243-8355-7559e4cd0265",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5538922a-31ca-42ea-bd30-186336087058",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aabecbc8-be8c-4d3e-9281-c27f0117eeb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8560db55-1427-47f7-bae8-e776a666027a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31cfb3f1-d517-48bc-ab7c-9cbacc7dae9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9670cbc8-ab7c-40d9-afcf-8d855b5b045a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af250add-dfa5-4c59-8fb0-8255b0c8e38b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0adddf4a-efeb-4f6d-9220-deb54100d6d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a58f72a-49a3-4f43-848e-ed28af083ec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30088787-e8ab-44ec-aa0d-779c68cf642f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f04d1b-5097-4134-a0e0-b1413a70fb4b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1199bf27-eba9-45f5-a88b-8e550b0d9bf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df54f9f4-fe80-44e1-8d2d-2a3e5228f9e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25df841c-a865-4067-9b99-dad3c0fca1d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "328c2844-ea2b-4082-8125-ea6c99077c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4044e14d-1806-4848-b651-adcf9fc78517",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8fbc5fb-cf6d-4409-9d79-bb417ce11fc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6b6ea66-4f5a-4200-8afc-aa8ec6879a45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea5a51f7-c698-47bf-af78-b8d2b37032cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a867dd5-5ccd-460f-8505-daf1fc71032e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b3cd88a-c3bf-4a66-81ec-1aae29eb814d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7967ac1-f4d5-4674-9e23-513d4e35a37a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24442e49-733f-4ac9-a0df-2b697b745555"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5e58ee-82a2-4b53-b198-d4217fbca70a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "383ad5ab-0139-4568-a506-5a77affc58ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e990d0be-c0cc-45a8-80aa-7fda91660c0b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57dcc3b0-2dc6-4ed1-9695-5f24c64e1c45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32f357ec-aed1-4e1c-853d-3921ff620ef5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3619ab50-28eb-4f0b-bf82-f4daca1107f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ecc66b8-71dd-4779-9ad6-c952574251f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c272893-9e22-4104-b456-bf0b421b4549",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ffad4d5-6563-46af-8a41-c22f8117fb6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff6ec453-2667-4501-9b99-8b19d06d1f83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8ade92-c40b-404a-a0d5-f5cf39d82e62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b12a477d-362d-4b18-be4f-30819c477d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11344569-8eea-40e9-83d8-2d875333e9f0",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7741ed24-1e55-4e7f-9149-50bc170c83d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "574f388f-5b40-42c9-8a10-bbd5a5263eec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d7bcc6-2805-434b-901e-960b4946ecca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6120919-a1d7-42bd-bf05-dcd1372cbbcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458c71ae-52fc-4ad6-8ab7-4f7135ea5ec7",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0bda2f-14c2-4685-86e5-66423a7e8d81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d6caacf-b3ad-438f-be8d-d6df5771596b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f336c46-ee01-4ecc-b3a9-a05aca63b402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "706f7c1b-bf63-44e7-adcc-f96af270b32e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c9702a-52bd-4b65-9040-0844dc471464",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a04e32-fefe-4b8e-89cb-ecc92e855756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "563ed34e-545e-4c80-9c96-870e7421a347"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f6c8cc-5a36-4eec-a623-e618d67d099a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0534ada1-aed7-4ad5-a2f9-187915dc2d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91196b14-50c7-47a2-bbed-fc27490ae4a7",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f72717-eb4d-47d0-8d24-527e644b61b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f07f364-f2c0-4b58-8038-3159a40dd754"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4311ecdc-0f6f-4644-bd91-7062ce801ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b1e3791-96f0-4bee-a87e-e1ccb66d91ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6862666-7d1d-4bee-9050-e4af35e0c7e9",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa602dc3-c753-4b74-9662-481a5a16f8c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "915e079f-3be0-466a-b301-6805a48bb3d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3547d2-7db1-4502-8b5b-283e80891bd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e69d9c09-ec2f-4dee-9afc-5579cb2c3245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68af134a-ea3d-473f-8fcb-da5e9127cf62",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70ab078c-2143-4f91-9dec-9d020fc43bab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fa2e0be-a9d8-4416-9f63-a04a2755851c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eba4663b-289d-42d6-9e55-1712fb0b6414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c94702f9-1a02-4f43-b5f9-eb83b31d0ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7599022d-1e1a-46dc-9949-ff83be6f2638",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c397f87-40bd-4954-ab2e-65f3ca060d05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43d19a8f-29d3-46b6-8d6c-4aa976ed7c20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08bed743-1d16-4cdb-908e-5c93b5ccdd34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63224b55-f168-4fcc-a06f-50d9cad6a4e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac2ffc9-b2ec-4195-acad-5d4ff23c7300",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065a474c-e249-4f82-8584-36c4ecf8a348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "156a08ea-bac3-4c68-a231-4287cafcde79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d3c63b-ca22-46c6-9813-b47ed05c9a5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "624c75ad-125c-4f57-9ff1-0219f0f68935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f29a7aed-a004-493e-95e2-d9bcf7288f82",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256c5738-01c4-43dc-891e-25be72b5039f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eadca01-da45-4d02-9916-8703d645c90d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4585d248-5a9f-4a61-8930-7d32cceca2da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e894342-45f8-4296-80fd-592043350483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c431c253-1825-4d91-9dae-81f26b5e8a88",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "834f0c76-216e-49a4-b372-df7cb39946e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3242194-ffc1-485d-8abb-9057b1649e6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d087b0-0803-416f-836a-436fecc2c859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02b40045-e66e-4dcf-abe3-8e7f7df6db66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "441992fe-4977-4f40-87cf-fae205fb0fff",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cfe5f50-cea9-4cc6-9a59-fc9726a68c75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfba1344-f05b-405c-bddc-42f6bb818fbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afec21e0-f4e0-49c3-8408-aaf96f352438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42ff517d-40d2-45f8-b549-a839012b86fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f09bacf0-4c47-4f6e-9189-21273a06b823",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb7c53c-630f-4654-a8cf-a79873d0d81a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a527186-e773-4be5-83ac-a99f4886b3ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eca03bc3-5226-4860-9f5b-682d1e909fcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f401585-e278-4ba2-b0d9-fd7db8a6f571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b834f7f-f8c8-45c3-8bf1-7cc382f7f4e1",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afd6a9e-ae80-4a8e-989c-f3e94458efb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cb83dc6-b2df-4fa4-a2c2-83c663eeb672"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9889cbce-4a8b-4c6a-bd04-79f48c744890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ac889a5-3d81-4187-9432-93244b7ee909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de6f1115-59a6-45aa-a945-600ea1f46395",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b31849b-a640-4097-bd9f-6763d889d579",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6602798-151b-42a1-9dba-eba7b2408116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7293b415-b2fb-4645-a16b-27ff58d2eca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e46f3a74-f66f-47dc-a8e7-4ba4a8ff0a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460cfb39-3469-4363-97c1-50b0f73c78f5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c69accae-d19f-4cc3-a3a4-4293b4884677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e56599-73f9-4ddb-aeea-4cd99641bb47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ef1cad-49b2-4467-940e-074b2fad5a6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b51d28a-d6d5-4cd3-8973-f7986d508137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa510075-50dc-44ad-bf0b-e4cda5abf2b4",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d450bb-e240-4af9-83a5-4c2d9888f04b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5063263f-649c-4bd3-bddb-6a85c4072d50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3618690f-0e30-44e2-95b1-8a447b3c9212",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18bb3c92-4530-41d2-9af4-5583f21fd406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997a0c1d-0e57-4ede-a9f4-dbf6f5640e79",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28de8535-7f3a-477f-bc44-17fe1e17a5e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "933a7ab5-2aad-4784-bfba-e6cf7272b65b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7661114-03b9-4180-bcc7-2539dec219a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed874296-bd92-4509-b6f5-cbd961d764fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bcc26de-721d-45c6-bca1-b3493d898a8f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "898ee4f1-00d4-4c66-b5e2-613a4e423560",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0092caad-e175-4614-9f64-0e048608f577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e121f1e-88de-4539-9d62-6766b3ccd546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f3a2d27-bbea-4f0f-8b46-e6ebc27cf91f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc2c508c-2b5f-4b6e-a21b-6ef38a7367d1",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e1fc40-cd73-423c-8226-911b6241ff0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdd18161-fb49-45fa-b586-1400963a309f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e105a9-c34e-4d5d-9697-e7989e92684a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c618f1e-4dbd-4755-a7dd-8d5b4eb673b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eaaa58a-7e7a-416f-a49a-ac0022c158eb",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62727593-bbca-4ab7-a7b4-da21f752e8e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "840e98a3-4fe3-47f1-bf2e-a5c6b9c0fcad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03bd917e-e129-46aa-9479-032bff8348a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c20e4d9-214f-4ef3-9c70-82afd0353e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075123cc-1682-43ab-a81b-0c4341a6a921",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f30898d3-a0a2-438c-bd91-4dc502df24e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e513ea0-5c87-4242-a9d2-e9b3f5147430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15808a88-4b4e-450a-b801-bf7958d09c7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acbe7311-eb2b-4828-b20e-4b8d19e78177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42aad892-fbc7-447b-bb7f-347cc155c431",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4f73561-611a-486b-a834-58b326f99e4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b484772b-41d6-4beb-8e8f-a3b446e7ca69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e15b7d5-a292-47a3-be18-e5cb202e6240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "724549b2-43a2-4716-a9a8-b87c568054b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ad4760-5af4-4809-8930-18580d218f4c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cafa519b-4c9f-483d-b1d8-d5fa87a79008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "914372c4-0fdc-4cb1-a9e4-e82d5e1cf181"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6957b677-0bb2-446d-af8d-08f1665c8c7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b213ad48-8308-44fd-9824-79dcf42da562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5344c237-16ad-4904-828f-141354ff6781",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e930b47d-0b54-4121-99c9-121959406590",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de92a152-3a72-4b77-b3d1-96a345871f25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ca0662-d036-4b34-bf08-64a694f2540b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e25133c0-0a64-43ce-85e0-8391ae9acfe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7dbed17-ee5e-4140-be39-8589739505c0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "211e39ca-d414-4244-b90d-b627a32371ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dda7c12-853e-459b-abeb-2352a8ebdadc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6309a9-1994-492c-b692-5b101036d354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b612f0ef-3f17-4f1e-8bed-71e82e27fd31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ac74c1-0d51-4370-9a32-991a35b145bd",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96012f7d-de56-4a0f-b4c3-fc2174c4ae3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04cbc51d-59e8-428c-bbe8-7b71597d5168"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c4cb53-aa4b-442b-a584-462f32e6ae3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14b57731-761b-47a0-9b8f-e441461214e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c08173-78dc-4d29-982f-b6bd80a5564c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae7703f5-aa26-4131-a35b-42e5c861940a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c1ca37e-8f7c-43a4-8c7e-abbd649f3816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed84851-d35a-428e-aee6-5d503ca8d282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ebb5d21-519a-4d35-be2f-f9a874424a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d8edc4-1efe-4eab-96ba-9b0f07375871",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219fffcf-eb75-423b-91da-672003066aa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2c05636-a013-4643-a707-2a63703b83e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe29023-9b26-414f-857e-c672c6daa49c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c78c0cc4-67a4-4dae-9039-1197136fc760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef63402-a2d5-4183-a0dc-1865bf8a34d1",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf6ae88-de75-43ee-b22d-11bd8227d309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cf39ba8-addb-4c74-b60f-ebc3071d5c1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b288ffad-99ee-4d0e-a764-cafd19b48bdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aeca5d8-1a3d-4a97-88ee-631c45c9c2a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b747f4bc-63a7-4d08-83a0-e95d2d91a7ac",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83206769-0966-4122-9b2a-e80c90eed714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef3f2f42-ffcd-458f-9b33-2c2f4ddf3717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6b3310-338e-4615-8e67-c7c6c2357fc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a91c7663-0a51-4dee-8011-fcfdce00db7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c7fa62-334b-482b-97b2-5accfb658c46",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1229beb4-5c0f-43a7-926e-109f537c43a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae6974c1-5d90-484c-ae84-20387c5c68f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9493f4-f408-4089-8b1f-5c38796619e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "939dd8ed-c351-4edc-a559-dda8a47406a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b1d5c6a-48fe-4c9e-a072-09cdf61270c8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3885d94-d6e4-4b33-86e8-547447533cd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37fc0a06-6a08-4131-8d5b-b573a3ac999c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d3f4e8-b28a-46f6-9254-8307cf2c8a16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22d18c19-8dd0-450d-877e-f32f57b4a844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534b2a82-3381-4d87-9ebf-b3f8b0be4771",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a862f6c1-4359-4db6-b1e3-be149e5ee31b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7031863-1664-45a9-8a77-8670f4799d5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d492930d-14ef-484b-8629-1ced5cd6d63f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18ee1ac0-b29d-4a52-b3ab-c827c11f8e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bba72b1-a2aa-4526-bc6f-d63e7a32f221",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b0eb0f-8915-44a4-a6df-683cfc9ec8b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33e7eb5f-a65b-41f4-bfa5-9b718a16193f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffaedfb4-8156-4bbe-9ae1-871907c00f66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8e6dce4-0b2f-45ed-9d7a-a47c10d6f7ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fbaebcc-46f3-4095-9a65-e89922a90d91",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75692203-ff82-4f3f-82b6-2325bb55f2eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0113aad-9c76-4ced-9195-340a117505b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c3ea5b8-8af0-4678-b856-156e6c424c0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d9ae41c-ec82-401b-88e3-3747080a3123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ddd9a7-74ef-45b0-9d74-8fab00238ce3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c0b59c1-c76a-4568-935a-84ca5de2ef94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac16e0c4-596e-472e-aca2-baad3d92f6a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1cee35-adf0-4c57-950c-0719e184a5f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d37bb3a-fcff-4305-91b5-9400d61a3ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf02ecf-8ebd-4c3d-8c1b-fde6d4972694",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920ab30d-1e80-4963-ae4d-7347dd0faf2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64caef3d-4649-4c43-b289-123b60499d70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0613a839-97bc-4d2c-963c-f3d5ac547a02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3600d0d-a43f-41ad-921f-a1dc69e7b116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d27cbf0-9194-4a0c-a16f-4331b8e40971",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7efcb1f9-207a-41a3-b482-990524ea5cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9658e2cf-643f-41d5-abd6-2b4a4fcd3b9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e485890f-db9c-4a66-85ce-a9f5fe8b010e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a0408df-47ea-480a-8365-6a6137f8869a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed0e6e01-bdc6-4166-b0e1-efcd3a7edd82",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03602971-bb12-48a3-b433-3a908c81cce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc6e2348-612f-41f2-8814-305e432268fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e3f441-4985-410f-9b19-4a7c69ce4764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b7b0ee5-18b0-4453-af15-9c91e955a406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc88224-c8ef-49a4-bbf6-6cd73c9e1c2c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75a6acce-8de3-4369-8b8b-20adb2fab0f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa28ea8e-b696-4080-8503-1fe8e1f30faf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "080c11f9-72e0-4ed7-b80d-8c9c418ce5fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7cb9ab4-6e4d-4529-8af0-94f1854b0530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3ff36d3-ae33-4cdb-9486-e6bfb2b3768c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d148452-2d7e-487c-97ec-1542018d0892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8236263e-5653-4356-a7af-8f3320cf8b4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1186ed71-d9d1-48fd-a358-fbedb18bf047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "414f2241-bbce-4764-8cb0-197e7f19ff14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fdc5c57-c675-4570-8e3e-29edd581bfee",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f469e843-1212-4695-b131-b63e717e9f81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81899200-9037-471a-a35a-f90ead91dc27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a506bdd-4c73-408e-aff6-3b89539dbc40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d83b15db-1e8e-40eb-8ad9-4790e83c41ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "576370b2-bf9b-452c-925d-8706259a3192",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb9b84d-1637-4cf3-adfe-77f6e37dc6d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb14f57-d60a-45df-b2dc-9fc0488856c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4620ec40-1e5b-40d1-9c2d-8f167f8d8757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e471910d-3b6f-4c57-93b5-881840674ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42538c45-59cc-4b79-8d66-cc1d6f465557",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f7e2bf-0999-47a4-a0c3-b85cceb1f5f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "403f576e-908f-4596-8327-e3c6712068c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d70899-0e19-4ea1-8381-1750bbf82e70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ba40eaf-8c2c-4df2-9c12-ab99bdceecdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b53efd2-f93c-4593-9d88-9db7e1a2ee7b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c78c6cc9-5ba5-4bfe-8e2f-dc8ebd3e9015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b65c5fd-db0f-4c61-850c-e535a1c0dc9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29e33058-6d27-4108-8a6b-bb36cff7e94f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29b1ece1-c4d7-4131-87c8-142e3f4cb0b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7cb1c01-df6b-4a95-a379-f893c8906907",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "106863ee-2b1b-4a34-93fe-fa73db2b041e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91af8b44-e110-446d-9770-b95ca317e756"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d578bd4a-7b35-498d-861f-238cbc4b1291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5194f75f-8902-4f5d-872c-479ec741a64a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5354e75-6b5f-4161-a688-e4b60d17b05e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9d67ce-2413-4a8c-b230-009b2f760aea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa215470-451e-4c58-b758-cd84850c0ccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6374bf90-9d21-44e1-8b86-cbeb730c10e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acb3368a-27a9-4d93-8d3d-60ffbafc7872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30cb65d-2166-41e1-8828-5a7b829a23ac",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038f9572-3c36-413e-bace-95a4544731c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e76bda9-5670-4476-a5cc-450ff02a98db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb383c9-aeee-4009-8c96-134442901b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e33d575-90da-4d37-9c9c-b0a00e1b1891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e77e6d1a-59d8-4966-a318-5a437e890feb",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d61e66f-e078-4e6c-a1a2-2eb0fc630be5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6064b914-28f1-4824-be7f-51b12ccf5bf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c0d6fb-fb70-4d06-9a34-dcdadb25c273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6836cf61-7752-4417-9a92-7b025e3ba678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85894108-f65d-49e6-ab2a-f10b19ef01b0",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec46a9d3-05d9-4109-99b1-52cd0f9d764b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c458ddf-2170-404b-9210-9db2a7ed5398"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "017fa196-e6b9-434e-9d3f-3f30058957d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "274c5ffe-43c4-47cd-81da-b1acbcac47dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da3df12-5d10-4ffa-b476-9dda274d953a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a88927d-679f-46e0-97ad-7715702d5bf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8702aee2-f47a-4842-9692-a4fdd0142cae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23673d05-eb74-40c3-ab4d-628d5b49afc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "301b7ae4-861f-4102-8ac4-cecfaef04531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ea901f-c516-4492-ad94-34e19798d4e9",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7a90a8-3e09-4bfa-a619-134709397c91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1888ab9-710e-42ad-b57f-504617e6d8d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d97043-d1e0-4ad4-999a-d70f28493bac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eee0bbb-9489-4b59-a7c6-ed24741b1c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc981adb-7398-40d8-a13d-9f1fa3723f1d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8c2fb4-5cc0-4385-8365-0a78f32e1ea9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4d22ea3-9ec9-4d88-a681-3745a2bdc4cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db3eadf-7a2d-4036-9933-91daa5a92f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cbd7502-facf-4653-827f-b949717f4976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16deff09-2ce4-4e63-b1aa-340ab03fad90",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31d7f5e-daa0-4d4b-a078-83576a47dcec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3aec0298-c33b-4457-a1f2-589a1a329af2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e1f588-6b20-49a1-98d7-d1a5fe0b6143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03677643-86dc-4cd3-8ebf-c33a1c39b36c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfeb3fbf-2718-478a-8f62-a5004335edde",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f4bb1dc-883c-4d28-8252-38ff4c4ddaf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b1f7e85-9889-4538-a1ba-2eed6f17e475"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1de1f20-9b28-45aa-8fe1-53f0a483f7e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b9115b-732b-4332-a878-8e79ca4295d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7bbc8b-7af0-4c79-8c9a-8c9a94eb8ef2",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5bc8c90-dd45-47a1-be09-d33a3b384b42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af362e55-f13b-4000-8af4-a969e1256a02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d7bddb7-b807-4e98-a4a7-c903decb4361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fe576cf-374b-4408-ac29-1c4e0838c959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b24623-6186-4239-b7ba-e7a69a20c0f9",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8525f53-27ec-4c0b-ad20-c3054640e9f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c94cf6c-c580-44a9-86fd-3db81ebb63e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e83940-ddd0-4207-a83f-8328ec7887b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c271b8d5-7816-4827-992c-27d6872f7c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b82754-9f68-4078-9526-9119c9a34d93",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c959c1b-201f-4dde-9126-2e79c6fa4eab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a29eb22-20cb-480e-bc2c-02b364b68f46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bcfc7e8-cd3e-4035-86d3-365c6207ca92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3939049-076a-458c-870a-d9fdb8ec1a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e429afe-8fc1-4fb1-b214-ec5037cdfe5b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e76dfd-7bb7-4325-9dde-bdd4cdd0e212",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73335d42-7861-4b90-bbf1-84447f494760"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "450673a0-2753-43a5-b147-87054cb45753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45e62b44-a063-412f-bf4a-fe08e69634a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a680f1af-1471-4dfa-9c07-27efd446afbc",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921d7373-740a-494d-9c30-7e4d408774c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f75a22f7-12f3-4899-bdb4-4d43efe82751"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d3b46d-0e99-48e0-ba39-edd65b99db31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ec3e4c0-041f-4fb2-bf9d-2e8b7b55a64f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e37c016a-ea9e-4a83-ba50-c4f060440282",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e940e377-6412-4712-83a0-71ff1d8ae800",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d5863a8-c96c-4b18-bddb-d685465a8a4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4dae41-113d-4b73-bc46-57b3b5f45e61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f74d51b7-5019-4617-b61c-8af008f11bf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab2a162-ea71-48b4-b496-966b2f456d4c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d854ffb-d5a3-4ae0-a050-b4844dcdc5da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f42d8374-ceb6-49da-9a4c-62577115fe1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d434a144-e5ff-44b9-81ec-ebc9802e176e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1d696e1-9012-4e06-ab05-6aa764092a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05818ed8-28ac-4df2-a4bc-149568444cb8",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480db636-6268-40ed-9867-8689c208b0c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a15d175-6673-4af9-afb5-90c832654239"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb59e2d5-0c5c-40d1-b421-5b062df8aeb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a77745c-3608-4e8c-9a5b-814d763f307d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7604c002-e714-4fa1-b3cb-03ede718fcab",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "165efe10-3927-4be0-9f15-76beed589696",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98928e22-cd23-4e8d-97ff-585e2e8976ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0047c0-47c7-47b3-bd7d-a57b9bbb10f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63d61308-7f13-4cad-b5ef-b446b02a2db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "960e6fd5-07da-43c8-a28d-4acbd72d3437",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77580c73-b1a7-41cb-800c-74d4022caf16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54d165b8-4ae7-4f94-ac13-d8cbfc512445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "989fa387-c109-4b18-ba8c-ed972774502f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c27deec6-9214-4880-a173-ae947cc42f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37805aaa-44a9-40dd-b70d-56f6873329d3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f528a63-8a20-471c-836d-0ed1542f17fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b268a2e-d1b2-47ad-8009-2d2e62ca5dcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac07599-d745-400a-be18-427990f2ff0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dfb0b79-87fe-4af2-8f98-f29fabf0928d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e1879fe-b3b7-452d-b825-13f8c4c231de",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa9ab2b-f142-4c55-9b24-98701c6928ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fee3e96-ac5c-426d-8bba-9cd0aea40bbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55fed95-b67a-4d4e-9885-2d90b2520b51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d3aa9b-cd0c-4f69-9902-ee16ae47f28e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e9ef5e-0621-400a-91dd-2e370f06a194",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e97636c-82a7-4701-a0b8-f4832a5d0f89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61ca61f0-5d39-4ef0-aac7-5b9161cfb70d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f23eb95-1df8-4020-8c21-091bb7f5cded",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54cc2f2a-0dab-42d8-94a6-24c7c019d794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee559919-b76a-4e97-b467-461b0bf3c58a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f3f8592-1ac0-4732-af49-2ad172dd0a54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0772262-528c-4758-bb87-de619d5115e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d196cec-2dd8-438e-ac0e-6a65c857b5b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c676212b-4210-4182-957e-e35f124a934c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3c59c2-69ef-4308-9c3d-85d135dc7aba",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9edb23dd-7177-452e-86e6-b66710d12a9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b18f9bec-ce7b-4fd8-b929-b033a2f14722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d902b142-bdee-42c1-a220-1fac91701d9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3957f83b-f6c9-4200-806f-e31dade90e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f0e508-fa42-4bf4-9283-470a2f2ebf28",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed52309-13c5-4f58-be93-a363235541a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f1a90e2-ebee-422f-b093-342070bd2ad6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd82c574-9889-497f-9a0e-c2a59b3f32a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72dad7e0-c760-4505-8154-820d70cf9013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24308d9-2ebe-4671-a3ae-e4f70becb24a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce77270a-3a82-40da-a0df-4a235eaf687c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a24fe8b1-47ec-43ba-8bbe-7fff1686821f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc842d6a-4a3f-4522-ada7-e3087e857497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be6a76a3-e8a1-41a4-a00a-fc54b47657ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50c5e50f-8e4f-4882-aba5-438e8c87c6ff",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ed82e4-f91b-4aea-8274-2b4f33a89ebf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acd37e75-1a97-42d6-912f-4349bd357392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ebe5461-9563-46ab-81dd-584c178a4ab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87168144-a724-4a82-868c-cfbe3c5e91e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d71295-47ca-45d4-bd4e-d51bafb5aa12",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8908ca-b6ed-429e-9c27-18cc923c9a46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da5a50f5-af30-4506-bca1-581672367a45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d6f157-5a43-4be4-916f-3c9105b060e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08314916-ef4a-418b-9ad5-68ce1442c49b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b966fa0-8de6-4e04-8621-b7b22df98aee",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73e1eabe-7f91-4c71-b34e-7be471072ed6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4716e1b5-aac3-4c18-89a3-a1d0adfa553d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfaf6174-44b1-4b6d-89e7-5a297229d819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "760b78b3-dd00-4b80-9255-ad36faed35f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234b9a94-1984-47af-a2a8-49cd7dde033d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd78936-deb3-4257-aff7-4500e485c48c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbc028d2-0c89-4967-9902-547eb0094a0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71740e98-cb72-4093-9638-f1568dea4b31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60680681-de69-4018-ac12-9304091ba2db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75ccd035-f606-4d65-a574-a3a7ce2991cf",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5746deb-9ad7-4047-85a9-2b6e9e94a432",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d141542-efca-41b4-9f00-86cf0039ef0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57283144-554a-4eae-b1b3-1f272b99a893",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12133978-0c55-4c6f-ba6f-3e9f7d92ab81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a99db1f-07b8-44f2-b444-e5272bb5ce5d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b61651-7d0d-40f2-9981-111e6284f43b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdbcedcb-243f-41e5-98f8-c9cf276f4c61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d496fd6-18b5-4690-bd3f-576cb32209e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6eb9df9-333b-4f61-ac7a-4887b85b3a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b15af2-f680-4446-a01d-54f26b83f0cf",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7218ac-3a86-441c-aa76-1badf3c09e94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b99a3417-5e8d-4735-a444-c7ff4b15ebca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84c9646-5076-4fb7-853d-a1d8fd6fb9bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "281bc700-5cb3-47e6-abc4-4bc3322d67f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1869ca-1ea1-4710-9ccc-1ffe67b805ba",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d01761d-fe2c-4e66-aee0-8b2bbb048922",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e671044d-658a-4aeb-9764-1e32e5ba7a9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf81ffc-2915-4846-a2ff-7ac599be9a2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc5c6201-b4d5-4a7b-965d-bafb5b0ca4a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa1601b0-1d7d-4c1d-a227-5d15f18bd910",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db5ca67e-3d22-44db-9144-7d96384f7f96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7407abb-6f31-4fe1-888b-0f22082d465b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62190f4f-3d24-4649-ba70-ae71bc6be7d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3099471a-0d07-4254-9102-f0c55c6546ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5caa7b4-f49b-4a52-937d-623e65904ec9",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c675e973-9f51-4fc6-bb61-b73891f44d54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "807004cb-098b-4501-af2a-1e615238030e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8324c806-1044-4c1d-8edc-c827ab07b2f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fe724d8-319d-41e7-8a59-0dc29a772edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e34bfc0-b2f6-475f-9d43-cb79eb3b4d7e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449bad0f-761e-4d17-a5c5-bbbc22b7abab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "436a9980-3016-4b2a-916e-6e82e42f627c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c828cfe9-a7d7-4794-8945-1ce61f56c790",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be976fbe-72c7-4735-a2a9-d4dd74ba9d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230a6d1e-f49b-4303-85f4-485cd20dfb6b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dccc4375-e36e-4c93-a89a-ed4edba62971",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8b1bc98-39a8-4cff-a35c-612c52255172"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a915900-47e4-4980-be25-a1784fd803a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b67bd2b-1e60-48ea-ab09-4f5947db2027"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd9eb0ae-3988-4175-beef-6921e0fdffb2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62d3dfa8-4570-47eb-9dd2-4232d065ef0c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ae29453-633c-4876-9df9-f801fd6178ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ba003d82-dee0-4fc7-a834-0a5eca5a57ca"
                    }
                  }
                ]
              },
              {
                "id": "2904c3d7-f557-45da-b151-b0d4c5365128",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "acbf060e-4c68-44c8-ac9e-59ac31bcaa00",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7528f62d-dbcc-489e-8f25-887c8c79b826",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f298cb62-fb6d-4e81-b537-d17b52a89525"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8c7c2b-5627-45be-8972-b7ad10ab7143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a43ddc8f-e1dd-47c6-a315-0d6806f47b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a74092-7bbb-4c6b-9c0e-31069f560d91",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5647f973-3670-45cd-9186-77ddc4c6d1ab",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9a2f07fa-b7f4-4379-b009-052ac29970b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1febdf9a-d7e0-4cd2-99f1-8c1570812f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e57431c-c079-47e5-a687-dde7dd82e4a7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f80d7c8-2ab6-48f3-8d0e-ec6a0d2baafd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6984f4ab-aedd-44fb-acb0-efd7eb09c54b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b191e67d-9576-41be-bbb6-aaba5e585c11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16161a14-a1ec-4688-a795-edf4cdc11660"
                    }
                  }
                ]
              },
              {
                "id": "3034144e-88a3-4060-85fc-c5054db1a036",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a8f10d87-22b6-4776-aeca-59385d37763e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d10ba7-3218-4544-876c-d20daff1d76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "eab5d5b4-b2ae-4c79-891c-97d94cf0e123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f543e2-1495-4f4a-9bd0-0933bb371b39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a55c30b-b63f-4a75-bc76-a17aedf9f9f9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9458e2ad-9873-4010-9e08-5bb97a6a32cd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8df7d57f-e2dc-437f-8eca-93caaebd789c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc8055e8-1241-42c2-9e0b-66eef75c2984",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cbf902c3-9378-4d40-a6de-543071a167b7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "24a4c3fd-34d8-4eb3-af9f-35cd1bb3f411",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4962c145-54d4-49e7-8558-4c9b58d0e0c7"
                    }
                  }
                ]
              },
              {
                "id": "0f9d993a-c95a-4e7e-b086-4c0811a8eb47",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9b29972-871d-4965-9eb5-4b1a786377de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9b8994da-c3f6-430c-9eaf-e795215022a4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "edc30970-c61f-4104-b4a4-66598b3a7286",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d20fc6b-0529-4d29-a654-d929a1ae39eb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85ff7948-4cbf-4224-851c-1e22c89d33a6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5de43582-7b54-4d3e-8f7d-d726369b9a3a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "68b66154-6281-40ec-9e5d-e02cd1596bc5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e38cca4e-be6e-4963-a2cb-b3b40bc52180"
            }
          }
        ]
      },
      {
        "id": "abf957ac-2a3e-4e33-b48f-ae7b8a0e87c4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b33c523a-fe6e-431e-bab9-2e2e9187c4bc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9f7f8568-d34f-401c-9a8c-32534414c4cd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c5e0d9d0-3ad5-4060-bda2-2f12213b11b9",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f5d63a2-5406-4431-9e3e-c737f88bcebb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fb1129e1-0ae2-4609-93c4-9b4978bc46b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48830c86-1806-493f-83f5-5ca3c5d8797c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c21e7764-ad53-4a27-b8a1-3db64e900caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4e8ffa-cbff-46cc-8be6-7cc310e2454d",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff458947-17c1-447b-8abb-36686775dc59",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f596f14d-0adb-4141-8e29-052bf873819e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a05793-01fe-4e2a-af52-8b2099cc41bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb7f85ae-9467-49ba-a510-fb70fbff18f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "931d8dec-0d28-41fd-b8de-ae32b2ecb217",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2dcb0d4-6972-4944-abc5-b171cab6e87c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "be38c7ee-bc5b-41c9-881f-726fca0f833f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eae3fc66-9c11-4547-b71c-c4e243bfbff5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d7f8776e-fce1-41b1-aa40-afc45d214a01",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5894a574-c3f2-4eb6-a8a1-91e0dd5aff76"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69e16046-2c08-4648-a72c-b7e2c6136f06",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "af0bdd55-08b9-4e60-aee3-4ff1eeda902f"
            }
          }
        ]
      },
      {
        "id": "ec54e033-8766-4c9f-960f-29d6dbb3294c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "186b7be7-73f8-4e56-84d0-4de1b8489bad",
            "name": "Negative Testing",
            "item": [
              {
                "id": "158263f6-0d18-4eba-bdd8-15ce32c941e0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5374661d-8dfe-4796-83c5-5bfbb7efdf14",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f40f6b-7aaa-4706-b8d7-8926df795978",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ef8f0308-1d9c-4db4-bf1d-a7bd74bbadc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce0dac1-8fe2-4b51-87b7-ce9f89bdf00c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85ebc43e-6270-48db-93a4-16bde5ea44ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e95cf87-d1a1-44e6-8ac4-8d6350573131",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37934196-0fcf-4dc1-b4d6-2d42d4fef0d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "33bfa130-b83f-469b-9fe5-2192584620ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e924e5ad-650f-49d2-9492-39bdcd01a38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94865f44-824f-479f-baa1-257d85613660"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "905de1a8-3015-409e-b375-ab6848b42e42",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ea26b56-8e55-491a-a823-ee09f85cf8ab"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "55c61f1b-3515-4882-844c-9da1ea29f503",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a54b681-fe0c-40ed-b731-ad8418a83ec1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c16047c1-6f34-4306-8b7e-17020e50b8d4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1cb45b55-41ba-4cad-9099-49395ad63d83"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae54c54f-ad7d-4a04-bdc9-037681200940",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "41b31211-21c3-4030-a367-006037b21eec"
            }
          }
        ]
      },
      {
        "id": "b8f7ddce-f2eb-478f-afdc-8ebb40983fb3",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "cf95c812-c0ff-4eb8-89bf-3ce85cb71f9f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "207d1d08-7ffd-467d-9598-b0bb309e0742",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "76924f44-87f3-4983-9007-554c67b0990b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1cff73e-4956-4c3f-9c60-b55ec0cd9689",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "547f9f58-3915-40f4-b6f6-c10b44d1814b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2821bfe5-fdd6-4b84-bb30-579981fb888e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b708f7c-475b-4a2d-9490-256dda535dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e907e52f-3993-4e24-91bb-dd13b58234f6",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88348e48-ba3e-4dc7-9c50-f29c12953d1a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "214236b5-b92c-498c-8e84-d1564a7166ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2051ea-41a7-420d-a37f-c6cccc5b821c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e548d3e8-70fd-4022-a5ee-7ce10fec9ca4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97973c59-3fb5-495a-aa73-3c334e9d6f6b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70cb6437-32f5-4482-8757-a1756f5aa2d2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "47f0b1ee-3776-4191-a4ae-0049b4fdc6e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "58fad288-6f5c-47c5-aa02-6b60263a76c5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be315eed-0c41-4fc1-8ab7-1ca089d4ad20",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "976e8e07-c569-4e5d-9f31-248302d104fa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f1ec2ddc-3483-4039-b2e8-6a73c6d940a4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "927f5b2e-b55e-4acc-b6c4-26c93d9057ec"
            }
          }
        ]
      },
      {
        "id": "d96eb513-1b66-43ba-bc80-7af664f062ad",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "00945030-1111-445b-9f1e-9e43cdcb9060",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9b072e3f-63d2-4b04-aeeb-161874545808",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7e723741-d579-4f30-af74-c6a651188462",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be56df6d-1e80-4865-84e1-ea4ad4c14c93",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "932f9942-c994-4b24-8154-f16e267853d0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 110.70229007633588,
      "responseMin": 14,
      "responseMax": 1030,
      "responseSd": 169.79148391489693,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1674261569791,
      "completed": 1674261609493
    },
    "executions": [
      {
        "id": "e4f0af4b-7ea2-4a40-a51d-233cdd0d6079",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "32ebab55-0f6f-45c3-b65e-f9af639c7d75",
          "httpRequestId": "f909568d-076d-4f17-801b-da0a999de261"
        },
        "item": {
          "id": "e4f0af4b-7ea2-4a40-a51d-233cdd0d6079",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a81df517-412a-4491-a746-4957344e5c47",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 0
        }
      },
      {
        "id": "c518641a-3bba-4730-a7f6-0e11131d0c9c",
        "cursor": {
          "ref": "0dad44ab-6301-49aa-a464-81585c94eeaf",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1a746c67-7c0b-42c6-bc15-2289696d8597"
        },
        "item": {
          "id": "c518641a-3bba-4730-a7f6-0e11131d0c9c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "bed7ed34-e15d-4443-86fb-bf97ec9d86f9",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "0ac899bf-c0b9-4953-8ea2-141388e5730b",
        "cursor": {
          "ref": "8d864ed7-ba81-4e8a-8bc5-a0401634616e",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b3fa280d-9bc6-4b98-a20a-f6e13825d877"
        },
        "item": {
          "id": "0ac899bf-c0b9-4953-8ea2-141388e5730b",
          "name": "did_json"
        },
        "response": {
          "id": "f9a946a5-935e-45dc-9367-57fe444dac98",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bbfbe76-87cb-4333-b484-d07e503942a2",
        "cursor": {
          "ref": "b46283df-13ea-49b8-a53f-b0153d1d3858",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c3d93329-88b4-4cdb-a6b4-49380f3ff6d4"
        },
        "item": {
          "id": "0bbfbe76-87cb-4333-b484-d07e503942a2",
          "name": "did:invalid"
        },
        "response": {
          "id": "9e8343ca-df42-4b28-a0e2-721f18e858fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bbfbe76-87cb-4333-b484-d07e503942a2",
        "cursor": {
          "ref": "b46283df-13ea-49b8-a53f-b0153d1d3858",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c3d93329-88b4-4cdb-a6b4-49380f3ff6d4"
        },
        "item": {
          "id": "0bbfbe76-87cb-4333-b484-d07e503942a2",
          "name": "did:invalid"
        },
        "response": {
          "id": "9e8343ca-df42-4b28-a0e2-721f18e858fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4768243e-092c-4779-b180-d4f7e6a2732d",
        "cursor": {
          "ref": "4ed2eaa8-05e0-4f5c-8032-9a9a536f6a67",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b9966aa2-c73d-467a-a011-6a4a066defee"
        },
        "item": {
          "id": "4768243e-092c-4779-b180-d4f7e6a2732d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2b5f283b-d74d-463a-9813-339e3c19eab3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 76,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd5c9a3c-9650-4de0-bf89-6a94c626fb01",
        "cursor": {
          "ref": "bf76cafe-5d88-4893-9fcd-cd9e13795955",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7c270260-da02-4c45-a6dd-02cba9c0a57c"
        },
        "item": {
          "id": "bd5c9a3c-9650-4de0-bf89-6a94c626fb01",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d2165bd1-5df0-46d4-b9ad-c5f7f94ac667",
          "status": "Not Found",
          "code": 404,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c99110b2-ba21-4b44-836c-b7a44e4b4b49",
        "cursor": {
          "ref": "b6bc23f2-8e01-4451-b4ec-f860b942cad9",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "efd0ddb1-0f69-4ee6-9b17-58c6cdd3e183"
        },
        "item": {
          "id": "c99110b2-ba21-4b44-836c-b7a44e4b4b49",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ad817896-a55b-4d23-99eb-a51641a93777",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da3e1e5a-abfd-4b42-8ca6-75cf69552657",
        "cursor": {
          "ref": "471b1b66-619d-4c11-adf8-8fd9c0b08ae8",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8b6b7518-eea2-4d1e-83ed-fcc315fe8d17"
        },
        "item": {
          "id": "da3e1e5a-abfd-4b42-8ca6-75cf69552657",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "8fdd7975-b4e9-4ea6-b182-258a9807e5ea",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da3e1e5a-abfd-4b42-8ca6-75cf69552657",
        "cursor": {
          "ref": "471b1b66-619d-4c11-adf8-8fd9c0b08ae8",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8b6b7518-eea2-4d1e-83ed-fcc315fe8d17"
        },
        "item": {
          "id": "da3e1e5a-abfd-4b42-8ca6-75cf69552657",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "8fdd7975-b4e9-4ea6-b182-258a9807e5ea",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c22b658-34cb-473c-b269-9282f9947dee",
        "cursor": {
          "ref": "7505d3f8-eec4-4523-a7d1-802b68105aa8",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "73796f92-244a-4092-8594-971a0d667416"
        },
        "item": {
          "id": "1c22b658-34cb-473c-b269-9282f9947dee",
          "name": "identifiers"
        },
        "response": {
          "id": "b186f47a-36c2-48e7-a51e-0b0343294259",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac1a6597-8085-4b5b-bb42-989a83d75625",
        "cursor": {
          "ref": "1394b09e-293e-463e-b85b-785908e9b1b9",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8c74692f-94d6-4d2a-89ce-bb4de82bc87e"
        },
        "item": {
          "id": "ac1a6597-8085-4b5b-bb42-989a83d75625",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4a4f042e-d8d8-454c-b4e1-9396f4819739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac1a6597-8085-4b5b-bb42-989a83d75625",
        "cursor": {
          "ref": "1394b09e-293e-463e-b85b-785908e9b1b9",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8c74692f-94d6-4d2a-89ce-bb4de82bc87e"
        },
        "item": {
          "id": "ac1a6597-8085-4b5b-bb42-989a83d75625",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4a4f042e-d8d8-454c-b4e1-9396f4819739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "709eaa4c-95b6-4d15-b882-7024bf9205e8",
        "cursor": {
          "ref": "4da4e636-747a-4e74-9b14-4a806d6096e0",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "cd760ff9-67d2-4294-bfa8-aa31ca506c96"
        },
        "item": {
          "id": "709eaa4c-95b6-4d15-b882-7024bf9205e8",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b3ba94b8-ccd3-4497-ada6-51e2d577c56b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e590736c-038f-4660-926d-b910ba873737",
        "cursor": {
          "ref": "86a37c87-a924-436a-9c4c-5f2b7378a244",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "82f95ca0-ae64-466c-9fa0-55797b22a090"
        },
        "item": {
          "id": "e590736c-038f-4660-926d-b910ba873737",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "8f611cae-1075-4a54-8e18-725fd778c6a1",
          "status": "Created",
          "code": 201,
          "responseTime": 579,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "4ba16362-9e14-431e-956f-55ebe7517363",
        "cursor": {
          "ref": "fa43d6c5-c05f-45c1-8e3b-5b929cd02664",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6d6cfc5b-ee60-4496-b46c-95b8930197f3"
        },
        "item": {
          "id": "4ba16362-9e14-431e-956f-55ebe7517363",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a0eac569-1e39-4c7d-8ef5-9224c2722700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a69144-dff1-4794-96f9-6a49699fd71d",
        "cursor": {
          "ref": "b934516c-3e92-49d1-a2a9-4fd5994cf805",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ef1ca000-8cac-4b90-bce4-8959f38306bb"
        },
        "item": {
          "id": "e6a69144-dff1-4794-96f9-6a49699fd71d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "8ce57c99-27e3-4d4a-842b-38597e11342c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91093b45-aeb0-4c7a-92f0-b468e3200721",
        "cursor": {
          "ref": "d2b41781-a477-4998-be59-041f81b28671",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ccca3f0f-d6f2-4f4b-8857-4b9371416e0f"
        },
        "item": {
          "id": "91093b45-aeb0-4c7a-92f0-b468e3200721",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7b20609a-fc16-4243-a32c-61e5698a356f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a0361c0-980f-4fb4-af80-b397c3abe9c9",
        "cursor": {
          "ref": "c942b934-32aa-431d-b8e5-a6a8283d7691",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f8b3fb2d-c8ae-4e4d-99ee-634e0f59f9fb"
        },
        "item": {
          "id": "5a0361c0-980f-4fb4-af80-b397c3abe9c9",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5f8ea7b0-d062-47c6-ab32-285652616579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5864fdbf-c3b5-4f8a-8a8d-5591a38d174e",
        "cursor": {
          "ref": "ae848a79-d41a-40d6-b6aa-f65a156f22e0",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "51e7fb30-1719-43a5-8727-c904238e602b"
        },
        "item": {
          "id": "5864fdbf-c3b5-4f8a-8a8d-5591a38d174e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "cca83f10-409b-49b8-a99e-f01784272d83",
          "status": "Created",
          "code": 201,
          "responseTime": 525,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "0266e6ca-e1a8-42ee-80b5-6e5f42eeffed",
        "cursor": {
          "ref": "de77d6a7-b299-49fe-b61c-443d2b9d000a",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fdd46f86-aeed-4da8-9bbf-8ed435082d0b"
        },
        "item": {
          "id": "0266e6ca-e1a8-42ee-80b5-6e5f42eeffed",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "62a3c56b-b6bd-4547-bcd3-e35ed711e1d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96bcab25-3061-4d56-b604-ea3795621839",
        "cursor": {
          "ref": "a20d246f-f519-4407-9d6d-283324e6877b",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "45da2c00-6f6a-438c-8a8f-f9492cef68d2"
        },
        "item": {
          "id": "96bcab25-3061-4d56-b604-ea3795621839",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "8af8fb65-deb9-4c55-ab5a-338a9e7fb283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36856dd-95f1-4628-b0a3-049dcee37643",
        "cursor": {
          "ref": "d6e5bc91-8f0f-47b4-ae27-bf055c2a3eae",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e757ddd9-13ae-4027-8952-1c2204077695"
        },
        "item": {
          "id": "a36856dd-95f1-4628-b0a3-049dcee37643",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7ae03182-406f-4ddd-a38c-91cea8b429b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d777aa4-135c-499d-ba27-6f51263ad073",
        "cursor": {
          "ref": "210e4b03-2331-4601-93b9-fb2969c86196",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ffcdf7ba-3bc3-4d95-8b6f-eb625d5b12fd"
        },
        "item": {
          "id": "9d777aa4-135c-499d-ba27-6f51263ad073",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "40644433-8af6-4921-8721-074e33689894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "491868c5-f87d-4c6c-96d0-f76a4c07a143",
        "cursor": {
          "ref": "2879bf12-b536-4055-8033-44de74f851bd",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c311a418-6cb3-4c30-9407-6b65df08cb8d"
        },
        "item": {
          "id": "491868c5-f87d-4c6c-96d0-f76a4c07a143",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "bd20cf44-e9c8-471c-b5e9-fb8bc3747907",
          "status": "Created",
          "code": 201,
          "responseTime": 536,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "78b1ff34-d5ca-4c87-a17d-555bfd075345",
        "cursor": {
          "ref": "dddb8b0d-1c92-423a-838f-2974a3316d9d",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3f173d6b-36d7-4b21-b10a-ecd696886287"
        },
        "item": {
          "id": "78b1ff34-d5ca-4c87-a17d-555bfd075345",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "959c2f50-5cbd-4a82-ba20-fc329617b46c",
          "status": "Created",
          "code": 201,
          "responseTime": 1030,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "c3551e8f-912d-42c1-a203-ebf8dfd8f75f",
        "cursor": {
          "ref": "f16e4b44-3100-49e2-80f0-efb97b3d0978",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b1a2b9f1-2878-49af-80e6-949b7fd32282"
        },
        "item": {
          "id": "c3551e8f-912d-42c1-a203-ebf8dfd8f75f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "877aca2d-6f4f-48c6-9aea-c70d21b1fe6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82acfb0e-7f71-4e32-a59c-4576559d09c6",
        "cursor": {
          "ref": "0d4fcbb1-e8e2-405c-a93e-b49661881ab2",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "cc21c7cb-d832-4993-9f3f-0418e81dbf92"
        },
        "item": {
          "id": "82acfb0e-7f71-4e32-a59c-4576559d09c6",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "7588a356-7640-40ca-a63b-494ede9b9be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff7c4e2a-688e-4f17-8ea8-047743409392",
        "cursor": {
          "ref": "a36a1cd0-529a-4ee6-9ef9-0baca248038b",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "681c718e-d02b-4afa-b7a8-f0cda7fb5559"
        },
        "item": {
          "id": "ff7c4e2a-688e-4f17-8ea8-047743409392",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "15f77f38-5934-49c9-9e20-a563bf31ed9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c16af8-b140-4c1c-8a2b-e9728eb88891",
        "cursor": {
          "ref": "c88ff99e-254e-4da0-a8c4-83ff2579fe19",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "493a2aa7-89c7-4ff0-96d2-e21d258bee27"
        },
        "item": {
          "id": "98c16af8-b140-4c1c-8a2b-e9728eb88891",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "0003043e-2975-4294-9c24-888b10d4b040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f98dae-b856-42fb-a7cf-ed5617ab591a",
        "cursor": {
          "ref": "d90bed9c-1b01-4660-9925-12c32a7fec77",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "bd7d38c0-6675-40a1-9fe6-ec74d72543c8"
        },
        "item": {
          "id": "91f98dae-b856-42fb-a7cf-ed5617ab591a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f52fa2d4-5259-4325-bc28-78e7c8656022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb47e205-d574-4baa-9b76-350a135e86b3",
        "cursor": {
          "ref": "3dc4591d-5368-4aa9-a24d-4010b8dae4af",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "65408871-ea69-4631-a2e4-d6864a704ed4"
        },
        "item": {
          "id": "fb47e205-d574-4baa-9b76-350a135e86b3",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "cffecc25-8407-40ec-9ceb-3c1c8a8d3325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc8ba631-294f-4756-9f27-ebd9bceab057",
        "cursor": {
          "ref": "256f9e7e-4ea2-4eda-a067-c13e607d5626",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f0a312b2-0cf5-4390-8800-f1c1de00f995"
        },
        "item": {
          "id": "fc8ba631-294f-4756-9f27-ebd9bceab057",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0a9a62bd-e42c-4e1e-b145-759530faf151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf94b3d-3e6b-4ed9-a765-08670ededa7d",
        "cursor": {
          "ref": "7afac6cf-c467-487c-84b5-ab8450adc6a1",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "36a03045-23cd-410f-b65a-232109b9cdb4"
        },
        "item": {
          "id": "abf94b3d-3e6b-4ed9-a765-08670ededa7d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "fcc6a2fa-b66f-4bf4-9eed-e1814a63b4ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2f32185-3d40-4224-8cc7-3d8a70bd7e0b",
        "cursor": {
          "ref": "b189546e-9053-41bc-9091-06e5e1010df8",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e0d20cdc-d75a-4bbb-a5a9-3ad083e120e4"
        },
        "item": {
          "id": "f2f32185-3d40-4224-8cc7-3d8a70bd7e0b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c7851802-c60c-4ac8-b90b-6e90ea919821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db438f2a-7fe8-411a-a8a0-f08f0049caee",
        "cursor": {
          "ref": "f96f9e97-1f57-4032-952e-f54d2399305b",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "deda3084-ec2d-4818-83ef-1c2107f5a472"
        },
        "item": {
          "id": "db438f2a-7fe8-411a-a8a0-f08f0049caee",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "9cb3f39d-8991-46a9-937c-223ca7735a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d501f1-2f8e-46dd-8cae-27f1a875b936",
        "cursor": {
          "ref": "9edf0495-62a8-463f-bc2a-ce790929a120",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5732976f-5351-4873-836e-c3f50e1b0db5"
        },
        "item": {
          "id": "e7d501f1-2f8e-46dd-8cae-27f1a875b936",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b052cdfe-69a2-414b-bc70-4281c4884beb",
          "status": "Created",
          "code": 201,
          "responseTime": 714,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "2bf3af3e-2a5f-442f-8ff4-52a20428592c",
        "cursor": {
          "ref": "35c6c87e-5df9-4de7-8963-3fd5709da5e8",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2f2016de-fa15-495c-ba82-63d048aaa428"
        },
        "item": {
          "id": "2bf3af3e-2a5f-442f-8ff4-52a20428592c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b32368a0-699c-49af-9422-1a574f8b38b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d58f18e-c2df-4bf7-8cb0-fbb1845a796c",
        "cursor": {
          "ref": "88e0d77e-2a5e-43c1-bf99-68363691030d",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "906a189d-b8ae-4c04-b52e-47e9b2072e2e"
        },
        "item": {
          "id": "4d58f18e-c2df-4bf7-8cb0-fbb1845a796c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "bcfd1feb-949e-4d93-9fb5-8246092cad7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2634ab66-21b8-46a8-9d28-fe7baf1f4428",
        "cursor": {
          "ref": "750ed107-eb2e-4186-b0ef-41bb5fbb2021",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e434751d-a67c-4acb-af5d-6b7f9219a2df"
        },
        "item": {
          "id": "2634ab66-21b8-46a8-9d28-fe7baf1f4428",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7a88f70b-b815-46fd-84c3-827551832692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32dc0a6b-c29a-4737-a17f-5e1b9488796a",
        "cursor": {
          "ref": "1c39aad3-727a-4d99-b61a-f2b3ec0379f9",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e1da97e6-f124-4086-8520-da1c65151026"
        },
        "item": {
          "id": "32dc0a6b-c29a-4737-a17f-5e1b9488796a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "2a2f5b9c-313a-4b6a-a56a-c6098caa3329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83c4cadf-a841-4862-9541-80cdc5074464",
        "cursor": {
          "ref": "3323da5a-b239-41a4-a77e-aefc0d6c894a",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "66248baf-e653-4771-a030-f7b688cda912"
        },
        "item": {
          "id": "83c4cadf-a841-4862-9541-80cdc5074464",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "859edee9-f55a-46ca-9164-01db0aa8e96b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e1c6101-6408-4c1b-bab1-6e4de40302e8",
        "cursor": {
          "ref": "46e01db7-9f77-4e67-890d-29a7d6c8dea8",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8c1bc77d-7f56-49ac-b60d-9fc6adbad148"
        },
        "item": {
          "id": "7e1c6101-6408-4c1b-bab1-6e4de40302e8",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4c413cf6-3e48-4831-9b28-bae11c6e11ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "157624ac-ae93-4da9-98e5-638a27ff3261",
        "cursor": {
          "ref": "722e3882-64bd-4e2e-96d4-5b9ed6ff61b6",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "19996644-5258-402d-9a98-8e1b968d0b1d"
        },
        "item": {
          "id": "157624ac-ae93-4da9-98e5-638a27ff3261",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b111f00f-ef96-434f-8587-bfe2035398a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "945f6e4d-279b-4a7b-874b-5f48f853924a",
        "cursor": {
          "ref": "19049061-8257-4791-a559-ed3906c13682",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a5c7b418-2530-477b-bcc0-97ea9aff9dcb"
        },
        "item": {
          "id": "945f6e4d-279b-4a7b-874b-5f48f853924a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d1829d68-8ab0-4cc7-ab29-a6378cafe5a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b9c2a52-94fd-4d99-a3bf-2b3afdfca9c3",
        "cursor": {
          "ref": "12a6cc50-72ab-44d5-b803-524f9f8f7859",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f07237fe-a592-48be-9c04-5a7e809f7064"
        },
        "item": {
          "id": "3b9c2a52-94fd-4d99-a3bf-2b3afdfca9c3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "dee693a5-518e-473c-90f0-db157acbceee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65d2446-8bd3-40c9-b56c-17a0bfa328fb",
        "cursor": {
          "ref": "7ca1142a-35ca-4909-89b2-6fa9eedab5ad",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4f015974-f2c2-4753-8ccc-2f2bc8e6a86c"
        },
        "item": {
          "id": "d65d2446-8bd3-40c9-b56c-17a0bfa328fb",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1e5ccbfb-2bb5-4598-b5e4-021c8e3fcc4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d988f9d-203e-42fd-a867-573806de4b9e",
        "cursor": {
          "ref": "5454d5ff-cf8a-432e-bcf6-99bf3d2cd6b9",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "cb22c958-e24e-4454-a180-1c21f4b1a4f6"
        },
        "item": {
          "id": "6d988f9d-203e-42fd-a867-573806de4b9e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "af810ba7-dc97-484b-8692-a57917219d67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d2bff2-491b-4a17-9641-7294d9f5c173",
        "cursor": {
          "ref": "bdd12560-599e-463e-9063-a8a5c3f93b38",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "75879868-8320-4211-a848-dd0ccd468721"
        },
        "item": {
          "id": "93d2bff2-491b-4a17-9641-7294d9f5c173",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9255dbdc-318c-4fb7-800f-41b0472fe014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ac342a-3d90-4432-9aa3-1f924ad2aa37",
        "cursor": {
          "ref": "7926deed-fc12-498e-85e9-bd39b1bdd78e",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "df6feed1-46ba-44f0-a223-17f6c1042786"
        },
        "item": {
          "id": "c4ac342a-3d90-4432-9aa3-1f924ad2aa37",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "595a46e1-b523-4b3c-96d4-8788790639fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 354,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "e47c56a4-51f5-4a68-8e42-95fee3593319",
        "cursor": {
          "ref": "38190001-7a24-4335-80be-f211680d8def",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6b0c5d2c-ac63-4c74-a35d-8abdd1c82962"
        },
        "item": {
          "id": "e47c56a4-51f5-4a68-8e42-95fee3593319",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7e7bc723-16fe-4975-95ba-9bd97b9fc64e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d903a516-3a87-4756-8c65-ea7fd7e5cfcf",
        "cursor": {
          "ref": "f5a7cd46-5dcd-4a37-afc5-d90320b7268c",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "16e3a560-4f2e-49a9-9862-3c8c0ca04b8d"
        },
        "item": {
          "id": "d903a516-3a87-4756-8c65-ea7fd7e5cfcf",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0fe720d7-9b66-47df-8b58-df625411893a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "944cb489-5fa4-468b-ba1e-9511cf0c00e7",
        "cursor": {
          "ref": "c095e1e7-436d-4acb-9413-67b309db5a89",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b93c63ac-80d6-45df-9213-16063a161606"
        },
        "item": {
          "id": "944cb489-5fa4-468b-ba1e-9511cf0c00e7",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "5e996f58-3b91-4acc-b55e-ab53d787ca88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f4257b-d819-48f6-97fe-aa2290e75d0f",
        "cursor": {
          "ref": "988608cd-bb61-43ab-8205-3e5b6ee3bee9",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8755641e-c20c-4412-81ad-6938f0af1be9"
        },
        "item": {
          "id": "d7f4257b-d819-48f6-97fe-aa2290e75d0f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1f9a6cb5-72bd-4d1e-ba6e-6a7a26841083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdbdf6ca-f7dc-4938-9686-f09ad7820fdd",
        "cursor": {
          "ref": "57e50901-1ecd-4235-a0b2-b38981aab554",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "78159849-977e-4d57-9278-8eeccf7aca9b"
        },
        "item": {
          "id": "bdbdf6ca-f7dc-4938-9686-f09ad7820fdd",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "be4c0cb8-930c-46d8-b878-2558da78cdca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e5c4e4-c5bb-4b8f-b3ae-b75a98bc2876",
        "cursor": {
          "ref": "f3e48459-16a5-4e90-8f39-a04ca2b884b6",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e916ebbf-defc-43db-be5f-fb429c2ad639"
        },
        "item": {
          "id": "c1e5c4e4-c5bb-4b8f-b3ae-b75a98bc2876",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "0a067881-07d2-4eb3-93ba-7f102b687974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1318d8-8572-480f-882a-36b77d43d2fe",
        "cursor": {
          "ref": "1eed51a5-962c-4b94-84ac-f1d178e727aa",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "fa45e761-8cbe-4502-8841-d5c4f92d0c2c"
        },
        "item": {
          "id": "8d1318d8-8572-480f-882a-36b77d43d2fe",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "fa23665a-b069-4aea-982e-4eb24e244600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 340,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "9c394419-4daa-48c0-a81f-572fb5984eb9",
        "cursor": {
          "ref": "0fa95f55-3b7a-4fdf-8fca-532827629142",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "fb3666b0-f365-48bb-8bc8-d44cf25238ec"
        },
        "item": {
          "id": "9c394419-4daa-48c0-a81f-572fb5984eb9",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6876d74a-428c-4d22-9b93-1a2f568628d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04caede8-cb05-420e-94b8-0517e903b9ef",
        "cursor": {
          "ref": "e1d51160-dac8-43af-a2a1-93a52f837f7a",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5c64c5ba-ad2a-4242-a7a0-72acefafca8c"
        },
        "item": {
          "id": "04caede8-cb05-420e-94b8-0517e903b9ef",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "77a56576-4e69-4d97-8212-a88fc86e4252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7570c8d-c08e-4abf-976c-ca1e66d9f7a3",
        "cursor": {
          "ref": "0915eff6-a655-4395-a15e-a1a5f2e41307",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "95f24bcb-1a39-48b0-84c9-9e82e2c70d0d"
        },
        "item": {
          "id": "f7570c8d-c08e-4abf-976c-ca1e66d9f7a3",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "516ba3f9-3b25-4433-afdd-246ebe0d04c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "004e1099-d4c7-4510-8862-9cc94cce4925",
        "cursor": {
          "ref": "4f1f14b4-6130-4337-990e-3ac17bf7c903",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0e01803c-1678-470e-952d-00f6c8249b85"
        },
        "item": {
          "id": "004e1099-d4c7-4510-8862-9cc94cce4925",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4006587f-d93e-4788-add1-2e113addf3cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffe29c2f-de77-4f11-a870-0e35d579e0fd",
        "cursor": {
          "ref": "b3324a81-45b2-46c4-82b4-af89491d4937",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "33ebefd6-6479-4aa5-ba6a-49ba755e352c"
        },
        "item": {
          "id": "ffe29c2f-de77-4f11-a870-0e35d579e0fd",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "0d003e1f-5637-43b3-b334-c4c9cf820250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d677bf42-38c3-45e1-9311-4da35dd748be",
        "cursor": {
          "ref": "c354ae6e-e12d-482a-ab1c-eef79e19f044",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "1a4f3e14-307c-427d-8c9a-d6788586ec44"
        },
        "item": {
          "id": "d677bf42-38c3-45e1-9311-4da35dd748be",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b55dfa2e-3ebb-4b43-b23a-3241dd850704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcec0f65-b0cf-4499-b1f7-4b5acae7e922",
        "cursor": {
          "ref": "9a47a9b2-d446-4434-87de-d12313ac22ec",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3979ad43-3cb9-46ca-86fb-4d7877ce2a28"
        },
        "item": {
          "id": "bcec0f65-b0cf-4499-b1f7-4b5acae7e922",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "532989e4-ec1b-4242-b1c8-8b29d71259b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddd5fa68-f148-459e-9dc9-506773e216f8",
        "cursor": {
          "ref": "3325dcc0-6c7d-4e1a-9184-eb71395663c6",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0c8eb593-e370-49d1-badb-446971092dd3"
        },
        "item": {
          "id": "ddd5fa68-f148-459e-9dc9-506773e216f8",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "49f764b9-2e2f-4881-b5ef-9232022510a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0820e45b-b4e4-42a6-8965-fe68e34d9fe6",
        "cursor": {
          "ref": "8c287af5-4241-4083-b0d7-13be1c9cb3cc",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0e6c57fb-2aac-4043-8c31-e737279d3db8"
        },
        "item": {
          "id": "0820e45b-b4e4-42a6-8965-fe68e34d9fe6",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a2c2a1f6-c68d-4dde-8c41-6c717a1ff108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16872ecf-087a-4070-829f-826cf9bbba6f",
        "cursor": {
          "ref": "c0f14c24-0f40-40da-8502-829f1c7fac42",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "7e7ddd04-0593-4529-8e0f-add8af11d502"
        },
        "item": {
          "id": "16872ecf-087a-4070-829f-826cf9bbba6f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ae524ddf-1074-45ea-8307-90624214d571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0171ca0-6b91-45b6-9dcd-0b5660f55a19",
        "cursor": {
          "ref": "b3dd1dd2-6969-454a-8e01-7d558fe910c8",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "bc5e8fc7-d678-4b77-bffa-29652e287891"
        },
        "item": {
          "id": "b0171ca0-6b91-45b6-9dcd-0b5660f55a19",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f0d5912e-18b8-4665-aed6-37b6f9ecb816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db6a2fe-f8a8-43ca-86ee-5876a1826b21",
        "cursor": {
          "ref": "bf7989d4-de31-4989-8eb0-ed9235e14956",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e9e1091a-4c88-495e-9861-358707e95abb"
        },
        "item": {
          "id": "5db6a2fe-f8a8-43ca-86ee-5876a1826b21",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f47df3dc-3676-4bd4-b516-49ca8d686107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb6dae8-a356-4495-a5c6-aa3302975534",
        "cursor": {
          "ref": "f9a676f5-6bd4-4d15-862f-16c1d21771c5",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f782904c-be62-4e13-a230-9e1661b60c5d"
        },
        "item": {
          "id": "deb6dae8-a356-4495-a5c6-aa3302975534",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "dc01c531-d29b-4818-9848-79c387fe7502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efcaee73-3463-4f3f-b10e-c31033884db3",
        "cursor": {
          "ref": "a4f3b147-195a-4c6c-a3d7-a2b7cc1d7b50",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ac7a7330-b93f-4aa4-8f7f-60a23c7ee485"
        },
        "item": {
          "id": "efcaee73-3463-4f3f-b10e-c31033884db3",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "bb40c49b-2e1b-44b6-bf88-8d66a6ebe87c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6896cfb6-b36c-4bea-8ec6-87a11072e51c",
        "cursor": {
          "ref": "a2c2849f-c298-484c-9ff5-e3b11fc507c2",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "94963893-a597-48ee-bebf-743ee1b3e3a6"
        },
        "item": {
          "id": "6896cfb6-b36c-4bea-8ec6-87a11072e51c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9ca8482a-be8d-4f97-8379-abd2f2c400e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8077610d-469e-4fa9-ae4b-66d69a50708f",
        "cursor": {
          "ref": "f79e55df-1432-481b-923b-01d60f17c93e",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "324778cd-640f-44a6-96a7-da09798e07a3"
        },
        "item": {
          "id": "8077610d-469e-4fa9-ae4b-66d69a50708f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "7f859022-4fd1-489a-9727-16fe02e60ad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f986297b-f2ce-4351-a01c-8af0f8b65843",
        "cursor": {
          "ref": "27a40455-2be0-490c-8aa2-32e7effbf95e",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "288e83d5-0f55-4f6e-9264-62e0ec9b321e"
        },
        "item": {
          "id": "f986297b-f2ce-4351-a01c-8af0f8b65843",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f0a14f73-cc84-4cb9-9697-cff3a1d57d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52cb9a8-48bc-4869-a09d-a24f65d29b99",
        "cursor": {
          "ref": "cae7454e-7d9f-48b1-93dd-60a0916b5ec4",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "99fcffa6-c38b-4215-94bf-96beb55e409e"
        },
        "item": {
          "id": "f52cb9a8-48bc-4869-a09d-a24f65d29b99",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "01bc2bce-534e-47fe-9e18-14695e647aad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be4caa1-1414-4a90-b071-268b701e1947",
        "cursor": {
          "ref": "c1759f31-eada-47b0-9413-9b85d2046663",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5ceae756-2aaa-45ba-9777-9a3ebf9613bf"
        },
        "item": {
          "id": "6be4caa1-1414-4a90-b071-268b701e1947",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8ae65681-5ee8-4434-b75e-004bc44becfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f655a00a-d66f-433a-923e-699eb4154814",
        "cursor": {
          "ref": "a8cc30b5-2e49-4fd5-ba8b-c2c6b2c27d63",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "dd5e0b7d-c283-4988-866f-e364cc82ea47"
        },
        "item": {
          "id": "f655a00a-d66f-433a-923e-699eb4154814",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "108e1a57-f512-439c-aba1-b4cbbd5871fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4cc442e-b812-4e58-8ed1-87efb7e63695",
        "cursor": {
          "ref": "b985b442-3bad-4610-80ca-44939aa1e51c",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "56819f0c-96c9-4c3f-a41a-b6127b3d9454"
        },
        "item": {
          "id": "e4cc442e-b812-4e58-8ed1-87efb7e63695",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "85fdf06c-aa3d-4d55-816e-98b45cbbadec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16bd40c8-3ac7-411b-bc0e-b695a1798aac",
        "cursor": {
          "ref": "814049d8-5c7e-4f57-9cae-73cd9701c7a6",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "4265a34d-a7c9-4b32-8465-482175e0eab0"
        },
        "item": {
          "id": "16bd40c8-3ac7-411b-bc0e-b695a1798aac",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "515ca6ba-1187-4fb5-9b93-96197b0b725d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d53aa8e8-70a7-4092-851b-f133850b42d1",
        "cursor": {
          "ref": "1a174879-c992-4473-8da2-e6c84adc5492",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "423fd6eb-cc95-44e4-814d-c968332e4c88"
        },
        "item": {
          "id": "d53aa8e8-70a7-4092-851b-f133850b42d1",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4a2c084c-bf8e-4008-9c17-1b1842ec9881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eea3d71-db92-4526-bc28-e4bb362ba577",
        "cursor": {
          "ref": "b7b0043b-f069-47e9-9585-a3fa07118f55",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4386057c-2a8e-4d77-8520-e91047fc2fe9"
        },
        "item": {
          "id": "8eea3d71-db92-4526-bc28-e4bb362ba577",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "11b809d7-d2c1-43bf-bc6e-dae7503ddd56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f8849b-a9f3-4afb-a409-2a34dfd6019d",
        "cursor": {
          "ref": "9a83f641-0f8a-4b5b-aeff-3c9debce8374",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f31b0e7d-448b-4795-8c70-d70eeb4ba173"
        },
        "item": {
          "id": "c2f8849b-a9f3-4afb-a409-2a34dfd6019d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "00aa9069-8d4a-4be0-b4a1-62ab9124772a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "844dd91a-8cca-45d3-a26b-f727cea9a87a",
        "cursor": {
          "ref": "812aa337-a243-4322-9eae-f47309075d80",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4bb6ee39-aab9-46cb-878a-079505e7c668"
        },
        "item": {
          "id": "844dd91a-8cca-45d3-a26b-f727cea9a87a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "fdbd5c9f-9a1c-40ef-92d2-5ef5d0199b92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3973118a-0c95-42cd-8d18-34cc9efb09c3",
        "cursor": {
          "ref": "56d1d93c-c9ee-4699-8cb6-ac537aacbea2",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "720012ac-0930-479a-8e08-2ce560dc4071"
        },
        "item": {
          "id": "3973118a-0c95-42cd-8d18-34cc9efb09c3",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "414b6318-df43-4d41-b60a-0abea8382a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f765f1-4a3f-4d4d-b99a-00cb3cec3088",
        "cursor": {
          "ref": "dd7fa6ac-fab1-4942-9982-8a1c07fcce36",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0adbb152-34aa-41c6-830d-c8ee96a8e2da"
        },
        "item": {
          "id": "83f765f1-4a3f-4d4d-b99a-00cb3cec3088",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0ba9dc50-e085-4299-a6c8-e031541b6ee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24afe9e0-6eeb-43d4-a0f7-376ed713d33d",
        "cursor": {
          "ref": "4b968c1b-6269-4b76-bec0-9580abe23a18",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "747a99e2-2768-4f25-aad8-95332fda19b1"
        },
        "item": {
          "id": "24afe9e0-6eeb-43d4-a0f7-376ed713d33d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9dae59fe-6928-4893-8c94-d62f4bf53528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f9c1d4-600f-4218-9a33-1d4467d0fa28",
        "cursor": {
          "ref": "252a056e-5691-46ed-9141-60708034c1a8",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1f2b1da4-b34c-459c-8978-093e99ea190b"
        },
        "item": {
          "id": "d1f9c1d4-600f-4218-9a33-1d4467d0fa28",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "db8c3d70-0e43-4f6a-84e1-6eb5205d2bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "546526bd-1f13-492d-b0f6-3a2302a87bc2",
        "cursor": {
          "ref": "61d60a4a-9c94-4453-8ec1-a8b95c0e7e72",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a3342714-8d1f-407a-b59f-636a3c4ffcd1"
        },
        "item": {
          "id": "546526bd-1f13-492d-b0f6-3a2302a87bc2",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1afef1e1-d891-47f7-9558-23cf7556f48c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 346,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba7203ae-5292-4bf0-bb30-4e4fef010c9a",
        "cursor": {
          "ref": "6e469590-d7b6-43b6-b98b-8f0dc90d76d6",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7744d7ca-e65e-4f90-95c5-258d9c4861eb"
        },
        "item": {
          "id": "ba7203ae-5292-4bf0-bb30-4e4fef010c9a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d8e483a2-3ea9-4dc2-996e-278c8093a842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "694d2c21-dcea-49d2-b1be-0096fe106cec",
        "cursor": {
          "ref": "74f0e263-b693-4e8f-ac8b-3273f66d5d3a",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7cf40771-a8c6-46e1-b696-4a9a7f850250"
        },
        "item": {
          "id": "694d2c21-dcea-49d2-b1be-0096fe106cec",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "abf202a5-39e5-4e95-a085-7381dddff31d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c4e1f57-970b-4374-88ed-fbd742c730ee",
        "cursor": {
          "ref": "deda504c-ea35-41e1-bcdc-0ed4dbf09a7c",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a9a36fd5-8a9f-466b-9a30-443eb671c6dc"
        },
        "item": {
          "id": "3c4e1f57-970b-4374-88ed-fbd742c730ee",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a2927ec7-7795-4144-9e2e-1db1d9aa58bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e80c377-f3f9-4322-ace9-2a2f154c74d8",
        "cursor": {
          "ref": "7ea86d23-dec1-4522-806d-34a0182ccc0f",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "94282960-64bd-427c-8f6d-57e846a9b2f9"
        },
        "item": {
          "id": "2e80c377-f3f9-4322-ace9-2a2f154c74d8",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "fb84a564-6d9b-448a-97cb-242b929c906e",
          "status": "Created",
          "code": 201,
          "responseTime": 664,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "c52dde1f-7c64-4d3e-872c-d87564f3c6f5",
        "cursor": {
          "ref": "b0c6d396-05fa-4ddf-9451-062b22f9aac2",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "1f3361f3-38c0-4a00-9b0b-545bf031ee38"
        },
        "item": {
          "id": "c52dde1f-7c64-4d3e-872c-d87564f3c6f5",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "71ed18e9-865b-418c-89ac-d4b65e8c09c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bd66510-7499-45ae-ae36-e509f306d44d",
        "cursor": {
          "ref": "996a12c0-862c-4e84-8906-bb297dc1999e",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d6647bf9-3068-489a-85a9-04f69d958a9a"
        },
        "item": {
          "id": "8bd66510-7499-45ae-ae36-e509f306d44d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "dc245513-dfc5-4bfa-be7d-42b640c4ab86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab66e9a5-680f-42c2-8618-001e953dab02",
        "cursor": {
          "ref": "15b179d8-5df0-4837-a662-22ad9e7f1a8f",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "d438fb94-c276-4e18-b5d7-5eca7ad957fa"
        },
        "item": {
          "id": "ab66e9a5-680f-42c2-8618-001e953dab02",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "fffdd542-2857-4da9-82d8-d6abb98bb91e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51108a76-64d0-4c2a-91af-49f588922453",
        "cursor": {
          "ref": "3fede52a-553d-4bcb-9830-e00f4c81de04",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c6c5d6d1-2584-46f9-8bbc-4a824740a311"
        },
        "item": {
          "id": "51108a76-64d0-4c2a-91af-49f588922453",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f518c1a1-0354-4fd3-8a8c-26b044da2aed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de6e507-67e9-4c62-b292-9544e8cca4fe",
        "cursor": {
          "ref": "5832e32c-68cb-43df-b611-84cea609613d",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "cc8ebb9f-b3bc-42c5-bbbd-e85835a67963"
        },
        "item": {
          "id": "2de6e507-67e9-4c62-b292-9544e8cca4fe",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2c5081ab-097d-46af-8cff-4a3a7b127c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "224b1620-8e24-435f-bb77-6f1d2d5ef27d",
        "cursor": {
          "ref": "69fe1ebc-c88b-4558-a262-edb7db88a6a8",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "41916e23-5da4-43ef-b2ef-dccff0877863"
        },
        "item": {
          "id": "224b1620-8e24-435f-bb77-6f1d2d5ef27d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0ed37ee9-f777-4f1b-8354-2c599169bc2f",
          "status": "Created",
          "code": 201,
          "responseTime": 689,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "f8d052cc-21da-4903-9c9a-d1b0556cf5d8",
        "cursor": {
          "ref": "1e788d63-2752-4bd2-99b6-a461a532a2c4",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f903c3c9-876d-4763-9fd6-d0fffb8d933a"
        },
        "item": {
          "id": "f8d052cc-21da-4903-9c9a-d1b0556cf5d8",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "326c3bef-c9b6-471b-ab4b-ce34fb613a37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77fbf6a7-bc6c-4329-b8f2-462295a64be2",
        "cursor": {
          "ref": "c1239d91-a5f0-4a4a-a470-070d9ffbb7e6",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "fcfe73a1-f34c-4b78-9c4c-5d029d6d0d26"
        },
        "item": {
          "id": "77fbf6a7-bc6c-4329-b8f2-462295a64be2",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6a0c815f-2e52-4ea5-b268-6f6cc8d9c38e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e4b81e-de9a-45ab-a70e-e59677c803e5",
        "cursor": {
          "ref": "d4b7f99a-31e2-4841-8541-b0a249552271",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4ab51103-aa64-428f-a775-88fe26495945"
        },
        "item": {
          "id": "23e4b81e-de9a-45ab-a70e-e59677c803e5",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "969dbfe5-ea36-441b-a815-a06c5ca11249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cdf0840-e7a1-4c64-892a-4060ed725ea5",
        "cursor": {
          "ref": "d4a94759-4ef5-425a-ac13-e74ec5cbbeeb",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3984f53f-df15-4763-8975-e74bb82e0f46"
        },
        "item": {
          "id": "1cdf0840-e7a1-4c64-892a-4060ed725ea5",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b5b76fc0-27eb-44ad-b88c-2d8607d7bebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae3ba0a-646f-4e9f-8e9f-133953c092a5",
        "cursor": {
          "ref": "ea2b5e33-47f0-471f-b8d4-be999e5db0fb",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "296ef0e5-190f-43e3-b8ac-e9eff9aab67f"
        },
        "item": {
          "id": "4ae3ba0a-646f-4e9f-8e9f-133953c092a5",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b2cc0f63-06ed-4851-b4e1-e11013f842ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "329e07aa-dcfc-42fd-96c6-65fb876188ad",
        "cursor": {
          "ref": "9ef3fcad-0f2e-4d9a-a0d9-0f1fa1c1caed",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "974721de-eedc-4cd9-988d-a9bd0baccc72"
        },
        "item": {
          "id": "329e07aa-dcfc-42fd-96c6-65fb876188ad",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bf608ce2-ac6c-4c2c-b380-a7773e9457ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf580cb-2ebf-402c-bd7c-66c169b3531b",
        "cursor": {
          "ref": "c6a99f35-e75b-4980-8336-8c9aeb356a7b",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c26f7d40-2645-4255-9d45-c48b1a60f011"
        },
        "item": {
          "id": "ecf580cb-2ebf-402c-bd7c-66c169b3531b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d44144e8-5324-4f9a-99d1-9856bd16edba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "319f7894-5a66-4ab0-a3d2-314c0be58111",
        "cursor": {
          "ref": "18e90312-53de-43de-9e5e-408384a5a958",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "08fbc294-2977-43a7-a6b0-01f34ae35264"
        },
        "item": {
          "id": "319f7894-5a66-4ab0-a3d2-314c0be58111",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f0c0c9b9-63b7-47c6-a298-94b13072aad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c47ca2a-57e6-4985-98c3-2ed0a4c91640",
        "cursor": {
          "ref": "4d6a0004-f339-4e27-b712-35e9fbb09905",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "05d3420d-b7a7-4045-996b-2d5c3b967334"
        },
        "item": {
          "id": "1c47ca2a-57e6-4985-98c3-2ed0a4c91640",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6e96cc6a-b6e5-49a2-83db-7118477dc66f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "542c5370-9934-4957-bb32-84a2ec577f3f",
        "cursor": {
          "ref": "f58dcf1a-2083-434d-9d1d-72951a4a0e8b",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "545addac-1ba3-444d-a55d-aed554d894f4"
        },
        "item": {
          "id": "542c5370-9934-4957-bb32-84a2ec577f3f",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "cbce04bf-662d-46e8-8565-d0aba90991af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "f23b2d60-eee3-46cd-a3f0-7a29c52451c8",
        "cursor": {
          "ref": "43d056f8-68ab-4f86-90ae-e5a4dc31d359",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "0b6cd4e2-72d4-4b16-8448-5a45babdf404"
        },
        "item": {
          "id": "f23b2d60-eee3-46cd-a3f0-7a29c52451c8",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f67b3b29-02ff-43d8-ac2d-af6ae7192676",
          "status": "Created",
          "code": 201,
          "responseTime": 661,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "642ecd87-fdd4-4f59-bf76-b53a6bb00071",
        "cursor": {
          "ref": "96900c3a-f9d7-461c-93d2-266f0e500160",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9291b922-8e62-485b-b405-33b1305bf081"
        },
        "item": {
          "id": "642ecd87-fdd4-4f59-bf76-b53a6bb00071",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "fe80e7f8-b801-45de-abd0-1a714aa7f8d9",
          "status": "Created",
          "code": 201,
          "responseTime": 736,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "084f40eb-ecbe-4d43-ae19-cb04e8b82c38",
        "cursor": {
          "ref": "cdc89602-5e73-45c1-bd36-2e29a01fb801",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8c60b497-2170-4b7c-a02e-fa51531509d6"
        },
        "item": {
          "id": "084f40eb-ecbe-4d43-ae19-cb04e8b82c38",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1e211d45-2a52-43ed-ac4a-555d0b17cc3f",
          "status": "Created",
          "code": 201,
          "responseTime": 677,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da24b75-77fa-49e8-97a6-6af72f5d3cd8",
        "cursor": {
          "ref": "7cb47fd0-31d8-4110-8a7d-26690815e830",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fe75f1cc-2940-476e-a45b-a939f9fce672"
        },
        "item": {
          "id": "9da24b75-77fa-49e8-97a6-6af72f5d3cd8",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c07101df-e022-4d34-a53b-dc1b010ed4af",
          "status": "Created",
          "code": 201,
          "responseTime": 656,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a7f24cf-9130-43c6-b822-8c4e743e8b92",
        "cursor": {
          "ref": "82b5c05c-b100-4476-8bc1-0b1d95a1f4d5",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "01af4d74-57f5-4815-9b76-933cbd3c2c36"
        },
        "item": {
          "id": "2a7f24cf-9130-43c6-b822-8c4e743e8b92",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "bb01c0b1-4827-454a-a620-9c274be566db",
          "status": "Created",
          "code": 201,
          "responseTime": 710,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ea6a89b-c993-406b-ac5a-ba9336eab0a9",
        "cursor": {
          "ref": "dbb4b4da-12eb-4856-ba30-bb85ef05c6b6",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6b5cbf3f-0105-4e4d-bf82-21b4bfdf79b7"
        },
        "item": {
          "id": "5ea6a89b-c993-406b-ac5a-ba9336eab0a9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7bb13ec2-7dd1-4378-82a2-f8ff0854f7bf",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "5ea6a89b-c993-406b-ac5a-ba9336eab0a9",
        "cursor": {
          "ref": "dbb4b4da-12eb-4856-ba30-bb85ef05c6b6",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6b5cbf3f-0105-4e4d-bf82-21b4bfdf79b7"
        },
        "item": {
          "id": "5ea6a89b-c993-406b-ac5a-ba9336eab0a9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7bb13ec2-7dd1-4378-82a2-f8ff0854f7bf",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "4716d22b-581b-4f6f-a061-770f1c2137d7",
        "cursor": {
          "ref": "52e391b7-34d9-453f-a33e-e509a53707ee",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9afbee33-d38c-4479-ba5f-834040b046c7"
        },
        "item": {
          "id": "4716d22b-581b-4f6f-a061-770f1c2137d7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5d88f95e-6881-4192-bab5-6018ece61aaa",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "e6f306dc-ac3c-4e90-b1c2-fe6caa015283",
        "cursor": {
          "ref": "c11b0948-4011-47c3-ac6f-98e2a94e1520",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d83093af-47db-49d9-963e-26e70b215738"
        },
        "item": {
          "id": "e6f306dc-ac3c-4e90-b1c2-fe6caa015283",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "83c5a6ff-e972-43e7-8cb0-22540f137935",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "7afdb3da-5269-4d11-930d-b192b7170ec2",
        "cursor": {
          "ref": "aee3b7ac-55ff-427f-8542-3fe8aac08c53",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c5d3df90-fe07-4b9a-af4f-809ed19af091"
        },
        "item": {
          "id": "7afdb3da-5269-4d11-930d-b192b7170ec2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7ee427db-e6c2-40e0-b40c-5746dd280f3e",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "d7182798-61d3-4c9c-9c51-3a74e51ec930",
        "cursor": {
          "ref": "f1cd210a-9a60-4db8-8eb4-ec76d4c2c136",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "390e94c0-ab89-4311-b33e-32e018e39767"
        },
        "item": {
          "id": "d7182798-61d3-4c9c-9c51-3a74e51ec930",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2f28b3e1-c43f-4c66-b40b-817efb5d06b4",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "1e47323d-30d4-459d-bc8a-2fcaa8987b73",
        "cursor": {
          "ref": "3310a817-a461-4e24-ad1f-f036a2798ce4",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a23939fc-a8e4-44d0-9867-8ff43efd0245"
        },
        "item": {
          "id": "1e47323d-30d4-459d-bc8a-2fcaa8987b73",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2791b2b3-b5ea-4610-adbd-9481dc55474c",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "a970d413-087b-4d8f-818c-377159a255e7",
        "cursor": {
          "ref": "26ede4af-3690-49ef-81f0-fc30f7b259bb",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f801e40a-2424-4882-9eae-fa4a978113b2"
        },
        "item": {
          "id": "a970d413-087b-4d8f-818c-377159a255e7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3df00e82-7d7d-43bb-a56a-7af090a94bef",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "c7e35c19-f075-450c-b57f-e4f0c0591812",
        "cursor": {
          "ref": "4255784c-6528-4f39-8178-dcc05045fdf7",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "af51e481-9946-4b4d-9814-699d862b993d"
        },
        "item": {
          "id": "c7e35c19-f075-450c-b57f-e4f0c0591812",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "cd2115c2-d0c2-41ff-a409-6df95ef4f899",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "f75ec2b9-ae63-43f2-8617-0ec7d74b8cbd",
        "cursor": {
          "ref": "6310f6a1-d338-470e-9cd3-c497abbf2534",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "59d55600-ccff-4c8c-b4e3-e078b4a14a94"
        },
        "item": {
          "id": "f75ec2b9-ae63-43f2-8617-0ec7d74b8cbd",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7a7409df-63c3-475d-a1ba-1daafd7d4667",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "d4adc183-ac21-4b10-9dc1-4937090ec2a9",
        "cursor": {
          "ref": "7c28be92-e88a-4286-b473-a262f26515cc",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "4b7c0217-6bca-48b9-8fca-511405d040d6"
        },
        "item": {
          "id": "d4adc183-ac21-4b10-9dc1-4937090ec2a9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c852ba59-ac00-4a3e-922b-edb901fede4c",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "f15895a0-e296-4b3c-a476-badfd0b4928c",
        "cursor": {
          "ref": "64d7d4d0-9820-4c68-bc6e-cb568c72f614",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f5b14c26-28f1-4392-bf92-f16e17df78e5"
        },
        "item": {
          "id": "f15895a0-e296-4b3c-a476-badfd0b4928c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d5017f2d-0c81-44a0-864d-fd042e6eff2f",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "008859fd-e766-4370-af63-4a0748dac6fd",
        "cursor": {
          "ref": "2248aec0-546e-4825-90dc-8c4518475bd3",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5d816e06-9776-46f7-8b7a-3dd2d91cb2e5"
        },
        "item": {
          "id": "008859fd-e766-4370-af63-4a0748dac6fd",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "da9b300f-fa73-40df-a278-afdb1d283566",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "aface2b1-2fb9-482e-8038-ac3aadb6327f",
        "cursor": {
          "ref": "b0bfc996-8d11-483d-89f5-b9d2ea79bb07",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "909a35a4-24fc-48d2-9403-bdedb17479e1"
        },
        "item": {
          "id": "aface2b1-2fb9-482e-8038-ac3aadb6327f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d56f8bed-a83c-4a20-bb95-62733c4c29e1",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "ccae8bdf-8e5f-4063-ab45-92b75afb13ab",
        "cursor": {
          "ref": "dfe024c0-fa1f-40e9-a893-6c7fbde19ca8",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6c0a510b-9d5a-418a-abd0-14641c33ea5c"
        },
        "item": {
          "id": "ccae8bdf-8e5f-4063-ab45-92b75afb13ab",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6d3f4ccf-4f77-4af9-b933-b8da0fa193b9",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "b8b69e40-9d12-4892-90a7-0550bfe7e5ad",
        "cursor": {
          "ref": "93533fe9-0388-4411-90b1-5635bdc619b1",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "aa15eeb9-8745-4d1f-81ab-fb083ad60842"
        },
        "item": {
          "id": "b8b69e40-9d12-4892-90a7-0550bfe7e5ad",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "034c3938-0161-41f2-a718-ae62f0334165",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "6bf0ceb2-1428-4ca2-96c5-39933a989dfb",
        "cursor": {
          "ref": "6acbf1f2-09eb-42e3-af12-05d168f7c421",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "58613fc4-6d59-482e-816f-5790276dc6c1"
        },
        "item": {
          "id": "6bf0ceb2-1428-4ca2-96c5-39933a989dfb",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6f7f23c9-4140-47b2-b830-969739b4de10",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "da5dc843-bb63-4346-9226-107ae8504733",
        "cursor": {
          "ref": "5322b5c2-5f98-4834-bcd4-9a48f0af28b4",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f48d6b96-5300-4ef3-b041-5942a5fde43b"
        },
        "item": {
          "id": "da5dc843-bb63-4346-9226-107ae8504733",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ab2d1335-87a4-4c58-bb9c-ffd8b38b76d8",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "b503975b-d84b-441a-afe2-5a40c9c4e9f5",
        "cursor": {
          "ref": "25d85ec4-ab8a-43c9-800d-d9e64ef793ea",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0bd48d70-129f-4e3e-a97e-c51673d43074"
        },
        "item": {
          "id": "b503975b-d84b-441a-afe2-5a40c9c4e9f5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1e177ae8-3428-4e3e-9b83-7001e2ab3809",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "98a36697-2632-49d8-9686-861aa099dc4c",
        "cursor": {
          "ref": "8832675d-5048-4b3e-a1ee-793f1eb6ffed",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "031e15b9-7f1e-43a6-be57-af5b96c86b1a"
        },
        "item": {
          "id": "98a36697-2632-49d8-9686-861aa099dc4c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "03dcc1d3-574f-4dd9-9983-32fce1f2ba8a",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "aca67d56-49bf-444f-a7b9-25e00fb41085",
        "cursor": {
          "ref": "98bda856-b449-49ec-bf5d-99da4cbd660e",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "00424d0b-44f7-429b-a801-6d28407cd062"
        },
        "item": {
          "id": "aca67d56-49bf-444f-a7b9-25e00fb41085",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9c169098-96c9-467e-a45e-5086fb43157c",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "d66160f7-f079-4066-8667-858aa2877a6f",
        "cursor": {
          "ref": "28dde436-abdb-46d6-be49-85d85d8da44a",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6ba597a3-d71a-4ee5-b4dd-500d57bb0535"
        },
        "item": {
          "id": "d66160f7-f079-4066-8667-858aa2877a6f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "944fe090-9cd6-496f-b415-164db6beacc7",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "efb64f85-9807-41b9-a39f-307299dd4399",
        "cursor": {
          "ref": "3e33f400-2411-42de-b497-8cbc0df33adc",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "fb9d3e2a-1fd3-4802-af1b-5b6fb2836a86"
        },
        "item": {
          "id": "efb64f85-9807-41b9-a39f-307299dd4399",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b48e88a9-18fd-4157-8711-9f37a48c3386",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "c06d0a0b-fc87-4ebe-b1cc-cd2722703f49",
        "cursor": {
          "ref": "95d9eb98-bb02-4752-a44d-ab49edfc7007",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4f8fae3f-0209-4d33-9290-26893369714f"
        },
        "item": {
          "id": "c06d0a0b-fc87-4ebe-b1cc-cd2722703f49",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2fc49b4d-1e8b-49f8-b374-b2961752afc1",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "f17ec29e-df83-4ef6-95fe-b1b29926cd10",
        "cursor": {
          "ref": "2187720f-e533-46ae-b282-96d72c4750ad",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "73ebac53-ac8f-4eed-81c1-b2cc0bba96fb"
        },
        "item": {
          "id": "f17ec29e-df83-4ef6-95fe-b1b29926cd10",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "84255693-48e7-4ecc-8a7c-dfff309a5b6a",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "68139c17-79e0-4f7b-8719-49710da3809e",
        "cursor": {
          "ref": "91a1a651-8c64-47da-b287-6de66a362f90",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e7566329-2f4f-4bed-9999-c1fa6d304905"
        },
        "item": {
          "id": "68139c17-79e0-4f7b-8719-49710da3809e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0db6614a-76c2-46ee-a512-034cf05c604b",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "b4f20d31-5923-4503-bae1-8ea2c18581a5",
        "cursor": {
          "ref": "01e09dab-75e8-4da2-9361-76456e6c0529",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "95ac51f6-3d48-41a4-8b92-7f5b65c9d160"
        },
        "item": {
          "id": "b4f20d31-5923-4503-bae1-8ea2c18581a5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f45cb52d-ecc4-46af-b807-681bfb0ec8f5",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "480b6046-30d1-49a9-98eb-94214cefbf45",
        "cursor": {
          "ref": "5c5205af-90db-4f3b-b104-a86cf906d78e",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c81965c8-f505-4427-8a9f-381a08c847ad"
        },
        "item": {
          "id": "480b6046-30d1-49a9-98eb-94214cefbf45",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7b135c94-cece-438c-8a83-e05e6dc994fd",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "fecbf003-981c-46b3-861b-fce6ef5532c3",
        "cursor": {
          "ref": "ea415530-5640-4aa9-bede-b15a230eda76",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ad15698e-8254-446d-9281-eee631c02137"
        },
        "item": {
          "id": "fecbf003-981c-46b3-861b-fce6ef5532c3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b41d9ac7-e377-4b63-b1bd-4ca22ebd0186",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "0be57d9c-bfad-40a9-bd55-7a5686c00b2d",
        "cursor": {
          "ref": "2d00d65b-2371-4df1-b48f-93b853f77984",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "68a72e63-f55d-476c-97a2-a0482052df5c"
        },
        "item": {
          "id": "0be57d9c-bfad-40a9-bd55-7a5686c00b2d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5b729788-2d37-470a-9a8a-27e2b45d97f1",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "4ccf287f-00eb-4b77-9dcb-278629cbb9d7",
        "cursor": {
          "ref": "1766e38a-05b4-4f15-81c7-6ad18d192ef1",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "81937376-a50c-4fb4-bde0-151fae82c8d1"
        },
        "item": {
          "id": "4ccf287f-00eb-4b77-9dcb-278629cbb9d7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "385826d2-99d6-4ef9-85e3-2d9b7bcf4d12",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "8e348c85-4f1c-4c85-8f7f-f00100ef081e",
        "cursor": {
          "ref": "265514fe-560c-4045-9258-c38ece70d3ce",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c590195d-fa61-4aae-84f0-a6bcaa48338a"
        },
        "item": {
          "id": "8e348c85-4f1c-4c85-8f7f-f00100ef081e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "de35057b-96a8-48f8-932b-d17db8d106aa",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "ded8963c-2893-4ca6-a87a-ecb544b7904e",
        "cursor": {
          "ref": "50cf3e5b-39b3-482f-9eb9-f1af5948df5b",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "cf6dff21-232a-4707-9842-c9971d34fc93"
        },
        "item": {
          "id": "ded8963c-2893-4ca6-a87a-ecb544b7904e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "fd3e61f3-3812-4409-97aa-5b8a779e000d",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "04c35151-aeef-4597-aed3-d3c272529fe3",
        "cursor": {
          "ref": "ae74dc06-b32a-4a99-b378-f4d8cef16fdf",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4f340f26-5ee0-40e8-b4bb-83889ddcc285"
        },
        "item": {
          "id": "04c35151-aeef-4597-aed3-d3c272529fe3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3edb96e4-30bd-4010-8233-21793b6a3114",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b177af88-e10d-4f65-a2a8-5e7e73919487",
        "cursor": {
          "ref": "6206bd69-7649-4cfd-869f-c77fa1f69dc8",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "889c5933-7bc7-4f69-87d6-f79b344e63b3"
        },
        "item": {
          "id": "b177af88-e10d-4f65-a2a8-5e7e73919487",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "3ca11113-7e4a-42cc-8258-795db6b63591",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 45,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db6f4293-e71c-407d-a54f-dee6bd736d3c",
        "cursor": {
          "ref": "782e9280-169d-4901-b408-cd46e2e3d72f",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0064cdfc-ff02-4066-8355-88bb5c40312a"
        },
        "item": {
          "id": "db6f4293-e71c-407d-a54f-dee6bd736d3c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a1280ebe-7af8-44b7-b554-a05f8fd9c81b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db6f4293-e71c-407d-a54f-dee6bd736d3c",
        "cursor": {
          "ref": "782e9280-169d-4901-b408-cd46e2e3d72f",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0064cdfc-ff02-4066-8355-88bb5c40312a"
        },
        "item": {
          "id": "db6f4293-e71c-407d-a54f-dee6bd736d3c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a1280ebe-7af8-44b7-b554-a05f8fd9c81b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b384793-c99c-4f55-af10-38a77f83fedc",
        "cursor": {
          "ref": "28cc3034-3ede-4bec-9b3f-ddc901da3924",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f233962e-e653-47d7-ada2-6b1fe9e02a91"
        },
        "item": {
          "id": "2b384793-c99c-4f55-af10-38a77f83fedc",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "681440f4-881d-491a-ba41-50e8fc42d3d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ebb7bb-0c70-496a-a00b-6022e6e36a33",
        "cursor": {
          "ref": "357a7428-88ec-4c1f-bdd2-0c2c12508bad",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "12bbffc2-0e35-4fe2-86fe-825b9dd70bea"
        },
        "item": {
          "id": "b2ebb7bb-0c70-496a-a00b-6022e6e36a33",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2c8ccbe9-8dac-4a72-b4c3-7ff31046f2d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5876df01-ec0f-46a3-a7c8-f47502a05cb4",
        "cursor": {
          "ref": "9d23fa96-9cdc-407d-82ac-53feefb286bd",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "059f9861-4303-4cdb-9247-5c4e021db0a3"
        },
        "item": {
          "id": "5876df01-ec0f-46a3-a7c8-f47502a05cb4",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "de8d6b10-ab5c-443d-b92d-1431e3a27031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "098d0e7f-9c72-44e0-bdae-d085d380bf70",
        "cursor": {
          "ref": "81f3ad5f-6005-46c4-9b8d-b54d73aac520",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "da8963b9-cda0-471c-ac68-77be1345859c"
        },
        "item": {
          "id": "098d0e7f-9c72-44e0-bdae-d085d380bf70",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "83b302d1-bd31-4c52-913f-66026331da23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52500102-d7b9-4a9d-a63d-fde0cd790288",
        "cursor": {
          "ref": "f5535eb1-be8e-437f-a023-5a4c4784d2d0",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "c5c2fd47-29bd-45a0-b815-1a744d91f5d0"
        },
        "item": {
          "id": "52500102-d7b9-4a9d-a63d-fde0cd790288",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "330d924a-0084-49b2-ba19-7275a93d61b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aec648a-8769-4d8d-90de-d49f1b915906",
        "cursor": {
          "ref": "789bc038-69d7-4431-92a5-f6b6b52034a0",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b6c82877-d79e-431f-801d-028b313e758e"
        },
        "item": {
          "id": "2aec648a-8769-4d8d-90de-d49f1b915906",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "54b137b7-3353-4e06-8759-70156adc546a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c052053e-3a1b-4243-8355-7559e4cd0265",
        "cursor": {
          "ref": "f615b636-3352-4353-8546-46286076a869",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "30989c38-eb6a-494c-8d96-08e71e37eb8a"
        },
        "item": {
          "id": "c052053e-3a1b-4243-8355-7559e4cd0265",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d07954b3-cf3e-4750-af91-69e36b65c915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9670cbc8-ab7c-40d9-afcf-8d855b5b045a",
        "cursor": {
          "ref": "f62cf6b4-f239-4839-83c6-a198808f49f0",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "07e45a82-96f1-4e21-9df2-03712b8add14"
        },
        "item": {
          "id": "9670cbc8-ab7c-40d9-afcf-8d855b5b045a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "40228d2f-2031-4b58-a7a0-f65d1bf0eec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f04d1b-5097-4134-a0e0-b1413a70fb4b",
        "cursor": {
          "ref": "eb341924-dc8c-405a-a188-8c85b44e5c0d",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "af8e7dd6-1c38-4bd7-a259-836e5de3d2d0"
        },
        "item": {
          "id": "99f04d1b-5097-4134-a0e0-b1413a70fb4b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2e8a7031-f743-403e-8dbe-dbe47c651fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4044e14d-1806-4848-b651-adcf9fc78517",
        "cursor": {
          "ref": "e578a1f9-452c-4b64-88b1-9dfd542eb96b",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "74bcaea5-a8d4-46f3-9607-a549688e43f9"
        },
        "item": {
          "id": "4044e14d-1806-4848-b651-adcf9fc78517",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a7002926-0308-4bf6-8c0f-d0041e59fab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b3cd88a-c3bf-4a66-81ec-1aae29eb814d",
        "cursor": {
          "ref": "3bc55eb6-c2be-48bd-9d5d-567f14096984",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c309780d-9e09-42fb-a5b0-49854c809d20"
        },
        "item": {
          "id": "2b3cd88a-c3bf-4a66-81ec-1aae29eb814d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "dd650ebb-cc98-41e9-9ab6-237ae0d177cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e990d0be-c0cc-45a8-80aa-7fda91660c0b",
        "cursor": {
          "ref": "80ce7b0f-5dd2-4c01-a14d-fbe7112d6575",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "56695d68-3eab-4622-90ed-cf1ebfe9d188"
        },
        "item": {
          "id": "e990d0be-c0cc-45a8-80aa-7fda91660c0b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9fe00fe9-661d-4888-bcc3-7b25156ae812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c272893-9e22-4104-b456-bf0b421b4549",
        "cursor": {
          "ref": "6d1a4fee-3c83-4e8c-b150-05852fadbfb2",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d1e0121a-9cc0-4f66-90c4-74fad1a7fe8a"
        },
        "item": {
          "id": "0c272893-9e22-4104-b456-bf0b421b4549",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1851537c-a105-477b-a6ee-de42cddce457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11344569-8eea-40e9-83d8-2d875333e9f0",
        "cursor": {
          "ref": "37af1f38-2ac8-4e43-933f-7f737b262889",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6ac59901-1e23-4cbe-b0bc-d72ee0cfb97e"
        },
        "item": {
          "id": "11344569-8eea-40e9-83d8-2d875333e9f0",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "b1f8a174-dabe-40d9-9415-fa8d4c6d6bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "458c71ae-52fc-4ad6-8ab7-4f7135ea5ec7",
        "cursor": {
          "ref": "663776df-96f1-49bb-a307-eb4eee61a73d",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f5fc228a-cce4-4e6d-88d4-01cd4c359e59"
        },
        "item": {
          "id": "458c71ae-52fc-4ad6-8ab7-4f7135ea5ec7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b585d97f-5c11-4b63-937a-e50a0c2ad858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c9702a-52bd-4b65-9040-0844dc471464",
        "cursor": {
          "ref": "6acf670e-aaaa-4341-b478-418faf409d26",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "93c19c7f-94c3-4df4-8c36-c3660679799f"
        },
        "item": {
          "id": "68c9702a-52bd-4b65-9040-0844dc471464",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "bfbee382-e22d-4318-bbe8-6541a5bb0f80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91196b14-50c7-47a2-bbed-fc27490ae4a7",
        "cursor": {
          "ref": "d77297db-6e4d-4778-9497-af9ee84ff0b9",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ab38d760-6e1d-4906-9636-dfe50f66c8e0"
        },
        "item": {
          "id": "91196b14-50c7-47a2-bbed-fc27490ae4a7",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "4e546212-c3d3-4a31-add8-27fc6c6c2ec0",
          "status": "OK",
          "code": 200,
          "responseTime": 623,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "d6862666-7d1d-4bee-9050-e4af35e0c7e9",
        "cursor": {
          "ref": "fe3b673f-84e3-4345-a503-49e3a3fedec3",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "92b2bcd2-353b-4980-99a1-011d3bf465ce"
        },
        "item": {
          "id": "d6862666-7d1d-4bee-9050-e4af35e0c7e9",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "194c816e-0866-4a46-83a9-5d319b21f051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68af134a-ea3d-473f-8fcb-da5e9127cf62",
        "cursor": {
          "ref": "790ea8f9-d776-45d4-920b-6893247f5f2c",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "221acfc8-2971-4732-878a-1b3de3f3f93c"
        },
        "item": {
          "id": "68af134a-ea3d-473f-8fcb-da5e9127cf62",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d7756a25-35d8-4e6d-886e-461679bc3cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 317,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7599022d-1e1a-46dc-9949-ff83be6f2638",
        "cursor": {
          "ref": "c5c9fa18-5f85-4c3e-a6b5-8c825ae2d913",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b1fe595a-7213-4c1f-9b2c-63a98c6c5811"
        },
        "item": {
          "id": "7599022d-1e1a-46dc-9949-ff83be6f2638",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "13f7c532-b0c7-456f-af94-be34d39f563d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 292,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ac2ffc9-b2ec-4195-acad-5d4ff23c7300",
        "cursor": {
          "ref": "55b3351d-8ba6-4fb1-932a-d429170d2bc9",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "82ef9de2-ab99-4996-bd25-7c6014830db4"
        },
        "item": {
          "id": "2ac2ffc9-b2ec-4195-acad-5d4ff23c7300",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "77f6afe4-6106-48c7-b336-ae0cf9f27961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f29a7aed-a004-493e-95e2-d9bcf7288f82",
        "cursor": {
          "ref": "f415a7cf-1e6e-491a-85f3-15050ddb3249",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "4f03948e-0bf5-4c4d-9a19-0b37f1003807"
        },
        "item": {
          "id": "f29a7aed-a004-493e-95e2-d9bcf7288f82",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3e958ece-9052-45d1-88bf-ca4738b76f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c431c253-1825-4d91-9dae-81f26b5e8a88",
        "cursor": {
          "ref": "114eb0f0-a198-4382-b8ae-8ce967e9e072",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3f8840e5-e599-431d-beec-8ee022784d34"
        },
        "item": {
          "id": "c431c253-1825-4d91-9dae-81f26b5e8a88",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3b2fec02-901b-44cd-b8fc-7de678bdb172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 292,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "441992fe-4977-4f40-87cf-fae205fb0fff",
        "cursor": {
          "ref": "a8b692b6-b8a3-4992-b765-9ba8e9729d8e",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "183641fd-b8b5-4e9e-a26a-b09451e54eb6"
        },
        "item": {
          "id": "441992fe-4977-4f40-87cf-fae205fb0fff",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f7f04373-e2a5-49e7-a9af-215ab97bb735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f09bacf0-4c47-4f6e-9189-21273a06b823",
        "cursor": {
          "ref": "6b1c2266-37e9-496e-81d1-6242eb46307f",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "9cc1fa9c-6946-4b3b-8158-65440eb970d1"
        },
        "item": {
          "id": "f09bacf0-4c47-4f6e-9189-21273a06b823",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "cd5d7a69-e0d3-4257-abea-3b85f2412b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b834f7f-f8c8-45c3-8bf1-7cc382f7f4e1",
        "cursor": {
          "ref": "ef383fc2-2c53-4494-847e-3d52aeea6fb8",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b5a8db71-647b-498a-876d-d5ede2475118"
        },
        "item": {
          "id": "9b834f7f-f8c8-45c3-8bf1-7cc382f7f4e1",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4ec61e5f-7c08-4834-836a-4989a2afe39e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de6f1115-59a6-45aa-a945-600ea1f46395",
        "cursor": {
          "ref": "cac05055-e317-4f4c-a235-03cb268d2b17",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f60b7e98-9f37-484c-8e71-912ed9164db8"
        },
        "item": {
          "id": "de6f1115-59a6-45aa-a945-600ea1f46395",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "bd70a8ec-a98e-4953-8c71-eb94951ff743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "460cfb39-3469-4363-97c1-50b0f73c78f5",
        "cursor": {
          "ref": "50a11dda-7c61-4bbf-86ec-36a7a719aadf",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "daafc27d-afab-4f3a-a846-a40300550664"
        },
        "item": {
          "id": "460cfb39-3469-4363-97c1-50b0f73c78f5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6f64e4d5-9f42-420b-87f5-b4312e0613de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa510075-50dc-44ad-bf0b-e4cda5abf2b4",
        "cursor": {
          "ref": "81051f8a-eef1-47aa-be66-8b0c8b5743a2",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e87c1621-5829-451c-add2-a6cc397885b9"
        },
        "item": {
          "id": "fa510075-50dc-44ad-bf0b-e4cda5abf2b4",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d75f956e-1a4b-4fa9-8d34-4c5a008b5110",
          "status": "OK",
          "code": 200,
          "responseTime": 256,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "997a0c1d-0e57-4ede-a9f4-dbf6f5640e79",
        "cursor": {
          "ref": "a7a496d3-c1d1-440a-8c78-f4308f93844b",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "fbd1e791-5212-4be3-8066-6580584280d2"
        },
        "item": {
          "id": "997a0c1d-0e57-4ede-a9f4-dbf6f5640e79",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "21483b86-2117-4da4-9131-1a637ae40e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bcc26de-721d-45c6-bca1-b3493d898a8f",
        "cursor": {
          "ref": "a6007269-c1db-4a91-ad06-80954755ec42",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "be6e3dee-5d0e-4b97-bc2f-8c98cedffb27"
        },
        "item": {
          "id": "8bcc26de-721d-45c6-bca1-b3493d898a8f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4a4f16b1-273a-4914-80b9-7b538b9b5660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc2c508c-2b5f-4b6e-a21b-6ef38a7367d1",
        "cursor": {
          "ref": "92d406c5-bdd0-4d21-bca9-8395ef141623",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7e8f7463-21a6-4ec6-a76e-72443aabbba1"
        },
        "item": {
          "id": "fc2c508c-2b5f-4b6e-a21b-6ef38a7367d1",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a96aa83f-50c0-4a83-9dd9-2007a58c8d24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eaaa58a-7e7a-416f-a49a-ac0022c158eb",
        "cursor": {
          "ref": "b395b120-9329-42dc-af4a-e400ebf4da56",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "91ffef97-d34b-435c-8e86-cbafe0253450"
        },
        "item": {
          "id": "0eaaa58a-7e7a-416f-a49a-ac0022c158eb",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "6d701b2e-3971-46e1-8449-8ecafca01c4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 254,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "075123cc-1682-43ab-a81b-0c4341a6a921",
        "cursor": {
          "ref": "6739e377-5830-4545-96ae-bd98dd145e93",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "fe16cc34-bd4a-4292-b081-0b4e21618fac"
        },
        "item": {
          "id": "075123cc-1682-43ab-a81b-0c4341a6a921",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1872d899-0c72-4f14-9810-32f11abdc54b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42aad892-fbc7-447b-bb7f-347cc155c431",
        "cursor": {
          "ref": "b69f4d5f-e461-47ac-9ff3-cffa681d6b50",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9b2cdcf4-85a3-4a31-a8e8-3cbe4a1ab38d"
        },
        "item": {
          "id": "42aad892-fbc7-447b-bb7f-347cc155c431",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "5663e564-31b2-47ed-b30b-c6f45819cfbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 297,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ad4760-5af4-4809-8930-18580d218f4c",
        "cursor": {
          "ref": "fb45d27e-80ff-4083-8486-43961e0d38f3",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "21b377af-0e88-4016-9331-e2d54c2ea0d2"
        },
        "item": {
          "id": "83ad4760-5af4-4809-8930-18580d218f4c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8131a9cc-0bd6-4914-b7d2-e559bc8ce63e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 289,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5344c237-16ad-4904-828f-141354ff6781",
        "cursor": {
          "ref": "0a2957a3-aeb6-4578-afc3-e597945a7a6b",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "4f9d6010-cc62-4a76-881a-97ef82092243"
        },
        "item": {
          "id": "5344c237-16ad-4904-828f-141354ff6781",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "520e7fc9-660b-455f-8e37-283b76e8f3f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7dbed17-ee5e-4140-be39-8589739505c0",
        "cursor": {
          "ref": "b8c1cecd-da54-4940-874e-195262cdd708",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c80690b0-e93f-4916-9e2e-7479047f641e"
        },
        "item": {
          "id": "e7dbed17-ee5e-4140-be39-8589739505c0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a64ba115-2159-47b9-bd84-84539e18c000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ac74c1-0d51-4370-9a32-991a35b145bd",
        "cursor": {
          "ref": "6a45dc2d-7511-4072-a5a5-c8ad959e4b65",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "3f01a181-86ed-4f61-80db-ee96be3eeec8"
        },
        "item": {
          "id": "e8ac74c1-0d51-4370-9a32-991a35b145bd",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8342b8a8-84fa-4cbc-8af8-f50b84d61bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 464,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c08173-78dc-4d29-982f-b6bd80a5564c",
        "cursor": {
          "ref": "d78c7f18-19cc-4753-8b33-27c68d893880",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c5b6c914-597d-4ef0-9b9d-6d4bf0842687"
        },
        "item": {
          "id": "98c08173-78dc-4d29-982f-b6bd80a5564c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6d28f06c-f646-4c9c-b331-fd1066389cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88d8edc4-1efe-4eab-96ba-9b0f07375871",
        "cursor": {
          "ref": "ee11ad02-8046-40a4-a3ab-636f85c9caed",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9872a546-3d14-4d92-842b-7f5563fb6741"
        },
        "item": {
          "id": "88d8edc4-1efe-4eab-96ba-9b0f07375871",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a84de623-f2c8-4875-9321-0b3109c18a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef63402-a2d5-4183-a0dc-1865bf8a34d1",
        "cursor": {
          "ref": "e33564c2-ff60-4773-a132-b365c2d24e51",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3776922a-bf7c-45c8-829b-4bd2e94bf7b8"
        },
        "item": {
          "id": "bef63402-a2d5-4183-a0dc-1865bf8a34d1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "87f42c4f-149e-48b2-80b2-37b619937347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b747f4bc-63a7-4d08-83a0-e95d2d91a7ac",
        "cursor": {
          "ref": "2c506674-a1d4-4ddb-9981-5f0ee7ae6f27",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "64947532-a56c-436f-8c61-eb1e524104c0"
        },
        "item": {
          "id": "b747f4bc-63a7-4d08-83a0-e95d2d91a7ac",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b93c420d-cebf-45f2-9dd5-d7e8aa1be5c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 308,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c7fa62-334b-482b-97b2-5accfb658c46",
        "cursor": {
          "ref": "8817369b-29d8-499d-9537-dba6d39438ba",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "01c8195b-a89a-48d0-876b-f58c7d4b3dcc"
        },
        "item": {
          "id": "59c7fa62-334b-482b-97b2-5accfb658c46",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "09ac2983-e7fd-4708-9941-d57f0c7e9e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 284,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b1d5c6a-48fe-4c9e-a072-09cdf61270c8",
        "cursor": {
          "ref": "0e97a53b-788e-491f-8f0f-f7c4d37bc0d3",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "aca0d14a-d76e-417d-959e-2f72314ba32e"
        },
        "item": {
          "id": "1b1d5c6a-48fe-4c9e-a072-09cdf61270c8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b69659a8-8209-42e6-8a30-b782481e551a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 307,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534b2a82-3381-4d87-9ebf-b3f8b0be4771",
        "cursor": {
          "ref": "895bf219-7ae8-4584-8599-86ad1b49f503",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9ed20d43-a70a-4170-8484-d0ca9f2ebab7"
        },
        "item": {
          "id": "534b2a82-3381-4d87-9ebf-b3f8b0be4771",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c0c26ece-9296-40bf-bd01-bcf7fe30a90a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 350,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bba72b1-a2aa-4526-bc6f-d63e7a32f221",
        "cursor": {
          "ref": "5b00746f-38b0-43df-a23d-ef77743d1af5",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ba27702e-48b4-47e0-935e-7f94af90fd0d"
        },
        "item": {
          "id": "7bba72b1-a2aa-4526-bc6f-d63e7a32f221",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ffa2e4ae-73b6-4610-bd7a-052c228e9d40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 320,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fbaebcc-46f3-4095-9a65-e89922a90d91",
        "cursor": {
          "ref": "f53cae1e-e458-4e40-a268-04c394741f6e",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c70c0824-ae36-48ca-a8b0-8084c2075258"
        },
        "item": {
          "id": "9fbaebcc-46f3-4095-9a65-e89922a90d91",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d021a95a-049d-41ab-9521-3c2d64a33026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48ddd9a7-74ef-45b0-9d74-8fab00238ce3",
        "cursor": {
          "ref": "accc7546-a1c9-4edb-bdea-a1be2fdbc013",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "72ec7fbb-6720-4801-ad6c-95db701f3783"
        },
        "item": {
          "id": "48ddd9a7-74ef-45b0-9d74-8fab00238ce3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "be643265-c476-411a-b0b0-e172f1153909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 291,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf02ecf-8ebd-4c3d-8c1b-fde6d4972694",
        "cursor": {
          "ref": "b66562aa-adca-4470-8a39-2c7eea5b5c09",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8c384c52-4b4f-407a-9164-b29e8d9f9384"
        },
        "item": {
          "id": "9cf02ecf-8ebd-4c3d-8c1b-fde6d4972694",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4ece2d2e-2af4-4625-ab13-bd28dee96afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 298,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d27cbf0-9194-4a0c-a16f-4331b8e40971",
        "cursor": {
          "ref": "b5f278ae-4f9b-4309-8064-f708c0df0c1a",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "6640485a-6046-491a-a222-df3cb221f8f6"
        },
        "item": {
          "id": "6d27cbf0-9194-4a0c-a16f-4331b8e40971",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "8e9861db-6f34-40b9-a330-24990d75774a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 304,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed0e6e01-bdc6-4166-b0e1-efcd3a7edd82",
        "cursor": {
          "ref": "1d561ec8-c355-4684-8fc5-78b4c508d211",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "cbce00b1-bf5a-40bf-a01f-816be0fdc92b"
        },
        "item": {
          "id": "ed0e6e01-bdc6-4166-b0e1-efcd3a7edd82",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e09275da-4186-42aa-80ec-b9615b50e7eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 300,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc88224-c8ef-49a4-bbf6-6cd73c9e1c2c",
        "cursor": {
          "ref": "0aaf0b68-0d15-43f3-be9c-5cb7d402c5a2",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "dc978734-5b99-46f4-83d0-1460422f2127"
        },
        "item": {
          "id": "2cc88224-c8ef-49a4-bbf6-6cd73c9e1c2c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9a9d180a-9fd9-4845-b646-715023830371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 290,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3ff36d3-ae33-4cdb-9486-e6bfb2b3768c",
        "cursor": {
          "ref": "fb36f6f2-fe8d-4b37-925b-95d7de56bf1a",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "064398df-d5dd-4d93-97e1-4cd2c48bc7c3"
        },
        "item": {
          "id": "b3ff36d3-ae33-4cdb-9486-e6bfb2b3768c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "17c1cfbc-82ee-4043-8a3e-936810073800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fdc5c57-c675-4570-8e3e-29edd581bfee",
        "cursor": {
          "ref": "5eddac09-4add-474a-a5aa-a8e5b8e89102",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4c1794f0-6fc4-4dc8-ba4c-33803298eaef"
        },
        "item": {
          "id": "9fdc5c57-c675-4570-8e3e-29edd581bfee",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b2b08adb-18d8-4903-bbe2-2b6e3b1d0e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "576370b2-bf9b-452c-925d-8706259a3192",
        "cursor": {
          "ref": "e5b6018a-1674-40d4-bab2-fe57fa6b59ae",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "808e6a25-86f3-4edb-9a78-06331b5adc8f"
        },
        "item": {
          "id": "576370b2-bf9b-452c-925d-8706259a3192",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3a56e342-d123-4b1d-ac98-12a0e8a9d648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42538c45-59cc-4b79-8d66-cc1d6f465557",
        "cursor": {
          "ref": "7afec11b-cb8c-4ce4-8f57-8f5f94f6083f",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "bddd90f0-817d-4ab6-b631-1d0aae2f325b"
        },
        "item": {
          "id": "42538c45-59cc-4b79-8d66-cc1d6f465557",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "93389fbd-3bed-49c4-9512-a81be0ee9b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 312,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b53efd2-f93c-4593-9d88-9db7e1a2ee7b",
        "cursor": {
          "ref": "05f46774-8050-4d56-a8ca-85e84456a7b9",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2129bf22-fc36-4e1a-8aa8-59be9c206385"
        },
        "item": {
          "id": "3b53efd2-f93c-4593-9d88-9db7e1a2ee7b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "08ee48ce-8f67-440d-b97a-65e32d9be307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7cb1c01-df6b-4a95-a379-f893c8906907",
        "cursor": {
          "ref": "7bf23291-b899-43a4-90ab-92738437a07d",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a19de2ec-9784-42f0-83f9-d92f7aa81ecc"
        },
        "item": {
          "id": "d7cb1c01-df6b-4a95-a379-f893c8906907",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "bff096ce-9e58-4835-aff5-1366689d125f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5354e75-6b5f-4161-a688-e4b60d17b05e",
        "cursor": {
          "ref": "90be2ab8-2ade-4d83-a3cd-b792bdee94fa",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "41b6d790-e549-49a3-9cfa-e493eb4ac3e7"
        },
        "item": {
          "id": "a5354e75-6b5f-4161-a688-e4b60d17b05e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "528cb39f-498e-4b8e-a36a-89c9aa6d34b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30cb65d-2166-41e1-8828-5a7b829a23ac",
        "cursor": {
          "ref": "52d20f25-7272-43f6-baf8-d7007e988b76",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "bed49d80-bcab-4b1e-b4d8-1658895a7dcc"
        },
        "item": {
          "id": "d30cb65d-2166-41e1-8828-5a7b829a23ac",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5f14809d-0b01-4ede-92aa-031045ad7089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e77e6d1a-59d8-4966-a318-5a437e890feb",
        "cursor": {
          "ref": "37cb137d-98dc-4c00-a97d-304acd58fcae",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e84fa435-2d8a-48c9-90c6-37257ac71587"
        },
        "item": {
          "id": "e77e6d1a-59d8-4966-a318-5a437e890feb",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0469f56f-1e87-4f7a-898f-58a9f6532c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 292,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85894108-f65d-49e6-ab2a-f10b19ef01b0",
        "cursor": {
          "ref": "f0a10975-f185-4900-9b11-c360e9048d73",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0a771964-55b6-4a4a-b392-cd623f2bee98"
        },
        "item": {
          "id": "85894108-f65d-49e6-ab2a-f10b19ef01b0",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a094b2d6-0760-4260-b9ce-6a67edc42152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6da3df12-5d10-4ffa-b476-9dda274d953a",
        "cursor": {
          "ref": "a65e7809-0937-4b67-81cd-45cf13a4c875",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a1dabb51-357d-4fdb-a91d-16fa4eb4546c"
        },
        "item": {
          "id": "6da3df12-5d10-4ffa-b476-9dda274d953a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c7108efe-1451-4eb6-84df-73d655161f03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ea901f-c516-4492-ad94-34e19798d4e9",
        "cursor": {
          "ref": "4d751437-4bfd-40db-9d82-236a647d6e36",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "25b4b818-4d74-472b-a077-d7f1c38b73a4"
        },
        "item": {
          "id": "f5ea901f-c516-4492-ad94-34e19798d4e9",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "55324471-9b1b-4ffc-a311-a7ff5555dadd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc981adb-7398-40d8-a13d-9f1fa3723f1d",
        "cursor": {
          "ref": "980bae00-5f30-4ec4-bdba-009199ac8ef3",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a1e887ed-b9f0-44f3-8ea7-782c0680ec98"
        },
        "item": {
          "id": "bc981adb-7398-40d8-a13d-9f1fa3723f1d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7fa89bc6-9eeb-4f1f-91f7-ad65811dd248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16deff09-2ce4-4e63-b1aa-340ab03fad90",
        "cursor": {
          "ref": "42c5c41a-19b0-42aa-aea9-380603d1cec4",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "df52de0b-beb8-4a60-bfa2-8c01834b5b04"
        },
        "item": {
          "id": "16deff09-2ce4-4e63-b1aa-340ab03fad90",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b2944bce-6963-45d2-8a4e-1be2aedc7a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfeb3fbf-2718-478a-8f62-a5004335edde",
        "cursor": {
          "ref": "7c6c82b0-4585-4bfc-a1b4-dec0c48e2c69",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a5f8cc99-d3fb-4417-997e-a05eb1b59bd3"
        },
        "item": {
          "id": "dfeb3fbf-2718-478a-8f62-a5004335edde",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9bf04487-78d5-461e-8c7a-2f5a6c277ba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7bbc8b-7af0-4c79-8c9a-8c9a94eb8ef2",
        "cursor": {
          "ref": "7d489b48-1e47-4ac3-bc93-bbda136f7381",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "befeb88d-9e04-4167-9b8d-c4662362e9b7"
        },
        "item": {
          "id": "6a7bbc8b-7af0-4c79-8c9a-8c9a94eb8ef2",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7b34135d-2677-4083-88f3-eb89691b8df2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b24623-6186-4239-b7ba-e7a69a20c0f9",
        "cursor": {
          "ref": "85fce24d-974d-48c7-86d7-c18d10deee7e",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8fcf2af7-51ae-4430-9e61-c7f5361fb68f"
        },
        "item": {
          "id": "27b24623-6186-4239-b7ba-e7a69a20c0f9",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5cc40a5c-df01-4286-906a-220bebb641de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b82754-9f68-4078-9526-9119c9a34d93",
        "cursor": {
          "ref": "deddfb20-8732-4de5-9303-b7caf593dc12",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "3c535173-cce3-4c18-bb95-2f4d1dd50244"
        },
        "item": {
          "id": "56b82754-9f68-4078-9526-9119c9a34d93",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "01ae5ade-5733-450c-801a-1f8d16c6f4cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e429afe-8fc1-4fb1-b214-ec5037cdfe5b",
        "cursor": {
          "ref": "5fe2d24e-8eb6-4f5f-ba4f-7257d540e655",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a9c9037b-e5fe-416e-ad6b-249d58fe0329"
        },
        "item": {
          "id": "4e429afe-8fc1-4fb1-b214-ec5037cdfe5b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6f501f1e-a07c-4f54-9855-f4cd5be6c1e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a680f1af-1471-4dfa-9c07-27efd446afbc",
        "cursor": {
          "ref": "2ab66520-bc7c-4e83-825f-2b0d6c2cbfdd",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "37c46ba0-495a-4679-87a4-bbbb3296765c"
        },
        "item": {
          "id": "a680f1af-1471-4dfa-9c07-27efd446afbc",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "53d73e42-af53-4419-b724-e6a974d04aa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e37c016a-ea9e-4a83-ba50-c4f060440282",
        "cursor": {
          "ref": "cb636ed6-29bb-4785-8c25-61af21ab3e6f",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "570a35d4-f661-4b3d-b132-758561fe9dac"
        },
        "item": {
          "id": "e37c016a-ea9e-4a83-ba50-c4f060440282",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f4e46db6-b79a-4ac3-92dc-25c87f82d76c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab2a162-ea71-48b4-b496-966b2f456d4c",
        "cursor": {
          "ref": "bec791ae-168a-4171-b4d2-6eb9bc61a03c",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a4deb93d-ecf9-49db-8719-876a7bec9b1a"
        },
        "item": {
          "id": "aab2a162-ea71-48b4-b496-966b2f456d4c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "34c29e0b-86f8-4723-90c8-b0e19ec3c4ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05818ed8-28ac-4df2-a4bc-149568444cb8",
        "cursor": {
          "ref": "4a66947d-9466-4521-92cf-72acd462d36d",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9d12b591-7786-4d1a-9f09-8d2e73938334"
        },
        "item": {
          "id": "05818ed8-28ac-4df2-a4bc-149568444cb8",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "2ed526c6-e3d7-4d64-acac-16e30ad57f09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7604c002-e714-4fa1-b3cb-03ede718fcab",
        "cursor": {
          "ref": "7822acc3-878c-4d28-a442-d3b2d60eeda2",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "66483aa7-44af-492b-8e37-39a449dda3d0"
        },
        "item": {
          "id": "7604c002-e714-4fa1-b3cb-03ede718fcab",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ef9992ec-824a-461d-aad8-e8310a705935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "960e6fd5-07da-43c8-a28d-4acbd72d3437",
        "cursor": {
          "ref": "eaa94caf-5ae6-489d-93b5-b2f984b104f0",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "50d6db27-05c9-4599-a016-38a4b55e45e0"
        },
        "item": {
          "id": "960e6fd5-07da-43c8-a28d-4acbd72d3437",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "24a649f6-9cf5-4e82-8224-5eac826c37ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37805aaa-44a9-40dd-b70d-56f6873329d3",
        "cursor": {
          "ref": "6d871d03-1502-42a2-9d07-c25c726217df",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "aec66b9c-c0cc-43a0-80b8-f8594c385e71"
        },
        "item": {
          "id": "37805aaa-44a9-40dd-b70d-56f6873329d3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "9ec279db-c2f2-4757-ba01-83ef37165d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e1879fe-b3b7-452d-b825-13f8c4c231de",
        "cursor": {
          "ref": "0f22907d-3ce2-4226-bdf8-12e09263745e",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "f74adc16-8f0b-4c80-8665-583e07ce492e"
        },
        "item": {
          "id": "6e1879fe-b3b7-452d-b825-13f8c4c231de",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "601ce2ca-55cb-41e7-91ea-34b818b90378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e9ef5e-0621-400a-91dd-2e370f06a194",
        "cursor": {
          "ref": "a3f3e90a-3bfc-4772-8615-17d19d0725fb",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c9346be4-7403-4405-8567-3a522e8506c7"
        },
        "item": {
          "id": "51e9ef5e-0621-400a-91dd-2e370f06a194",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8028a5ea-b285-4e16-a9e6-449590649064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee559919-b76a-4e97-b467-461b0bf3c58a",
        "cursor": {
          "ref": "df2c86ee-1287-406d-a2c1-3415b99a1b25",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1c1fe193-a3db-4199-8bb9-6e99c8769300"
        },
        "item": {
          "id": "ee559919-b76a-4e97-b467-461b0bf3c58a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c791b3ab-a768-4739-89b6-6314e9603306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e3c59c2-69ef-4308-9c3d-85d135dc7aba",
        "cursor": {
          "ref": "be9983af-831c-4779-8644-86126ed62a8d",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "73a96a64-7ca6-4a5f-a5b2-2b6cf8b0b783"
        },
        "item": {
          "id": "3e3c59c2-69ef-4308-9c3d-85d135dc7aba",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4c564fec-1655-414d-bd9f-4a1a2c23791a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f0e508-fa42-4bf4-9283-470a2f2ebf28",
        "cursor": {
          "ref": "da45d5de-88e1-499b-bdec-8519860c9008",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4f1afdbb-e3f4-42c9-8c54-9b5ea19240cf"
        },
        "item": {
          "id": "77f0e508-fa42-4bf4-9283-470a2f2ebf28",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "74989aae-7618-423e-97d4-bcc7bfaa48ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24308d9-2ebe-4671-a3ae-e4f70becb24a",
        "cursor": {
          "ref": "79a6ab26-7a65-42bd-8292-60e571fba54d",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "3191f5e6-e6a7-4252-910e-be026eb9e240"
        },
        "item": {
          "id": "b24308d9-2ebe-4671-a3ae-e4f70becb24a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f21aae4d-866f-4a94-b60f-3f31286c0f27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50c5e50f-8e4f-4882-aba5-438e8c87c6ff",
        "cursor": {
          "ref": "2f6ad318-beba-4c17-9650-1f58917ad362",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "cdc1076a-9b00-4187-9125-308d5a23cb49"
        },
        "item": {
          "id": "50c5e50f-8e4f-4882-aba5-438e8c87c6ff",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5afd9dd2-d980-4d56-97dd-b2b897e8b41a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72d71295-47ca-45d4-bd4e-d51bafb5aa12",
        "cursor": {
          "ref": "93221b07-3b99-46ef-8cde-4b61d555c7f9",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a6408b11-0150-42d0-a2af-fa888c4ef994"
        },
        "item": {
          "id": "72d71295-47ca-45d4-bd4e-d51bafb5aa12",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "265d7444-d6c1-44f7-94d5-e316eece8f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b966fa0-8de6-4e04-8621-b7b22df98aee",
        "cursor": {
          "ref": "5a6f564d-fd7a-496c-9ff3-08b72a834d20",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "acd97896-d8e5-44a3-9855-1718fd017e50"
        },
        "item": {
          "id": "7b966fa0-8de6-4e04-8621-b7b22df98aee",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b114af0a-cec7-4abf-ad1e-09a359ab3e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "234b9a94-1984-47af-a2a8-49cd7dde033d",
        "cursor": {
          "ref": "77dc3935-bcb8-4ba7-8a06-64121f61768a",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a4271710-5874-44a4-a9a9-a61334a8f902"
        },
        "item": {
          "id": "234b9a94-1984-47af-a2a8-49cd7dde033d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "36366bf6-73aa-4217-b94d-924572d10320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75ccd035-f606-4d65-a574-a3a7ce2991cf",
        "cursor": {
          "ref": "3144c697-d850-47d2-9a12-162350f27fb4",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "914fc201-f62f-4a3b-8cda-ba2bcd0589a5"
        },
        "item": {
          "id": "75ccd035-f606-4d65-a574-a3a7ce2991cf",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ed4102a1-997d-454e-bf2f-73b5bd04d04c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a99db1f-07b8-44f2-b444-e5272bb5ce5d",
        "cursor": {
          "ref": "fc11b6dc-a23e-4bb1-ae8f-d220290f8f4c",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "09588b5d-2f4b-4ac4-ac83-772f7aa5cd08"
        },
        "item": {
          "id": "0a99db1f-07b8-44f2-b444-e5272bb5ce5d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e92c0cb9-60a9-45ce-852d-72779affe430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3b15af2-f680-4446-a01d-54f26b83f0cf",
        "cursor": {
          "ref": "b5562a78-bb63-472b-a6f8-46a61edb08e5",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "5a3df200-e502-4294-b20f-d69de7f52f0d"
        },
        "item": {
          "id": "b3b15af2-f680-4446-a01d-54f26b83f0cf",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3d2f29b1-84b0-495e-95fb-31ff1718dbdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd1869ca-1ea1-4710-9ccc-1ffe67b805ba",
        "cursor": {
          "ref": "1f8448f4-44f8-4ad4-b2d7-5fe062557763",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b5c02736-7624-4d84-bb11-3835237260f2"
        },
        "item": {
          "id": "dd1869ca-1ea1-4710-9ccc-1ffe67b805ba",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f9a6f6b9-7389-4ea4-9a2c-67314c842a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa1601b0-1d7d-4c1d-a227-5d15f18bd910",
        "cursor": {
          "ref": "a38fc91c-3132-4b20-92ae-bc55ad410eb0",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "508ef52d-532b-4670-b82f-8770e42ece80"
        },
        "item": {
          "id": "fa1601b0-1d7d-4c1d-a227-5d15f18bd910",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "8bd82a99-9495-4dbf-b859-340510cb31f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5caa7b4-f49b-4a52-937d-623e65904ec9",
        "cursor": {
          "ref": "c46c46c6-7582-4eaa-b862-541f4aa1f922",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ac04c0a4-c821-4fac-9b50-3c1d1a5bb246"
        },
        "item": {
          "id": "e5caa7b4-f49b-4a52-937d-623e65904ec9",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a8dacacf-6b12-4153-aeeb-fe178806698b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e34bfc0-b2f6-475f-9d43-cb79eb3b4d7e",
        "cursor": {
          "ref": "02f641e8-22d7-4e3a-b020-f1c6a6dfb133",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "08bcfb4b-1942-4e6a-adf7-a36e763c4750"
        },
        "item": {
          "id": "0e34bfc0-b2f6-475f-9d43-cb79eb3b4d7e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "11184314-965b-4668-b063-36700a7b0863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230a6d1e-f49b-4303-85f4-485cd20dfb6b",
        "cursor": {
          "ref": "dd5e24e0-c1ee-4c02-b3a1-79e238f4e25e",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5481f4ed-4d06-4484-9968-5dae6c84a11f"
        },
        "item": {
          "id": "230a6d1e-f49b-4303-85f4-485cd20dfb6b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "42a6b3cf-e106-4efd-8656-6d8e56b02ec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acbf060e-4c68-44c8-ac9e-59ac31bcaa00",
        "cursor": {
          "ref": "50bb7668-d16f-4a74-8ee7-1e21aa6006e0",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a9983206-e800-438f-a2cd-75750fff8058"
        },
        "item": {
          "id": "acbf060e-4c68-44c8-ac9e-59ac31bcaa00",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "5ea0aab9-f733-476d-a609-a39916a524ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a74092-7bbb-4c6b-9c0e-31069f560d91",
        "cursor": {
          "ref": "d893dc66-3b3d-4ddc-a3f4-9b930ad50349",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f4f4ad56-15f0-4241-9b07-7088448c64bb"
        },
        "item": {
          "id": "60a74092-7bbb-4c6b-9c0e-31069f560d91",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "49b88ac1-5e5e-4bd5-ab36-03df3d044a8b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f10d87-22b6-4776-aeca-59385d37763e",
        "cursor": {
          "ref": "4e2f3cd6-3306-4a3c-b683-50f502dad569",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "70d83da7-e6bf-4bca-bc6e-c2e6d9233234"
        },
        "item": {
          "id": "a8f10d87-22b6-4776-aeca-59385d37763e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6263c3b5-2e33-40c8-a169-da8a3beddd99",
          "status": "OK",
          "code": 200,
          "responseTime": 279,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df7d57f-e2dc-437f-8eca-93caaebd789c",
        "cursor": {
          "ref": "5b598207-82e9-4dd2-b0d2-f0ed3d036dec",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e7450970-368e-42f9-bb11-132688c6634c"
        },
        "item": {
          "id": "8df7d57f-e2dc-437f-8eca-93caaebd789c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "aa33a1fa-5046-4d25-b1d4-07da3caeb290",
          "status": "OK",
          "code": 200,
          "responseTime": 628,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9d993a-c95a-4e7e-b086-4c0811a8eb47",
        "cursor": {
          "ref": "4775b448-0f7c-4322-8582-cfde17c5dcb1",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a244efed-bf9a-48e0-8f67-c60a946e71a4"
        },
        "item": {
          "id": "0f9d993a-c95a-4e7e-b086-4c0811a8eb47",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4b247e5e-86be-48bf-a4fc-22e04cc10298",
          "status": "OK",
          "code": 200,
          "responseTime": 630,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e0d9d0-3ad5-4060-bda2-2f12213b11b9",
        "cursor": {
          "ref": "04dcd7c2-1b13-4594-8e4b-83c04a9e62f7",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "64b32cc3-47ff-455d-a0e4-32c01467dbc5"
        },
        "item": {
          "id": "c5e0d9d0-3ad5-4060-bda2-2f12213b11b9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5aba06f4-3e9e-4cb8-855e-0970afa96235",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e0d9d0-3ad5-4060-bda2-2f12213b11b9",
        "cursor": {
          "ref": "04dcd7c2-1b13-4594-8e4b-83c04a9e62f7",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "64b32cc3-47ff-455d-a0e4-32c01467dbc5"
        },
        "item": {
          "id": "c5e0d9d0-3ad5-4060-bda2-2f12213b11b9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5aba06f4-3e9e-4cb8-855e-0970afa96235",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e0d9d0-3ad5-4060-bda2-2f12213b11b9",
        "cursor": {
          "ref": "04dcd7c2-1b13-4594-8e4b-83c04a9e62f7",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "64b32cc3-47ff-455d-a0e4-32c01467dbc5"
        },
        "item": {
          "id": "c5e0d9d0-3ad5-4060-bda2-2f12213b11b9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5aba06f4-3e9e-4cb8-855e-0970afa96235",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4e8ffa-cbff-46cc-8be6-7cc310e2454d",
        "cursor": {
          "ref": "dc42a998-3270-4126-a739-e946fa577e95",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "082bd6ae-37e9-4ffb-ab01-93749c2b1576"
        },
        "item": {
          "id": "0b4e8ffa-cbff-46cc-8be6-7cc310e2454d",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "a8603e5e-c216-44d5-932a-9f8170785a74",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 30,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5374661d-8dfe-4796-83c5-5bfbb7efdf14",
        "cursor": {
          "ref": "f8ed8142-6af0-4b24-b77f-6afe4be1eecd",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5ed84e4b-6eb4-4de9-b9a9-3c8199ed5216"
        },
        "item": {
          "id": "5374661d-8dfe-4796-83c5-5bfbb7efdf14",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2270204c-d527-462b-bcee-a4f497b7a3bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "5374661d-8dfe-4796-83c5-5bfbb7efdf14",
        "cursor": {
          "ref": "f8ed8142-6af0-4b24-b77f-6afe4be1eecd",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5ed84e4b-6eb4-4de9-b9a9-3c8199ed5216"
        },
        "item": {
          "id": "5374661d-8dfe-4796-83c5-5bfbb7efdf14",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2270204c-d527-462b-bcee-a4f497b7a3bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "3e95cf87-d1a1-44e6-8ac4-8d6350573131",
        "cursor": {
          "ref": "91990c86-4b17-4ee3-8e79-b3bc00c60eac",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c3f46429-b749-4de3-a188-73f2a120aae2"
        },
        "item": {
          "id": "3e95cf87-d1a1-44e6-8ac4-8d6350573131",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "239ddf43-a235-470e-92e1-7e2288dadf34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "76924f44-87f3-4983-9007-554c67b0990b",
        "cursor": {
          "ref": "f5580af8-a2d6-4e8c-8fa0-e85fad8f3c03",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8c847175-3fa5-46fa-ab3b-8e1022144994"
        },
        "item": {
          "id": "76924f44-87f3-4983-9007-554c67b0990b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "01fddab0-2df6-4ffc-976e-f610dbdc6e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "76924f44-87f3-4983-9007-554c67b0990b",
        "cursor": {
          "ref": "f5580af8-a2d6-4e8c-8fa0-e85fad8f3c03",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8c847175-3fa5-46fa-ab3b-8e1022144994"
        },
        "item": {
          "id": "76924f44-87f3-4983-9007-554c67b0990b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "01fddab0-2df6-4ffc-976e-f610dbdc6e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "e907e52f-3993-4e24-91bb-dd13b58234f6",
        "cursor": {
          "ref": "bbc78f0a-423a-426d-8749-d8a5eebe741e",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "793ed567-8170-4b65-b719-bcbf122e2643"
        },
        "item": {
          "id": "e907e52f-3993-4e24-91bb-dd13b58234f6",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "f26e6940-054b-4e61-9dde-8f7896515454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}